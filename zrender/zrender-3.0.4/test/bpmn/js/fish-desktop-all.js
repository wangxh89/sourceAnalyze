/**
         * fish-desktop v2.2.0
         *
         * Copyright 2013-2016, ZTESoft, Inc.
         * All rights reserved.
         *
         * This source code is licensed under the LGPLV3-style license found in the
         * LICENSE file in the root directory of this source tree. 
         *
         *//*!
 * jQuery JavaScript Library v1.10.2
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-07-03T13:48Z
 */
(function( window, undefined ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//"use strict";
var
	// The deferred used on DOM ready
	readyList,

	// A central reference to the root jQuery(document)
	rootjQuery,

	// Support: IE<10
	// For `typeof xmlNode.method` instead of `xmlNode.method !== undefined`
	core_strundefined = typeof undefined,

	// Use the correct document accordingly with window argument (sandbox)
	location = window.location,
	document = window.document,
	docElem = document.documentElement,

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// [[Class]] -> type pairs
	class2type = {},

	// List of deleted data cache ids, so we can reuse them
	core_deletedIds = [],

	core_version = "1.10.2",

	// Save a reference to some core methods
	core_concat = core_deletedIds.concat,
	core_push = core_deletedIds.push,
	core_slice = core_deletedIds.slice,
	core_indexOf = core_deletedIds.indexOf,
	core_toString = class2type.toString,
	core_hasOwn = class2type.hasOwnProperty,
	core_trim = core_version.trim,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Used for matching numbers
	core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,

	// Used for splitting on whitespace
	core_rnotwhite = /\S+/g,

	// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	},

	// The ready event handler
	completed = function( event ) {

		// readyState === "complete" is good enough for us to call the dom ready in oldIE
		if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
			detach();
			jQuery.ready();
		}
	},
	// Clean-up method for dom ready events
	detach = function() {
		if ( document.addEventListener ) {
			document.removeEventListener( "DOMContentLoaded", completed, false );
			window.removeEventListener( "load", completed, false );

		} else {
			document.detachEvent( "onreadystatechange", completed );
			window.detachEvent( "onload", completed );
		}
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: core_version,

	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return core_slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	},

	slice: function() {
		return this.pushStack( core_slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: core_push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( core_version + Math.random() ).replace( /\D/g, "" ),

	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.trigger ) {
			jQuery( document ).trigger("ready").off("ready");
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		/* jshint eqeqeq: false */
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return String( obj );
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ core_toString.call(obj) ] || "object" :
			typeof obj;
	},

	isPlainObject: function( obj ) {
		var key;

		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!core_hasOwn.call(obj, "constructor") &&
				!core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Support: IE<9
		// Handle iteration over inherited properties before own properties.
		if ( jQuery.support.ownLast ) {
			for ( key in obj ) {
				return core_hasOwn.call( obj, key );
			}
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		for ( key in obj ) {}

		return key === undefined || core_hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	parseHTML: function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts );
		if ( scripts ) {
			jQuery( scripts ).remove();
		}
		return jQuery.merge( [], parsed.childNodes );
	},

	parseJSON: function( data ) {
		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		if ( data === null ) {
			return data;
		}

		if ( typeof data === "string" ) {

			// Make sure leading/trailing whitespace is removed (IE can't handle it)
			data = jQuery.trim( data );

			if ( data ) {
				// Make sure the incoming data is actual JSON
				// Logic borrowed from http://json.org/json2.js
				if ( rvalidchars.test( data.replace( rvalidescape, "@" )
					.replace( rvalidtokens, "]" )
					.replace( rvalidbraces, "")) ) {

					return ( new Function( "return " + data ) )();
				}
			}
		}

		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Use native String.trim function wherever possible
	trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
		function( text ) {
			return text == null ?
				"" :
				core_trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				core_push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( core_indexOf ) {
				return core_indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var l = second.length,
			i = first.length,
			j = 0;

		if ( typeof l === "number" ) {
			for ( ; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}
		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var retVal,
			ret = [],
			i = 0,
			length = elems.length;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return core_concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = core_slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( core_slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			length = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < length; i++ ) {
					fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: function() {
		return ( new Date() ).getTime();
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations.
	// Note: this method belongs to the css module but it's needed here for the support module.
	// If support gets modularized, this method should be moved back to the css module.
	swap: function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || type !== "function" &&
		( length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj );
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);
/*!
 * Sizzle CSS Selector Engine v1.10.2
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-07-03
 */
(function( window, undefined ) {

var i,
	support,
	cachedruns,
	Expr,
	getText,
	isXML,
	compile,
	outermostContext,
	sortInput,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	hasDuplicate = false,
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}
		return 0;
	},

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rsibling = new RegExp( whitespace + "*[+~]" ),
	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			// BMP codepoint
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( documentIsHTML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && context.parentNode || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key += " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Detect xml
 * @param {Element|Object} elem An element or a document
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var doc = node ? node.ownerDocument || node : preferredDoc,
		parent = doc.defaultView;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsHTML = !isXML( doc );

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent.attachEvent && parent !== parent.top ) {
		parent.attachEvent( "onbeforeunload", function() {
			setDocument();
		});
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if getElementsByClassName can be trusted
	support.getElementsByClassName = assert(function( div ) {
		div.innerHTML = "<div class='a'></div><div class='a i'></div>";

		// Support: Safari<4
		// Catch class over-caching
		div.firstChild.className = "i";
		// Support: Opera<10
		// Catch gEBCN failure to find non-leading classes
		return div.getElementsByClassName("i").length === 2;
	});

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select><option selected=''></option></select>";

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {

			// Support: Opera 10-12/IE8
			// ^= $= *= and empty values
			// Should not select anything
			// Support: Windows 8 Native Apps
			// The type attribute is restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "t", "" );

			if ( div.querySelectorAll("[t^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = rnative.test( docElem.contains ) || docElem.compareDocumentPosition ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b );

		if ( compare ) {
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === doc || contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === doc || contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		}

		// Not directly comparable, sort on existence of method
		return a.compareDocumentPosition ? -1 : 1;
	} :
	function( a, b ) {
		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Parentless nodes are either documents or disconnected
		} else if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [elem] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val === undefined ?
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null :
		val;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (see #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] && match[4] !== undefined ) {
				match[2] = match[4];

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( tokens = [] );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var data, cache, outerCache,
				dirkey = dirruns + " " + doneName;

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {
							if ( (data = cache[1]) === true || data === cachedruns ) {
								return data === true;
							}
						} else {
							cache = outerCache[ dir ] = [ dirkey ];
							cache[1] = matcher( elem, context, xml ) || cachedruns;
							if ( cache[1] === true ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	// A counter to specify which element is currently being matched
	var matcherCachedRuns = 0,
		bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);

			if ( outermost ) {
				outermostContext = context !== document && context;
				cachedruns = matcherCachedRuns;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++matcherCachedRuns;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
				}
				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && context.parentNode || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector )
	);
	return results;
}

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome<14
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return (val = elem.getAttributeNode( name )) && val.specified ?
				val.value :
				elem[ name ] === true ? name.toLowerCase() : null;
		}
	});
}

jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})( window );
// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( core_rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};
jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var action = tuple[ 0 ],
								fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ action + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = core_slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
					if( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});
jQuery.support = (function( support ) {

	var all, a, input, select, fragment, opt, eventName, isSupported, i,
		div = document.createElement("div");

	// Setup
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// Finish early in limited (non-browser) environments
	all = div.getElementsByTagName("*") || [];
	a = div.getElementsByTagName("a")[ 0 ];
	if ( !a || !a.style || !all.length ) {
		return support;
	}

	// First batch of tests
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px;float:left;opacity:.5";

	// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
	support.getSetAttribute = div.className !== "t";

	// IE strips leading whitespace when .innerHTML is used
	support.leadingWhitespace = div.firstChild.nodeType === 3;

	// Make sure that tbody elements aren't automatically inserted
	// IE will insert them into empty tables
	support.tbody = !div.getElementsByTagName("tbody").length;

	// Make sure that link elements get serialized correctly by innerHTML
	// This requires a wrapper element in IE
	support.htmlSerialize = !!div.getElementsByTagName("link").length;

	// Get the style information from getAttribute
	// (IE uses .cssText instead)
	support.style = /top/.test( a.getAttribute("style") );

	// Make sure that URLs aren't manipulated
	// (IE normalizes it by default)
	support.hrefNormalized = a.getAttribute("href") === "/a";

	// Make sure that element opacity exists
	// (IE uses filter instead)
	// Use a regex to work around a WebKit issue. See #5145
	support.opacity = /^0.5/.test( a.style.opacity );

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support.cssFloat = !!a.style.cssFloat;

	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
	support.checkOn = !!input.value;

	// Make sure that a selected-by-default option has a working selected property.
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
	support.optSelected = opt.selected;

	// Tests for enctype support on a form (#6743)
	support.enctype = !!document.createElement("form").enctype;

	// Makes sure cloning an html5 element does not cause problems
	// Where outerHTML is undefined, this still works
	support.html5Clone = document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>";

	// Will be defined later
	support.inlineBlockNeedsLayout = false;
	support.shrinkWrapBlocks = false;
	support.pixelPosition = false;
	support.deleteExpando = true;
	support.noCloneEvent = true;
	support.reliableMarginRight = true;
	support.boxSizingReliable = true;

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<9
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	// Check if we can trust getAttribute("value")
	input = document.createElement("input");
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "checked", "t" );
	input.setAttribute( "name", "t" );

	fragment = document.createDocumentFragment();
	fragment.appendChild( input );

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	if ( div.attachEvent ) {
		div.attachEvent( "onclick", function() {
			support.noCloneEvent = false;
		});

		div.cloneNode( true ).click();
	}

	// Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)
	// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
	for ( i in { submit: true, change: true, focusin: true }) {
		div.setAttribute( eventName = "on" + i, "t" );

		support[ i + "Bubbles" ] = eventName in window || div.attributes[ eventName ].expando === false;
	}

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Support: IE<9
	// Iteration over object's inherited properties before its own.
	for ( i in jQuery( support ) ) {
		break;
	}
	support.ownLast = i !== "0";

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, marginDiv, tds,
			divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		container = document.createElement("div");
		container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";

		body.appendChild( container ).appendChild( div );

		// Support: IE8
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName("td");
		tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Support: IE8
		// Check if empty table cells still have offsetWidth/Height
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

		// Check box-sizing and margin behavior.
		div.innerHTML = "";
		div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";

		// Workaround failing boxSizing test due to offsetWidth returning wrong value
		// with some non-1 values of body zoom, ticket #13543
		jQuery.swap( body, body.style.zoom != null ? { zoom: 1 } : {}, function() {
			support.boxSizing = div.offsetWidth === 4;
		});

		// Use window.getComputedStyle because jsdom on node.js will break without it.
		if ( window.getComputedStyle ) {
			support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. (#3333)
			// Fails in WebKit before Feb 2011 nightlies
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			marginDiv = div.appendChild( document.createElement("div") );
			marginDiv.style.cssText = div.style.cssText = divReset;
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";

			support.reliableMarginRight =
				!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
		}

		if ( typeof div.style.zoom !== core_strundefined ) {
			// Support: IE<8
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			div.innerHTML = "";
			div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

			// Support: IE6
			// Check if elements with layout shrink-wrap their children
			div.style.display = "block";
			div.innerHTML = "<div></div>";
			div.firstChild.style.width = "5px";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );

			if ( support.inlineBlockNeedsLayout ) {
				// Prevent IE 6 from affecting layout for positioned elements #11048
				// Prevent IE from shrinking the body in IE 7 mode #12869
				// Support: IE<8
				body.style.zoom = 1;
			}
		}

		body.removeChild( container );

		// Null elements to avoid leaks in IE
		container = div = tds = marginDiv = null;
	});

	// Null elements to avoid leaks in IE
	all = select = fragment = opt = a = input = null;

	return support;
})({});

var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
	rmultiDash = /([A-Z])/g;

function internalData( elem, name, data, pvt /* Internal Use Only */ ){
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var ret, thisCache,
		internalKey = jQuery.expando,

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string" ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			id = elem[ internalKey ] = core_deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		// Avoid exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( typeof name === "string" ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var thisCache, i,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split(" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			i = name.length;
			while ( i-- ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	/* jshint eqeqeq: false */
	} else if ( jQuery.support.deleteExpando || cache != cache.window ) {
		/* jshint eqeqeq: true */
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery.extend({
	cache: {},

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"applet": true,
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		// Do not set data on non-element because it will not be cleared (#8335).
		if ( elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9 ) {
			return false;
		}

		var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];

		// nodes accept data unless otherwise specified; rejection can be conditional
		return !noData || noData !== true && elem.getAttribute("classid") === noData;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var attrs, name,
			data = null,
			i = 0,
			elem = this[0];

		// Special expections of .data basically thwart jQuery.access,
		// so implement the relevant behavior ourselves

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					attrs = elem.attributes;
					for ( ; i < attrs.length; i++ ) {
						name = attrs[i].name;

						if ( name.indexOf("data-") === 0 ) {
							name = jQuery.camelCase( name.slice(5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		return arguments.length > 1 ?

			// Sets one value
			this.each(function() {
				jQuery.data( this, key, value );
			}) :

			// Gets one value
			// Try to fetch any internally stored data first
			elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : null;
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}
jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var nodeHook, boolHook,
	rclass = /[\t\r\n\f]/g,
	rreturn = /\r/g,
	rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute,
	getSetInput = jQuery.support.input;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}
					elem.className = jQuery.trim( cur );

				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}
					elem.className = value ? jQuery.trim( cur ) : "";
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( core_rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === core_strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var ret, hooks, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// Use proper attribute retrieval(#6932, #12072)
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( (option.selected = jQuery.inArray( jQuery(option).val(), values ) >= 0) ) {
						optionSet = true;
					}
				}

				// force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === core_strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( core_rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
						elem[ propName ] = false;
					// Support: IE<9
					// Also clear defaultChecked/defaultSelected (if appropriate)
					} else {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						-1;
			}
		}
	}
});

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = jQuery.expr.attrHandle[ name ] || jQuery.find.attr;

	jQuery.expr.attrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault.test( name ) ?
		function( elem, name, isXML ) {
			var fn = jQuery.expr.attrHandle[ name ],
				ret = isXML ?
					undefined :
					/* jshint eqeqeq: false */
					(jQuery.expr.attrHandle[ name ] = undefined) !=
						getter( elem, name, isXML ) ?

						name.toLowerCase() :
						null;
			jQuery.expr.attrHandle[ name ] = fn;
			return ret;
		} :
		function( elem, name, isXML ) {
			return isXML ?
				undefined :
				elem[ jQuery.camelCase( "default-" + name ) ] ?
					name.toLowerCase() :
					null;
		};
});

// fix oldIE attroperties
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = {
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					(ret = elem.ownerDocument.createAttribute( name ))
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			return name === "value" || value === elem.getAttribute( name ) ?
				value :
				undefined;
		}
	};
	jQuery.expr.attrHandle.id = jQuery.expr.attrHandle.name = jQuery.expr.attrHandle.coords =
		// Some attributes are constructed with empty-string values when not defined
		function( elem, name, isXML ) {
			var ret;
			return isXML ?
				undefined :
				(ret = elem.getAttributeNode( name )) && ret.value !== "" ?
					ret.value :
					null;
		};
	jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return ret && ret.specified ?
				ret.value :
				undefined;
		},
		set: nodeHook.set
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		};
	});
}


// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !jQuery.support.hrefNormalized ) {
	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each([ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !jQuery.support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			// Support: Webkit
			// "" is returned instead of "on" if a value isn't specified
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});
var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = core_hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = core_hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = core_slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			/* jshint eqeqeq: false */
			for ( ; cur != this; cur = cur.parentNode || this ) {
				/* jshint eqeqeq: true */

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Even when returnValue equals to undefined Firefox will still show alert
				if ( event.result !== undefined ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === core_strundefined ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});
var isSimple = /^.[^:#\[\.,]*$/,
	rparentsprev = /^(?:parents|prev(?:Until|All))/,
	rneedsContext = jQuery.expr.match.needsContext,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			ret = [],
			self = this,
			len = self.length;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},

	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},

	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			ret = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					cur = ret.push( cur );
					break;
				}
			}
		}

		return this.pushStack( ret.length > 1 ? jQuery.unique( ret ) : ret );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( jQuery.unique(all) );
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				ret = jQuery.unique( ret );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				ret = ret.reverse();
			}
		}

		return this.pushStack( ret );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			}));
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) !== not;
	});
}
function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: jQuery.support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[0] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var
			// Snapshot the DOM in case .domManip sweeps something relevant into its fragment
			args = jQuery.map( this, function( elem ) {
				return [ elem.nextSibling, elem.parentNode ];
			}),
			i = 0;

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			var next = args[ i++ ],
				parent = args[ i++ ];

			if ( parent ) {
				// Don't use the snapshot next if it has moved (#13810)
				if ( next && next.parentNode !== parent ) {
					next = this.nextSibling;
				}
				jQuery( this ).remove();
				parent.insertBefore( elem, next );
			}
		// Allow new content to include elements from the context set
		}, true );

		// Force removal if there was no new content (e.g., from empty arguments)
		return i ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback, allowIntersection ) {

		// Flatten any nested arrays
		args = core_concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction || !( l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[0] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback, allowIntersection );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, !allowIntersection && this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[i], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Hope ajax is available...
								jQuery._evalUrl( node.src );
							} else {
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

// Support: IE<8
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType === 1 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (jQuery.find.attr( elem, "type" ) !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[1];
	} else {
		elem.removeAttribute("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !jQuery.support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( jQuery.support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && manipulation_rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone(true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			core_push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( manipulation_rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !jQuery.support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = jQuery.support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem.removeAttribute !== core_strundefined ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						core_deletedIds.push( id );
					}
				}
			}
		}
	},

	_evalUrl: function( url ) {
		return jQuery.ajax({
			url: url,
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		});
	}
});
jQuery.fn.extend({
	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});
var iframe, getStyles, curCSS,
	ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,
	rposition = /^(top|right|bottom|left)$/,
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rmargin = /^margin/,
	rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
	rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + core_pnum + ")", "i" ),
	elemdisplay = { BODY: "block" },

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssExpand = [ "Top", "Right", "Bottom", "Left" ],
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function isHidden( elem, el ) {
	// isHidden might be called from jQuery#filter function;
	// in that case, element will be second argument
	elem = el || elem;
	return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
			}
		} else {

			if ( !values[ index ] ) {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
				}
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.fn.extend({
	css: function( name, value ) {
		return jQuery.access( this, function( elem, name, value ) {
			var len, styles,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

// NOTE: we've included the "window" in window.getComputedStyle
// because jsdom on node.js will break without it.
if ( window.getComputedStyle ) {
	getStyles = function( elem ) {
		return window.getComputedStyle( elem, null );
	};

	curCSS = function( elem, name, _computed ) {
		var width, minWidth, maxWidth,
			computed = _computed || getStyles( elem ),

			// getPropertyValue is only needed for .css('filter') in IE9, see #12537
			ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined,
			style = elem.style;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret;
	};
} else if ( document.documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, _computed ) {
		var left, rs, rsLeft,
			computed = _computed || getStyles( elem ),
			ret = computed ? computed[ name ] : undefined,
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

// Try to determine the default display value of an element
function css_defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {
			// Use the already-created iframe if possible
			iframe = ( iframe ||
				jQuery("<iframe frameborder='0' width='0' height='0'/>")
				.css( "cssText", "display:block !important" )
			).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[0].contentWindow || iframe[0].contentDocument ).document;
			doc.write("<!doctype html><html><body>");
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}

// Called ONLY from within css_defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
		display = jQuery.css( elem[0], "display" );
	elem.remove();
	return display;
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
jQuery(function() {
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				if ( computed ) {
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// Work around by temporarily setting element display to inline-block
					return jQuery.swap( elem, { "display": "inline-block" },
						curCSS, [ elem, "marginRight" ] );
				}
			}
		};
	}

	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
		jQuery.each( [ "top", "left" ], function( i, prop ) {
			jQuery.cssHooks[ prop ] = {
				get: function( elem, computed ) {
					if ( computed ) {
						computed = curCSS( elem, prop );
						// if curCSS returns percentage, fallback to offset
						return rnumnonpx.test( computed ) ?
							jQuery( elem ).position()[ prop ] + "px" :
							computed;
					}
				}
			};
		});
	}

});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
			(!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});
var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function(){
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function(){
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !manipulation_rcheckableType.test( type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

//Serialize an array of form elements or a set of
//key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}
jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});
var
	// Document location
	ajaxLocParts,
	ajaxLocation,
	ajax_nonce = jQuery.now(),

	ajax_rquery = /\?/,
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( core_rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = url.slice( off, url.length );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ){
	jQuery.fn[ type ] = function( fn ){
		return this.on( type, fn );
	};
});

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( core_rnotwhite ) || [""];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + ajax_nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ajax_nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}
// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery("head")[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement("script");

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
});
var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( ajax_nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( ajax_rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});
var xhrCallbacks, xhrSupported,
	xhrId = 0,
	// #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject && function() {
		// Abort all pending requests
		var key;
		for ( key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	};

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject("Microsoft.XMLHTTP");
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
xhrSupported = jQuery.ajaxSettings.xhr();
jQuery.support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = jQuery.support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var handle, i,
						xhr = s.xhr();

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( err ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent && s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, responseHeaders, statusText, responses;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occurred
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									responses = {};
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();

									// When requesting binary data, IE6-9 will throw an exception
									// on any attempt to access responseText (#11426)
									if ( typeof xhr.responseText === "string" ) {
										responses.text = xhr.responseText;
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && s.isLocal && !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					if ( !s.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}
var fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur()
				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		}]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// we're done with this property
			return tween;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = jQuery._data( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		if ( jQuery.css( elem, "display" ) === "inline" &&
				jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";

			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !jQuery.support.shrinkWrapBlocks ) {
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}


	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {
				continue;
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = jQuery._data( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth? 1 : 0;
	for( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p*Math.PI ) / 2;
	}
};

jQuery.timers = [];
jQuery.fx = Tween.prototype.init;
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	if ( timer() && jQuery.timers.push( timer ) ) {
		jQuery.fx.start();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};

// Back Compat <1.8 extension point
jQuery.fx.step = {};

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}
jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var docElem, win,
		box = { top: 0, left: 0 },
		elem = this[ 0 ],
		doc = elem && elem.ownerDocument;

	if ( !doc ) {
		return;
	}

	docElem = doc.documentElement;

	// Make sure it's not a disconnected DOM node
	if ( !jQuery.contains( docElem, elem ) ) {
		return box;
	}

	// If we don't have gBCR, just use 0,0 rather than error
	// BlackBerry 5, iOS 3 (original iPhone)
	if ( typeof elem.getBoundingClientRect !== core_strundefined ) {
		box = elem.getBoundingClientRect();
	}
	win = getWindow( doc );
	return {
		top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
		left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
	};
};

jQuery.offset = {

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;
			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position") === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || docElem;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return jQuery.access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});
// Limit scope pollution from any deprecated API
// (function() {

// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;

// })();
if ( typeof module === "object" && module && typeof module.exports === "object" ) {
	// Expose jQuery as module.exports in loaders that implement the Node
	// module pattern (including browserify). Do not create the global, since
	// the user will be storing it themselves locally, and globals are frowned
	// upon in the Node module world.
	module.exports = jQuery;
} else {
	// Otherwise expose jQuery to the global object as usual
	window.jQuery = window.$ = jQuery;

	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.
	if ( typeof define === "function" && define.amd ) {
		define( "jquery", [], function () { return jQuery; } );
	}
}

})( window );

/*!

 handlebars v3.0.3

Copyright (C) 2011-2014 by Yehuda Katz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

@license
*/
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define(factory);
	else if(typeof exports === 'object')
		exports["Handlebars"] = factory();
	else
		root["Handlebars"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireWildcard = __webpack_require__(8)['default'];

	exports.__esModule = true;

	var _runtime = __webpack_require__(1);

	var _runtime2 = _interopRequireWildcard(_runtime);

	// Compiler imports

	var _AST = __webpack_require__(2);

	var _AST2 = _interopRequireWildcard(_AST);

	var _Parser$parse = __webpack_require__(3);

	var _Compiler$compile$precompile = __webpack_require__(4);

	var _JavaScriptCompiler = __webpack_require__(5);

	var _JavaScriptCompiler2 = _interopRequireWildcard(_JavaScriptCompiler);

	var _Visitor = __webpack_require__(6);

	var _Visitor2 = _interopRequireWildcard(_Visitor);

	var _noConflict = __webpack_require__(7);

	var _noConflict2 = _interopRequireWildcard(_noConflict);

	var _create = _runtime2['default'].create;
	function create() {
	  var hb = _create();

	  hb.compile = function (input, options) {
	    return _Compiler$compile$precompile.compile(input, options, hb);
	  };
	  hb.precompile = function (input, options) {
	    return _Compiler$compile$precompile.precompile(input, options, hb);
	  };

	  hb.AST = _AST2['default'];
	  hb.Compiler = _Compiler$compile$precompile.Compiler;
	  hb.JavaScriptCompiler = _JavaScriptCompiler2['default'];
	  hb.Parser = _Parser$parse.parser;
	  hb.parse = _Parser$parse.parse;

	  return hb;
	}

	var inst = create();
	inst.create = create;

	_noConflict2['default'](inst);

	inst.Visitor = _Visitor2['default'];

	inst['default'] = inst;

	exports['default'] = inst;
	module.exports = exports['default'];

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireWildcard = __webpack_require__(8)['default'];

	exports.__esModule = true;

	var _import = __webpack_require__(9);

	var base = _interopRequireWildcard(_import);

	// Each of these augment the Handlebars object. No need to setup here.
	// (This is done to easily share code between commonjs and browse envs)

	var _SafeString = __webpack_require__(10);

	var _SafeString2 = _interopRequireWildcard(_SafeString);

	var _Exception = __webpack_require__(11);

	var _Exception2 = _interopRequireWildcard(_Exception);

	var _import2 = __webpack_require__(12);

	var Utils = _interopRequireWildcard(_import2);

	var _import3 = __webpack_require__(13);

	var runtime = _interopRequireWildcard(_import3);

	var _noConflict = __webpack_require__(7);

	var _noConflict2 = _interopRequireWildcard(_noConflict);

	// For compatibility and usage outside of module systems, make the Handlebars object a namespace
	function create() {
	  var hb = new base.HandlebarsEnvironment();

	  Utils.extend(hb, base);
	  hb.SafeString = _SafeString2['default'];
	  hb.Exception = _Exception2['default'];
	  hb.Utils = Utils;
	  hb.escapeExpression = Utils.escapeExpression;

	  hb.VM = runtime;
	  hb.template = function (spec) {
	    return runtime.template(spec, hb);
	  };

	  return hb;
	}

	var inst = create();
	inst.create = create;

	_noConflict2['default'](inst);

	inst['default'] = inst;

	exports['default'] = inst;
	module.exports = exports['default'];

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	var AST = {
	  Program: function Program(statements, blockParams, strip, locInfo) {
	    this.loc = locInfo;
	    this.type = 'Program';
	    this.body = statements;

	    this.blockParams = blockParams;
	    this.strip = strip;
	  },

	  MustacheStatement: function MustacheStatement(path, params, hash, escaped, strip, locInfo) {
	    this.loc = locInfo;
	    this.type = 'MustacheStatement';

	    this.path = path;
	    this.params = params || [];
	    this.hash = hash;
	    this.escaped = escaped;

	    this.strip = strip;
	  },

	  BlockStatement: function BlockStatement(path, params, hash, program, inverse, openStrip, inverseStrip, closeStrip, locInfo) {
	    this.loc = locInfo;
	    this.type = 'BlockStatement';

	    this.path = path;
	    this.params = params || [];
	    this.hash = hash;
	    this.program = program;
	    this.inverse = inverse;

	    this.openStrip = openStrip;
	    this.inverseStrip = inverseStrip;
	    this.closeStrip = closeStrip;
	  },

	  PartialStatement: function PartialStatement(name, params, hash, strip, locInfo) {
	    this.loc = locInfo;
	    this.type = 'PartialStatement';

	    this.name = name;
	    this.params = params || [];
	    this.hash = hash;

	    this.indent = '';
	    this.strip = strip;
	  },

	  ContentStatement: function ContentStatement(string, locInfo) {
	    this.loc = locInfo;
	    this.type = 'ContentStatement';
	    this.original = this.value = string;
	  },

	  CommentStatement: function CommentStatement(comment, strip, locInfo) {
	    this.loc = locInfo;
	    this.type = 'CommentStatement';
	    this.value = comment;

	    this.strip = strip;
	  },

	  SubExpression: function SubExpression(path, params, hash, locInfo) {
	    this.loc = locInfo;

	    this.type = 'SubExpression';
	    this.path = path;
	    this.params = params || [];
	    this.hash = hash;
	  },

	  PathExpression: function PathExpression(data, depth, parts, original, locInfo) {
	    this.loc = locInfo;
	    this.type = 'PathExpression';

	    this.data = data;
	    this.original = original;
	    this.parts = parts;
	    this.depth = depth;
	  },

	  StringLiteral: function StringLiteral(string, locInfo) {
	    this.loc = locInfo;
	    this.type = 'StringLiteral';
	    this.original = this.value = string;
	  },

	  NumberLiteral: function NumberLiteral(number, locInfo) {
	    this.loc = locInfo;
	    this.type = 'NumberLiteral';
	    this.original = this.value = Number(number);
	  },

	  BooleanLiteral: function BooleanLiteral(bool, locInfo) {
	    this.loc = locInfo;
	    this.type = 'BooleanLiteral';
	    this.original = this.value = bool === 'true';
	  },

	  UndefinedLiteral: function UndefinedLiteral(locInfo) {
	    this.loc = locInfo;
	    this.type = 'UndefinedLiteral';
	    this.original = this.value = undefined;
	  },

	  NullLiteral: function NullLiteral(locInfo) {
	    this.loc = locInfo;
	    this.type = 'NullLiteral';
	    this.original = this.value = null;
	  },

	  Hash: function Hash(pairs, locInfo) {
	    this.loc = locInfo;
	    this.type = 'Hash';
	    this.pairs = pairs;
	  },
	  HashPair: function HashPair(key, value, locInfo) {
	    this.loc = locInfo;
	    this.type = 'HashPair';
	    this.key = key;
	    this.value = value;
	  },

	  // Public API used to evaluate derived attributes regarding AST nodes
	  helpers: {
	    // a mustache is definitely a helper if:
	    // * it is an eligible helper, and
	    // * it has at least one parameter or hash segment
	    helperExpression: function helperExpression(node) {
	      return !!(node.type === 'SubExpression' || node.params.length || node.hash);
	    },

	    scopedId: function scopedId(path) {
	      return /^\.|this\b/.test(path.original);
	    },

	    // an ID is simple if it only has one part, and that part is not
	    // `..` or `this`.
	    simpleId: function simpleId(path) {
	      return path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth;
	    }
	  }
	};

	// Must be exported as an object rather than the root of the module as the jison lexer
	// must modify the object to operate properly.
	exports['default'] = AST;
	module.exports = exports['default'];

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireWildcard = __webpack_require__(8)['default'];

	exports.__esModule = true;
	exports.parse = parse;

	var _parser = __webpack_require__(14);

	var _parser2 = _interopRequireWildcard(_parser);

	var _AST = __webpack_require__(2);

	var _AST2 = _interopRequireWildcard(_AST);

	var _WhitespaceControl = __webpack_require__(15);

	var _WhitespaceControl2 = _interopRequireWildcard(_WhitespaceControl);

	var _import = __webpack_require__(16);

	var Helpers = _interopRequireWildcard(_import);

	var _extend = __webpack_require__(12);

	exports.parser = _parser2['default'];

	var yy = {};
	_extend.extend(yy, Helpers, _AST2['default']);

	function parse(input, options) {
	  // Just return if an already-compiled AST was passed in.
	  if (input.type === 'Program') {
	    return input;
	  }

	  _parser2['default'].yy = yy;

	  // Altering the shared object here, but this is ok as parser is a sync operation
	  yy.locInfo = function (locInfo) {
	    return new yy.SourceLocation(options && options.srcName, locInfo);
	  };

	  var strip = new _WhitespaceControl2['default']();
	  return strip.accept(_parser2['default'].parse(input));
	}

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireWildcard = __webpack_require__(8)['default'];

	exports.__esModule = true;
	exports.Compiler = Compiler;
	exports.precompile = precompile;
	exports.compile = compile;

	var _Exception = __webpack_require__(11);

	var _Exception2 = _interopRequireWildcard(_Exception);

	var _isArray$indexOf = __webpack_require__(12);

	var _AST = __webpack_require__(2);

	var _AST2 = _interopRequireWildcard(_AST);

	var slice = [].slice;

	function Compiler() {}

	// the foundHelper register will disambiguate helper lookup from finding a
	// function in a context. This is necessary for mustache compatibility, which
	// requires that context functions in blocks are evaluated by blockHelperMissing,
	// and then proceed as if the resulting value was provided to blockHelperMissing.

	Compiler.prototype = {
	  compiler: Compiler,

	  equals: function equals(other) {
	    var len = this.opcodes.length;
	    if (other.opcodes.length !== len) {
	      return false;
	    }

	    for (var i = 0; i < len; i++) {
	      var opcode = this.opcodes[i],
	          otherOpcode = other.opcodes[i];
	      if (opcode.opcode !== otherOpcode.opcode || !argEquals(opcode.args, otherOpcode.args)) {
	        return false;
	      }
	    }

	    // We know that length is the same between the two arrays because they are directly tied
	    // to the opcode behavior above.
	    len = this.children.length;
	    for (var i = 0; i < len; i++) {
	      if (!this.children[i].equals(other.children[i])) {
	        return false;
	      }
	    }

	    return true;
	  },

	  guid: 0,

	  compile: function compile(program, options) {
	    this.sourceNode = [];
	    this.opcodes = [];
	    this.children = [];
	    this.options = options;
	    this.stringParams = options.stringParams;
	    this.trackIds = options.trackIds;

	    options.blockParams = options.blockParams || [];

	    // These changes will propagate to the other compiler components
	    var knownHelpers = options.knownHelpers;
	    options.knownHelpers = {
	      helperMissing: true,
	      blockHelperMissing: true,
	      each: true,
	      'if': true,
	      unless: true,
	      'with': true,
	      log: true,
	      lookup: true
	    };
	    if (knownHelpers) {
	      for (var _name in knownHelpers) {
	        if (_name in knownHelpers) {
	          options.knownHelpers[_name] = knownHelpers[_name];
	        }
	      }
	    }

	    return this.accept(program);
	  },

	  compileProgram: function compileProgram(program) {
	    var childCompiler = new this.compiler(),
	        // eslint-disable-line new-cap
	    result = childCompiler.compile(program, this.options),
	        guid = this.guid++;

	    this.usePartial = this.usePartial || result.usePartial;

	    this.children[guid] = result;
	    this.useDepths = this.useDepths || result.useDepths;

	    return guid;
	  },

	  accept: function accept(node) {
	    this.sourceNode.unshift(node);
	    var ret = this[node.type](node);
	    this.sourceNode.shift();
	    return ret;
	  },

	  Program: function Program(program) {
	    this.options.blockParams.unshift(program.blockParams);

	    var body = program.body,
	        bodyLength = body.length;
	    for (var i = 0; i < bodyLength; i++) {
	      this.accept(body[i]);
	    }

	    this.options.blockParams.shift();

	    this.isSimple = bodyLength === 1;
	    this.blockParams = program.blockParams ? program.blockParams.length : 0;

	    return this;
	  },

	  BlockStatement: function BlockStatement(block) {
	    transformLiteralToPath(block);

	    var program = block.program,
	        inverse = block.inverse;

	    program = program && this.compileProgram(program);
	    inverse = inverse && this.compileProgram(inverse);

	    var type = this.classifySexpr(block);

	    if (type === 'helper') {
	      this.helperSexpr(block, program, inverse);
	    } else if (type === 'simple') {
	      this.simpleSexpr(block);

	      // now that the simple mustache is resolved, we need to
	      // evaluate it by executing `blockHelperMissing`
	      this.opcode('pushProgram', program);
	      this.opcode('pushProgram', inverse);
	      this.opcode('emptyHash');
	      this.opcode('blockValue', block.path.original);
	    } else {
	      this.ambiguousSexpr(block, program, inverse);

	      // now that the simple mustache is resolved, we need to
	      // evaluate it by executing `blockHelperMissing`
	      this.opcode('pushProgram', program);
	      this.opcode('pushProgram', inverse);
	      this.opcode('emptyHash');
	      this.opcode('ambiguousBlockValue');
	    }

	    this.opcode('append');
	  },

	  PartialStatement: function PartialStatement(partial) {
	    this.usePartial = true;

	    var params = partial.params;
	    if (params.length > 1) {
	      throw new _Exception2['default']('Unsupported number of partial arguments: ' + params.length, partial);
	    } else if (!params.length) {
	      params.push({ type: 'PathExpression', parts: [], depth: 0 });
	    }

	    var partialName = partial.name.original,
	        isDynamic = partial.name.type === 'SubExpression';
	    if (isDynamic) {
	      this.accept(partial.name);
	    }

	    this.setupFullMustacheParams(partial, undefined, undefined, true);

	    var indent = partial.indent || '';
	    if (this.options.preventIndent && indent) {
	      this.opcode('appendContent', indent);
	      indent = '';
	    }

	    this.opcode('invokePartial', isDynamic, partialName, indent);
	    this.opcode('append');
	  },

	  MustacheStatement: function MustacheStatement(mustache) {
	    this.SubExpression(mustache); // eslint-disable-line new-cap

	    if (mustache.escaped && !this.options.noEscape) {
	      this.opcode('appendEscaped');
	    } else {
	      this.opcode('append');
	    }
	  },

	  ContentStatement: function ContentStatement(content) {
	    if (content.value) {
	      this.opcode('appendContent', content.value);
	    }
	  },

	  CommentStatement: function CommentStatement() {},

	  SubExpression: function SubExpression(sexpr) {
	    transformLiteralToPath(sexpr);
	    var type = this.classifySexpr(sexpr);

	    if (type === 'simple') {
	      this.simpleSexpr(sexpr);
	    } else if (type === 'helper') {
	      this.helperSexpr(sexpr);
	    } else {
	      this.ambiguousSexpr(sexpr);
	    }
	  },
	  ambiguousSexpr: function ambiguousSexpr(sexpr, program, inverse) {
	    var path = sexpr.path,
	        name = path.parts[0],
	        isBlock = program != null || inverse != null;

	    this.opcode('getContext', path.depth);

	    this.opcode('pushProgram', program);
	    this.opcode('pushProgram', inverse);

	    this.accept(path);

	    this.opcode('invokeAmbiguous', name, isBlock);
	  },

	  simpleSexpr: function simpleSexpr(sexpr) {
	    this.accept(sexpr.path);
	    this.opcode('resolvePossibleLambda');
	  },

	  helperSexpr: function helperSexpr(sexpr, program, inverse) {
	    var params = this.setupFullMustacheParams(sexpr, program, inverse),
	        path = sexpr.path,
	        name = path.parts[0];

	    if (this.options.knownHelpers[name]) {
	      this.opcode('invokeKnownHelper', params.length, name);
	    } else if (this.options.knownHelpersOnly) {
	      throw new _Exception2['default']('You specified knownHelpersOnly, but used the unknown helper ' + name, sexpr);
	    } else {
	      path.falsy = true;

	      this.accept(path);
	      this.opcode('invokeHelper', params.length, path.original, _AST2['default'].helpers.simpleId(path));
	    }
	  },

	  PathExpression: function PathExpression(path) {
	    this.addDepth(path.depth);
	    this.opcode('getContext', path.depth);

	    var name = path.parts[0],
	        scoped = _AST2['default'].helpers.scopedId(path),
	        blockParamId = !path.depth && !scoped && this.blockParamIndex(name);

	    if (blockParamId) {
	      this.opcode('lookupBlockParam', blockParamId, path.parts);
	    } else if (!name) {
	      // Context reference, i.e. `{{foo .}}` or `{{foo ..}}`
	      this.opcode('pushContext');
	    } else if (path.data) {
	      this.options.data = true;
	      this.opcode('lookupData', path.depth, path.parts);
	    } else {
	      this.opcode('lookupOnContext', path.parts, path.falsy, scoped);
	    }
	  },

	  StringLiteral: function StringLiteral(string) {
	    this.opcode('pushString', string.value);
	  },

	  NumberLiteral: function NumberLiteral(number) {
	    this.opcode('pushLiteral', number.value);
	  },

	  BooleanLiteral: function BooleanLiteral(bool) {
	    this.opcode('pushLiteral', bool.value);
	  },

	  UndefinedLiteral: function UndefinedLiteral() {
	    this.opcode('pushLiteral', 'undefined');
	  },

	  NullLiteral: function NullLiteral() {
	    this.opcode('pushLiteral', 'null');
	  },

	  Hash: function Hash(hash) {
	    var pairs = hash.pairs,
	        i = 0,
	        l = pairs.length;

	    this.opcode('pushHash');

	    for (; i < l; i++) {
	      this.pushParam(pairs[i].value);
	    }
	    while (i--) {
	      this.opcode('assignToHash', pairs[i].key);
	    }
	    this.opcode('popHash');
	  },

	  // HELPERS
	  opcode: function opcode(name) {
	    this.opcodes.push({ opcode: name, args: slice.call(arguments, 1), loc: this.sourceNode[0].loc });
	  },

	  addDepth: function addDepth(depth) {
	    if (!depth) {
	      return;
	    }

	    this.useDepths = true;
	  },

	  classifySexpr: function classifySexpr(sexpr) {
	    var isSimple = _AST2['default'].helpers.simpleId(sexpr.path);

	    var isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);

	    // a mustache is an eligible helper if:
	    // * its id is simple (a single part, not `this` or `..`)
	    var isHelper = !isBlockParam && _AST2['default'].helpers.helperExpression(sexpr);

	    // if a mustache is an eligible helper but not a definite
	    // helper, it is ambiguous, and will be resolved in a later
	    // pass or at runtime.
	    var isEligible = !isBlockParam && (isHelper || isSimple);

	    // if ambiguous, we can possibly resolve the ambiguity now
	    // An eligible helper is one that does not have a complex path, i.e. `this.foo`, `../foo` etc.
	    if (isEligible && !isHelper) {
	      var _name2 = sexpr.path.parts[0],
	          options = this.options;

	      if (options.knownHelpers[_name2]) {
	        isHelper = true;
	      } else if (options.knownHelpersOnly) {
	        isEligible = false;
	      }
	    }

	    if (isHelper) {
	      return 'helper';
	    } else if (isEligible) {
	      return 'ambiguous';
	    } else {
	      return 'simple';
	    }
	  },

	  pushParams: function pushParams(params) {
	    for (var i = 0, l = params.length; i < l; i++) {
	      this.pushParam(params[i]);
	    }
	  },

	  pushParam: function pushParam(val) {
	    var value = val.value != null ? val.value : val.original || '';

	    if (this.stringParams) {
	      if (value.replace) {
	        value = value.replace(/^(\.?\.\/)*/g, '').replace(/\//g, '.');
	      }

	      if (val.depth) {
	        this.addDepth(val.depth);
	      }
	      this.opcode('getContext', val.depth || 0);
	      this.opcode('pushStringParam', value, val.type);

	      if (val.type === 'SubExpression') {
	        // SubExpressions get evaluated and passed in
	        // in string params mode.
	        this.accept(val);
	      }
	    } else {
	      if (this.trackIds) {
	        var blockParamIndex = undefined;
	        if (val.parts && !_AST2['default'].helpers.scopedId(val) && !val.depth) {
	          blockParamIndex = this.blockParamIndex(val.parts[0]);
	        }
	        if (blockParamIndex) {
	          var blockParamChild = val.parts.slice(1).join('.');
	          this.opcode('pushId', 'BlockParam', blockParamIndex, blockParamChild);
	        } else {
	          value = val.original || value;
	          if (value.replace) {
	            value = value.replace(/^\.\//g, '').replace(/^\.$/g, '');
	          }

	          this.opcode('pushId', val.type, value);
	        }
	      }
	      this.accept(val);
	    }
	  },

	  setupFullMustacheParams: function setupFullMustacheParams(sexpr, program, inverse, omitEmpty) {
	    var params = sexpr.params;
	    this.pushParams(params);

	    this.opcode('pushProgram', program);
	    this.opcode('pushProgram', inverse);

	    if (sexpr.hash) {
	      this.accept(sexpr.hash);
	    } else {
	      this.opcode('emptyHash', omitEmpty);
	    }

	    return params;
	  },

	  blockParamIndex: function blockParamIndex(name) {
	    for (var depth = 0, len = this.options.blockParams.length; depth < len; depth++) {
	      var blockParams = this.options.blockParams[depth],
	          param = blockParams && _isArray$indexOf.indexOf(blockParams, name);
	      if (blockParams && param >= 0) {
	        return [depth, param];
	      }
	    }
	  }
	};

	function precompile(input, options, env) {
	  if (input == null || typeof input !== 'string' && input.type !== 'Program') {
	    throw new _Exception2['default']('You must pass a string or Handlebars AST to Handlebars.precompile. You passed ' + input);
	  }

	  options = options || {};
	  if (!('data' in options)) {
	    options.data = true;
	  }
	  if (options.compat) {
	    options.useDepths = true;
	  }

	  var ast = env.parse(input, options),
	      environment = new env.Compiler().compile(ast, options);
	  return new env.JavaScriptCompiler().compile(environment, options);
	}

	function compile(input, _x, env) {
	  var options = arguments[1] === undefined ? {} : arguments[1];

	  if (input == null || typeof input !== 'string' && input.type !== 'Program') {
	    throw new _Exception2['default']('You must pass a string or Handlebars AST to Handlebars.compile. You passed ' + input);
	  }

	  if (!('data' in options)) {
	    options.data = true;
	  }
	  if (options.compat) {
	    options.useDepths = true;
	  }

	  var compiled = undefined;

	  function compileInput() {
	    var ast = env.parse(input, options),
	        environment = new env.Compiler().compile(ast, options),
	        templateSpec = new env.JavaScriptCompiler().compile(environment, options, undefined, true);
	    return env.template(templateSpec);
	  }

	  // Template is only compiled on first use and cached after that point.
	  function ret(context, execOptions) {
	    if (!compiled) {
	      compiled = compileInput();
	    }
	    return compiled.call(this, context, execOptions);
	  }
	  ret._setup = function (setupOptions) {
	    if (!compiled) {
	      compiled = compileInput();
	    }
	    return compiled._setup(setupOptions);
	  };
	  ret._child = function (i, data, blockParams, depths) {
	    if (!compiled) {
	      compiled = compileInput();
	    }
	    return compiled._child(i, data, blockParams, depths);
	  };
	  return ret;
	}

	function argEquals(a, b) {
	  if (a === b) {
	    return true;
	  }

	  if (_isArray$indexOf.isArray(a) && _isArray$indexOf.isArray(b) && a.length === b.length) {
	    for (var i = 0; i < a.length; i++) {
	      if (!argEquals(a[i], b[i])) {
	        return false;
	      }
	    }
	    return true;
	  }
	}

	function transformLiteralToPath(sexpr) {
	  if (!sexpr.path.parts) {
	    var literal = sexpr.path;
	    // Casting to string here to make false and 0 literal values play nicely with the rest
	    // of the system.
	    sexpr.path = new _AST2['default'].PathExpression(false, 0, [literal.original + ''], literal.original + '', literal.loc);
	  }
	}

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireWildcard = __webpack_require__(8)['default'];

	exports.__esModule = true;

	var _COMPILER_REVISION$REVISION_CHANGES = __webpack_require__(9);

	var _Exception = __webpack_require__(11);

	var _Exception2 = _interopRequireWildcard(_Exception);

	var _isArray = __webpack_require__(12);

	var _CodeGen = __webpack_require__(17);

	var _CodeGen2 = _interopRequireWildcard(_CodeGen);

	function Literal(value) {
	  this.value = value;
	}

	function JavaScriptCompiler() {}

	JavaScriptCompiler.prototype = {
	  // PUBLIC API: You can override these methods in a subclass to provide
	  // alternative compiled forms for name lookup and buffering semantics
	  nameLookup: function nameLookup(parent, name /* , type*/) {
	    if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
	      return [parent, '.', name];
	    } else {
	      return [parent, '[\'', name, '\']'];
	    }
	  },
	  depthedLookup: function depthedLookup(name) {
	    return [this.aliasable('this.lookup'), '(depths, "', name, '")'];
	  },

	  compilerInfo: function compilerInfo() {
	    var revision = _COMPILER_REVISION$REVISION_CHANGES.COMPILER_REVISION,
	        versions = _COMPILER_REVISION$REVISION_CHANGES.REVISION_CHANGES[revision];
	    return [revision, versions];
	  },

	  appendToBuffer: function appendToBuffer(source, location, explicit) {
	    // Force a source as this simplifies the merge logic.
	    if (!_isArray.isArray(source)) {
	      source = [source];
	    }
	    source = this.source.wrap(source, location);

	    if (this.environment.isSimple) {
	      return ['return ', source, ';'];
	    } else if (explicit) {
	      // This is a case where the buffer operation occurs as a child of another
	      // construct, generally braces. We have to explicitly output these buffer
	      // operations to ensure that the emitted code goes in the correct location.
	      return ['buffer += ', source, ';'];
	    } else {
	      source.appendToBuffer = true;
	      return source;
	    }
	  },

	  initializeBuffer: function initializeBuffer() {
	    return this.quotedString('');
	  },
	  // END PUBLIC API

	  compile: function compile(environment, options, context, asObject) {
	    this.environment = environment;
	    this.options = options;
	    this.stringParams = this.options.stringParams;
	    this.trackIds = this.options.trackIds;
	    this.precompile = !asObject;

	    this.name = this.environment.name;
	    this.isChild = !!context;
	    this.context = context || {
	      programs: [],
	      environments: []
	    };

	    this.preamble();

	    this.stackSlot = 0;
	    this.stackVars = [];
	    this.aliases = {};
	    this.registers = { list: [] };
	    this.hashes = [];
	    this.compileStack = [];
	    this.inlineStack = [];
	    this.blockParams = [];

	    this.compileChildren(environment, options);

	    this.useDepths = this.useDepths || environment.useDepths || this.options.compat;
	    this.useBlockParams = this.useBlockParams || environment.useBlockParams;

	    var opcodes = environment.opcodes,
	        opcode = undefined,
	        firstLoc = undefined,
	        i = undefined,
	        l = undefined;

	    for (i = 0, l = opcodes.length; i < l; i++) {
	      opcode = opcodes[i];

	      this.source.currentLocation = opcode.loc;
	      firstLoc = firstLoc || opcode.loc;
	      this[opcode.opcode].apply(this, opcode.args);
	    }

	    // Flush any trailing content that might be pending.
	    this.source.currentLocation = firstLoc;
	    this.pushSource('');

	    /* istanbul ignore next */
	    if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {
	      throw new _Exception2['default']('Compile completed with content left on stack');
	    }

	    var fn = this.createFunctionContext(asObject);
	    if (!this.isChild) {
	      var ret = {
	        compiler: this.compilerInfo(),
	        main: fn
	      };
	      var programs = this.context.programs;
	      for (i = 0, l = programs.length; i < l; i++) {
	        if (programs[i]) {
	          ret[i] = programs[i];
	        }
	      }

	      if (this.environment.usePartial) {
	        ret.usePartial = true;
	      }
	      if (this.options.data) {
	        ret.useData = true;
	      }
	      if (this.useDepths) {
	        ret.useDepths = true;
	      }
	      if (this.useBlockParams) {
	        ret.useBlockParams = true;
	      }
	      if (this.options.compat) {
	        ret.compat = true;
	      }

	      if (!asObject) {
	        ret.compiler = JSON.stringify(ret.compiler);

	        this.source.currentLocation = { start: { line: 1, column: 0 } };
	        ret = this.objectLiteral(ret);

	        if (options.srcName) {
	          ret = ret.toStringWithSourceMap({ file: options.destName });
	          ret.map = ret.map && ret.map.toString();
	        } else {
	          ret = ret.toString();
	        }
	      } else {
	        ret.compilerOptions = this.options;
	      }

	      return ret;
	    } else {
	      return fn;
	    }
	  },

	  preamble: function preamble() {
	    // track the last context pushed into place to allow skipping the
	    // getContext opcode when it would be a noop
	    this.lastContext = 0;
	    this.source = new _CodeGen2['default'](this.options.srcName);
	  },

	  createFunctionContext: function createFunctionContext(asObject) {
	    var varDeclarations = '';

	    var locals = this.stackVars.concat(this.registers.list);
	    if (locals.length > 0) {
	      varDeclarations += ', ' + locals.join(', ');
	    }

	    // Generate minimizer alias mappings
	    //
	    // When using true SourceNodes, this will update all references to the given alias
	    // as the source nodes are reused in situ. For the non-source node compilation mode,
	    // aliases will not be used, but this case is already being run on the client and
	    // we aren't concern about minimizing the template size.
	    var aliasCount = 0;
	    for (var alias in this.aliases) {
	      // eslint-disable-line guard-for-in
	      var node = this.aliases[alias];

	      if (this.aliases.hasOwnProperty(alias) && node.children && node.referenceCount > 1) {
	        varDeclarations += ', alias' + ++aliasCount + '=' + alias;
	        node.children[0] = 'alias' + aliasCount;
	      }
	    }

	    var params = ['depth0', 'helpers', 'partials', 'data'];

	    if (this.useBlockParams || this.useDepths) {
	      params.push('blockParams');
	    }
	    if (this.useDepths) {
	      params.push('depths');
	    }

	    // Perform a second pass over the output to merge content when possible
	    var source = this.mergeSource(varDeclarations);

	    if (asObject) {
	      params.push(source);

	      return Function.apply(this, params);
	    } else {
	      return this.source.wrap(['function(', params.join(','), ') {\n  ', source, '}']);
	    }
	  },
	  mergeSource: function mergeSource(varDeclarations) {
	    var isSimple = this.environment.isSimple,
	        appendOnly = !this.forceBuffer,
	        appendFirst = undefined,
	        sourceSeen = undefined,
	        bufferStart = undefined,
	        bufferEnd = undefined;
	    this.source.each(function (line) {
	      if (line.appendToBuffer) {
	        if (bufferStart) {
	          line.prepend('  + ');
	        } else {
	          bufferStart = line;
	        }
	        bufferEnd = line;
	      } else {
	        if (bufferStart) {
	          if (!sourceSeen) {
	            appendFirst = true;
	          } else {
	            bufferStart.prepend('buffer += ');
	          }
	          bufferEnd.add(';');
	          bufferStart = bufferEnd = undefined;
	        }

	        sourceSeen = true;
	        if (!isSimple) {
	          appendOnly = false;
	        }
	      }
	    });

	    if (appendOnly) {
	      if (bufferStart) {
	        bufferStart.prepend('return ');
	        bufferEnd.add(';');
	      } else if (!sourceSeen) {
	        this.source.push('return "";');
	      }
	    } else {
	      varDeclarations += ', buffer = ' + (appendFirst ? '' : this.initializeBuffer());

	      if (bufferStart) {
	        bufferStart.prepend('return buffer + ');
	        bufferEnd.add(';');
	      } else {
	        this.source.push('return buffer;');
	      }
	    }

	    if (varDeclarations) {
	      this.source.prepend('var ' + varDeclarations.substring(2) + (appendFirst ? '' : ';\n'));
	    }

	    return this.source.merge();
	  },

	  // [blockValue]
	  //
	  // On stack, before: hash, inverse, program, value
	  // On stack, after: return value of blockHelperMissing
	  //
	  // The purpose of this opcode is to take a block of the form
	  // `{{#this.foo}}...{{/this.foo}}`, resolve the value of `foo`, and
	  // replace it on the stack with the result of properly
	  // invoking blockHelperMissing.
	  blockValue: function blockValue(name) {
	    var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
	        params = [this.contextName(0)];
	    this.setupHelperArgs(name, 0, params);

	    var blockName = this.popStack();
	    params.splice(1, 0, blockName);

	    this.push(this.source.functionCall(blockHelperMissing, 'call', params));
	  },

	  // [ambiguousBlockValue]
	  //
	  // On stack, before: hash, inverse, program, value
	  // Compiler value, before: lastHelper=value of last found helper, if any
	  // On stack, after, if no lastHelper: same as [blockValue]
	  // On stack, after, if lastHelper: value
	  ambiguousBlockValue: function ambiguousBlockValue() {
	    // We're being a bit cheeky and reusing the options value from the prior exec
	    var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
	        params = [this.contextName(0)];
	    this.setupHelperArgs('', 0, params, true);

	    this.flushInline();

	    var current = this.topStack();
	    params.splice(1, 0, current);

	    this.pushSource(['if (!', this.lastHelper, ') { ', current, ' = ', this.source.functionCall(blockHelperMissing, 'call', params), '}']);
	  },

	  // [appendContent]
	  //
	  // On stack, before: ...
	  // On stack, after: ...
	  //
	  // Appends the string value of `content` to the current buffer
	  appendContent: function appendContent(content) {
	    if (this.pendingContent) {
	      content = this.pendingContent + content;
	    } else {
	      this.pendingLocation = this.source.currentLocation;
	    }

	    this.pendingContent = content;
	  },

	  // [append]
	  //
	  // On stack, before: value, ...
	  // On stack, after: ...
	  //
	  // Coerces `value` to a String and appends it to the current buffer.
	  //
	  // If `value` is truthy, or 0, it is coerced into a string and appended
	  // Otherwise, the empty string is appended
	  append: function append() {
	    if (this.isInline()) {
	      this.replaceStack(function (current) {
	        return [' != null ? ', current, ' : ""'];
	      });

	      this.pushSource(this.appendToBuffer(this.popStack()));
	    } else {
	      var local = this.popStack();
	      this.pushSource(['if (', local, ' != null) { ', this.appendToBuffer(local, undefined, true), ' }']);
	      if (this.environment.isSimple) {
	        this.pushSource(['else { ', this.appendToBuffer('\'\'', undefined, true), ' }']);
	      }
	    }
	  },

	  // [appendEscaped]
	  //
	  // On stack, before: value, ...
	  // On stack, after: ...
	  //
	  // Escape `value` and append it to the buffer
	  appendEscaped: function appendEscaped() {
	    this.pushSource(this.appendToBuffer([this.aliasable('this.escapeExpression'), '(', this.popStack(), ')']));
	  },

	  // [getContext]
	  //
	  // On stack, before: ...
	  // On stack, after: ...
	  // Compiler value, after: lastContext=depth
	  //
	  // Set the value of the `lastContext` compiler value to the depth
	  getContext: function getContext(depth) {
	    this.lastContext = depth;
	  },

	  // [pushContext]
	  //
	  // On stack, before: ...
	  // On stack, after: currentContext, ...
	  //
	  // Pushes the value of the current context onto the stack.
	  pushContext: function pushContext() {
	    this.pushStackLiteral(this.contextName(this.lastContext));
	  },

	  // [lookupOnContext]
	  //
	  // On stack, before: ...
	  // On stack, after: currentContext[name], ...
	  //
	  // Looks up the value of `name` on the current context and pushes
	  // it onto the stack.
	  lookupOnContext: function lookupOnContext(parts, falsy, scoped) {
	    var i = 0;

	    if (!scoped && this.options.compat && !this.lastContext) {
	      // The depthed query is expected to handle the undefined logic for the root level that
	      // is implemented below, so we evaluate that directly in compat mode
	      this.push(this.depthedLookup(parts[i++]));
	    } else {
	      this.pushContext();
	    }

	    this.resolvePath('context', parts, i, falsy);
	  },

	  // [lookupBlockParam]
	  //
	  // On stack, before: ...
	  // On stack, after: blockParam[name], ...
	  //
	  // Looks up the value of `parts` on the given block param and pushes
	  // it onto the stack.
	  lookupBlockParam: function lookupBlockParam(blockParamId, parts) {
	    this.useBlockParams = true;

	    this.push(['blockParams[', blockParamId[0], '][', blockParamId[1], ']']);
	    this.resolvePath('context', parts, 1);
	  },

	  // [lookupData]
	  //
	  // On stack, before: ...
	  // On stack, after: data, ...
	  //
	  // Push the data lookup operator
	  lookupData: function lookupData(depth, parts) {
	    if (!depth) {
	      this.pushStackLiteral('data');
	    } else {
	      this.pushStackLiteral('this.data(data, ' + depth + ')');
	    }

	    this.resolvePath('data', parts, 0, true);
	  },

	  resolvePath: function resolvePath(type, parts, i, falsy) {
	    var _this = this;

	    if (this.options.strict || this.options.assumeObjects) {
	      this.push(strictLookup(this.options.strict, this, parts, type));
	      return;
	    }

	    var len = parts.length;
	    for (; i < len; i++) {
	      /*eslint-disable no-loop-func */
	      this.replaceStack(function (current) {
	        var lookup = _this.nameLookup(current, parts[i], type);
	        // We want to ensure that zero and false are handled properly if the context (falsy flag)
	        // needs to have the special handling for these values.
	        if (!falsy) {
	          return [' != null ? ', lookup, ' : ', current];
	        } else {
	          // Otherwise we can use generic falsy handling
	          return [' && ', lookup];
	        }
	      });
	      /*eslint-enable no-loop-func */
	    }
	  },

	  // [resolvePossibleLambda]
	  //
	  // On stack, before: value, ...
	  // On stack, after: resolved value, ...
	  //
	  // If the `value` is a lambda, replace it on the stack by
	  // the return value of the lambda
	  resolvePossibleLambda: function resolvePossibleLambda() {
	    this.push([this.aliasable('this.lambda'), '(', this.popStack(), ', ', this.contextName(0), ')']);
	  },

	  // [pushStringParam]
	  //
	  // On stack, before: ...
	  // On stack, after: string, currentContext, ...
	  //
	  // This opcode is designed for use in string mode, which
	  // provides the string value of a parameter along with its
	  // depth rather than resolving it immediately.
	  pushStringParam: function pushStringParam(string, type) {
	    this.pushContext();
	    this.pushString(type);

	    // If it's a subexpression, the string result
	    // will be pushed after this opcode.
	    if (type !== 'SubExpression') {
	      if (typeof string === 'string') {
	        this.pushString(string);
	      } else {
	        this.pushStackLiteral(string);
	      }
	    }
	  },

	  emptyHash: function emptyHash(omitEmpty) {
	    if (this.trackIds) {
	      this.push('{}'); // hashIds
	    }
	    if (this.stringParams) {
	      this.push('{}'); // hashContexts
	      this.push('{}'); // hashTypes
	    }
	    this.pushStackLiteral(omitEmpty ? 'undefined' : '{}');
	  },
	  pushHash: function pushHash() {
	    if (this.hash) {
	      this.hashes.push(this.hash);
	    }
	    this.hash = { values: [], types: [], contexts: [], ids: [] };
	  },
	  popHash: function popHash() {
	    var hash = this.hash;
	    this.hash = this.hashes.pop();

	    if (this.trackIds) {
	      this.push(this.objectLiteral(hash.ids));
	    }
	    if (this.stringParams) {
	      this.push(this.objectLiteral(hash.contexts));
	      this.push(this.objectLiteral(hash.types));
	    }

	    this.push(this.objectLiteral(hash.values));
	  },

	  // [pushString]
	  //
	  // On stack, before: ...
	  // On stack, after: quotedString(string), ...
	  //
	  // Push a quoted version of `string` onto the stack
	  pushString: function pushString(string) {
	    this.pushStackLiteral(this.quotedString(string));
	  },

	  // [pushLiteral]
	  //
	  // On stack, before: ...
	  // On stack, after: value, ...
	  //
	  // Pushes a value onto the stack. This operation prevents
	  // the compiler from creating a temporary variable to hold
	  // it.
	  pushLiteral: function pushLiteral(value) {
	    this.pushStackLiteral(value);
	  },

	  // [pushProgram]
	  //
	  // On stack, before: ...
	  // On stack, after: program(guid), ...
	  //
	  // Push a program expression onto the stack. This takes
	  // a compile-time guid and converts it into a runtime-accessible
	  // expression.
	  pushProgram: function pushProgram(guid) {
	    if (guid != null) {
	      this.pushStackLiteral(this.programExpression(guid));
	    } else {
	      this.pushStackLiteral(null);
	    }
	  },

	  // [invokeHelper]
	  //
	  // On stack, before: hash, inverse, program, params..., ...
	  // On stack, after: result of helper invocation
	  //
	  // Pops off the helper's parameters, invokes the helper,
	  // and pushes the helper's return value onto the stack.
	  //
	  // If the helper is not found, `helperMissing` is called.
	  invokeHelper: function invokeHelper(paramSize, name, isSimple) {
	    var nonHelper = this.popStack(),
	        helper = this.setupHelper(paramSize, name),
	        simple = isSimple ? [helper.name, ' || '] : '';

	    var lookup = ['('].concat(simple, nonHelper);
	    if (!this.options.strict) {
	      lookup.push(' || ', this.aliasable('helpers.helperMissing'));
	    }
	    lookup.push(')');

	    this.push(this.source.functionCall(lookup, 'call', helper.callParams));
	  },

	  // [invokeKnownHelper]
	  //
	  // On stack, before: hash, inverse, program, params..., ...
	  // On stack, after: result of helper invocation
	  //
	  // This operation is used when the helper is known to exist,
	  // so a `helperMissing` fallback is not required.
	  invokeKnownHelper: function invokeKnownHelper(paramSize, name) {
	    var helper = this.setupHelper(paramSize, name);
	    this.push(this.source.functionCall(helper.name, 'call', helper.callParams));
	  },

	  // [invokeAmbiguous]
	  //
	  // On stack, before: hash, inverse, program, params..., ...
	  // On stack, after: result of disambiguation
	  //
	  // This operation is used when an expression like `{{foo}}`
	  // is provided, but we don't know at compile-time whether it
	  // is a helper or a path.
	  //
	  // This operation emits more code than the other options,
	  // and can be avoided by passing the `knownHelpers` and
	  // `knownHelpersOnly` flags at compile-time.
	  invokeAmbiguous: function invokeAmbiguous(name, helperCall) {
	    this.useRegister('helper');

	    var nonHelper = this.popStack();

	    this.emptyHash();
	    var helper = this.setupHelper(0, name, helperCall);

	    var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');

	    var lookup = ['(', '(helper = ', helperName, ' || ', nonHelper, ')'];
	    if (!this.options.strict) {
	      lookup[0] = '(helper = ';
	      lookup.push(' != null ? helper : ', this.aliasable('helpers.helperMissing'));
	    }

	    this.push(['(', lookup, helper.paramsInit ? ['),(', helper.paramsInit] : [], '),', '(typeof helper === ', this.aliasable('"function"'), ' ? ', this.source.functionCall('helper', 'call', helper.callParams), ' : helper))']);
	  },

	  // [invokePartial]
	  //
	  // On stack, before: context, ...
	  // On stack after: result of partial invocation
	  //
	  // This operation pops off a context, invokes a partial with that context,
	  // and pushes the result of the invocation back.
	  invokePartial: function invokePartial(isDynamic, name, indent) {
	    var params = [],
	        options = this.setupParams(name, 1, params, false);

	    if (isDynamic) {
	      name = this.popStack();
	      delete options.name;
	    }

	    if (indent) {
	      options.indent = JSON.stringify(indent);
	    }
	    options.helpers = 'helpers';
	    options.partials = 'partials';

	    if (!isDynamic) {
	      params.unshift(this.nameLookup('partials', name, 'partial'));
	    } else {
	      params.unshift(name);
	    }

	    if (this.options.compat) {
	      options.depths = 'depths';
	    }
	    options = this.objectLiteral(options);
	    params.push(options);

	    this.push(this.source.functionCall('this.invokePartial', '', params));
	  },

	  // [assignToHash]
	  //
	  // On stack, before: value, ..., hash, ...
	  // On stack, after: ..., hash, ...
	  //
	  // Pops a value off the stack and assigns it to the current hash
	  assignToHash: function assignToHash(key) {
	    var value = this.popStack(),
	        context = undefined,
	        type = undefined,
	        id = undefined;

	    if (this.trackIds) {
	      id = this.popStack();
	    }
	    if (this.stringParams) {
	      type = this.popStack();
	      context = this.popStack();
	    }

	    var hash = this.hash;
	    if (context) {
	      hash.contexts[key] = context;
	    }
	    if (type) {
	      hash.types[key] = type;
	    }
	    if (id) {
	      hash.ids[key] = id;
	    }
	    hash.values[key] = value;
	  },

	  pushId: function pushId(type, name, child) {
	    if (type === 'BlockParam') {
	      this.pushStackLiteral('blockParams[' + name[0] + '].path[' + name[1] + ']' + (child ? ' + ' + JSON.stringify('.' + child) : ''));
	    } else if (type === 'PathExpression') {
	      this.pushString(name);
	    } else if (type === 'SubExpression') {
	      this.pushStackLiteral('true');
	    } else {
	      this.pushStackLiteral('null');
	    }
	  },

	  // HELPERS

	  compiler: JavaScriptCompiler,

	  compileChildren: function compileChildren(environment, options) {
	    var children = environment.children,
	        child = undefined,
	        compiler = undefined;

	    for (var i = 0, l = children.length; i < l; i++) {
	      child = children[i];
	      compiler = new this.compiler(); // eslint-disable-line new-cap

	      var index = this.matchExistingProgram(child);

	      if (index == null) {
	        this.context.programs.push(''); // Placeholder to prevent name conflicts for nested children
	        index = this.context.programs.length;
	        child.index = index;
	        child.name = 'program' + index;
	        this.context.programs[index] = compiler.compile(child, options, this.context, !this.precompile);
	        this.context.environments[index] = child;

	        this.useDepths = this.useDepths || compiler.useDepths;
	        this.useBlockParams = this.useBlockParams || compiler.useBlockParams;
	      } else {
	        child.index = index;
	        child.name = 'program' + index;

	        this.useDepths = this.useDepths || child.useDepths;
	        this.useBlockParams = this.useBlockParams || child.useBlockParams;
	      }
	    }
	  },
	  matchExistingProgram: function matchExistingProgram(child) {
	    for (var i = 0, len = this.context.environments.length; i < len; i++) {
	      var environment = this.context.environments[i];
	      if (environment && environment.equals(child)) {
	        return i;
	      }
	    }
	  },

	  programExpression: function programExpression(guid) {
	    var child = this.environment.children[guid],
	        programParams = [child.index, 'data', child.blockParams];

	    if (this.useBlockParams || this.useDepths) {
	      programParams.push('blockParams');
	    }
	    if (this.useDepths) {
	      programParams.push('depths');
	    }

	    return 'this.program(' + programParams.join(', ') + ')';
	  },

	  useRegister: function useRegister(name) {
	    if (!this.registers[name]) {
	      this.registers[name] = true;
	      this.registers.list.push(name);
	    }
	  },

	  push: function push(expr) {
	    if (!(expr instanceof Literal)) {
	      expr = this.source.wrap(expr);
	    }

	    this.inlineStack.push(expr);
	    return expr;
	  },

	  pushStackLiteral: function pushStackLiteral(item) {
	    this.push(new Literal(item));
	  },

	  pushSource: function pushSource(source) {
	    if (this.pendingContent) {
	      this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation));
	      this.pendingContent = undefined;
	    }

	    if (source) {
	      this.source.push(source);
	    }
	  },

	  replaceStack: function replaceStack(callback) {
	    var prefix = ['('],
	        stack = undefined,
	        createdStack = undefined,
	        usedLiteral = undefined;

	    /* istanbul ignore next */
	    if (!this.isInline()) {
	      throw new _Exception2['default']('replaceStack on non-inline');
	    }

	    // We want to merge the inline statement into the replacement statement via ','
	    var top = this.popStack(true);

	    if (top instanceof Literal) {
	      // Literals do not need to be inlined
	      stack = [top.value];
	      prefix = ['(', stack];
	      usedLiteral = true;
	    } else {
	      // Get or create the current stack name for use by the inline
	      createdStack = true;
	      var _name = this.incrStack();

	      prefix = ['((', this.push(_name), ' = ', top, ')'];
	      stack = this.topStack();
	    }

	    var item = callback.call(this, stack);

	    if (!usedLiteral) {
	      this.popStack();
	    }
	    if (createdStack) {
	      this.stackSlot--;
	    }
	    this.push(prefix.concat(item, ')'));
	  },

	  incrStack: function incrStack() {
	    this.stackSlot++;
	    if (this.stackSlot > this.stackVars.length) {
	      this.stackVars.push('stack' + this.stackSlot);
	    }
	    return this.topStackName();
	  },
	  topStackName: function topStackName() {
	    return 'stack' + this.stackSlot;
	  },
	  flushInline: function flushInline() {
	    var inlineStack = this.inlineStack;
	    this.inlineStack = [];
	    for (var i = 0, len = inlineStack.length; i < len; i++) {
	      var entry = inlineStack[i];
	      /* istanbul ignore if */
	      if (entry instanceof Literal) {
	        this.compileStack.push(entry);
	      } else {
	        var stack = this.incrStack();
	        this.pushSource([stack, ' = ', entry, ';']);
	        this.compileStack.push(stack);
	      }
	    }
	  },
	  isInline: function isInline() {
	    return this.inlineStack.length;
	  },

	  popStack: function popStack(wrapped) {
	    var inline = this.isInline(),
	        item = (inline ? this.inlineStack : this.compileStack).pop();

	    if (!wrapped && item instanceof Literal) {
	      return item.value;
	    } else {
	      if (!inline) {
	        /* istanbul ignore next */
	        if (!this.stackSlot) {
	          throw new _Exception2['default']('Invalid stack pop');
	        }
	        this.stackSlot--;
	      }
	      return item;
	    }
	  },

	  topStack: function topStack() {
	    var stack = this.isInline() ? this.inlineStack : this.compileStack,
	        item = stack[stack.length - 1];

	    /* istanbul ignore if */
	    if (item instanceof Literal) {
	      return item.value;
	    } else {
	      return item;
	    }
	  },

	  contextName: function contextName(context) {
	    if (this.useDepths && context) {
	      return 'depths[' + context + ']';
	    } else {
	      return 'depth' + context;
	    }
	  },

	  quotedString: function quotedString(str) {
	    return this.source.quotedString(str);
	  },

	  objectLiteral: function objectLiteral(obj) {
	    return this.source.objectLiteral(obj);
	  },

	  aliasable: function aliasable(name) {
	    var ret = this.aliases[name];
	    if (ret) {
	      ret.referenceCount++;
	      return ret;
	    }

	    ret = this.aliases[name] = this.source.wrap(name);
	    ret.aliasable = true;
	    ret.referenceCount = 1;

	    return ret;
	  },

	  setupHelper: function setupHelper(paramSize, name, blockHelper) {
	    var params = [],
	        paramsInit = this.setupHelperArgs(name, paramSize, params, blockHelper);
	    var foundHelper = this.nameLookup('helpers', name, 'helper');

	    return {
	      params: params,
	      paramsInit: paramsInit,
	      name: foundHelper,
	      callParams: [this.contextName(0)].concat(params)
	    };
	  },

	  setupParams: function setupParams(helper, paramSize, params) {
	    var options = {},
	        contexts = [],
	        types = [],
	        ids = [],
	        param = undefined;

	    options.name = this.quotedString(helper);
	    options.hash = this.popStack();

	    if (this.trackIds) {
	      options.hashIds = this.popStack();
	    }
	    if (this.stringParams) {
	      options.hashTypes = this.popStack();
	      options.hashContexts = this.popStack();
	    }

	    var inverse = this.popStack(),
	        program = this.popStack();

	    // Avoid setting fn and inverse if neither are set. This allows
	    // helpers to do a check for `if (options.fn)`
	    if (program || inverse) {
	      options.fn = program || 'this.noop';
	      options.inverse = inverse || 'this.noop';
	    }

	    // The parameters go on to the stack in order (making sure that they are evaluated in order)
	    // so we need to pop them off the stack in reverse order
	    var i = paramSize;
	    while (i--) {
	      param = this.popStack();
	      params[i] = param;

	      if (this.trackIds) {
	        ids[i] = this.popStack();
	      }
	      if (this.stringParams) {
	        types[i] = this.popStack();
	        contexts[i] = this.popStack();
	      }
	    }

	    if (this.trackIds) {
	      options.ids = this.source.generateArray(ids);
	    }
	    if (this.stringParams) {
	      options.types = this.source.generateArray(types);
	      options.contexts = this.source.generateArray(contexts);
	    }

	    if (this.options.data) {
	      options.data = 'data';
	    }
	    if (this.useBlockParams) {
	      options.blockParams = 'blockParams';
	    }
	    return options;
	  },

	  setupHelperArgs: function setupHelperArgs(helper, paramSize, params, useRegister) {
	    var options = this.setupParams(helper, paramSize, params, true);
	    options = this.objectLiteral(options);
	    if (useRegister) {
	      this.useRegister('options');
	      params.push('options');
	      return ['options=', options];
	    } else {
	      params.push(options);
	      return '';
	    }
	  }
	};

	(function () {
	  var reservedWords = ('break else new var' + ' case finally return void' + ' catch for switch while' + ' continue function this with' + ' default if throw' + ' delete in try' + ' do instanceof typeof' + ' abstract enum int short' + ' boolean export interface static' + ' byte extends long super' + ' char final native synchronized' + ' class float package throws' + ' const goto private transient' + ' debugger implements protected volatile' + ' double import public let yield await' + ' null true false').split(' ');

	  var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};

	  for (var i = 0, l = reservedWords.length; i < l; i++) {
	    compilerWords[reservedWords[i]] = true;
	  }
	})();

	JavaScriptCompiler.isValidJavaScriptVariableName = function (name) {
	  return !JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name);
	};

	function strictLookup(requireTerminal, compiler, parts, type) {
	  var stack = compiler.popStack(),
	      i = 0,
	      len = parts.length;
	  if (requireTerminal) {
	    len--;
	  }

	  for (; i < len; i++) {
	    stack = compiler.nameLookup(stack, parts[i], type);
	  }

	  if (requireTerminal) {
	    return [compiler.aliasable('this.strict'), '(', stack, ', ', compiler.quotedString(parts[i]), ')'];
	  } else {
	    return stack;
	  }
	}

	exports['default'] = JavaScriptCompiler;
	module.exports = exports['default'];

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireWildcard = __webpack_require__(8)['default'];

	exports.__esModule = true;

	var _Exception = __webpack_require__(11);

	var _Exception2 = _interopRequireWildcard(_Exception);

	var _AST = __webpack_require__(2);

	var _AST2 = _interopRequireWildcard(_AST);

	function Visitor() {
	  this.parents = [];
	}

	Visitor.prototype = {
	  constructor: Visitor,
	  mutating: false,

	  // Visits a given value. If mutating, will replace the value if necessary.
	  acceptKey: function acceptKey(node, name) {
	    var value = this.accept(node[name]);
	    if (this.mutating) {
	      // Hacky sanity check:
	      if (value && (!value.type || !_AST2['default'][value.type])) {
	        throw new _Exception2['default']('Unexpected node type "' + value.type + '" found when accepting ' + name + ' on ' + node.type);
	      }
	      node[name] = value;
	    }
	  },

	  // Performs an accept operation with added sanity check to ensure
	  // required keys are not removed.
	  acceptRequired: function acceptRequired(node, name) {
	    this.acceptKey(node, name);

	    if (!node[name]) {
	      throw new _Exception2['default'](node.type + ' requires ' + name);
	    }
	  },

	  // Traverses a given array. If mutating, empty respnses will be removed
	  // for child elements.
	  acceptArray: function acceptArray(array) {
	    for (var i = 0, l = array.length; i < l; i++) {
	      this.acceptKey(array, i);

	      if (!array[i]) {
	        array.splice(i, 1);
	        i--;
	        l--;
	      }
	    }
	  },

	  accept: function accept(object) {
	    if (!object) {
	      return;
	    }

	    if (this.current) {
	      this.parents.unshift(this.current);
	    }
	    this.current = object;

	    var ret = this[object.type](object);

	    this.current = this.parents.shift();

	    if (!this.mutating || ret) {
	      return ret;
	    } else if (ret !== false) {
	      return object;
	    }
	  },

	  Program: function Program(program) {
	    this.acceptArray(program.body);
	  },

	  MustacheStatement: function MustacheStatement(mustache) {
	    this.acceptRequired(mustache, 'path');
	    this.acceptArray(mustache.params);
	    this.acceptKey(mustache, 'hash');
	  },

	  BlockStatement: function BlockStatement(block) {
	    this.acceptRequired(block, 'path');
	    this.acceptArray(block.params);
	    this.acceptKey(block, 'hash');

	    this.acceptKey(block, 'program');
	    this.acceptKey(block, 'inverse');
	  },

	  PartialStatement: function PartialStatement(partial) {
	    this.acceptRequired(partial, 'name');
	    this.acceptArray(partial.params);
	    this.acceptKey(partial, 'hash');
	  },

	  ContentStatement: function ContentStatement() {},
	  CommentStatement: function CommentStatement() {},

	  SubExpression: function SubExpression(sexpr) {
	    this.acceptRequired(sexpr, 'path');
	    this.acceptArray(sexpr.params);
	    this.acceptKey(sexpr, 'hash');
	  },

	  PathExpression: function PathExpression() {},

	  StringLiteral: function StringLiteral() {},
	  NumberLiteral: function NumberLiteral() {},
	  BooleanLiteral: function BooleanLiteral() {},
	  UndefinedLiteral: function UndefinedLiteral() {},
	  NullLiteral: function NullLiteral() {},

	  Hash: function Hash(hash) {
	    this.acceptArray(hash.pairs);
	  },
	  HashPair: function HashPair(pair) {
	    this.acceptRequired(pair, 'value');
	  }
	};

	exports['default'] = Visitor;
	module.exports = exports['default'];
	/* content */ /* comment */ /* path */ /* string */ /* number */ /* bool */ /* literal */ /* literal */

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	exports.__esModule = true;
	/*global window */

	exports['default'] = function (Handlebars) {
	  /* istanbul ignore next */
	  var root = typeof global !== 'undefined' ? global : window,
	      $Handlebars = root.Handlebars;
	  /* istanbul ignore next */
	  Handlebars.noConflict = function () {
	    if (root.Handlebars === Handlebars) {
	      root.Handlebars = $Handlebars;
	    }
	  };
	};

	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports["default"] = function (obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	};

	exports.__esModule = true;

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireWildcard = __webpack_require__(8)['default'];

	exports.__esModule = true;
	exports.HandlebarsEnvironment = HandlebarsEnvironment;
	exports.createFrame = createFrame;

	var _import = __webpack_require__(12);

	var Utils = _interopRequireWildcard(_import);

	var _Exception = __webpack_require__(11);

	var _Exception2 = _interopRequireWildcard(_Exception);

	var VERSION = '3.0.1';
	exports.VERSION = VERSION;
	var COMPILER_REVISION = 6;

	exports.COMPILER_REVISION = COMPILER_REVISION;
	var REVISION_CHANGES = {
	  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
	  2: '== 1.0.0-rc.3',
	  3: '== 1.0.0-rc.4',
	  4: '== 1.x.x',
	  5: '== 2.0.0-alpha.x',
	  6: '>= 2.0.0-beta.1'
	};

	exports.REVISION_CHANGES = REVISION_CHANGES;
	var isArray = Utils.isArray,
	    isFunction = Utils.isFunction,
	    toString = Utils.toString,
	    objectType = '[object Object]';

	function HandlebarsEnvironment(helpers, partials) {
	  this.helpers = helpers || {};
	  this.partials = partials || {};

	  registerDefaultHelpers(this);
	}

	HandlebarsEnvironment.prototype = {
	  constructor: HandlebarsEnvironment,

	  logger: logger,
	  log: log,

	  registerHelper: function registerHelper(name, fn) {
	    if (toString.call(name) === objectType) {
	      if (fn) {
	        throw new _Exception2['default']('Arg not supported with multiple helpers');
	      }
	      Utils.extend(this.helpers, name);
	    } else {
	      this.helpers[name] = fn;
	    }
	  },
	  unregisterHelper: function unregisterHelper(name) {
	    delete this.helpers[name];
	  },

	  registerPartial: function registerPartial(name, partial) {
	    if (toString.call(name) === objectType) {
	      Utils.extend(this.partials, name);
	    } else {
	      if (typeof partial === 'undefined') {
	        throw new _Exception2['default']('Attempting to register a partial as undefined');
	      }
	      this.partials[name] = partial;
	    }
	  },
	  unregisterPartial: function unregisterPartial(name) {
	    delete this.partials[name];
	  }
	};

	function registerDefaultHelpers(instance) {
	  instance.registerHelper('helperMissing', function () {
	    if (arguments.length === 1) {
	      // A missing field in a {{foo}} constuct.
	      return undefined;
	    } else {
	      // Someone is actually trying to call something, blow up.
	      throw new _Exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
	    }
	  });

	  instance.registerHelper('blockHelperMissing', function (context, options) {
	    var inverse = options.inverse,
	        fn = options.fn;

	    if (context === true) {
	      return fn(this);
	    } else if (context === false || context == null) {
	      return inverse(this);
	    } else if (isArray(context)) {
	      if (context.length > 0) {
	        if (options.ids) {
	          options.ids = [options.name];
	        }

	        return instance.helpers.each(context, options);
	      } else {
	        return inverse(this);
	      }
	    } else {
	      if (options.data && options.ids) {
	        var data = createFrame(options.data);
	        data.contextPath = Utils.appendContextPath(options.data.contextPath, options.name);
	        options = { data: data };
	      }

	      return fn(context, options);
	    }
	  });

	  instance.registerHelper('each', function (context, options) {
	    if (!options) {
	      throw new _Exception2['default']('Must pass iterator to #each');
	    }

	    var fn = options.fn,
	        inverse = options.inverse,
	        i = 0,
	        ret = '',
	        data = undefined,
	        contextPath = undefined;

	    if (options.data && options.ids) {
	      contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
	    }

	    if (isFunction(context)) {
	      context = context.call(this);
	    }

	    if (options.data) {
	      data = createFrame(options.data);
	    }

	    function execIteration(field, index, last) {
	      if (data) {
	        data.key = field;
	        data.index = index;
	        data.first = index === 0;
	        data.last = !!last;

	        if (contextPath) {
	          data.contextPath = contextPath + field;
	        }
	      }

	      ret = ret + fn(context[field], {
	        data: data,
	        blockParams: Utils.blockParams([context[field], field], [contextPath + field, null])
	      });
	    }

	    if (context && typeof context === 'object') {
	      if (isArray(context)) {
	        for (var j = context.length; i < j; i++) {
	          execIteration(i, i, i === context.length - 1);
	        }
	      } else {
	        var priorKey = undefined;

	        for (var key in context) {
	          if (context.hasOwnProperty(key)) {
	            // We're running the iterations one step out of sync so we can detect
	            // the last iteration without have to scan the object twice and create
	            // an itermediate keys array.
	            if (priorKey) {
	              execIteration(priorKey, i - 1);
	            }
	            priorKey = key;
	            i++;
	          }
	        }
	        if (priorKey) {
	          execIteration(priorKey, i - 1, true);
	        }
	      }
	    }

	    if (i === 0) {
	      ret = inverse(this);
	    }

	    return ret;
	  });

	  instance.registerHelper('if', function (conditional, options) {
	    if (isFunction(conditional)) {
	      conditional = conditional.call(this);
	    }

	    // Default behavior is to render the positive path if the value is truthy and not empty.
	    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
	    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
	    if (!options.hash.includeZero && !conditional || Utils.isEmpty(conditional)) {
	      return options.inverse(this);
	    } else {
	      return options.fn(this);
	    }
	  });

	  instance.registerHelper('unless', function (conditional, options) {
	    return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });
	  });

	  instance.registerHelper('with', function (context, options) {
	    if (isFunction(context)) {
	      context = context.call(this);
	    }

	    var fn = options.fn;

	    if (!Utils.isEmpty(context)) {
	      if (options.data && options.ids) {
	        var data = createFrame(options.data);
	        data.contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]);
	        options = { data: data };
	      }

	      return fn(context, options);
	    } else {
	      return options.inverse(this);
	    }
	  });

	  instance.registerHelper('log', function (message, options) {
	    var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;
	    instance.log(level, message);
	  });

	  instance.registerHelper('lookup', function (obj, field) {
	    return obj && obj[field];
	  });
	}

	var logger = {
	  methodMap: { 0: 'debug', 1: 'info', 2: 'warn', 3: 'error' },

	  // State enum
	  DEBUG: 0,
	  INFO: 1,
	  WARN: 2,
	  ERROR: 3,
	  level: 1,

	  // Can be overridden in the host environment
	  log: function log(level, message) {
	    if (typeof console !== 'undefined' && logger.level <= level) {
	      var method = logger.methodMap[level];
	      (console[method] || console.log).call(console, message); // eslint-disable-line no-console
	    }
	  }
	};

	exports.logger = logger;
	var log = logger.log;

	exports.log = log;

	function createFrame(object) {
	  var frame = Utils.extend({}, object);
	  frame._parent = object;
	  return frame;
	}

	/* [args, ]options */

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	// Build out our basic SafeString type
	function SafeString(string) {
	  this.string = string;
	}

	SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
	  return '' + this.string;
	};

	exports['default'] = SafeString;
	module.exports = exports['default'];

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

	function Exception(message, node) {
	  var loc = node && node.loc,
	      line = undefined,
	      column = undefined;
	  if (loc) {
	    line = loc.start.line;
	    column = loc.start.column;

	    message += ' - ' + line + ':' + column;
	  }

	  var tmp = Error.prototype.constructor.call(this, message);

	  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
	  for (var idx = 0; idx < errorProps.length; idx++) {
	    this[errorProps[idx]] = tmp[errorProps[idx]];
	  }

	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, Exception);
	  }

	  if (loc) {
	    this.lineNumber = line;
	    this.column = column;
	  }
	}

	Exception.prototype = new Error();

	exports['default'] = Exception;
	module.exports = exports['default'];

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.extend = extend;

	// Older IE versions do not directly support indexOf so we must implement our own, sadly.
	exports.indexOf = indexOf;
	exports.escapeExpression = escapeExpression;
	exports.isEmpty = isEmpty;
	exports.blockParams = blockParams;
	exports.appendContextPath = appendContextPath;
	var escape = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;',
	  '\'': '&#x27;',
	  '`': '&#x60;'
	};

	var badChars = /[&<>"'`]/g,
	    possible = /[&<>"'`]/;

	function escapeChar(chr) {
	  return escape[chr];
	}

	function extend(obj /* , ...source */) {
	  for (var i = 1; i < arguments.length; i++) {
	    for (var key in arguments[i]) {
	      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
	        obj[key] = arguments[i][key];
	      }
	    }
	  }

	  return obj;
	}

	var toString = Object.prototype.toString;

	exports.toString = toString;
	// Sourced from lodash
	// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
	/*eslint-disable func-style, no-var */
	var isFunction = function isFunction(value) {
	  return typeof value === 'function';
	};
	// fallback for older versions of Chrome and Safari
	/* istanbul ignore next */
	if (isFunction(/x/)) {
	  exports.isFunction = isFunction = function (value) {
	    return typeof value === 'function' && toString.call(value) === '[object Function]';
	  };
	}
	var isFunction;
	exports.isFunction = isFunction;
	/*eslint-enable func-style, no-var */

	/* istanbul ignore next */
	var isArray = Array.isArray || function (value) {
	  return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
	};exports.isArray = isArray;

	function indexOf(array, value) {
	  for (var i = 0, len = array.length; i < len; i++) {
	    if (array[i] === value) {
	      return i;
	    }
	  }
	  return -1;
	}

	function escapeExpression(string) {
	  if (typeof string !== 'string') {
	    // don't escape SafeStrings, since they're already safe
	    if (string && string.toHTML) {
	      return string.toHTML();
	    } else if (string == null) {
	      return '';
	    } else if (!string) {
	      return string + '';
	    }

	    // Force a string conversion as this will be done by the append regardless and
	    // the regex test will do this transparently behind the scenes, causing issues if
	    // an object's to string has escaped characters in it.
	    string = '' + string;
	  }

	  if (!possible.test(string)) {
	    return string;
	  }
	  return string.replace(badChars, escapeChar);
	}

	function isEmpty(value) {
	  if (!value && value !== 0) {
	    return true;
	  } else if (isArray(value) && value.length === 0) {
	    return true;
	  } else {
	    return false;
	  }
	}

	function blockParams(params, ids) {
	  params.path = ids;
	  return params;
	}

	function appendContextPath(contextPath, id) {
	  return (contextPath ? contextPath + '.' : '') + id;
	}

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireWildcard = __webpack_require__(8)['default'];

	exports.__esModule = true;
	exports.checkRevision = checkRevision;

	// TODO: Remove this line and break up compilePartial

	exports.template = template;
	exports.wrapProgram = wrapProgram;
	exports.resolvePartial = resolvePartial;
	exports.invokePartial = invokePartial;
	exports.noop = noop;

	var _import = __webpack_require__(12);

	var Utils = _interopRequireWildcard(_import);

	var _Exception = __webpack_require__(11);

	var _Exception2 = _interopRequireWildcard(_Exception);

	var _COMPILER_REVISION$REVISION_CHANGES$createFrame = __webpack_require__(9);

	function checkRevision(compilerInfo) {
	  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
	      currentRevision = _COMPILER_REVISION$REVISION_CHANGES$createFrame.COMPILER_REVISION;

	  if (compilerRevision !== currentRevision) {
	    if (compilerRevision < currentRevision) {
	      var runtimeVersions = _COMPILER_REVISION$REVISION_CHANGES$createFrame.REVISION_CHANGES[currentRevision],
	          compilerVersions = _COMPILER_REVISION$REVISION_CHANGES$createFrame.REVISION_CHANGES[compilerRevision];
	      throw new _Exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
	    } else {
	      // Use the embedded version info since the runtime doesn't know about this revision yet
	      throw new _Exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
	    }
	  }
	}

	function template(templateSpec, env) {
	  /* istanbul ignore next */
	  if (!env) {
	    throw new _Exception2['default']('No environment passed to template');
	  }
	  if (!templateSpec || !templateSpec.main) {
	    throw new _Exception2['default']('Unknown template object: ' + typeof templateSpec);
	  }

	  // Note: Using env.VM references rather than local var references throughout this section to allow
	  // for external users to override these as psuedo-supported APIs.
	  env.VM.checkRevision(templateSpec.compiler);

	  function invokePartialWrapper(partial, context, options) {
	    if (options.hash) {
	      context = Utils.extend({}, context, options.hash);
	    }

	    partial = env.VM.resolvePartial.call(this, partial, context, options);
	    var result = env.VM.invokePartial.call(this, partial, context, options);

	    if (result == null && env.compile) {
	      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
	      result = options.partials[options.name](context, options);
	    }
	    if (result != null) {
	      if (options.indent) {
	        var lines = result.split('\n');
	        for (var i = 0, l = lines.length; i < l; i++) {
	          if (!lines[i] && i + 1 === l) {
	            break;
	          }

	          lines[i] = options.indent + lines[i];
	        }
	        result = lines.join('\n');
	      }
	      return result;
	    } else {
	      throw new _Exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
	    }
	  }

	  // Just add water
	  var container = {
	    strict: function strict(obj, name) {
	      if (!(name in obj)) {
	        throw new _Exception2['default']('"' + name + '" not defined in ' + obj);
	      }
	      return obj[name];
	    },
	    lookup: function lookup(depths, name) {
	      var len = depths.length;
	      for (var i = 0; i < len; i++) {
	        if (depths[i] && depths[i][name] != null) {
	          return depths[i][name];
	        }
	      }
	    },
	    lambda: function lambda(current, context) {
	      return typeof current === 'function' ? current.call(context) : current;
	    },

	    escapeExpression: Utils.escapeExpression,
	    invokePartial: invokePartialWrapper,

	    fn: function fn(i) {
	      return templateSpec[i];
	    },

	    programs: [],
	    program: function program(i, data, declaredBlockParams, blockParams, depths) {
	      var programWrapper = this.programs[i],
	          fn = this.fn(i);
	      if (data || depths || blockParams || declaredBlockParams) {
	        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
	      } else if (!programWrapper) {
	        programWrapper = this.programs[i] = wrapProgram(this, i, fn);
	      }
	      return programWrapper;
	    },

	    data: function data(value, depth) {
	      while (value && depth--) {
	        value = value._parent;
	      }
	      return value;
	    },
	    merge: function merge(param, common) {
	      var obj = param || common;

	      if (param && common && param !== common) {
	        obj = Utils.extend({}, common, param);
	      }

	      return obj;
	    },

	    noop: env.VM.noop,
	    compilerInfo: templateSpec.compiler
	  };

	  function ret(context) {
	    var options = arguments[1] === undefined ? {} : arguments[1];

	    var data = options.data;

	    ret._setup(options);
	    if (!options.partial && templateSpec.useData) {
	      data = initData(context, data);
	    }
	    var depths = undefined,
	        blockParams = templateSpec.useBlockParams ? [] : undefined;
	    if (templateSpec.useDepths) {
	      depths = options.depths ? [context].concat(options.depths) : [context];
	    }

	    return templateSpec.main.call(container, context, container.helpers, container.partials, data, blockParams, depths);
	  }
	  ret.isTop = true;

	  ret._setup = function (options) {
	    if (!options.partial) {
	      container.helpers = container.merge(options.helpers, env.helpers);

	      if (templateSpec.usePartial) {
	        container.partials = container.merge(options.partials, env.partials);
	      }
	    } else {
	      container.helpers = options.helpers;
	      container.partials = options.partials;
	    }
	  };

	  ret._child = function (i, data, blockParams, depths) {
	    if (templateSpec.useBlockParams && !blockParams) {
	      throw new _Exception2['default']('must pass block params');
	    }
	    if (templateSpec.useDepths && !depths) {
	      throw new _Exception2['default']('must pass parent depths');
	    }

	    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
	  };
	  return ret;
	}

	function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
	  function prog(context) {
	    var options = arguments[1] === undefined ? {} : arguments[1];

	    return fn.call(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), depths && [context].concat(depths));
	  }
	  prog.program = i;
	  prog.depth = depths ? depths.length : 0;
	  prog.blockParams = declaredBlockParams || 0;
	  return prog;
	}

	function resolvePartial(partial, context, options) {
	  if (!partial) {
	    partial = options.partials[options.name];
	  } else if (!partial.call && !options.name) {
	    // This is a dynamic partial that returned a string
	    options.name = partial;
	    partial = options.partials[partial];
	  }
	  return partial;
	}

	function invokePartial(partial, context, options) {
	  options.partial = true;

	  if (partial === undefined) {
	    throw new _Exception2['default']('The partial ' + options.name + ' could not be found');
	  } else if (partial instanceof Function) {
	    return partial(context, options);
	  }
	}

	function noop() {
	  return '';
	}

	function initData(context, data) {
	  if (!data || !('root' in data)) {
	    data = data ? _COMPILER_REVISION$REVISION_CHANGES$createFrame.createFrame(data) : {};
	    data.root = context;
	  }
	  return data;
	}

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;
	/* istanbul ignore next */
	/* Jison generated parser */
	var handlebars = (function () {
	    var parser = { trace: function trace() {},
	        yy: {},
	        symbols_: { error: 2, root: 3, program: 4, EOF: 5, program_repetition0: 6, statement: 7, mustache: 8, block: 9, rawBlock: 10, partial: 11, content: 12, COMMENT: 13, CONTENT: 14, openRawBlock: 15, END_RAW_BLOCK: 16, OPEN_RAW_BLOCK: 17, helperName: 18, openRawBlock_repetition0: 19, openRawBlock_option0: 20, CLOSE_RAW_BLOCK: 21, openBlock: 22, block_option0: 23, closeBlock: 24, openInverse: 25, block_option1: 26, OPEN_BLOCK: 27, openBlock_repetition0: 28, openBlock_option0: 29, openBlock_option1: 30, CLOSE: 31, OPEN_INVERSE: 32, openInverse_repetition0: 33, openInverse_option0: 34, openInverse_option1: 35, openInverseChain: 36, OPEN_INVERSE_CHAIN: 37, openInverseChain_repetition0: 38, openInverseChain_option0: 39, openInverseChain_option1: 40, inverseAndProgram: 41, INVERSE: 42, inverseChain: 43, inverseChain_option0: 44, OPEN_ENDBLOCK: 45, OPEN: 46, mustache_repetition0: 47, mustache_option0: 48, OPEN_UNESCAPED: 49, mustache_repetition1: 50, mustache_option1: 51, CLOSE_UNESCAPED: 52, OPEN_PARTIAL: 53, partialName: 54, partial_repetition0: 55, partial_option0: 56, param: 57, sexpr: 58, OPEN_SEXPR: 59, sexpr_repetition0: 60, sexpr_option0: 61, CLOSE_SEXPR: 62, hash: 63, hash_repetition_plus0: 64, hashSegment: 65, ID: 66, EQUALS: 67, blockParams: 68, OPEN_BLOCK_PARAMS: 69, blockParams_repetition_plus0: 70, CLOSE_BLOCK_PARAMS: 71, path: 72, dataName: 73, STRING: 74, NUMBER: 75, BOOLEAN: 76, UNDEFINED: 77, NULL: 78, DATA: 79, pathSegments: 80, SEP: 81, $accept: 0, $end: 1 },
	        terminals_: { 2: "error", 5: "EOF", 13: "COMMENT", 14: "CONTENT", 16: "END_RAW_BLOCK", 17: "OPEN_RAW_BLOCK", 21: "CLOSE_RAW_BLOCK", 27: "OPEN_BLOCK", 31: "CLOSE", 32: "OPEN_INVERSE", 37: "OPEN_INVERSE_CHAIN", 42: "INVERSE", 45: "OPEN_ENDBLOCK", 46: "OPEN", 49: "OPEN_UNESCAPED", 52: "CLOSE_UNESCAPED", 53: "OPEN_PARTIAL", 59: "OPEN_SEXPR", 62: "CLOSE_SEXPR", 66: "ID", 67: "EQUALS", 69: "OPEN_BLOCK_PARAMS", 71: "CLOSE_BLOCK_PARAMS", 74: "STRING", 75: "NUMBER", 76: "BOOLEAN", 77: "UNDEFINED", 78: "NULL", 79: "DATA", 81: "SEP" },
	        productions_: [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [12, 1], [10, 3], [15, 5], [9, 4], [9, 4], [22, 6], [25, 6], [36, 6], [41, 2], [43, 3], [43, 1], [24, 3], [8, 5], [8, 5], [11, 5], [57, 1], [57, 1], [58, 5], [63, 1], [65, 3], [68, 3], [18, 1], [18, 1], [18, 1], [18, 1], [18, 1], [18, 1], [18, 1], [54, 1], [54, 1], [73, 2], [72, 1], [80, 3], [80, 1], [6, 0], [6, 2], [19, 0], [19, 2], [20, 0], [20, 1], [23, 0], [23, 1], [26, 0], [26, 1], [28, 0], [28, 2], [29, 0], [29, 1], [30, 0], [30, 1], [33, 0], [33, 2], [34, 0], [34, 1], [35, 0], [35, 1], [38, 0], [38, 2], [39, 0], [39, 1], [40, 0], [40, 1], [44, 0], [44, 1], [47, 0], [47, 2], [48, 0], [48, 1], [50, 0], [50, 2], [51, 0], [51, 1], [55, 0], [55, 2], [56, 0], [56, 1], [60, 0], [60, 2], [61, 0], [61, 1], [64, 1], [64, 2], [70, 1], [70, 2]],
	        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {

	            var $0 = $$.length - 1;
	            switch (yystate) {
	                case 1:
	                    return $$[$0 - 1];
	                    break;
	                case 2:
	                    this.$ = new yy.Program($$[$0], null, {}, yy.locInfo(this._$));
	                    break;
	                case 3:
	                    this.$ = $$[$0];
	                    break;
	                case 4:
	                    this.$ = $$[$0];
	                    break;
	                case 5:
	                    this.$ = $$[$0];
	                    break;
	                case 6:
	                    this.$ = $$[$0];
	                    break;
	                case 7:
	                    this.$ = $$[$0];
	                    break;
	                case 8:
	                    this.$ = new yy.CommentStatement(yy.stripComment($$[$0]), yy.stripFlags($$[$0], $$[$0]), yy.locInfo(this._$));
	                    break;
	                case 9:
	                    this.$ = new yy.ContentStatement($$[$0], yy.locInfo(this._$));
	                    break;
	                case 10:
	                    this.$ = yy.prepareRawBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
	                    break;
	                case 11:
	                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1] };
	                    break;
	                case 12:
	                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], false, this._$);
	                    break;
	                case 13:
	                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], true, this._$);
	                    break;
	                case 14:
	                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
	                    break;
	                case 15:
	                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
	                    break;
	                case 16:
	                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
	                    break;
	                case 17:
	                    this.$ = { strip: yy.stripFlags($$[$0 - 1], $$[$0 - 1]), program: $$[$0] };
	                    break;
	                case 18:
	                    var inverse = yy.prepareBlock($$[$0 - 2], $$[$0 - 1], $$[$0], $$[$0], false, this._$),
	                        program = new yy.Program([inverse], null, {}, yy.locInfo(this._$));
	                    program.chained = true;

	                    this.$ = { strip: $$[$0 - 2].strip, program: program, chain: true };

	                    break;
	                case 19:
	                    this.$ = $$[$0];
	                    break;
	                case 20:
	                    this.$ = { path: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 2], $$[$0]) };
	                    break;
	                case 21:
	                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
	                    break;
	                case 22:
	                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
	                    break;
	                case 23:
	                    this.$ = new yy.PartialStatement($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], yy.stripFlags($$[$0 - 4], $$[$0]), yy.locInfo(this._$));
	                    break;
	                case 24:
	                    this.$ = $$[$0];
	                    break;
	                case 25:
	                    this.$ = $$[$0];
	                    break;
	                case 26:
	                    this.$ = new yy.SubExpression($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], yy.locInfo(this._$));
	                    break;
	                case 27:
	                    this.$ = new yy.Hash($$[$0], yy.locInfo(this._$));
	                    break;
	                case 28:
	                    this.$ = new yy.HashPair(yy.id($$[$0 - 2]), $$[$0], yy.locInfo(this._$));
	                    break;
	                case 29:
	                    this.$ = yy.id($$[$0 - 1]);
	                    break;
	                case 30:
	                    this.$ = $$[$0];
	                    break;
	                case 31:
	                    this.$ = $$[$0];
	                    break;
	                case 32:
	                    this.$ = new yy.StringLiteral($$[$0], yy.locInfo(this._$));
	                    break;
	                case 33:
	                    this.$ = new yy.NumberLiteral($$[$0], yy.locInfo(this._$));
	                    break;
	                case 34:
	                    this.$ = new yy.BooleanLiteral($$[$0], yy.locInfo(this._$));
	                    break;
	                case 35:
	                    this.$ = new yy.UndefinedLiteral(yy.locInfo(this._$));
	                    break;
	                case 36:
	                    this.$ = new yy.NullLiteral(yy.locInfo(this._$));
	                    break;
	                case 37:
	                    this.$ = $$[$0];
	                    break;
	                case 38:
	                    this.$ = $$[$0];
	                    break;
	                case 39:
	                    this.$ = yy.preparePath(true, $$[$0], this._$);
	                    break;
	                case 40:
	                    this.$ = yy.preparePath(false, $$[$0], this._$);
	                    break;
	                case 41:
	                    $$[$0 - 2].push({ part: yy.id($$[$0]), original: $$[$0], separator: $$[$0 - 1] });this.$ = $$[$0 - 2];
	                    break;
	                case 42:
	                    this.$ = [{ part: yy.id($$[$0]), original: $$[$0] }];
	                    break;
	                case 43:
	                    this.$ = [];
	                    break;
	                case 44:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 45:
	                    this.$ = [];
	                    break;
	                case 46:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 53:
	                    this.$ = [];
	                    break;
	                case 54:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 59:
	                    this.$ = [];
	                    break;
	                case 60:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 65:
	                    this.$ = [];
	                    break;
	                case 66:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 73:
	                    this.$ = [];
	                    break;
	                case 74:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 77:
	                    this.$ = [];
	                    break;
	                case 78:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 81:
	                    this.$ = [];
	                    break;
	                case 82:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 85:
	                    this.$ = [];
	                    break;
	                case 86:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 89:
	                    this.$ = [$$[$0]];
	                    break;
	                case 90:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 91:
	                    this.$ = [$$[$0]];
	                    break;
	                case 92:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	            }
	        },
	        table: [{ 3: 1, 4: 2, 5: [2, 43], 6: 3, 13: [2, 43], 14: [2, 43], 17: [2, 43], 27: [2, 43], 32: [2, 43], 46: [2, 43], 49: [2, 43], 53: [2, 43] }, { 1: [3] }, { 5: [1, 4] }, { 5: [2, 2], 7: 5, 8: 6, 9: 7, 10: 8, 11: 9, 12: 10, 13: [1, 11], 14: [1, 18], 15: 16, 17: [1, 21], 22: 14, 25: 15, 27: [1, 19], 32: [1, 20], 37: [2, 2], 42: [2, 2], 45: [2, 2], 46: [1, 12], 49: [1, 13], 53: [1, 17] }, { 1: [2, 1] }, { 5: [2, 44], 13: [2, 44], 14: [2, 44], 17: [2, 44], 27: [2, 44], 32: [2, 44], 37: [2, 44], 42: [2, 44], 45: [2, 44], 46: [2, 44], 49: [2, 44], 53: [2, 44] }, { 5: [2, 3], 13: [2, 3], 14: [2, 3], 17: [2, 3], 27: [2, 3], 32: [2, 3], 37: [2, 3], 42: [2, 3], 45: [2, 3], 46: [2, 3], 49: [2, 3], 53: [2, 3] }, { 5: [2, 4], 13: [2, 4], 14: [2, 4], 17: [2, 4], 27: [2, 4], 32: [2, 4], 37: [2, 4], 42: [2, 4], 45: [2, 4], 46: [2, 4], 49: [2, 4], 53: [2, 4] }, { 5: [2, 5], 13: [2, 5], 14: [2, 5], 17: [2, 5], 27: [2, 5], 32: [2, 5], 37: [2, 5], 42: [2, 5], 45: [2, 5], 46: [2, 5], 49: [2, 5], 53: [2, 5] }, { 5: [2, 6], 13: [2, 6], 14: [2, 6], 17: [2, 6], 27: [2, 6], 32: [2, 6], 37: [2, 6], 42: [2, 6], 45: [2, 6], 46: [2, 6], 49: [2, 6], 53: [2, 6] }, { 5: [2, 7], 13: [2, 7], 14: [2, 7], 17: [2, 7], 27: [2, 7], 32: [2, 7], 37: [2, 7], 42: [2, 7], 45: [2, 7], 46: [2, 7], 49: [2, 7], 53: [2, 7] }, { 5: [2, 8], 13: [2, 8], 14: [2, 8], 17: [2, 8], 27: [2, 8], 32: [2, 8], 37: [2, 8], 42: [2, 8], 45: [2, 8], 46: [2, 8], 49: [2, 8], 53: [2, 8] }, { 18: 22, 66: [1, 32], 72: 23, 73: 24, 74: [1, 25], 75: [1, 26], 76: [1, 27], 77: [1, 28], 78: [1, 29], 79: [1, 31], 80: 30 }, { 18: 33, 66: [1, 32], 72: 23, 73: 24, 74: [1, 25], 75: [1, 26], 76: [1, 27], 77: [1, 28], 78: [1, 29], 79: [1, 31], 80: 30 }, { 4: 34, 6: 3, 13: [2, 43], 14: [2, 43], 17: [2, 43], 27: [2, 43], 32: [2, 43], 37: [2, 43], 42: [2, 43], 45: [2, 43], 46: [2, 43], 49: [2, 43], 53: [2, 43] }, { 4: 35, 6: 3, 13: [2, 43], 14: [2, 43], 17: [2, 43], 27: [2, 43], 32: [2, 43], 42: [2, 43], 45: [2, 43], 46: [2, 43], 49: [2, 43], 53: [2, 43] }, { 12: 36, 14: [1, 18] }, { 18: 38, 54: 37, 58: 39, 59: [1, 40], 66: [1, 32], 72: 23, 73: 24, 74: [1, 25], 75: [1, 26], 76: [1, 27], 77: [1, 28], 78: [1, 29], 79: [1, 31], 80: 30 }, { 5: [2, 9], 13: [2, 9], 14: [2, 9], 16: [2, 9], 17: [2, 9], 27: [2, 9], 32: [2, 9], 37: [2, 9], 42: [2, 9], 45: [2, 9], 46: [2, 9], 49: [2, 9], 53: [2, 9] }, { 18: 41, 66: [1, 32], 72: 23, 73: 24, 74: [1, 25], 75: [1, 26], 76: [1, 27], 77: [1, 28], 78: [1, 29], 79: [1, 31], 80: 30 }, { 18: 42, 66: [1, 32], 72: 23, 73: 24, 74: [1, 25], 75: [1, 26], 76: [1, 27], 77: [1, 28], 78: [1, 29], 79: [1, 31], 80: 30 }, { 18: 43, 66: [1, 32], 72: 23, 73: 24, 74: [1, 25], 75: [1, 26], 76: [1, 27], 77: [1, 28], 78: [1, 29], 79: [1, 31], 80: 30 }, { 31: [2, 73], 47: 44, 59: [2, 73], 66: [2, 73], 74: [2, 73], 75: [2, 73], 76: [2, 73], 77: [2, 73], 78: [2, 73], 79: [2, 73] }, { 21: [2, 30], 31: [2, 30], 52: [2, 30], 59: [2, 30], 62: [2, 30], 66: [2, 30], 69: [2, 30], 74: [2, 30], 75: [2, 30], 76: [2, 30], 77: [2, 30], 78: [2, 30], 79: [2, 30] }, { 21: [2, 31], 31: [2, 31], 52: [2, 31], 59: [2, 31], 62: [2, 31], 66: [2, 31], 69: [2, 31], 74: [2, 31], 75: [2, 31], 76: [2, 31], 77: [2, 31], 78: [2, 31], 79: [2, 31] }, { 21: [2, 32], 31: [2, 32], 52: [2, 32], 59: [2, 32], 62: [2, 32], 66: [2, 32], 69: [2, 32], 74: [2, 32], 75: [2, 32], 76: [2, 32], 77: [2, 32], 78: [2, 32], 79: [2, 32] }, { 21: [2, 33], 31: [2, 33], 52: [2, 33], 59: [2, 33], 62: [2, 33], 66: [2, 33], 69: [2, 33], 74: [2, 33], 75: [2, 33], 76: [2, 33], 77: [2, 33], 78: [2, 33], 79: [2, 33] }, { 21: [2, 34], 31: [2, 34], 52: [2, 34], 59: [2, 34], 62: [2, 34], 66: [2, 34], 69: [2, 34], 74: [2, 34], 75: [2, 34], 76: [2, 34], 77: [2, 34], 78: [2, 34], 79: [2, 34] }, { 21: [2, 35], 31: [2, 35], 52: [2, 35], 59: [2, 35], 62: [2, 35], 66: [2, 35], 69: [2, 35], 74: [2, 35], 75: [2, 35], 76: [2, 35], 77: [2, 35], 78: [2, 35], 79: [2, 35] }, { 21: [2, 36], 31: [2, 36], 52: [2, 36], 59: [2, 36], 62: [2, 36], 66: [2, 36], 69: [2, 36], 74: [2, 36], 75: [2, 36], 76: [2, 36], 77: [2, 36], 78: [2, 36], 79: [2, 36] }, { 21: [2, 40], 31: [2, 40], 52: [2, 40], 59: [2, 40], 62: [2, 40], 66: [2, 40], 69: [2, 40], 74: [2, 40], 75: [2, 40], 76: [2, 40], 77: [2, 40], 78: [2, 40], 79: [2, 40], 81: [1, 45] }, { 66: [1, 32], 80: 46 }, { 21: [2, 42], 31: [2, 42], 52: [2, 42], 59: [2, 42], 62: [2, 42], 66: [2, 42], 69: [2, 42], 74: [2, 42], 75: [2, 42], 76: [2, 42], 77: [2, 42], 78: [2, 42], 79: [2, 42], 81: [2, 42] }, { 50: 47, 52: [2, 77], 59: [2, 77], 66: [2, 77], 74: [2, 77], 75: [2, 77], 76: [2, 77], 77: [2, 77], 78: [2, 77], 79: [2, 77] }, { 23: 48, 36: 50, 37: [1, 52], 41: 51, 42: [1, 53], 43: 49, 45: [2, 49] }, { 26: 54, 41: 55, 42: [1, 53], 45: [2, 51] }, { 16: [1, 56] }, { 31: [2, 81], 55: 57, 59: [2, 81], 66: [2, 81], 74: [2, 81], 75: [2, 81], 76: [2, 81], 77: [2, 81], 78: [2, 81], 79: [2, 81] }, { 31: [2, 37], 59: [2, 37], 66: [2, 37], 74: [2, 37], 75: [2, 37], 76: [2, 37], 77: [2, 37], 78: [2, 37], 79: [2, 37] }, { 31: [2, 38], 59: [2, 38], 66: [2, 38], 74: [2, 38], 75: [2, 38], 76: [2, 38], 77: [2, 38], 78: [2, 38], 79: [2, 38] }, { 18: 58, 66: [1, 32], 72: 23, 73: 24, 74: [1, 25], 75: [1, 26], 76: [1, 27], 77: [1, 28], 78: [1, 29], 79: [1, 31], 80: 30 }, { 28: 59, 31: [2, 53], 59: [2, 53], 66: [2, 53], 69: [2, 53], 74: [2, 53], 75: [2, 53], 76: [2, 53], 77: [2, 53], 78: [2, 53], 79: [2, 53] }, { 31: [2, 59], 33: 60, 59: [2, 59], 66: [2, 59], 69: [2, 59], 74: [2, 59], 75: [2, 59], 76: [2, 59], 77: [2, 59], 78: [2, 59], 79: [2, 59] }, { 19: 61, 21: [2, 45], 59: [2, 45], 66: [2, 45], 74: [2, 45], 75: [2, 45], 76: [2, 45], 77: [2, 45], 78: [2, 45], 79: [2, 45] }, { 18: 65, 31: [2, 75], 48: 62, 57: 63, 58: 66, 59: [1, 40], 63: 64, 64: 67, 65: 68, 66: [1, 69], 72: 23, 73: 24, 74: [1, 25], 75: [1, 26], 76: [1, 27], 77: [1, 28], 78: [1, 29], 79: [1, 31], 80: 30 }, { 66: [1, 70] }, { 21: [2, 39], 31: [2, 39], 52: [2, 39], 59: [2, 39], 62: [2, 39], 66: [2, 39], 69: [2, 39], 74: [2, 39], 75: [2, 39], 76: [2, 39], 77: [2, 39], 78: [2, 39], 79: [2, 39], 81: [1, 45] }, { 18: 65, 51: 71, 52: [2, 79], 57: 72, 58: 66, 59: [1, 40], 63: 73, 64: 67, 65: 68, 66: [1, 69], 72: 23, 73: 24, 74: [1, 25], 75: [1, 26], 76: [1, 27], 77: [1, 28], 78: [1, 29], 79: [1, 31], 80: 30 }, { 24: 74, 45: [1, 75] }, { 45: [2, 50] }, { 4: 76, 6: 3, 13: [2, 43], 14: [2, 43], 17: [2, 43], 27: [2, 43], 32: [2, 43], 37: [2, 43], 42: [2, 43], 45: [2, 43], 46: [2, 43], 49: [2, 43], 53: [2, 43] }, { 45: [2, 19] }, { 18: 77, 66: [1, 32], 72: 23, 73: 24, 74: [1, 25], 75: [1, 26], 76: [1, 27], 77: [1, 28], 78: [1, 29], 79: [1, 31], 80: 30 }, { 4: 78, 6: 3, 13: [2, 43], 14: [2, 43], 17: [2, 43], 27: [2, 43], 32: [2, 43], 45: [2, 43], 46: [2, 43], 49: [2, 43], 53: [2, 43] }, { 24: 79, 45: [1, 75] }, { 45: [2, 52] }, { 5: [2, 10], 13: [2, 10], 14: [2, 10], 17: [2, 10], 27: [2, 10], 32: [2, 10], 37: [2, 10], 42: [2, 10], 45: [2, 10], 46: [2, 10], 49: [2, 10], 53: [2, 10] }, { 18: 65, 31: [2, 83], 56: 80, 57: 81, 58: 66, 59: [1, 40], 63: 82, 64: 67, 65: 68, 66: [1, 69], 72: 23, 73: 24, 74: [1, 25], 75: [1, 26], 76: [1, 27], 77: [1, 28], 78: [1, 29], 79: [1, 31], 80: 30 }, { 59: [2, 85], 60: 83, 62: [2, 85], 66: [2, 85], 74: [2, 85], 75: [2, 85], 76: [2, 85], 77: [2, 85], 78: [2, 85], 79: [2, 85] }, { 18: 65, 29: 84, 31: [2, 55], 57: 85, 58: 66, 59: [1, 40], 63: 86, 64: 67, 65: 68, 66: [1, 69], 69: [2, 55], 72: 23, 73: 24, 74: [1, 25], 75: [1, 26], 76: [1, 27], 77: [1, 28], 78: [1, 29], 79: [1, 31], 80: 30 }, { 18: 65, 31: [2, 61], 34: 87, 57: 88, 58: 66, 59: [1, 40], 63: 89, 64: 67, 65: 68, 66: [1, 69], 69: [2, 61], 72: 23, 73: 24, 74: [1, 25], 75: [1, 26], 76: [1, 27], 77: [1, 28], 78: [1, 29], 79: [1, 31], 80: 30 }, { 18: 65, 20: 90, 21: [2, 47], 57: 91, 58: 66, 59: [1, 40], 63: 92, 64: 67, 65: 68, 66: [1, 69], 72: 23, 73: 24, 74: [1, 25], 75: [1, 26], 76: [1, 27], 77: [1, 28], 78: [1, 29], 79: [1, 31], 80: 30 }, { 31: [1, 93] }, { 31: [2, 74], 59: [2, 74], 66: [2, 74], 74: [2, 74], 75: [2, 74], 76: [2, 74], 77: [2, 74], 78: [2, 74], 79: [2, 74] }, { 31: [2, 76] }, { 21: [2, 24], 31: [2, 24], 52: [2, 24], 59: [2, 24], 62: [2, 24], 66: [2, 24], 69: [2, 24], 74: [2, 24], 75: [2, 24], 76: [2, 24], 77: [2, 24], 78: [2, 24], 79: [2, 24] }, { 21: [2, 25], 31: [2, 25], 52: [2, 25], 59: [2, 25], 62: [2, 25], 66: [2, 25], 69: [2, 25], 74: [2, 25], 75: [2, 25], 76: [2, 25], 77: [2, 25], 78: [2, 25], 79: [2, 25] }, { 21: [2, 27], 31: [2, 27], 52: [2, 27], 62: [2, 27], 65: 94, 66: [1, 95], 69: [2, 27] }, { 21: [2, 89], 31: [2, 89], 52: [2, 89], 62: [2, 89], 66: [2, 89], 69: [2, 89] }, { 21: [2, 42], 31: [2, 42], 52: [2, 42], 59: [2, 42], 62: [2, 42], 66: [2, 42], 67: [1, 96], 69: [2, 42], 74: [2, 42], 75: [2, 42], 76: [2, 42], 77: [2, 42], 78: [2, 42], 79: [2, 42], 81: [2, 42] }, { 21: [2, 41], 31: [2, 41], 52: [2, 41], 59: [2, 41], 62: [2, 41], 66: [2, 41], 69: [2, 41], 74: [2, 41], 75: [2, 41], 76: [2, 41], 77: [2, 41], 78: [2, 41], 79: [2, 41], 81: [2, 41] }, { 52: [1, 97] }, { 52: [2, 78], 59: [2, 78], 66: [2, 78], 74: [2, 78], 75: [2, 78], 76: [2, 78], 77: [2, 78], 78: [2, 78], 79: [2, 78] }, { 52: [2, 80] }, { 5: [2, 12], 13: [2, 12], 14: [2, 12], 17: [2, 12], 27: [2, 12], 32: [2, 12], 37: [2, 12], 42: [2, 12], 45: [2, 12], 46: [2, 12], 49: [2, 12], 53: [2, 12] }, { 18: 98, 66: [1, 32], 72: 23, 73: 24, 74: [1, 25], 75: [1, 26], 76: [1, 27], 77: [1, 28], 78: [1, 29], 79: [1, 31], 80: 30 }, { 36: 50, 37: [1, 52], 41: 51, 42: [1, 53], 43: 100, 44: 99, 45: [2, 71] }, { 31: [2, 65], 38: 101, 59: [2, 65], 66: [2, 65], 69: [2, 65], 74: [2, 65], 75: [2, 65], 76: [2, 65], 77: [2, 65], 78: [2, 65], 79: [2, 65] }, { 45: [2, 17] }, { 5: [2, 13], 13: [2, 13], 14: [2, 13], 17: [2, 13], 27: [2, 13], 32: [2, 13], 37: [2, 13], 42: [2, 13], 45: [2, 13], 46: [2, 13], 49: [2, 13], 53: [2, 13] }, { 31: [1, 102] }, { 31: [2, 82], 59: [2, 82], 66: [2, 82], 74: [2, 82], 75: [2, 82], 76: [2, 82], 77: [2, 82], 78: [2, 82], 79: [2, 82] }, { 31: [2, 84] }, { 18: 65, 57: 104, 58: 66, 59: [1, 40], 61: 103, 62: [2, 87], 63: 105, 64: 67, 65: 68, 66: [1, 69], 72: 23, 73: 24, 74: [1, 25], 75: [1, 26], 76: [1, 27], 77: [1, 28], 78: [1, 29], 79: [1, 31], 80: 30 }, { 30: 106, 31: [2, 57], 68: 107, 69: [1, 108] }, { 31: [2, 54], 59: [2, 54], 66: [2, 54], 69: [2, 54], 74: [2, 54], 75: [2, 54], 76: [2, 54], 77: [2, 54], 78: [2, 54], 79: [2, 54] }, { 31: [2, 56], 69: [2, 56] }, { 31: [2, 63], 35: 109, 68: 110, 69: [1, 108] }, { 31: [2, 60], 59: [2, 60], 66: [2, 60], 69: [2, 60], 74: [2, 60], 75: [2, 60], 76: [2, 60], 77: [2, 60], 78: [2, 60], 79: [2, 60] }, { 31: [2, 62], 69: [2, 62] }, { 21: [1, 111] }, { 21: [2, 46], 59: [2, 46], 66: [2, 46], 74: [2, 46], 75: [2, 46], 76: [2, 46], 77: [2, 46], 78: [2, 46], 79: [2, 46] }, { 21: [2, 48] }, { 5: [2, 21], 13: [2, 21], 14: [2, 21], 17: [2, 21], 27: [2, 21], 32: [2, 21], 37: [2, 21], 42: [2, 21], 45: [2, 21], 46: [2, 21], 49: [2, 21], 53: [2, 21] }, { 21: [2, 90], 31: [2, 90], 52: [2, 90], 62: [2, 90], 66: [2, 90], 69: [2, 90] }, { 67: [1, 96] }, { 18: 65, 57: 112, 58: 66, 59: [1, 40], 66: [1, 32], 72: 23, 73: 24, 74: [1, 25], 75: [1, 26], 76: [1, 27], 77: [1, 28], 78: [1, 29], 79: [1, 31], 80: 30 }, { 5: [2, 22], 13: [2, 22], 14: [2, 22], 17: [2, 22], 27: [2, 22], 32: [2, 22], 37: [2, 22], 42: [2, 22], 45: [2, 22], 46: [2, 22], 49: [2, 22], 53: [2, 22] }, { 31: [1, 113] }, { 45: [2, 18] }, { 45: [2, 72] }, { 18: 65, 31: [2, 67], 39: 114, 57: 115, 58: 66, 59: [1, 40], 63: 116, 64: 67, 65: 68, 66: [1, 69], 69: [2, 67], 72: 23, 73: 24, 74: [1, 25], 75: [1, 26], 76: [1, 27], 77: [1, 28], 78: [1, 29], 79: [1, 31], 80: 30 }, { 5: [2, 23], 13: [2, 23], 14: [2, 23], 17: [2, 23], 27: [2, 23], 32: [2, 23], 37: [2, 23], 42: [2, 23], 45: [2, 23], 46: [2, 23], 49: [2, 23], 53: [2, 23] }, { 62: [1, 117] }, { 59: [2, 86], 62: [2, 86], 66: [2, 86], 74: [2, 86], 75: [2, 86], 76: [2, 86], 77: [2, 86], 78: [2, 86], 79: [2, 86] }, { 62: [2, 88] }, { 31: [1, 118] }, { 31: [2, 58] }, { 66: [1, 120], 70: 119 }, { 31: [1, 121] }, { 31: [2, 64] }, { 14: [2, 11] }, { 21: [2, 28], 31: [2, 28], 52: [2, 28], 62: [2, 28], 66: [2, 28], 69: [2, 28] }, { 5: [2, 20], 13: [2, 20], 14: [2, 20], 17: [2, 20], 27: [2, 20], 32: [2, 20], 37: [2, 20], 42: [2, 20], 45: [2, 20], 46: [2, 20], 49: [2, 20], 53: [2, 20] }, { 31: [2, 69], 40: 122, 68: 123, 69: [1, 108] }, { 31: [2, 66], 59: [2, 66], 66: [2, 66], 69: [2, 66], 74: [2, 66], 75: [2, 66], 76: [2, 66], 77: [2, 66], 78: [2, 66], 79: [2, 66] }, { 31: [2, 68], 69: [2, 68] }, { 21: [2, 26], 31: [2, 26], 52: [2, 26], 59: [2, 26], 62: [2, 26], 66: [2, 26], 69: [2, 26], 74: [2, 26], 75: [2, 26], 76: [2, 26], 77: [2, 26], 78: [2, 26], 79: [2, 26] }, { 13: [2, 14], 14: [2, 14], 17: [2, 14], 27: [2, 14], 32: [2, 14], 37: [2, 14], 42: [2, 14], 45: [2, 14], 46: [2, 14], 49: [2, 14], 53: [2, 14] }, { 66: [1, 125], 71: [1, 124] }, { 66: [2, 91], 71: [2, 91] }, { 13: [2, 15], 14: [2, 15], 17: [2, 15], 27: [2, 15], 32: [2, 15], 42: [2, 15], 45: [2, 15], 46: [2, 15], 49: [2, 15], 53: [2, 15] }, { 31: [1, 126] }, { 31: [2, 70] }, { 31: [2, 29] }, { 66: [2, 92], 71: [2, 92] }, { 13: [2, 16], 14: [2, 16], 17: [2, 16], 27: [2, 16], 32: [2, 16], 37: [2, 16], 42: [2, 16], 45: [2, 16], 46: [2, 16], 49: [2, 16], 53: [2, 16] }],
	        defaultActions: { 4: [2, 1], 49: [2, 50], 51: [2, 19], 55: [2, 52], 64: [2, 76], 73: [2, 80], 78: [2, 17], 82: [2, 84], 92: [2, 48], 99: [2, 18], 100: [2, 72], 105: [2, 88], 107: [2, 58], 110: [2, 64], 111: [2, 11], 123: [2, 70], 124: [2, 29] },
	        parseError: function parseError(str, hash) {
	            throw new Error(str);
	        },
	        parse: function parse(input) {
	            var self = this,
	                stack = [0],
	                vstack = [null],
	                lstack = [],
	                table = this.table,
	                yytext = "",
	                yylineno = 0,
	                yyleng = 0,
	                recovering = 0,
	                TERROR = 2,
	                EOF = 1;
	            this.lexer.setInput(input);
	            this.lexer.yy = this.yy;
	            this.yy.lexer = this.lexer;
	            this.yy.parser = this;
	            if (typeof this.lexer.yylloc == "undefined") this.lexer.yylloc = {};
	            var yyloc = this.lexer.yylloc;
	            lstack.push(yyloc);
	            var ranges = this.lexer.options && this.lexer.options.ranges;
	            if (typeof this.yy.parseError === "function") this.parseError = this.yy.parseError;
	            function popStack(n) {
	                stack.length = stack.length - 2 * n;
	                vstack.length = vstack.length - n;
	                lstack.length = lstack.length - n;
	            }
	            function lex() {
	                var token;
	                token = self.lexer.lex() || 1;
	                if (typeof token !== "number") {
	                    token = self.symbols_[token] || token;
	                }
	                return token;
	            }
	            var symbol,
	                preErrorSymbol,
	                state,
	                action,
	                a,
	                r,
	                yyval = {},
	                p,
	                len,
	                newState,
	                expected;
	            while (true) {
	                state = stack[stack.length - 1];
	                if (this.defaultActions[state]) {
	                    action = this.defaultActions[state];
	                } else {
	                    if (symbol === null || typeof symbol == "undefined") {
	                        symbol = lex();
	                    }
	                    action = table[state] && table[state][symbol];
	                }
	                if (typeof action === "undefined" || !action.length || !action[0]) {
	                    var errStr = "";
	                    if (!recovering) {
	                        expected = [];
	                        for (p in table[state]) if (this.terminals_[p] && p > 2) {
	                            expected.push("'" + this.terminals_[p] + "'");
	                        }
	                        if (this.lexer.showPosition) {
	                            errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
	                        } else {
	                            errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1 ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
	                        }
	                        this.parseError(errStr, { text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected });
	                    }
	                }
	                if (action[0] instanceof Array && action.length > 1) {
	                    throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
	                }
	                switch (action[0]) {
	                    case 1:
	                        stack.push(symbol);
	                        vstack.push(this.lexer.yytext);
	                        lstack.push(this.lexer.yylloc);
	                        stack.push(action[1]);
	                        symbol = null;
	                        if (!preErrorSymbol) {
	                            yyleng = this.lexer.yyleng;
	                            yytext = this.lexer.yytext;
	                            yylineno = this.lexer.yylineno;
	                            yyloc = this.lexer.yylloc;
	                            if (recovering > 0) recovering--;
	                        } else {
	                            symbol = preErrorSymbol;
	                            preErrorSymbol = null;
	                        }
	                        break;
	                    case 2:
	                        len = this.productions_[action[1]][1];
	                        yyval.$ = vstack[vstack.length - len];
	                        yyval._$ = { first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column };
	                        if (ranges) {
	                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
	                        }
	                        r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
	                        if (typeof r !== "undefined") {
	                            return r;
	                        }
	                        if (len) {
	                            stack = stack.slice(0, -1 * len * 2);
	                            vstack = vstack.slice(0, -1 * len);
	                            lstack = lstack.slice(0, -1 * len);
	                        }
	                        stack.push(this.productions_[action[1]][0]);
	                        vstack.push(yyval.$);
	                        lstack.push(yyval._$);
	                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
	                        stack.push(newState);
	                        break;
	                    case 3:
	                        return true;
	                }
	            }
	            return true;
	        }
	    };
	    /* Jison generated lexer */
	    var lexer = (function () {
	        var lexer = { EOF: 1,
	            parseError: function parseError(str, hash) {
	                if (this.yy.parser) {
	                    this.yy.parser.parseError(str, hash);
	                } else {
	                    throw new Error(str);
	                }
	            },
	            setInput: function setInput(input) {
	                this._input = input;
	                this._more = this._less = this.done = false;
	                this.yylineno = this.yyleng = 0;
	                this.yytext = this.matched = this.match = "";
	                this.conditionStack = ["INITIAL"];
	                this.yylloc = { first_line: 1, first_column: 0, last_line: 1, last_column: 0 };
	                if (this.options.ranges) this.yylloc.range = [0, 0];
	                this.offset = 0;
	                return this;
	            },
	            input: function input() {
	                var ch = this._input[0];
	                this.yytext += ch;
	                this.yyleng++;
	                this.offset++;
	                this.match += ch;
	                this.matched += ch;
	                var lines = ch.match(/(?:\r\n?|\n).*/g);
	                if (lines) {
	                    this.yylineno++;
	                    this.yylloc.last_line++;
	                } else {
	                    this.yylloc.last_column++;
	                }
	                if (this.options.ranges) this.yylloc.range[1]++;

	                this._input = this._input.slice(1);
	                return ch;
	            },
	            unput: function unput(ch) {
	                var len = ch.length;
	                var lines = ch.split(/(?:\r\n?|\n)/g);

	                this._input = ch + this._input;
	                this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
	                //this.yyleng -= len;
	                this.offset -= len;
	                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
	                this.match = this.match.substr(0, this.match.length - 1);
	                this.matched = this.matched.substr(0, this.matched.length - 1);

	                if (lines.length - 1) this.yylineno -= lines.length - 1;
	                var r = this.yylloc.range;

	                this.yylloc = { first_line: this.yylloc.first_line,
	                    last_line: this.yylineno + 1,
	                    first_column: this.yylloc.first_column,
	                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
	                };

	                if (this.options.ranges) {
	                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
	                }
	                return this;
	            },
	            more: function more() {
	                this._more = true;
	                return this;
	            },
	            less: function less(n) {
	                this.unput(this.match.slice(n));
	            },
	            pastInput: function pastInput() {
	                var past = this.matched.substr(0, this.matched.length - this.match.length);
	                return (past.length > 20 ? "..." : "") + past.substr(-20).replace(/\n/g, "");
	            },
	            upcomingInput: function upcomingInput() {
	                var next = this.match;
	                if (next.length < 20) {
	                    next += this._input.substr(0, 20 - next.length);
	                }
	                return (next.substr(0, 20) + (next.length > 20 ? "..." : "")).replace(/\n/g, "");
	            },
	            showPosition: function showPosition() {
	                var pre = this.pastInput();
	                var c = new Array(pre.length + 1).join("-");
	                return pre + this.upcomingInput() + "\n" + c + "^";
	            },
	            next: function next() {
	                if (this.done) {
	                    return this.EOF;
	                }
	                if (!this._input) this.done = true;

	                var token, match, tempMatch, index, col, lines;
	                if (!this._more) {
	                    this.yytext = "";
	                    this.match = "";
	                }
	                var rules = this._currentRules();
	                for (var i = 0; i < rules.length; i++) {
	                    tempMatch = this._input.match(this.rules[rules[i]]);
	                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
	                        match = tempMatch;
	                        index = i;
	                        if (!this.options.flex) break;
	                    }
	                }
	                if (match) {
	                    lines = match[0].match(/(?:\r\n?|\n).*/g);
	                    if (lines) this.yylineno += lines.length;
	                    this.yylloc = { first_line: this.yylloc.last_line,
	                        last_line: this.yylineno + 1,
	                        first_column: this.yylloc.last_column,
	                        last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length };
	                    this.yytext += match[0];
	                    this.match += match[0];
	                    this.matches = match;
	                    this.yyleng = this.yytext.length;
	                    if (this.options.ranges) {
	                        this.yylloc.range = [this.offset, this.offset += this.yyleng];
	                    }
	                    this._more = false;
	                    this._input = this._input.slice(match[0].length);
	                    this.matched += match[0];
	                    token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]);
	                    if (this.done && this._input) this.done = false;
	                    if (token) {
	                        return token;
	                    } else {
	                        return;
	                    }
	                }
	                if (this._input === "") {
	                    return this.EOF;
	                } else {
	                    return this.parseError("Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\n" + this.showPosition(), { text: "", token: null, line: this.yylineno });
	                }
	            },
	            lex: function lex() {
	                var r = this.next();
	                if (typeof r !== "undefined") {
	                    return r;
	                } else {
	                    return this.lex();
	                }
	            },
	            begin: function begin(condition) {
	                this.conditionStack.push(condition);
	            },
	            popState: function popState() {
	                return this.conditionStack.pop();
	            },
	            _currentRules: function _currentRules() {
	                return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
	            },
	            topState: function topState() {
	                return this.conditionStack[this.conditionStack.length - 2];
	            },
	            pushState: function begin(condition) {
	                this.begin(condition);
	            } };
	        lexer.options = {};
	        lexer.performAction = function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {

	            function strip(start, end) {
	                return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng - end);
	            }

	            var YYSTATE = YY_START;
	            switch ($avoiding_name_collisions) {
	                case 0:
	                    if (yy_.yytext.slice(-2) === "\\\\") {
	                        strip(0, 1);
	                        this.begin("mu");
	                    } else if (yy_.yytext.slice(-1) === "\\") {
	                        strip(0, 1);
	                        this.begin("emu");
	                    } else {
	                        this.begin("mu");
	                    }
	                    if (yy_.yytext) {
	                        return 14;
	                    }break;
	                case 1:
	                    return 14;
	                    break;
	                case 2:
	                    this.popState();
	                    return 14;

	                    break;
	                case 3:
	                    yy_.yytext = yy_.yytext.substr(5, yy_.yyleng - 9);
	                    this.popState();
	                    return 16;

	                    break;
	                case 4:
	                    return 14;
	                    break;
	                case 5:
	                    this.popState();
	                    return 13;

	                    break;
	                case 6:
	                    return 59;
	                    break;
	                case 7:
	                    return 62;
	                    break;
	                case 8:
	                    return 17;
	                    break;
	                case 9:
	                    this.popState();
	                    this.begin("raw");
	                    return 21;

	                    break;
	                case 10:
	                    return 53;
	                    break;
	                case 11:
	                    return 27;
	                    break;
	                case 12:
	                    return 45;
	                    break;
	                case 13:
	                    this.popState();return 42;
	                    break;
	                case 14:
	                    this.popState();return 42;
	                    break;
	                case 15:
	                    return 32;
	                    break;
	                case 16:
	                    return 37;
	                    break;
	                case 17:
	                    return 49;
	                    break;
	                case 18:
	                    return 46;
	                    break;
	                case 19:
	                    this.unput(yy_.yytext);
	                    this.popState();
	                    this.begin("com");

	                    break;
	                case 20:
	                    this.popState();
	                    return 13;

	                    break;
	                case 21:
	                    return 46;
	                    break;
	                case 22:
	                    return 67;
	                    break;
	                case 23:
	                    return 66;
	                    break;
	                case 24:
	                    return 66;
	                    break;
	                case 25:
	                    return 81;
	                    break;
	                case 26:
	                    // ignore whitespace
	                    break;
	                case 27:
	                    this.popState();return 52;
	                    break;
	                case 28:
	                    this.popState();return 31;
	                    break;
	                case 29:
	                    yy_.yytext = strip(1, 2).replace(/\\"/g, "\"");return 74;
	                    break;
	                case 30:
	                    yy_.yytext = strip(1, 2).replace(/\\'/g, "'");return 74;
	                    break;
	                case 31:
	                    return 79;
	                    break;
	                case 32:
	                    return 76;
	                    break;
	                case 33:
	                    return 76;
	                    break;
	                case 34:
	                    return 77;
	                    break;
	                case 35:
	                    return 78;
	                    break;
	                case 36:
	                    return 75;
	                    break;
	                case 37:
	                    return 69;
	                    break;
	                case 38:
	                    return 71;
	                    break;
	                case 39:
	                    return 66;
	                    break;
	                case 40:
	                    return 66;
	                    break;
	                case 41:
	                    return "INVALID";
	                    break;
	                case 42:
	                    return 5;
	                    break;
	            }
	        };
	        lexer.rules = [/^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/, /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/, /^(?:[^\x00]*?(?=(\{\{\{\{\/)))/, /^(?:[\s\S]*?--(~)?\}\})/, /^(?:\()/, /^(?:\))/, /^(?:\{\{\{\{)/, /^(?:\}\}\}\})/, /^(?:\{\{(~)?>)/, /^(?:\{\{(~)?#)/, /^(?:\{\{(~)?\/)/, /^(?:\{\{(~)?\^\s*(~)?\}\})/, /^(?:\{\{(~)?\s*else\s*(~)?\}\})/, /^(?:\{\{(~)?\^)/, /^(?:\{\{(~)?\s*else\b)/, /^(?:\{\{(~)?\{)/, /^(?:\{\{(~)?&)/, /^(?:\{\{(~)?!--)/, /^(?:\{\{(~)?![\s\S]*?\}\})/, /^(?:\{\{(~)?)/, /^(?:=)/, /^(?:\.\.)/, /^(?:\.(?=([=~}\s\/.)|])))/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}(~)?\}\})/, /^(?:(~)?\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\s)])))/, /^(?:false(?=([~}\s)])))/, /^(?:undefined(?=([~}\s)])))/, /^(?:null(?=([~}\s)])))/, /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/, /^(?:as\s+\|)/, /^(?:\|)/, /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/, /^(?:\[[^\]]*\])/, /^(?:.)/, /^(?:$)/];
	        lexer.conditions = { mu: { rules: [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], inclusive: false }, emu: { rules: [2], inclusive: false }, com: { rules: [5], inclusive: false }, raw: { rules: [3, 4], inclusive: false }, INITIAL: { rules: [0, 1, 42], inclusive: true } };
	        return lexer;
	    })();
	    parser.lexer = lexer;
	    function Parser() {
	        this.yy = {};
	    }Parser.prototype = parser;parser.Parser = Parser;
	    return new Parser();
	})();exports["default"] = handlebars;
	module.exports = exports["default"];

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireWildcard = __webpack_require__(8)['default'];

	exports.__esModule = true;

	var _Visitor = __webpack_require__(6);

	var _Visitor2 = _interopRequireWildcard(_Visitor);

	function WhitespaceControl() {}
	WhitespaceControl.prototype = new _Visitor2['default']();

	WhitespaceControl.prototype.Program = function (program) {
	  var isRoot = !this.isRootSeen;
	  this.isRootSeen = true;

	  var body = program.body;
	  for (var i = 0, l = body.length; i < l; i++) {
	    var current = body[i],
	        strip = this.accept(current);

	    if (!strip) {
	      continue;
	    }

	    var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot),
	        _isNextWhitespace = isNextWhitespace(body, i, isRoot),
	        openStandalone = strip.openStandalone && _isPrevWhitespace,
	        closeStandalone = strip.closeStandalone && _isNextWhitespace,
	        inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;

	    if (strip.close) {
	      omitRight(body, i, true);
	    }
	    if (strip.open) {
	      omitLeft(body, i, true);
	    }

	    if (inlineStandalone) {
	      omitRight(body, i);

	      if (omitLeft(body, i)) {
	        // If we are on a standalone node, save the indent info for partials
	        if (current.type === 'PartialStatement') {
	          // Pull out the whitespace from the final line
	          current.indent = /([ \t]+$)/.exec(body[i - 1].original)[1];
	        }
	      }
	    }
	    if (openStandalone) {
	      omitRight((current.program || current.inverse).body);

	      // Strip out the previous content node if it's whitespace only
	      omitLeft(body, i);
	    }
	    if (closeStandalone) {
	      // Always strip the next node
	      omitRight(body, i);

	      omitLeft((current.inverse || current.program).body);
	    }
	  }

	  return program;
	};
	WhitespaceControl.prototype.BlockStatement = function (block) {
	  this.accept(block.program);
	  this.accept(block.inverse);

	  // Find the inverse program that is involed with whitespace stripping.
	  var program = block.program || block.inverse,
	      inverse = block.program && block.inverse,
	      firstInverse = inverse,
	      lastInverse = inverse;

	  if (inverse && inverse.chained) {
	    firstInverse = inverse.body[0].program;

	    // Walk the inverse chain to find the last inverse that is actually in the chain.
	    while (lastInverse.chained) {
	      lastInverse = lastInverse.body[lastInverse.body.length - 1].program;
	    }
	  }

	  var strip = {
	    open: block.openStrip.open,
	    close: block.closeStrip.close,

	    // Determine the standalone candiacy. Basically flag our content as being possibly standalone
	    // so our parent can determine if we actually are standalone
	    openStandalone: isNextWhitespace(program.body),
	    closeStandalone: isPrevWhitespace((firstInverse || program).body)
	  };

	  if (block.openStrip.close) {
	    omitRight(program.body, null, true);
	  }

	  if (inverse) {
	    var inverseStrip = block.inverseStrip;

	    if (inverseStrip.open) {
	      omitLeft(program.body, null, true);
	    }

	    if (inverseStrip.close) {
	      omitRight(firstInverse.body, null, true);
	    }
	    if (block.closeStrip.open) {
	      omitLeft(lastInverse.body, null, true);
	    }

	    // Find standalone else statments
	    if (isPrevWhitespace(program.body) && isNextWhitespace(firstInverse.body)) {
	      omitLeft(program.body);
	      omitRight(firstInverse.body);
	    }
	  } else if (block.closeStrip.open) {
	    omitLeft(program.body, null, true);
	  }

	  return strip;
	};

	WhitespaceControl.prototype.MustacheStatement = function (mustache) {
	  return mustache.strip;
	};

	WhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function (node) {
	  /* istanbul ignore next */
	  var strip = node.strip || {};
	  return {
	    inlineStandalone: true,
	    open: strip.open,
	    close: strip.close
	  };
	};

	function isPrevWhitespace(body, i, isRoot) {
	  if (i === undefined) {
	    i = body.length;
	  }

	  // Nodes that end with newlines are considered whitespace (but are special
	  // cased for strip operations)
	  var prev = body[i - 1],
	      sibling = body[i - 2];
	  if (!prev) {
	    return isRoot;
	  }

	  if (prev.type === 'ContentStatement') {
	    return (sibling || !isRoot ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(prev.original);
	  }
	}
	function isNextWhitespace(body, i, isRoot) {
	  if (i === undefined) {
	    i = -1;
	  }

	  var next = body[i + 1],
	      sibling = body[i + 2];
	  if (!next) {
	    return isRoot;
	  }

	  if (next.type === 'ContentStatement') {
	    return (sibling || !isRoot ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(next.original);
	  }
	}

	// Marks the node to the right of the position as omitted.
	// I.e. {{foo}}' ' will mark the ' ' node as omitted.
	//
	// If i is undefined, then the first child will be marked as such.
	//
	// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
	// content is met.
	function omitRight(body, i, multiple) {
	  var current = body[i == null ? 0 : i + 1];
	  if (!current || current.type !== 'ContentStatement' || !multiple && current.rightStripped) {
	    return;
	  }

	  var original = current.value;
	  current.value = current.value.replace(multiple ? /^\s+/ : /^[ \t]*\r?\n?/, '');
	  current.rightStripped = current.value !== original;
	}

	// Marks the node to the left of the position as omitted.
	// I.e. ' '{{foo}} will mark the ' ' node as omitted.
	//
	// If i is undefined then the last child will be marked as such.
	//
	// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
	// content is met.
	function omitLeft(body, i, multiple) {
	  var current = body[i == null ? body.length - 1 : i - 1];
	  if (!current || current.type !== 'ContentStatement' || !multiple && current.leftStripped) {
	    return;
	  }

	  // We omit the last node if it's whitespace only and not preceeded by a non-content node.
	  var original = current.value;
	  current.value = current.value.replace(multiple ? /\s+$/ : /[ \t]+$/, '');
	  current.leftStripped = current.value !== original;
	  return current.leftStripped;
	}

	exports['default'] = WhitespaceControl;
	module.exports = exports['default'];

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireWildcard = __webpack_require__(8)['default'];

	exports.__esModule = true;
	exports.SourceLocation = SourceLocation;
	exports.id = id;
	exports.stripFlags = stripFlags;
	exports.stripComment = stripComment;
	exports.preparePath = preparePath;
	exports.prepareMustache = prepareMustache;
	exports.prepareRawBlock = prepareRawBlock;
	exports.prepareBlock = prepareBlock;

	var _Exception = __webpack_require__(11);

	var _Exception2 = _interopRequireWildcard(_Exception);

	function SourceLocation(source, locInfo) {
	  this.source = source;
	  this.start = {
	    line: locInfo.first_line,
	    column: locInfo.first_column
	  };
	  this.end = {
	    line: locInfo.last_line,
	    column: locInfo.last_column
	  };
	}

	function id(token) {
	  if (/^\[.*\]$/.test(token)) {
	    return token.substr(1, token.length - 2);
	  } else {
	    return token;
	  }
	}

	function stripFlags(open, close) {
	  return {
	    open: open.charAt(2) === '~',
	    close: close.charAt(close.length - 3) === '~'
	  };
	}

	function stripComment(comment) {
	  return comment.replace(/^\{\{~?\!-?-?/, '').replace(/-?-?~?\}\}$/, '');
	}

	function preparePath(data, parts, locInfo) {
	  locInfo = this.locInfo(locInfo);

	  var original = data ? '@' : '',
	      dig = [],
	      depth = 0,
	      depthString = '';

	  for (var i = 0, l = parts.length; i < l; i++) {
	    var part = parts[i].part,

	    // If we have [] syntax then we do not treat path references as operators,
	    // i.e. foo.[this] resolves to approximately context.foo['this']
	    isLiteral = parts[i].original !== part;
	    original += (parts[i].separator || '') + part;

	    if (!isLiteral && (part === '..' || part === '.' || part === 'this')) {
	      if (dig.length > 0) {
	        throw new _Exception2['default']('Invalid path: ' + original, { loc: locInfo });
	      } else if (part === '..') {
	        depth++;
	        depthString += '../';
	      }
	    } else {
	      dig.push(part);
	    }
	  }

	  return new this.PathExpression(data, depth, dig, original, locInfo);
	}

	function prepareMustache(path, params, hash, open, strip, locInfo) {
	  // Must use charAt to support IE pre-10
	  var escapeFlag = open.charAt(3) || open.charAt(2),
	      escaped = escapeFlag !== '{' && escapeFlag !== '&';

	  return new this.MustacheStatement(path, params, hash, escaped, strip, this.locInfo(locInfo));
	}

	function prepareRawBlock(openRawBlock, content, close, locInfo) {
	  if (openRawBlock.path.original !== close) {
	    var errorNode = { loc: openRawBlock.path.loc };

	    throw new _Exception2['default'](openRawBlock.path.original + ' doesn\'t match ' + close, errorNode);
	  }

	  locInfo = this.locInfo(locInfo);
	  var program = new this.Program([content], null, {}, locInfo);

	  return new this.BlockStatement(openRawBlock.path, openRawBlock.params, openRawBlock.hash, program, undefined, {}, {}, {}, locInfo);
	}

	function prepareBlock(openBlock, program, inverseAndProgram, close, inverted, locInfo) {
	  // When we are chaining inverse calls, we will not have a close path
	  if (close && close.path && openBlock.path.original !== close.path.original) {
	    var errorNode = { loc: openBlock.path.loc };

	    throw new _Exception2['default'](openBlock.path.original + ' doesn\'t match ' + close.path.original, errorNode);
	  }

	  program.blockParams = openBlock.blockParams;

	  var inverse = undefined,
	      inverseStrip = undefined;

	  if (inverseAndProgram) {
	    if (inverseAndProgram.chain) {
	      inverseAndProgram.program.body[0].closeStrip = close.strip;
	    }

	    inverseStrip = inverseAndProgram.strip;
	    inverse = inverseAndProgram.program;
	  }

	  if (inverted) {
	    inverted = inverse;
	    inverse = program;
	    program = inverted;
	  }

	  return new this.BlockStatement(openBlock.path, openBlock.params, openBlock.hash, program, inverse, openBlock.strip, inverseStrip, close && close.strip, this.locInfo(locInfo));
	}

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	/*global define */

	var _isArray = __webpack_require__(12);

	var SourceNode = undefined;

	try {
	  /* istanbul ignore next */
	  if (false) {
	    // We don't support this in AMD environments. For these environments, we asusme that
	    // they are running on the browser and thus have no need for the source-map library.
	    var SourceMap = require('source-map');
	    SourceNode = SourceMap.SourceNode;
	  }
	} catch (err) {}

	/* istanbul ignore if: tested but not covered in istanbul due to dist build  */
	if (!SourceNode) {
	  SourceNode = function (line, column, srcFile, chunks) {
	    this.src = '';
	    if (chunks) {
	      this.add(chunks);
	    }
	  };
	  /* istanbul ignore next */
	  SourceNode.prototype = {
	    add: function add(chunks) {
	      if (_isArray.isArray(chunks)) {
	        chunks = chunks.join('');
	      }
	      this.src += chunks;
	    },
	    prepend: function prepend(chunks) {
	      if (_isArray.isArray(chunks)) {
	        chunks = chunks.join('');
	      }
	      this.src = chunks + this.src;
	    },
	    toStringWithSourceMap: function toStringWithSourceMap() {
	      return { code: this.toString() };
	    },
	    toString: function toString() {
	      return this.src;
	    }
	  };
	}

	function castChunk(chunk, codeGen, loc) {
	  if (_isArray.isArray(chunk)) {
	    var ret = [];

	    for (var i = 0, len = chunk.length; i < len; i++) {
	      ret.push(codeGen.wrap(chunk[i], loc));
	    }
	    return ret;
	  } else if (typeof chunk === 'boolean' || typeof chunk === 'number') {
	    // Handle primitives that the SourceNode will throw up on
	    return chunk + '';
	  }
	  return chunk;
	}

	function CodeGen(srcFile) {
	  this.srcFile = srcFile;
	  this.source = [];
	}

	CodeGen.prototype = {
	  prepend: function prepend(source, loc) {
	    this.source.unshift(this.wrap(source, loc));
	  },
	  push: function push(source, loc) {
	    this.source.push(this.wrap(source, loc));
	  },

	  merge: function merge() {
	    var source = this.empty();
	    this.each(function (line) {
	      source.add(['  ', line, '\n']);
	    });
	    return source;
	  },

	  each: function each(iter) {
	    for (var i = 0, len = this.source.length; i < len; i++) {
	      iter(this.source[i]);
	    }
	  },

	  empty: function empty() {
	    var loc = arguments[0] === undefined ? this.currentLocation || { start: {} } : arguments[0];

	    return new SourceNode(loc.start.line, loc.start.column, this.srcFile);
	  },
	  wrap: function wrap(chunk) {
	    var loc = arguments[1] === undefined ? this.currentLocation || { start: {} } : arguments[1];

	    if (chunk instanceof SourceNode) {
	      return chunk;
	    }

	    chunk = castChunk(chunk, this, loc);

	    return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);
	  },

	  functionCall: function functionCall(fn, type, params) {
	    params = this.generateList(params);
	    return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);
	  },

	  quotedString: function quotedString(str) {
	    return '"' + (str + '').replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\u2028/g, '\\u2028') // Per Ecma-262 7.3 + 7.8.4
	    .replace(/\u2029/g, '\\u2029') + '"';
	  },

	  objectLiteral: function objectLiteral(obj) {
	    var pairs = [];

	    for (var key in obj) {
	      if (obj.hasOwnProperty(key)) {
	        var value = castChunk(obj[key], this);
	        if (value !== 'undefined') {
	          pairs.push([this.quotedString(key), ':', value]);
	        }
	      }
	    }

	    var ret = this.generateList(pairs);
	    ret.prepend('{');
	    ret.add('}');
	    return ret;
	  },

	  generateList: function generateList(entries, loc) {
	    var ret = this.empty(loc);

	    for (var i = 0, len = entries.length; i < len; i++) {
	      if (i) {
	        ret.add(',');
	      }

	      ret.add(castChunk(entries[i], this, loc));
	    }

	    return ret;
	  },

	  generateArray: function generateArray(entries, loc) {
	    var ret = this.generateList(entries, loc);
	    ret.prepend('[');
	    ret.add(']');

	    return ret;
	  }
	};

	exports['default'] = CodeGen;
	module.exports = exports['default'];

	/* NOP */

/***/ }
/******/ ])
});
;
//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind,
    nativeCreate       = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.8.3';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, undefinedOnly) {
    return function(obj) {
      var length = arguments.length;
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var property = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = property('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  function createReduce(dir) {
    // Optimized iterator function as using arguments.length
    // in the main function will deoptimize the, see #1991.
    function iterator(obj, iteratee, memo, keys, index, length) {
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    }

    return function(obj, iteratee, memo, context) {
      iteratee = optimizeCb(iteratee, context, 4);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      // Determine the initial value if none is provided.
      if (arguments.length < 3) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      return iterator(obj, iteratee, memo, keys, index, length);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var key;
    if (isArrayLike(obj)) {
      key = _.findIndex(obj, predicate, context);
    } else {
      key = _.findKey(obj, predicate, context);
    }
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      var func = isFunc ? method : value[method];
      return func == null ? func : func.apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = isArrayLike(obj) ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, startIndex) {
    var output = [], idx = 0;
    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        //flatten current level of array or arguments object
        if (!shallow) value = flatten(value, shallow, strict);
        var j = 0, len = value.length;
        output.length += len;
        while (j < len) {
          output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(arguments, true, true, 1);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    return _.unzip(arguments);
  };

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions
  function createPredicateIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a predicate test
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions
  function createIndexFinder(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
            i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  }

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var args = slice.call(arguments, 2);
    var bound = function() {
      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  function collectNonEnumProps(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  }

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object
  // In contrast to _.map it returns an object
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys =  _.keys(obj),
          length = keys.length,
          results = {},
          currentKey;
      for (var index = 0; index < length; index++) {
        currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s)
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(object, oiteratee, context) {
    var result = {}, obj = object, iteratee, keys;
    if (obj == null) return result;
    if (_.isFunction(oiteratee)) {
      keys = _.allKeys(obj);
      iteratee = optimizeCb(oiteratee, context);
    } else {
      keys = flatten(arguments, false, false, 1);
      iteratee = function(value, key, obj) { return key in obj; };
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(flatten(arguments, false, false, 1), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), and in Safari 8 (#1929).
  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = property;

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    return obj == null ? function(){} : function(key) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property, fallback) {
    var value = object == null ? void 0 : object[property];
    if (value === void 0) {
      value = fallback;
    }
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return '' + this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}.call(this));

//     Backbone.js 1.2.1

//     (c) 2010-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Backbone may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://backbonejs.org

(function(factory) {

  // Establish the root object, `window` (`self`) in the browser, or `global` on the server.
  // We use `self` instead of `window` for `WebWorker` support.
  var root = (typeof self == 'object' && self.self == self && self) ||
            (typeof global == 'object' && global.global == global && global);

  // Set up Backbone appropriately for the environment. Start with AMD.
  if (typeof define === 'function' && define.amd) {
    define(['underscore', 'jquery', 'exports'], function(_, $, exports) {
      // Export global even in AMD case in case this script is loaded with
      // others that may still expect a global Backbone.
      root.Backbone = factory(root, exports, _, $);
    });

  // Next for Node.js or CommonJS. jQuery may not be needed as a module.
  } else if (typeof exports !== 'undefined') {
    var _ = require('underscore'), $;
    try { $ = require('jquery'); } catch(e) {}
    factory(root, exports, _, $);

  // Finally, as a browser global.
  } else {
    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));
  }

}(function(root, Backbone, _, $) {

  // Initial Setup
  // -------------

  // Save the previous value of the `Backbone` variable, so that it can be
  // restored later on, if `noConflict` is used.
  var previousBackbone = root.Backbone;

  // Create a local reference to a common array method we'll want to use later.
  var slice = [].slice;

  // Current version of the library. Keep in sync with `package.json`.
  Backbone.VERSION = '1.2.1';

  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns
  // the `$` variable.
  Backbone.$ = $;

  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
  // to its previous owner. Returns a reference to this Backbone object.
  Backbone.noConflict = function() {
    root.Backbone = previousBackbone;
    return this;
  };

  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
  // will fake `"PATCH"`, `"PUT"` and `"DELETE"` requests via the `_method` parameter and
  // set a `X-Http-Method-Override` header.
  Backbone.emulateHTTP = false;

  // Turn on `emulateJSON` to support legacy servers that can't deal with direct
  // `application/json` requests ... this will encode the body as
  // `application/x-www-form-urlencoded` instead and will send the model in a
  // form param named `model`.
  Backbone.emulateJSON = false;

  // Proxy Underscore methods to a Backbone class' prototype using a
  // particular attribute as the data argument
  var addMethod = function(length, method, attribute) {
    switch (length) {
      case 1: return function() {
        return _[method](this[attribute]);
      };
      case 2: return function(value) {
        return _[method](this[attribute], value);
      };
      case 3: return function(iteratee, context) {
        return _[method](this[attribute], iteratee, context);
      };
      case 4: return function(iteratee, defaultVal, context) {
        return _[method](this[attribute], iteratee, defaultVal, context);
      };
      default: return function() {
        var args = slice.call(arguments);
        args.unshift(this[attribute]);
        return _[method].apply(_, args);
      };
    }
  };
  var addUnderscoreMethods = function(Class, methods, attribute) {
    _.each(methods, function(length, method) {
      if (_[method]) Class.prototype[method] = addMethod(length, method, attribute);
    });
  };

  // Backbone.Events
  // ---------------

  // A module that can be mixed in to *any object* in order to provide it with
  // custom events. You may bind with `on` or remove with `off` callback
  // functions to an event; `trigger`-ing an event fires all callbacks in
  // succession.
  //
  //     var object = {};
  //     _.extend(object, Backbone.Events);
  //     object.on('expand', function(){ alert('expanded'); });
  //     object.trigger('expand');
  //
  var Events = Backbone.Events = {};

  // Regular expression used to split event strings.
  var eventSplitter = /\s+/;

  // Iterates over the standard `event, callback` (as well as the fancy multiple
  // space-separated events `"change blur", callback` and jQuery-style event
  // maps `{event: callback}`), reducing them by manipulating `memo`.
  // Passes a normalized single event name and callback, as well as any
  // optional `opts`.
  var eventsApi = function(iteratee, memo, name, callback, opts) {
    var i = 0, names;
    if (name && typeof name === 'object') {
      // Handle event maps.
      if (callback !== void 0 && 'context' in opts && opts.context === void 0) opts.context = callback;
      for (names = _.keys(name); i < names.length ; i++) {
        memo = iteratee(memo, names[i], name[names[i]], opts);
      }
    } else if (name && eventSplitter.test(name)) {
      // Handle space separated event names.
      for (names = name.split(eventSplitter); i < names.length; i++) {
        memo = iteratee(memo, names[i], callback, opts);
      }
    } else {
      memo = iteratee(memo, name, callback, opts);
    }
    return memo;
  };

  // Bind an event to a `callback` function. Passing `"all"` will bind
  // the callback to all events fired.
  Events.on = function(name, callback, context) {
    return internalOn(this, name, callback, context);
  };

  // An internal use `on` function, used to guard the `listening` argument from
  // the public API.
  var internalOn = function(obj, name, callback, context, listening) {
    obj._events = eventsApi(onApi, obj._events || {}, name, callback, {
        context: context,
        ctx: obj,
        listening: listening
    });

    if (listening) {
      var listeners = obj._listeners || (obj._listeners = {});
      listeners[listening.id] = listening;
    }

    return obj;
  };

  // Inversion-of-control versions of `on`. Tell *this* object to listen to
  // an event in another object... keeping track of what it's listening to.
  Events.listenTo =  function(obj, name, callback) {
    if (!obj) return this;
    var id = obj._listenId || (obj._listenId = _.uniqueId('l'));
    var listeningTo = this._listeningTo || (this._listeningTo = {});
    var listening = listeningTo[id];

    // This object is not listening to any other events on `obj` yet.
    // Setup the necessary references to track the listening callbacks.
    if (!listening) {
      var thisId = this._listenId || (this._listenId = _.uniqueId('l'));
      listening = listeningTo[id] = {obj: obj, objId: id, id: thisId, listeningTo: listeningTo, count: 0};
    }

    // Bind callbacks on obj, and keep track of them on listening.
    internalOn(obj, name, callback, this, listening);
    return this;
  };

  // The reducing API that adds a callback to the `events` object.
  var onApi = function(events, name, callback, options) {
    if (callback) {
      var handlers = events[name] || (events[name] = []);
      var context = options.context, ctx = options.ctx, listening = options.listening;
      if (listening) listening.count++;

      handlers.push({ callback: callback, context: context, ctx: context || ctx, listening: listening });
    }
    return events;
  };

  // Remove one or many callbacks. If `context` is null, removes all
  // callbacks with that function. If `callback` is null, removes all
  // callbacks for the event. If `name` is null, removes all bound
  // callbacks for all events.
  Events.off =  function(name, callback, context) {
    if (!this._events) return this;
    this._events = eventsApi(offApi, this._events, name, callback, {
        context: context,
        listeners: this._listeners
    });
    return this;
  };

  // Tell this object to stop listening to either specific events ... or
  // to every object it's currently listening to.
  Events.stopListening =  function(obj, name, callback) {
    var listeningTo = this._listeningTo;
    if (!listeningTo) return this;

    var ids = obj ? [obj._listenId] : _.keys(listeningTo);

    for (var i = 0; i < ids.length; i++) {
      var listening = listeningTo[ids[i]];

      // If listening doesn't exist, this object is not currently
      // listening to obj. Break out early.
      if (!listening) break;

      listening.obj.off(name, callback, this);
    }
    if (_.isEmpty(listeningTo)) this._listeningTo = void 0;

    return this;
  };

  // The reducing API that removes a callback from the `events` object.
  var offApi = function(events, name, callback, options) {
    // No events to consider.
    if (!events) return;

    var i = 0, listening;
    var context = options.context, listeners = options.listeners;

    // Delete all events listeners and "drop" events.
    if (!name && !callback && !context) {
      var ids = _.keys(listeners);
      for (; i < ids.length; i++) {
        listening = listeners[ids[i]];
        delete listeners[listening.id];
        delete listening.listeningTo[listening.objId];
      }
      return;
    }

    var names = name ? [name] : _.keys(events);
    for (; i < names.length; i++) {
      name = names[i];
      var handlers = events[name];

      // Bail out if there are no events stored.
      if (!handlers) break;

      // Replace events if there are any remaining.  Otherwise, clean up.
      var remaining = [];
      for (var j = 0; j < handlers.length; j++) {
        var handler = handlers[j];
        if (
          callback && callback !== handler.callback &&
            callback !== handler.callback._callback ||
              context && context !== handler.context
        ) {
          remaining.push(handler);
        } else {
          listening = handler.listening;
          if (listening && --listening.count === 0) {
            delete listeners[listening.id];
            delete listening.listeningTo[listening.objId];
          }
        }
      }

      // Update tail event if the list has any events.  Otherwise, clean up.
      if (remaining.length) {
        events[name] = remaining;
      } else {
        delete events[name];
      }
    }
    if (_.size(events)) return events;
  };

  // Bind an event to only be triggered a single time. After the first time
  // the callback is invoked, it will be removed. When multiple events are
  // passed in using the space-separated syntax, the event will fire once for every
  // event you passed in, not once for a combination of all events
  Events.once =  function(name, callback, context) {
    // Map the event into a `{event: once}` object.
    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.off, this));
    return this.on(events, void 0, context);
  };

  // Inversion-of-control versions of `once`.
  Events.listenToOnce =  function(obj, name, callback) {
    // Map the event into a `{event: once}` object.
    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.stopListening, this, obj));
    return this.listenTo(obj, events);
  };

  // Reduces the event callbacks into a map of `{event: onceWrapper}`.
  // `offer` unbinds the `onceWrapper` after it has been called.
  var onceMap = function(map, name, callback, offer) {
    if (callback) {
      var once = map[name] = _.once(function() {
        offer(name, once);
        callback.apply(this, arguments);
      });
      once._callback = callback;
    }
    return map;
  };

  // Trigger one or many events, firing all bound callbacks. Callbacks are
  // passed the same arguments as `trigger` is, apart from the event name
  // (unless you're listening on `"all"`, which will cause your callback to
  // receive the true name of the event as the first argument).
  Events.trigger =  function(name) {
    if (!this._events) return this;

    var length = Math.max(0, arguments.length - 1);
    var args = Array(length);
    for (var i = 0; i < length; i++) args[i] = arguments[i + 1];

    eventsApi(triggerApi, this._events, name, void 0, args);
    return this;
  };

  // Handles triggering the appropriate event callbacks.
  var triggerApi = function(objEvents, name, cb, args) {
    if (objEvents) {
      var events = objEvents[name];
      var allEvents = objEvents.all;
      if (events && allEvents) allEvents = allEvents.slice();
      if (events) triggerEvents(events, args);
      if (allEvents) triggerEvents(allEvents, [name].concat(args));
    }
    return objEvents;
  };

  // A difficult-to-believe, but optimized internal dispatch function for
  // triggering events. Tries to keep the usual cases speedy (most internal
  // Backbone events have 3 arguments).
  var triggerEvents = function(events, args) {
    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
    switch (args.length) {
      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;
      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;
      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;
      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;
      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;
    }
  };

  // Aliases for backwards compatibility.
  Events.bind   = Events.on;
  Events.unbind = Events.off;

  // Allow the `Backbone` object to serve as a global event bus, for folks who
  // want global "pubsub" in a convenient place.
  _.extend(Backbone, Events);

  // Backbone.Model
  // --------------

  // Backbone **Models** are the basic data object in the framework --
  // frequently representing a row in a table in a database on your server.
  // A discrete chunk of data and a bunch of useful, related methods for
  // performing computations and transformations on that data.

  // Create a new model with the specified attributes. A client id (`cid`)
  // is automatically generated and assigned for you.
  var Model = Backbone.Model = function(attributes, options) {
    var attrs = attributes || {};
    options || (options = {});
    this.cid = _.uniqueId(this.cidPrefix);
    this.attributes = {};
    if (options.collection) this.collection = options.collection;
    if (options.parse) attrs = this.parse(attrs, options) || {};
    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));
    this.set(attrs, options);
    this.changed = {};
    this.initialize.apply(this, arguments);
  };

  // Attach all inheritable methods to the Model prototype.
  _.extend(Model.prototype, Events, {

    // A hash of attributes whose current and previous value differ.
    changed: null,

    // The value returned during the last failed validation.
    validationError: null,

    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
    // CouchDB users may want to set this to `"_id"`.
    idAttribute: 'id',

    // The prefix is used to create the client id which is used to identify models locally.
    // You may want to override this if you're experiencing name clashes with model ids.
    cidPrefix: 'c',

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Return a copy of the model's `attributes` object.
    toJSON: function(options) {
      return _.clone(this.attributes);
    },

    // Proxy `Backbone.sync` by default -- but override this if you need
    // custom syncing semantics for *this* particular model.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Get the value of an attribute.
    get: function(attr) {
      return this.attributes[attr];
    },

    // Get the HTML-escaped value of an attribute.
    escape: function(attr) {
      return _.escape(this.get(attr));
    },

    // Returns `true` if the attribute contains a value that is not null
    // or undefined.
    has: function(attr) {
      return this.get(attr) != null;
    },

    // Special-cased proxy to underscore's `_.matches` method.
    matches: function(attrs) {
      return !!_.iteratee(attrs, this)(this.attributes);
    },

    // Set a hash of model attributes on the object, firing `"change"`. This is
    // the core primitive operation of a model, updating the data and notifying
    // anyone who needs to know about the change in state. The heart of the beast.
    set: function(key, val, options) {
      if (key == null) return this;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      var attrs;
      if (typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options || (options = {});

      // Run validation.
      if (!this._validate(attrs, options)) return false;

      // Extract attributes and options.
      var unset      = options.unset;
      var silent     = options.silent;
      var changes    = [];
      var changing   = this._changing;
      this._changing = true;

      if (!changing) {
        this._previousAttributes = _.clone(this.attributes);
        this.changed = {};
      }

      var current = this.attributes;
      var changed = this.changed;
      var prev    = this._previousAttributes;

      // Check for changes of `id`.
      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];

      // For each `set` attribute, update or delete the current value.
      for (var attr in attrs) {
        val = attrs[attr];
        if (!_.isEqual(current[attr], val)) changes.push(attr);
        if (!_.isEqual(prev[attr], val)) {
          changed[attr] = val;
        } else {
          delete changed[attr];
        }
        unset ? delete current[attr] : current[attr] = val;
      }

      // Trigger all relevant attribute changes.
      if (!silent) {
        if (changes.length) this._pending = options;
        for (var i = 0; i < changes.length; i++) {
          this.trigger('change:' + changes[i], this, current[changes[i]], options);
        }
      }

      // You might be wondering why there's a `while` loop here. Changes can
      // be recursively nested within `"change"` events.
      if (changing) return this;
      if (!silent) {
        while (this._pending) {
          options = this._pending;
          this._pending = false;
          this.trigger('change', this, options);
        }
      }
      this._pending = false;
      this._changing = false;
      return this;
    },

    // Remove an attribute from the model, firing `"change"`. `unset` is a noop
    // if the attribute doesn't exist.
    unset: function(attr, options) {
      return this.set(attr, void 0, _.extend({}, options, {unset: true}));
    },

    // Clear all attributes on the model, firing `"change"`.
    clear: function(options) {
      var attrs = {};
      for (var key in this.attributes) attrs[key] = void 0;
      return this.set(attrs, _.extend({}, options, {unset: true}));
    },

    // Determine if the model has changed since the last `"change"` event.
    // If you specify an attribute name, determine if that attribute has changed.
    hasChanged: function(attr) {
      if (attr == null) return !_.isEmpty(this.changed);
      return _.has(this.changed, attr);
    },

    // Return an object containing all the attributes that have changed, or
    // false if there are no changed attributes. Useful for determining what
    // parts of a view need to be updated and/or what attributes need to be
    // persisted to the server. Unset attributes will be set to undefined.
    // You can also pass an attributes object to diff against the model,
    // determining if there *would be* a change.
    changedAttributes: function(diff) {
      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
      var old = this._changing ? this._previousAttributes : this.attributes;
      var changed = {};
      for (var attr in diff) {
        var val = diff[attr];
        if (_.isEqual(old[attr], val)) continue;
        changed[attr] = val;
      }
      return _.size(changed) ? changed : false;
    },

    // Get the previous value of an attribute, recorded at the time the last
    // `"change"` event was fired.
    previous: function(attr) {
      if (attr == null || !this._previousAttributes) return null;
      return this._previousAttributes[attr];
    },

    // Get all of the attributes of the model at the time of the previous
    // `"change"` event.
    previousAttributes: function() {
      return _.clone(this._previousAttributes);
    },

    // Fetch the model from the server, merging the response with the model's
    // local attributes. Any changed attributes will trigger a "change" event.
    fetch: function(options) {
      options = _.extend({parse: true}, options);
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        var serverAttrs = options.parse ? model.parse(resp, options) : resp;
        if (!model.set(serverAttrs, options)) return false;
        if (success) success.call(options.context, model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Set a hash of model attributes, and sync the model to the server.
    // If the server returns an attributes hash that differs, the model's
    // state will be `set` again.
    save: function(key, val, options) {
      // Handle both `"key", value` and `{key: value}` -style arguments.
      var attrs;
      if (key == null || typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options = _.extend({validate: true, parse: true}, options);
      var wait = options.wait;

      // If we're not waiting and attributes exist, save acts as
      // `set(attr).save(null, opts)` with validation. Otherwise, check if
      // the model will be valid when the attributes, if any, are set.
      if (attrs && !wait) {
        if (!this.set(attrs, options)) return false;
      } else {
        if (!this._validate(attrs, options)) return false;
      }

      // After a successful server-side save, the client is (optionally)
      // updated with the server-side state.
      var model = this;
      var success = options.success;
      var attributes = this.attributes;
      options.success = function(resp) {
        // Ensure attributes are restored during synchronous saves.
        model.attributes = attributes;
        var serverAttrs = options.parse ? model.parse(resp, options) : resp;
        if (wait) serverAttrs = _.extend({}, attrs, serverAttrs);
        if (serverAttrs && !model.set(serverAttrs, options)) return false;
        if (success) success.call(options.context, model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);

      // Set temporary attributes if `{wait: true}` to properly find new ids.
      if (attrs && wait) this.attributes = _.extend({}, attributes, attrs);

      var method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');
      if (method === 'patch' && !options.attrs) options.attrs = attrs;
      var xhr = this.sync(method, this, options);

      // Restore attributes.
      this.attributes = attributes;

      return xhr;
    },

    // Destroy this model on the server if it was already persisted.
    // Optimistically removes the model from its collection, if it has one.
    // If `wait: true` is passed, waits for the server to respond before removal.
    destroy: function(options) {
      options = options ? _.clone(options) : {};
      var model = this;
      var success = options.success;
      var wait = options.wait;

      var destroy = function() {
        model.stopListening();
        model.trigger('destroy', model, model.collection, options);
      };

      options.success = function(resp) {
        if (wait) destroy();
        if (success) success.call(options.context, model, resp, options);
        if (!model.isNew()) model.trigger('sync', model, resp, options);
      };

      var xhr = false;
      if (this.isNew()) {
        _.defer(options.success);
      } else {
        wrapError(this, options);
        xhr = this.sync('delete', this, options);
      }
      if (!wait) destroy();
      return xhr;
    },

    // Default URL for the model's representation on the server -- if you're
    // using Backbone's restful methods, override this to change the endpoint
    // that will be called.
    url: function() {
      var base =
        _.result(this, 'urlRoot') ||
        _.result(this.collection, 'url') ||
        urlError();
      if (this.isNew()) return base;
      var id = this.get(this.idAttribute);
      return base.replace(/[^\/]$/, '$&/') + encodeURIComponent(id);
    },

    // **parse** converts a response into the hash of attributes to be `set` on
    // the model. The default implementation is just to pass the response along.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new model with identical attributes to this one.
    clone: function() {
      return new this.constructor(this.attributes);
    },

    // A model is new if it has never been saved to the server, and lacks an id.
    isNew: function() {
      return !this.has(this.idAttribute);
    },

    // Check if the model is currently in a valid state.
    isValid: function(options) {
      return this._validate({}, _.defaults({validate: true}, options));
    },

    // Run validation against the next complete set of model attributes,
    // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
    _validate: function(attrs, options) {
      if (!options.validate || !this.validate) return true;
      attrs = _.extend({}, this.attributes, attrs);
      var error = this.validationError = this.validate(attrs, options) || null;
      if (!error) return true;
      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));
      return false;
    }

  });

  // Underscore methods that we want to implement on the Model.
  var modelMethods = { keys: 1, values: 1, pairs: 1, invert: 1, pick: 0,
      omit: 0, chain: 1, isEmpty: 1 };

  // Mix in each Underscore method as a proxy to `Model#attributes`.
  addUnderscoreMethods(Model, modelMethods, 'attributes');

  // Backbone.Collection
  // -------------------

  // If models tend to represent a single row of data, a Backbone Collection is
  // more analogous to a table full of data ... or a small slice or page of that
  // table, or a collection of rows that belong together for a particular reason
  // -- all of the messages in this particular folder, all of the documents
  // belonging to this particular author, and so on. Collections maintain
  // indexes of their models, both in order, and for lookup by `id`.

  // Create a new **Collection**, perhaps to contain a specific type of `model`.
  // If a `comparator` is specified, the Collection will maintain
  // its models in sort order, as they're added and removed.
  var Collection = Backbone.Collection = function(models, options) {
    options || (options = {});
    if (options.model) this.model = options.model;
    if (options.comparator !== void 0) this.comparator = options.comparator;
    this._reset();
    this.initialize.apply(this, arguments);
    if (models) this.reset(models, _.extend({silent: true}, options));
  };

  // Default options for `Collection#set`.
  var setOptions = {add: true, remove: true, merge: true};
  var addOptions = {add: true, remove: false};

  // Define the Collection's inheritable methods.
  _.extend(Collection.prototype, Events, {

    // The default model for a collection is just a **Backbone.Model**.
    // This should be overridden in most cases.
    model: Model,

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // The JSON representation of a Collection is an array of the
    // models' attributes.
    toJSON: function(options) {
      return this.map(function(model) { return model.toJSON(options); });
    },

    // Proxy `Backbone.sync` by default.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Add a model, or list of models to the set.
    add: function(models, options) {
      return this.set(models, _.extend({merge: false}, options, addOptions));
    },

    // Remove a model, or a list of models from the set.
    remove: function(models, options) {
      options = _.extend({}, options);
      var singular = !_.isArray(models);
      models = singular ? [models] : _.clone(models);
      var removed = this._removeModels(models, options);
      if (!options.silent && removed) this.trigger('update', this, options);
      return singular ? removed[0] : removed;
    },

    // Update a collection by `set`-ing a new list of models, adding new ones,
    // removing models that are no longer present, and merging models that
    // already exist in the collection, as necessary. Similar to **Model#set**,
    // the core operation for updating the data contained by the collection.
    set: function(models, options) {
      options = _.defaults({}, options, setOptions);
      if (options.parse && !this._isModel(models)) models = this.parse(models, options);
      var singular = !_.isArray(models);
      models = singular ? (models ? [models] : []) : models.slice();
      var id, model, attrs, existing, sort;
      var at = options.at;
      if (at != null) at = +at;
      if (at < 0) at += this.length + 1;
      var sortable = this.comparator && (at == null) && options.sort !== false;
      var sortAttr = _.isString(this.comparator) ? this.comparator : null;
      var toAdd = [], toRemove = [], modelMap = {};
      var add = options.add, merge = options.merge, remove = options.remove;
      var order = !sortable && add && remove ? [] : false;
      var orderChanged = false;

      // Turn bare objects into model references, and prevent invalid models
      // from being added.
      for (var i = 0; i < models.length; i++) {
        attrs = models[i];

        // If a duplicate is found, prevent it from being added and
        // optionally merge it into the existing model.
        if (existing = this.get(attrs)) {
          if (remove) modelMap[existing.cid] = true;
          if (merge && attrs !== existing) {
            attrs = this._isModel(attrs) ? attrs.attributes : attrs;
            if (options.parse) attrs = existing.parse(attrs, options);
            existing.set(attrs, options);
            if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;
          }
          models[i] = existing;

        // If this is a new, valid model, push it to the `toAdd` list.
        } else if (add) {
          model = models[i] = this._prepareModel(attrs, options);
          if (!model) continue;
          toAdd.push(model);
          this._addReference(model, options);
        }

        // Do not add multiple models with the same `id`.
        model = existing || model;
        if (!model) continue;
        id = this.modelId(model.attributes);
        if (order && (model.isNew() || !modelMap[id])) {
          order.push(model);

          // Check to see if this is actually a new model at this index.
          orderChanged = orderChanged || !this.models[i] || model.cid !== this.models[i].cid;
        }

        modelMap[id] = true;
      }

      // Remove nonexistent models if appropriate.
      if (remove) {
        for (var i = 0; i < this.length; i++) {
          if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);
        }
        if (toRemove.length) this._removeModels(toRemove, options);
      }

      // See if sorting is needed, update `length` and splice in new models.
      if (toAdd.length || orderChanged) {
        if (sortable) sort = true;
        this.length += toAdd.length;
        if (at != null) {
          for (var i = 0; i < toAdd.length; i++) {
            this.models.splice(at + i, 0, toAdd[i]);
          }
        } else {
          if (order) this.models.length = 0;
          var orderedModels = order || toAdd;
          for (var i = 0; i < orderedModels.length; i++) {
            this.models.push(orderedModels[i]);
          }
        }
      }

      // Silently sort the collection if appropriate.
      if (sort) this.sort({silent: true});

      // Unless silenced, it's time to fire all appropriate add/sort events.
      if (!options.silent) {
        var addOpts = at != null ? _.clone(options) : options;
        for (var i = 0; i < toAdd.length; i++) {
          if (at != null) addOpts.index = at + i;
          (model = toAdd[i]).trigger('add', model, this, addOpts);
        }
        if (sort || orderChanged) this.trigger('sort', this, options);
        if (toAdd.length || toRemove.length) this.trigger('update', this, options);
      }

      // Return the added (or merged) model (or models).
      return singular ? models[0] : models;
    },

    // When you have more items than you want to add or remove individually,
    // you can reset the entire set with a new list of models, without firing
    // any granular `add` or `remove` events. Fires `reset` when finished.
    // Useful for bulk operations and optimizations.
    reset: function(models, options) {
      options = options ? _.clone(options) : {};
      for (var i = 0; i < this.models.length; i++) {
        this._removeReference(this.models[i], options);
      }
      options.previousModels = this.models;
      this._reset();
      models = this.add(models, _.extend({silent: true}, options));
      if (!options.silent) this.trigger('reset', this, options);
      return models;
    },

    // Add a model to the end of the collection.
    push: function(model, options) {
      return this.add(model, _.extend({at: this.length}, options));
    },

    // Remove a model from the end of the collection.
    pop: function(options) {
      var model = this.at(this.length - 1);
      return this.remove(model, options);
    },

    // Add a model to the beginning of the collection.
    unshift: function(model, options) {
      return this.add(model, _.extend({at: 0}, options));
    },

    // Remove a model from the beginning of the collection.
    shift: function(options) {
      var model = this.at(0);
      return this.remove(model, options);
    },

    // Slice out a sub-array of models from the collection.
    slice: function() {
      return slice.apply(this.models, arguments);
    },

    // Get a model from the set by id.
    get: function(obj) {
      if (obj == null) return void 0;
      var id = this.modelId(this._isModel(obj) ? obj.attributes : obj);
      return this._byId[obj] || this._byId[id] || this._byId[obj.cid];
    },

    // Get the model at the given index.
    at: function(index) {
      if (index < 0) index += this.length;
      return this.models[index];
    },

    // Return models with matching attributes. Useful for simple cases of
    // `filter`.
    where: function(attrs, first) {
      var matches = _.matches(attrs);
      return this[first ? 'find' : 'filter'](function(model) {
        return matches(model.attributes);
      });
    },

    // Return the first model with matching attributes. Useful for simple cases
    // of `find`.
    findWhere: function(attrs) {
      return this.where(attrs, true);
    },

    // Force the collection to re-sort itself. You don't need to call this under
    // normal circumstances, as the set will maintain sort order as each item
    // is added.
    sort: function(options) {
      if (!this.comparator) throw new Error('Cannot sort a set without a comparator');
      options || (options = {});

      // Run sort based on type of `comparator`.
      if (_.isString(this.comparator) || this.comparator.length === 1) {
        this.models = this.sortBy(this.comparator, this);
      } else {
        this.models.sort(_.bind(this.comparator, this));
      }

      if (!options.silent) this.trigger('sort', this, options);
      return this;
    },

    // Pluck an attribute from each model in the collection.
    pluck: function(attr) {
      return _.invoke(this.models, 'get', attr);
    },

    // Fetch the default set of models for this collection, resetting the
    // collection when they arrive. If `reset: true` is passed, the response
    // data will be passed through the `reset` method instead of `set`.
    fetch: function(options) {
      options = _.extend({parse: true}, options);
      var success = options.success;
      var collection = this;
      options.success = function(resp) {
        var method = options.reset ? 'reset' : 'set';
        collection[method](resp, options);
        if (success) success.call(options.context, collection, resp, options);
        collection.trigger('sync', collection, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Create a new instance of a model in this collection. Add the model to the
    // collection immediately, unless `wait: true` is passed, in which case we
    // wait for the server to agree.
    create: function(model, options) {
      options = options ? _.clone(options) : {};
      var wait = options.wait;
      model = this._prepareModel(model, options);
      if (!model) return false;
      if (!wait) this.add(model, options);
      var collection = this;
      var success = options.success;
      options.success = function(model, resp, callbackOpts) {
        if (wait) collection.add(model, callbackOpts);
        if (success) success.call(callbackOpts.context, model, resp, callbackOpts);
      };
      model.save(null, options);
      return model;
    },

    // **parse** converts a response into a list of models to be added to the
    // collection. The default implementation is just to pass it through.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new collection with an identical list of models as this one.
    clone: function() {
      return new this.constructor(this.models, {
        model: this.model,
        comparator: this.comparator
      });
    },

    // Define how to uniquely identify models in the collection.
    modelId: function (attrs) {
      return attrs[this.model.prototype.idAttribute || 'id'];
    },

    // Private method to reset all internal state. Called when the collection
    // is first initialized or reset.
    _reset: function() {
      this.length = 0;
      this.models = [];
      this._byId  = {};
    },

    // Prepare a hash of attributes (or other model) to be added to this
    // collection.
    _prepareModel: function(attrs, options) {
      if (this._isModel(attrs)) {
        if (!attrs.collection) attrs.collection = this;
        return attrs;
      }
      options = options ? _.clone(options) : {};
      options.collection = this;
      var model = new this.model(attrs, options);
      if (!model.validationError) return model;
      this.trigger('invalid', this, model.validationError, options);
      return false;
    },

    // Internal method called by both remove and set.
    // Returns removed models, or false if nothing is removed.
    _removeModels: function(models, options) {
      var removed = [];
      for (var i = 0; i < models.length; i++) {
        var model = this.get(models[i]);
        if (!model) continue;

        var index = this.indexOf(model);
        this.models.splice(index, 1);
        this.length--;

        if (!options.silent) {
          options.index = index;
          model.trigger('remove', model, this, options);
        }

        removed.push(model);
        this._removeReference(model, options);
      }
      return removed.length ? removed : false;
    },

    // Method for checking whether an object should be considered a model for
    // the purposes of adding to the collection.
    _isModel: function (model) {
      return model instanceof Model;
    },

    // Internal method to create a model's ties to a collection.
    _addReference: function(model, options) {
      this._byId[model.cid] = model;
      var id = this.modelId(model.attributes);
      if (id != null) this._byId[id] = model;
      model.on('all', this._onModelEvent, this);
    },

    // Internal method to sever a model's ties to a collection.
    _removeReference: function(model, options) {
      delete this._byId[model.cid];
      var id = this.modelId(model.attributes);
      if (id != null) delete this._byId[id];
      if (this === model.collection) delete model.collection;
      model.off('all', this._onModelEvent, this);
    },

    // Internal method called every time a model in the set fires an event.
    // Sets need to update their indexes when models change ids. All other
    // events simply proxy through. "add" and "remove" events that originate
    // in other collections are ignored.
    _onModelEvent: function(event, model, collection, options) {
      if ((event === 'add' || event === 'remove') && collection !== this) return;
      if (event === 'destroy') this.remove(model, options);
      if (event === 'change') {
        var prevId = this.modelId(model.previousAttributes());
        var id = this.modelId(model.attributes);
        if (prevId !== id) {
          if (prevId != null) delete this._byId[prevId];
          if (id != null) this._byId[id] = model;
        }
      }
      this.trigger.apply(this, arguments);
    }

  });

  // Underscore methods that we want to implement on the Collection.
  // 90% of the core usefulness of Backbone Collections is actually implemented
  // right here:
  var collectionMethods = { forEach: 3, each: 3, map: 3, collect: 3, reduce: 4,
      foldl: 4, inject: 4, reduceRight: 4, foldr: 4, find: 3, detect: 3, filter: 3,
      select: 3, reject: 3, every: 3, all: 3, some: 3, any: 3, include: 2,
      contains: 2, invoke: 0, max: 3, min: 3, toArray: 1, size: 1, first: 3,
      head: 3, take: 3, initial: 3, rest: 3, tail: 3, drop: 3, last: 3,
      without: 0, difference: 0, indexOf: 3, shuffle: 1, lastIndexOf: 3,
      isEmpty: 1, chain: 1, sample: 3, partition: 3 };

  // Mix in each Underscore method as a proxy to `Collection#models`.
  addUnderscoreMethods(Collection, collectionMethods, 'models');

  // Underscore methods that take a property name as an argument.
  var attributeMethods = ['groupBy', 'countBy', 'sortBy', 'indexBy'];

  // Use attributes instead of properties.
  _.each(attributeMethods, function(method) {
    if (!_[method]) return;
    Collection.prototype[method] = function(value, context) {
      var iterator = _.isFunction(value) ? value : function(model) {
        return model.get(value);
      };
      return _[method](this.models, iterator, context);
    };
  });

  // Backbone.View
  // -------------

  // Backbone Views are almost more convention than they are actual code. A View
  // is simply a JavaScript object that represents a logical chunk of UI in the
  // DOM. This might be a single item, an entire list, a sidebar or panel, or
  // even the surrounding frame which wraps your whole app. Defining a chunk of
  // UI as a **View** allows you to define your DOM events declaratively, without
  // having to worry about render order ... and makes it easy for the view to
  // react to specific changes in the state of your models.

  // Creating a Backbone.View creates its initial element outside of the DOM,
  // if an existing element is not provided...
  var View = Backbone.View = function(options) {
    this.cid = _.uniqueId('view');
    _.extend(this, _.pick(options, viewOptions));
    this._ensureElement();
    this.initialize.apply(this, arguments);
  };

  // Cached regex to split keys for `delegate`.
  var delegateEventSplitter = /^(\S+)\s*(.*)$/;

  // List of view options to be merged as properties.
  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];

  // Set up all inheritable **Backbone.View** properties and methods.
  _.extend(View.prototype, Events, {

    // The default `tagName` of a View's element is `"div"`.
    tagName: 'div',

    // jQuery delegate for element lookup, scoped to DOM elements within the
    // current view. This should be preferred to global lookups where possible.
    $: function(selector) {
      return this.$el.find(selector);
    },

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // **render** is the core function that your view should override, in order
    // to populate its element (`this.el`), with the appropriate HTML. The
    // convention is for **render** to always return `this`.
    render: function() {
      return this;
    },

    // Remove this view by taking the element out of the DOM, and removing any
    // applicable Backbone.Events listeners.
    remove: function() {
      this._removeElement();
      this.stopListening();
      return this;
    },

    // Remove this view's element from the document and all event listeners
    // attached to it. Exposed for subclasses using an alternative DOM
    // manipulation API.
    _removeElement: function() {
      this.$el.remove();
    },

    // Change the view's element (`this.el` property) and re-delegate the
    // view's events on the new element.
    setElement: function(element) {
      this.undelegateEvents();
      this._setElement(element);
      this.delegateEvents();
      return this;
    },

    // Creates the `this.el` and `this.$el` references for this view using the
    // given `el`. `el` can be a CSS selector or an HTML string, a jQuery
    // context or an element. Subclasses can override this to utilize an
    // alternative DOM manipulation API and are only required to set the
    // `this.el` property.
    _setElement: function(el) {
      this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);
      this.el = this.$el[0];
    },

    // Set callbacks, where `this.events` is a hash of
    //
    // *{"event selector": "callback"}*
    //
    //     {
    //       'mousedown .title':  'edit',
    //       'click .button':     'save',
    //       'click .open':       function(e) { ... }
    //     }
    //
    // pairs. Callbacks will be bound to the view, with `this` set properly.
    // Uses event delegation for efficiency.
    // Omitting the selector binds the event to `this.el`.
    delegateEvents: function(events) {
      events || (events = _.result(this, 'events'));
      if (!events) return this;
      this.undelegateEvents();
      for (var key in events) {
        var method = events[key];
        if (!_.isFunction(method)) method = this[method];
        if (!method) continue;
        var match = key.match(delegateEventSplitter);
        this.delegate(match[1], match[2], _.bind(method, this));
      }
      return this;
    },

    // Add a single event listener to the view's element (or a child element
    // using `selector`). This only works for delegate-able events: not `focus`,
    // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.
    delegate: function(eventName, selector, listener) {
      this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);
      return this;
    },

    // Clears all callbacks previously bound to the view by `delegateEvents`.
    // You usually don't need to use this, but may wish to if you have multiple
    // Backbone views attached to the same DOM element.
    undelegateEvents: function() {
      if (this.$el) this.$el.off('.delegateEvents' + this.cid);
      return this;
    },

    // A finer-grained `undelegateEvents` for removing a single delegated event.
    // `selector` and `listener` are both optional.
    undelegate: function(eventName, selector, listener) {
      this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);
      return this;
    },

    // Produces a DOM element to be assigned to your view. Exposed for
    // subclasses using an alternative DOM manipulation API.
    _createElement: function(tagName) {
      return document.createElement(tagName);
    },

    // Ensure that the View has a DOM element to render into.
    // If `this.el` is a string, pass it through `$()`, take the first
    // matching element, and re-assign it to `el`. Otherwise, create
    // an element from the `id`, `className` and `tagName` properties.
    _ensureElement: function() {
      if (!this.el) {
        var attrs = _.extend({}, _.result(this, 'attributes'));
        if (this.id) attrs.id = _.result(this, 'id');
        if (this.className) attrs['class'] = _.result(this, 'className');
        this.setElement(this._createElement(_.result(this, 'tagName')));
        this._setAttributes(attrs);
      } else {
        this.setElement(_.result(this, 'el'));
      }
    },

    // Set attributes from a hash on this view's element.  Exposed for
    // subclasses using an alternative DOM manipulation API.
    _setAttributes: function(attributes) {
      this.$el.attr(attributes);
    }

  });

  // Backbone.sync
  // -------------

  // Override this function to change the manner in which Backbone persists
  // models to the server. You will be passed the type of request, and the
  // model in question. By default, makes a RESTful Ajax request
  // to the model's `url()`. Some possible customizations could be:
  //
  // * Use `setTimeout` to batch rapid-fire updates into a single request.
  // * Send up the models as XML instead of JSON.
  // * Persist models via WebSockets instead of Ajax.
  //
  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
  // as `POST`, with a `_method` parameter containing the true HTTP method,
  // as well as all requests with the body as `application/x-www-form-urlencoded`
  // instead of `application/json` with the model in a param named `model`.
  // Useful when interfacing with server-side languages like **PHP** that make
  // it difficult to read the body of `PUT` requests.
  Backbone.sync = function(method, model, options) {
    var type = methodMap[method];

    // Default options, unless specified.
    _.defaults(options || (options = {}), {
      emulateHTTP: Backbone.emulateHTTP,
      emulateJSON: Backbone.emulateJSON
    });

    // Default JSON-request options.
    var params = {type: type, dataType: 'json'};

    // Ensure that we have a URL.
    if (!options.url) {
      params.url = _.result(model, 'url') || urlError();
    }

    // Ensure that we have the appropriate request data.
    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
      params.contentType = 'application/json';
      params.data = JSON.stringify(options.attrs || model.toJSON(options));
    }

    // For older servers, emulate JSON by encoding the request into an HTML-form.
    if (options.emulateJSON) {
      params.contentType = 'application/x-www-form-urlencoded';
      params.data = params.data ? {model: params.data} : {};
    }

    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
    // And an `X-HTTP-Method-Override` header.
    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {
      params.type = 'POST';
      if (options.emulateJSON) params.data._method = type;
      var beforeSend = options.beforeSend;
      options.beforeSend = function(xhr) {
        xhr.setRequestHeader('X-HTTP-Method-Override', type);
        if (beforeSend) return beforeSend.apply(this, arguments);
      };
    }

    // Don't process data on a non-GET request.
    if (params.type !== 'GET' && !options.emulateJSON) {
      params.processData = false;
    }

    // Pass along `textStatus` and `errorThrown` from jQuery.
    var error = options.error;
    options.error = function(xhr, textStatus, errorThrown) {
      options.textStatus = textStatus;
      options.errorThrown = errorThrown;
      if (error) error.call(options.context, xhr, textStatus, errorThrown);
    };

    // Make the request, allowing the user to override any Ajax options.
    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
    model.trigger('request', model, xhr, options);
    return xhr;
  };

  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
  var methodMap = {
    'create': 'POST',
    'update': 'PUT',
    'patch':  'PATCH',
    'delete': 'DELETE',
    'read':   'GET'
  };

  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.
  // Override this if you'd like to use a different library.
  Backbone.ajax = function() {
    return Backbone.$.ajax.apply(Backbone.$, arguments);
  };

  // Backbone.Router
  // ---------------

  // Routers map faux-URLs to actions, and fire events when routes are
  // matched. Creating a new one sets its `routes` hash, if not set statically.
  var Router = Backbone.Router = function(options) {
    options || (options = {});
    if (options.routes) this.routes = options.routes;
    this._bindRoutes();
    this.initialize.apply(this, arguments);
  };

  // Cached regular expressions for matching named param parts and splatted
  // parts of route strings.
  var optionalParam = /\((.*?)\)/g;
  var namedParam    = /(\(\?)?:\w+/g;
  var splatParam    = /\*\w+/g;
  var escapeRegExp  = /[\-{}\[\]+?.,\\\^$|#\s]/g;

  // Set up all inheritable **Backbone.Router** properties and methods.
  _.extend(Router.prototype, Events, {

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Manually bind a single named route to a callback. For example:
    //
    //     this.route('search/:query/p:num', 'search', function(query, num) {
    //       ...
    //     });
    //
    route: function(route, name, callback) {
      if (!_.isRegExp(route)) route = this._routeToRegExp(route);
      if (_.isFunction(name)) {
        callback = name;
        name = '';
      }
      if (!callback) callback = this[name];
      var router = this;
      Backbone.history.route(route, function(fragment) {
        var args = router._extractParameters(route, fragment);
        if (router.execute(callback, args, name) !== false) {
          router.trigger.apply(router, ['route:' + name].concat(args));
          router.trigger('route', name, args);
          Backbone.history.trigger('route', router, name, args);
        }
      });
      return this;
    },

    // Execute a route handler with the provided parameters.  This is an
    // excellent place to do pre-route setup or post-route cleanup.
    execute: function(callback, args, name) {
      if (callback) callback.apply(this, args);
    },

    // Simple proxy to `Backbone.history` to save a fragment into the history.
    navigate: function(fragment, options) {
      Backbone.history.navigate(fragment, options);
      return this;
    },

    // Bind all defined routes to `Backbone.history`. We have to reverse the
    // order of the routes here to support behavior where the most general
    // routes can be defined at the bottom of the route map.
    _bindRoutes: function() {
      if (!this.routes) return;
      this.routes = _.result(this, 'routes');
      var route, routes = _.keys(this.routes);
      while ((route = routes.pop()) != null) {
        this.route(route, this.routes[route]);
      }
    },

    // Convert a route string into a regular expression, suitable for matching
    // against the current location hash.
    _routeToRegExp: function(route) {
      route = route.replace(escapeRegExp, '\\$&')
                   .replace(optionalParam, '(?:$1)?')
                   .replace(namedParam, function(match, optional) {
                     return optional ? match : '([^/?]+)';
                   })
                   .replace(splatParam, '([^?]*?)');
      return new RegExp('^' + route + '(?:\\?([\\s\\S]*))?$');
    },

    // Given a route, and a URL fragment that it matches, return the array of
    // extracted decoded parameters. Empty or unmatched parameters will be
    // treated as `null` to normalize cross-browser behavior.
    _extractParameters: function(route, fragment) {
      var params = route.exec(fragment).slice(1);
      return _.map(params, function(param, i) {
        // Don't decode the search params.
        if (i === params.length - 1) return param || null;
        return param ? decodeURIComponent(param) : null;
      });
    }

  });

  // Backbone.History
  // ----------------

  // Handles cross-browser history management, based on either
  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or
  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)
  // and URL fragments. If the browser supports neither (old IE, natch),
  // falls back to polling.
  var History = Backbone.History = function() {
    this.handlers = [];
    _.bindAll(this, 'checkUrl');

    // Ensure that `History` can be used outside of the browser.
    if (typeof window !== 'undefined') {
      this.location = window.location;
      this.history = window.history;
    }
  };

  // Cached regex for stripping a leading hash/slash and trailing space.
  var routeStripper = /^[#\/]|\s+$/g;

  // Cached regex for stripping leading and trailing slashes.
  var rootStripper = /^\/+|\/+$/g;

  // Cached regex for stripping urls of hash.
  var pathStripper = /#.*$/;

  // Has the history handling already been started?
  History.started = false;

  // Set up all inheritable **Backbone.History** properties and methods.
  _.extend(History.prototype, Events, {

    // The default interval to poll for hash changes, if necessary, is
    // twenty times a second.
    interval: 50,

    // Are we at the app root?
    atRoot: function() {
      var path = this.location.pathname.replace(/[^\/]$/, '$&/');
      return path === this.root && !this.getSearch();
    },

    // Does the pathname match the root?
    matchRoot: function() {
      var path = this.decodeFragment(this.location.pathname);
      var root = path.slice(0, this.root.length - 1) + '/';
      return root === this.root;
    },

    // Unicode characters in `location.pathname` are percent encoded so they're
    // decoded for comparison. `%25` should not be decoded since it may be part
    // of an encoded parameter.
    decodeFragment: function(fragment) {
      return decodeURI(fragment.replace(/%25/g, '%2525'));
    },

    // In IE6, the hash fragment and search params are incorrect if the
    // fragment contains `?`.
    getSearch: function() {
      var match = this.location.href.replace(/#.*/, '').match(/\?.+/);
      return match ? match[0] : '';
    },

    // Gets the true hash value. Cannot use location.hash directly due to bug
    // in Firefox where location.hash will always be decoded.
    getHash: function(window) {
      var match = (window || this).location.href.match(/#(.*)$/);
      return match ? match[1] : '';
    },

    // Get the pathname and search params, without the root.
    getPath: function() {
      var path = this.decodeFragment(
        this.location.pathname + this.getSearch()
      ).slice(this.root.length - 1);
      return path.charAt(0) === '/' ? path.slice(1) : path;
    },

    // Get the cross-browser normalized URL fragment from the path or hash.
    getFragment: function(fragment) {
      if (fragment == null) {
        if (this._usePushState || !this._wantsHashChange) {
          fragment = this.getPath();
        } else {
          fragment = this.getHash();
        }
      }
      return fragment.replace(routeStripper, '');
    },

    // Start the hash change handling, returning `true` if the current URL matches
    // an existing route, and `false` otherwise.
    start: function(options) {
      if (History.started) throw new Error('Backbone.history has already been started');
      History.started = true;

      // Figure out the initial configuration. Do we need an iframe?
      // Is pushState desired ... is it available?
      this.options          = _.extend({root: '/'}, this.options, options);
      this.root             = this.options.root;
      this._wantsHashChange = this.options.hashChange !== false;
      this._hasHashChange   = 'onhashchange' in window;
      this._useHashChange   = this._wantsHashChange && this._hasHashChange;
      this._wantsPushState  = !!this.options.pushState;
      this._hasPushState    = !!(this.history && this.history.pushState);
      this._usePushState    = this._wantsPushState && this._hasPushState;
      this.fragment         = this.getFragment();

      // Normalize root to always include a leading and trailing slash.
      this.root = ('/' + this.root + '/').replace(rootStripper, '/');

      // Transition from hashChange to pushState or vice versa if both are
      // requested.
      if (this._wantsHashChange && this._wantsPushState) {

        // If we've started off with a route from a `pushState`-enabled
        // browser, but we're currently in a browser that doesn't support it...
        if (!this._hasPushState && !this.atRoot()) {
          var root = this.root.slice(0, -1) || '/';
          this.location.replace(root + '#' + this.getPath());
          // Return immediately as browser will do redirect to new url
          return true;

        // Or if we've started out with a hash-based route, but we're currently
        // in a browser where it could be `pushState`-based instead...
        } else if (this._hasPushState && this.atRoot()) {
          this.navigate(this.getHash(), {replace: true});
        }

      }

      // Proxy an iframe to handle location events if the browser doesn't
      // support the `hashchange` event, HTML5 history, or the user wants
      // `hashChange` but not `pushState`.
      if (!this._hasHashChange && this._wantsHashChange && !this._usePushState) {
        this.iframe = document.createElement('iframe');
        this.iframe.src = 'javascript:0';
        this.iframe.style.display = 'none';
        this.iframe.tabIndex = -1;
        var body = document.body;
        // Using `appendChild` will throw on IE < 9 if the document is not ready.
        var iWindow = body.insertBefore(this.iframe, body.firstChild).contentWindow;
        iWindow.document.open();
        iWindow.document.close();
        iWindow.location.hash = '#' + this.fragment;
      }

      // Add a cross-platform `addEventListener` shim for older browsers.
      var addEventListener = window.addEventListener || function (eventName, listener) {
        return attachEvent('on' + eventName, listener);
      };

      // Depending on whether we're using pushState or hashes, and whether
      // 'onhashchange' is supported, determine how we check the URL state.
      if (this._usePushState) {
        addEventListener('popstate', this.checkUrl, false);
      } else if (this._useHashChange && !this.iframe) {
        addEventListener('hashchange', this.checkUrl, false);
      } else if (this._wantsHashChange) {
        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
      }

      if (!this.options.silent) return this.loadUrl();
    },

    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
    // but possibly useful for unit testing Routers.
    stop: function() {
      // Add a cross-platform `removeEventListener` shim for older browsers.
      var removeEventListener = window.removeEventListener || function (eventName, listener) {
        return detachEvent('on' + eventName, listener);
      };

      // Remove window listeners.
      if (this._usePushState) {
        removeEventListener('popstate', this.checkUrl, false);
      } else if (this._useHashChange && !this.iframe) {
        removeEventListener('hashchange', this.checkUrl, false);
      }

      // Clean up the iframe if necessary.
      if (this.iframe) {
        document.body.removeChild(this.iframe);
        this.iframe = null;
      }

      // Some environments will throw when clearing an undefined interval.
      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
      History.started = false;
    },

    // Add a route to be tested when the fragment changes. Routes added later
    // may override previous routes.
    route: function(route, callback) {
      this.handlers.unshift({route: route, callback: callback});
    },

    // Checks the current URL to see if it has changed, and if it has,
    // calls `loadUrl`, normalizing across the hidden iframe.
    checkUrl: function(e) {
      var current = this.getFragment();

      // If the user pressed the back button, the iframe's hash will have
      // changed and we should use that for comparison.
      if (current === this.fragment && this.iframe) {
        current = this.getHash(this.iframe.contentWindow);
      }

      if (current === this.fragment) return false;
      if (this.iframe) this.navigate(current);
      this.loadUrl();
    },

    // Attempt to load the current URL fragment. If a route succeeds with a
    // match, returns `true`. If no defined routes matches the fragment,
    // returns `false`.
    loadUrl: function(fragment) {
      // If the root doesn't match, no routes can match either.
      if (!this.matchRoot()) return false;
      fragment = this.fragment = this.getFragment(fragment);
      return _.any(this.handlers, function(handler) {
        if (handler.route.test(fragment)) {
          handler.callback(fragment);
          return true;
        }
      });
    },

    // Save a fragment into the hash history, or replace the URL state if the
    // 'replace' option is passed. You are responsible for properly URL-encoding
    // the fragment in advance.
    //
    // The options object can contain `trigger: true` if you wish to have the
    // route callback be fired (not usually desirable), or `replace: true`, if
    // you wish to modify the current URL without adding an entry to the history.
    navigate: function(fragment, options) {
      if (!History.started) return false;
      if (!options || options === true) options = {trigger: !!options};

      // Normalize the fragment.
      fragment = this.getFragment(fragment || '');

      // Don't include a trailing slash on the root.
      var root = this.root;
      if (fragment === '' || fragment.charAt(0) === '?') {
        root = root.slice(0, -1) || '/';
      }
      var url = root + fragment;

      // Strip the hash and decode for matching.
      fragment = this.decodeFragment(fragment.replace(pathStripper, ''));

      if (this.fragment === fragment) return;
      this.fragment = fragment;

      // If pushState is available, we use it to set the fragment as a real URL.
      if (this._usePushState) {
        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);

      // If hash changes haven't been explicitly disabled, update the hash
      // fragment to store history.
      } else if (this._wantsHashChange) {
        this._updateHash(this.location, fragment, options.replace);
        if (this.iframe && (fragment !== this.getHash(this.iframe.contentWindow))) {
          var iWindow = this.iframe.contentWindow;

          // Opening and closing the iframe tricks IE7 and earlier to push a
          // history entry on hash-tag change.  When replace is true, we don't
          // want this.
          if (!options.replace) {
            iWindow.document.open();
            iWindow.document.close();
          }

          this._updateHash(iWindow.location, fragment, options.replace);
        }

      // If you've told us that you explicitly don't want fallback hashchange-
      // based history, then `navigate` becomes a page refresh.
      } else {
        return this.location.assign(url);
      }
      if (options.trigger) return this.loadUrl(fragment);
    },

    // Update the hash location, either replacing the current entry, or adding
    // a new one to the browser history.
    _updateHash: function(location, fragment, replace) {
      if (replace) {
        var href = location.href.replace(/(javascript:|#).*$/, '');
        location.replace(href + '#' + fragment);
      } else {
        // Some browsers require that `hash` contains a leading #.
        location.hash = '#' + fragment;
      }
    }

  });

  // Create the default Backbone.history.
  Backbone.history = new History;

  // Helpers
  // -------

  // Helper function to correctly set up the prototype chain for subclasses.
  // Similar to `goog.inherits`, but uses a hash of prototype properties and
  // class properties to be extended.
  var extend = function(protoProps, staticProps) {
    var parent = this;
    var child;

    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent constructor.
    if (protoProps && _.has(protoProps, 'constructor')) {
      child = protoProps.constructor;
    } else {
      child = function(){ return parent.apply(this, arguments); };
    }

    // Add static properties to the constructor function, if supplied.
    _.extend(child, parent, staticProps);

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent` constructor function.
    var Surrogate = function(){ this.constructor = child; };
    Surrogate.prototype = parent.prototype;
    child.prototype = new Surrogate;

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps) _.extend(child.prototype, protoProps);

    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent.prototype;

    return child;
  };

  // Set up inheritance for the model, collection, router, view and history.
  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;

  // Throw an error when a URL is needed, and none is supplied.
  var urlError = function() {
    throw new Error('A "url" property or function must be specified');
  };

  // Wrap an optional error callback with a fallback error event.
  var wrapError = function(model, options) {
    var error = options.error;
    options.error = function(resp) {
      if (error) error.call(options.context, model, resp, options);
      model.trigger('error', model, resp, options);
    };
  };

  return Backbone;

}));

/*
 * Title: fish.js
 * Description: fish.js
 * Author: huang.xinghui
 * Created Date: 14-2-24 下午3:05
 * Copyright: Copyright 2013 ZTESOFT, Inc.
 */
/**
 * 全局静态对象，很多工具类挂在此对象下。
 * @singleton
 * @class fish.desktop.fish
 */
!function () {

    // //所有ajax请求都加上遮罩
    // $( document ).ajaxStart(function() {
    //     $.blockUI && $.blockUI();
    // });
    // $( document ).ajaxStop(function() {
    //     $.unblockUI && $.unblockUI();
    // });

    var fish = window.fish = {
        'version': '2.2.0',
        'language': 'en',
        'locale': {}, //国际化资源会在此文件后面加载
        /**
         * 获取资源文件
         * @method getResource
         * @param {String} key 资源文件键值
         * @return {Object|String} 如果没有找到则返回'UNKNOWN_KEY_' + key
         */
        getResource: function (key) {
            if (!key) return '';

            var result;
            if (this.locale.hasOwnProperty(this.language)) {
                result = this.locale[this.language];
            } else {
                result = this.locale.en;
            }
            var keys = key.split('.');
            for (var i = 0, n = keys.length; i < n; i++) {
                if (!result) {
                    result = 'UNKNOWN_KEY_' + key;
                    break;
                }
                result = result[keys[i]];
            }
            return result;
        },

        /**
         * @method setLanguage 赋值语言，内部会去更新组件相应资源内容
         * @param language 语言
         */
        setLanguage: function (language) {
            this.language = language;
            $(document).trigger("languageChanged.fish");
        }
    };

    var startTimer;

    /**
     * fish封装的ajax方法,提供默认的遮罩和错误提示，局部遮罩可自行实现。
     * @method ajax
     * @param {Object} options fish.ajax支持原生的所有ajax参数及回调方法。
     * fish扩展了以下几个参数：
     * beforeSend:function(xhr,status){//在发送请求之前要做的事情...}
     * complete:function(xhr,status){//加载完成之后要做的事情...}
     * error:function(xhr){//出现异常的时候要做的事情...}
     * showMask:false 是否采用默认的全局遮罩。
     * showError:true 采用默认的错误提示。
     * @return {Object} 返回原生ajax对象,支持promise等方式调用
     */
        //框架使用代理模式,避免用户直接覆盖beforeSend,complete,error
    fish._active = 0; //计数器,保证任意多个ajax请求页面上只有一个全局遮罩
    fish.latencyThreshold = 2000;

    fish.ajax = function (options) {
        options = $.extend({
            showMask: false, //是否采用默认的全局遮罩
            showError: true, //是否采用默认的错误提示
            type: "post",
            dataType: "json"
        }, options);

        var oldBeforeSend = options.beforeSend;
        options.beforeSend = function (xhr, status) {
            var context = options.context || this;
            if (oldBeforeSend && oldBeforeSend.apply(context, [xhr, status]) === false) return false;
            if (options.showMask === true && fish._active++ === 0) {
                $.blockUI && $.blockUI({
                    blockMsgClass: 'blocking'
                });

                startTimer = setTimeout(function () {
                    $('.blockUI.blocking').removeClass('blocking');
                }, fish.latencyThreshold);
            }
        };
        var oldComplete = options.complete;
        options.complete = function (xhr, status) {
            var context = options.context || this;
            oldComplete && oldComplete.apply(context, [xhr, status]);
            if (options.showMask === true && (--fish._active === 0)) {
                clearTimeout(startTimer);
                $.unblockUI && $.unblockUI();
            }
        };

        var oldError = options.error;
        options.error = function (xhr) {
            var context = options.context || this;
            oldError && oldError.apply(context, [xhr]);
            if (options.showError !== true) return;
            var tip = "";
            if (xhr.responseText == null || xhr.responseText === "") {
                tip = "XHR Error, readystate=" + xhr.readyState + ", status=" + xhr.status;
            } else {
                var txt = xhr.responseText;
                if ((txt.indexOf("{") === 0) && (txt.lastIndexOf("}") === (txt.length - 1))) {
                    var error = eval("(" + txt + ")");
                    tip = error.code + " : " + error.message;
                } else {
                    tip = txt;
                }
            }
            fish.error(tip);
        };

        return $.ajax(options);
    };

    /**
     * 提供方法的延迟操作,产生全局遮罩.一般用于初始化页面;初始化方法执行之前加上遮罩,结束之后取消遮罩
     * @method wait
     * @param  {Function} func 要执行的函数,执行期间会参数全局遮罩
     * @return {Object}    要执行的函数的返回值
     */
    fish.wait = function (func) {
        if (!$.isFunction(func)) return;
        if (fish._active++ === 0) {
            $.blockUI && $.blockUI();
        }
        var args = Array.prototype.slice.call(arguments, 1);
        return setTimeout(function () {
            var result = func.apply(null, args);
            if (--fish._active === 0) {
                $.unblockUI && $.unblockUI();
            }
            return result;
        }, 100);
    };


    //从grid.util.js移植过来
    $.extend(fish, {
        /**
         * 将html内转过义的>,<,",&符号转义回来
         * <p>请使用{@link fish.desktop.fish#unescape fish.unescape}方法</p>
         * @param  {String} value
         * @return {String}
         */
        htmlDecode: function (value) {
            return _.unescape(ue);
        },
        /**
         * 将htmlfis内的>,<,",&符号进行转义
         * <p>请使用{@link fish.desktop.fish#escape fish.escape}方法</p>
         * @param  {String} value
         * @return {String}
         */
        htmlEncode: function (value) {
            return _.escape(value);
        },
        /**
         * 判断是不是IE8-IE10浏览器
         *
         * 不推荐，请使用{@link fish.desktop.fish#browser}
         * @cfg {Boolean} msie
         */
        msie: navigator.appName === 'Microsoft Internet Explorer', //IE11失效
        /**
         * 判断是不是IE浏览器
         *
         * 不推荐，请使用{@link fish.desktop.fish#browser}
         * @cfg {Boolean} isIE
         */
        isIE: !!window.ActiveXObject || "ActiveXObject" in window,
        /**
         * 返回IE的版本号
         *
         * 不推荐，请使用{@link fish.desktop.fish#browser}
         * @return {number}
         */
        msiever: function () {
            var rv = -1;
            var ua = navigator.userAgent;
            var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
            if (re.exec(ua) != null) {
                rv = parseFloat(RegExp.$1);
            }
            return rv;
        },
        /**
         * 获取对象的属性值,深层取值
         * @param  {Object} obj  目标对象
         * @param  {String} expr 对象的属性值,支持级联获取到最底层
         * @return {Object} 目标值
         */
        getAccessor: function (obj, expr) {
            var ret, p, prm = [],
                i;
            // if (typeof expr === 'function') {
            //     return expr(obj);
            // }
            ret = obj[expr];
            if (ret === undefined) {
                try {
                    if (typeof expr === 'string') {
                        prm = expr.split('.');
                    }
                    i = prm.length;
                    if (i) {
                        ret = obj;
                        while (ret && i--) {
                            p = prm.shift();
                            ret = ret[p];
                        }
                    }
                } catch (e) {
                }
            }
            return ret;
        }
    });


    fish.createCallback = function (fn, args) {
        return function () {
            var appendArgs = arguments;
            appendArgs = $.extend(appendArgs, args);
            fn.call(window, appendArgs);
        };
    };


    /**
     * 弹出一个view，options中可以使用fish.popup中options参数如modal，height等等
     * @method popupView
     * @param {String | Object} options 为String或fish.View实例时相当于options.url；Object时可以包含以下属性：
     * @param {String} options.url 视图url，必选
     * @param {Function} options.close 对应popup.close方法
     * @param {Function} options.dismiss 对应popup.dismiss方法
     * @param {Function} options.callback(popup, view) 回调函数,popup：当前弹出窗；view当前视图
     * @param {Object} options.viewOption 子视图参数，如model，'collection', 'attributes', 'className'等，可选
     *<pre>
     *   fish.popupView('modules/user/userMgrView');
     *   //or
     *   fish.popupView({
     *     url: 'modules/user/userMgrView',
     *     width: "60%"
     *    });
     *
     *   fish.popupView( new UserMgrView());
     *   //or
     *   fish.popupView({
     *     url:new UserMgrView(),
     *     width:'60%'
     *   });
     *   //or
     *   fish.popupView({
     *   url: UserMgrView,
     *   viewOption:{userId:10000},
     *   width:'60%'})
     *</pre>
     *
     */
    //实现在fish.view.js中


    var scrollbarWidth = -1;
    /**
     * 获取垂直滚动条宽度
     * @return {Integer} 返回滚动条宽度
     */
    fish.getScrollBarWidth = function () {
        if (scrollbarWidth != -1) {
            return scrollbarWidth;
        }

        var scrollDiv = document.createElement('div');
        scrollDiv.className = 'modal-scrollbar-measure';
        document.body.appendChild(scrollDiv);
        scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        document.body.removeChild(scrollDiv);
        return scrollbarWidth;
    };


    return fish;
}();

/**
 * @class fish.desktop.fish
 */
!function() {
    function detect(ua) {
        var result = {};

        function getFirstMatch(regex) {
            var match = ua.match(regex);
            return (match && match.length > 1 && match[1]) || '';
        }

        if (/msie|trident/i.test(ua)) {
            result = {
                name: 'Internet Explorer',
                msie: true,
                version: getFirstMatch(/(?:msie |rv:)(\d+(\.\d+)?)/i),
                userAgent:ua
            };
        }else{
            result={
                userAgent:ua
            };
        }

        return result;
    }

    /**
     * @since V2.2.0
     * @cfg {Object} browser 判断浏览器类型，由于除IE之外，市面上所有的浏览器都已经比较完整地支持W3C标准，因此这里只针对IE做详细的匹配，其它标准浏览器只返回userAgent字符串。
     *
     * 比如判断ie版本>9，则为fish.browser.msie && fish.browser.version > 9
     */
    fish.browser = detect(navigator.userAgent);
}();
/**
 * Created by huangxinghui on 2015/10/13.
 */

!function () {
    "use strict";

    var backupTpl = '<div class="modal-backdrop in"></div>',
        StackedMap = {
            createNew: function () {
                var stack = [];

                return {
                    add: function (key, value) {
                        stack.push({
                            key: key,
                            value: value
                        });
                    },
                    get: function (key) {
                        for (var i = 0; i < stack.length; i++) {
                            if (key == stack[i].key) {
                                return stack[i];
                            }
                        }
                    },
                    keys: function () {
                        var keys = [];
                        for (var i = 0; i < stack.length; i++) {
                            keys.push(stack[i].key);
                        }
                        return keys;
                    },
                    top: function () {
                        return stack[stack.length - 1];
                    },
                    remove: function (key) {
                        var idx = -1;
                        for (var i = 0; i < stack.length; i++) {
                            if (key == stack[i].key) {
                                idx = i;
                                break;
                            }
                        }
                        return stack.splice(idx, 1)[0];
                    },
                    removeTop: function () {
                        return stack.splice(stack.length - 1, 1)[0];
                    },
                    length: function () {
                        return stack.length;
                    }
                };
            }
        },
        openedWindows = StackedMap.createNew(),
        $backdropElement;

    function backdropIndex() {
        var topBackdropIndex = -1;
        var opened = openedWindows.keys();
        for (var i = 0; i < opened.length; i++) {
            if (openedWindows.get(opened[i]).value.modal) {
                topBackdropIndex = i;
            }
        }
        return topBackdropIndex;
    }

    function buildBackdrop() {
        var currBackdropIndex = backdropIndex(),
            $body = $(document.body);

        if (currBackdropIndex >= 0) {
            if (!$backdropElement) {
                $backdropElement = $(backupTpl);
                $body.append($backdropElement);
            }
            //#558
            $backdropElement.css('z-index', 1040 + (currBackdropIndex && 1 || 0) + currBackdropIndex * 10);
        }
    }

    function checkRemoveBackdrop() {
        //remove backdrop if no longer needed
        if ($backdropElement) {
            var currBackdropIndex = -1;
            var opened = openedWindows.keys();
            for (var i = 0; i < opened.length; i++) {
                var win = openedWindows.get(opened[i]);
                if (win.value.$modalElement.is(':visible') && win.value.modal) {
                    currBackdropIndex = i;
                }
            }
            if (currBackdropIndex == -1) {
                $backdropElement.remove();
                $backdropElement = null;
            } else {
                $backdropElement.css('z-index', 1040 + (currBackdropIndex && 1 || 0) + currBackdropIndex * 10);
            }
        }
    }

    function changeBackdrop(topModalInstance) {
        var opened = openedWindows.keys();

        if (topModalInstance) { //找到最顶层的模态窗口

            if (!$backdropElement) {
                $backdropElement = $(backupTpl);
                $(document.body).append($backdropElement);
            }
            var topBackdropIndex = -1;
            for (var i = 0; i < opened.length; i++) {
                if (opened[i] == topModalInstance) {
                    topBackdropIndex = i;
                    break;
                }
            }
            $backdropElement.css('z-index', 1040 + (topBackdropIndex && 1 || 0) + topBackdropIndex * 10);

        } else { //没有最顶层的模态窗口
            if ($backdropElement) {
                $backdropElement.remove();
                $backdropElement = null;
            }
        }
    }

    fish.modalStack = {
        openedWindows: openedWindows,

        addBackdrop: function () {
            buildBackdrop();
        },

        changeBackdrop: function (topModalInstance) {
            changeBackdrop(topModalInstance);
        },

        removeBackdrop: function () {
            checkRemoveBackdrop();
        },

        bringToFront: function ($modalElement) {
            $modalElement.css('z-index', 1050 + (openedWindows.length() - 1) * 10);
        }
    };
}();
/**
 * @class fish.desktop.fish
 */

!function (fish, _) {
    _.extend(fish, _);

    /**
     * 遍历obj，按顺序遍历输出每个值。Aliased as `forEach`。如果存在原生的forEach方法，Underscore就使用它代替。
     * The cornerstone, an `each` implementation, aka `forEach`.
     * Handles objects with the built-in `forEach`, arrays, and raw objects.
     * Delegates to **ECMAScript 5**'s native `forEach` if available.
     * @method each
     * <pre>
     _.each([1, 2, 3], alert);
     => alerts each number in turn...
     _.each({one: 1, two: 2, three: 3}, alert);
     => alerts each number value in turn...
     * </pre>
     * @param obj 可以是数组也可以是对象
     * @param {Function} iterator 用来处理每个元素.如果obj是数组,参数为(element, index, obj);如果obj是个对象,iterator的参数是 (value, key, obj)
     * @param context (optional) 如果传递了context参数,则把iterator绑定到context对象上
     */

    /**
     * 遍历obj，按顺序映射每个值到一个新的数组中。Aliased as `collect`.如果存在原生的map方法，就用原生map方法来代替。
     * Return the results of applying the iterator to each element.
     * Delegates to **ECMAScript 5**'s native `map` if available.
     * @method map
     * <pre>
     _.map([1, 2, 3], function(num){ return num * 3; });
     => [3, 6, 9]
     _.map({one: 1, two: 2, three: 3}, function(num, key){ return num * 3; });
     => [3, 6, 9]
     * </pre>
     * @param obj 可以是数组也可以是对象
     * @param {Function} iterator 用来处理每个元素并返回。如果obj是数组，参数为(element, index, obj);如果obj是个对象，iterator的参数是 (value, key, obj)
     * @param context (optional)  如果传递了context参数，则把iterator绑定到context对象上
     * @return {Array} 返回一个新的数组
     */

    /**
     * 遍历obj，按顺序将每个值归结为一个单独的值。Aliased as `foldl/inject`。
     * **Reduce** builds up a single result from a list of values, aka `inject`,
     * or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
     * @method reduce
     * <pre>
     var sum = _.reduce([1, 2, 3], function(memo, num){ return memo + num; }, 0);
     => 6
     * </pre>
     * @param obj 可以是数组也可以是对象
     * @param {Function} iterator 用来处理每个元素并返回。如果obj是数组，参数为(memo, element, index, obj);如果obj是个对象，iterator的参数是 (memo, value, key, obj)
     * @param memo 函数的初始值，后续每一步值都需要由iterator返回
     * @param context (optional) 如果传递了context参数，则把iterator绑定到context对象上
     * @return 返回一个新的值
     */

    /**
     * 遍历obj，按倒顺将每个值归结为一个单独的值。Aliased as `foldr`。
     * The right-associative version of reduce, also known as `foldr`.
     * Delegates to **ECMAScript 5**'s native `reduceRight` if available.
     * @method reduceRight
     * <pre>
     var list = [[0, 1], [2, 3], [4, 5]];
     var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);
     => [4, 5, 2, 3, 0, 1]
     * </pre>
     * @param  {Object} obj 可以是数组也可以是对象
     * @param  {Function} iterator 用来处理每个元素并返回。如果obj是数组，参数为(memo, element, index, obj);如果obj是个对象，iterator的参数是 (memo, value, key, obj)
     * @param  {Object} memo 函数的初始值，后续每一步值都需要由iterator返回
     * @param  {Object} context (optional) 如果传递了context参数，则把iterator绑定到context对象上
     * @return {Object} 返回一个新的值
     */

    /**
     * 遍历obj，返回第一个通过predicate迭代器真值检测的元素值。Aliased as `detect`。如果找到匹配的元素，函数将立即返回，不会遍历整个obj。
     * Return the first value which passes a truth test. Aliased as `detect`.
     * @method find
     * <pre>
     var even = _.find([1, 2, 3, 4, 5, 6], function(num){ return num % 2 == 0; });
     => 2
     * </pre>
     * @param  {Object} obj 一般为数组
     * @param  {Function} predicate 参数为(memo, element, index, obj)，用来匹配符合条件的值
     * @param  {Object} context (optional) 如果传递了context参数，则把iterator绑定到context对象上
     * @return {Object} 返回第一个匹配的值
     */

    /**
     * 遍历list中的每个值，返回包含所有通过iterator真值检测的元素值。Aliased as `select`。如果存在原生filter方法，则用原生的filter方法。
     * Return all the elements that pass a truth test.
     * Delegates to **ECMAScript 5**'s native `filter` if available.
     * Aliased as `select`.
     * @method filter
     * <pre>
     var evens = _.filter([1, 2, 3, 4, 5, 6], function(num){ return num % 2 == 0; });
     => [2, 4, 6]
     * </pre>
     * @param  {Object} obj 一般为数组
     * @param  {Function} predicate 参数为(memo, element, index, obj)，用来匹配符合条件的值
     * @param  {Object} context (optional) 如果传递了context参数，则把iterator绑定到context对象上
     * @return {Array} 返回符合条件的数据集合
     */

    /**
     * 返回list中没有通过iterator真值检测的元素集合，与filter相反。
     * Return all the elements for which a truth test fails.
     * @method reject
     * <pre>
     var odds = _.reject([1, 2, 3, 4, 5, 6], function(num){ return num % 2 == 0; });
     => [1, 3, 5]
     * </pre>
     * @param  {Object} obj 一般为数组
     * @param  {Function} predicate 参数为(memo, element, index, obj)，用来过滤掉符合条件的值
     * @param  {Object} context (optional) 如果传递了context参数，则把iterator绑定到context对象上
     * @return {Array} 返回不符合条件的数据集合
     */

    /**
     * 如果list中的所有元素都通过iterator的真值检测就返回true。Aliased as `all`。如果存在原生的every方法，就使用原生的every。
     * Determine whether all of the elements match a truth test.
     * Delegates to **ECMAScript 5**'s native `every` if available.
     * Aliased as `all`.
     * @method every
     * <pre>
     _.every([true, 1, null, 'yes']);
     => false
     * </pre>
     * @param  {Object} obj 一般为数组
     * @param  {Function} predicate (optional)  可为空，参数为(memo, element, index, obj)，用来匹配符合条件的值,为空的话就默认为**{@link fish.desktop.fish#identity identity}**方法
     * @param  {Object} context (optional)  如果传递了context参数，则把iterator绑定到context对象上
     * @return {Boolean} 如果数据都匹配返回true，否则返回fasle
     */

    /**
     * 如果list中有任何一个元素通过 iterator 的真值检测就返回true。Aliased as `some`。一旦找到了符合条件的元素, 就直接中断对list的遍历. 如果存在原生的some方法，就使用原生的some。
     * Determine if at least one element in the object matches a truth test.
     * Delegates to **ECMAScript 5**'s native `some` if available.
     * Aliased as `any`.
     * @method some
     * <pre>
     _.some([null, 0, 'yes', false]);
     => true
     * </pre>
     * @param  {Object} obj 一般为数组
     * @param  {Function} predicate (optional) 可为空，参数为(memo, element, index, obj)，用来匹配符合条件的值,为空的话就默认为**{@link fish.desktop.fish#identity identity}**方法
     * @param  {Object} context (optional) 如果传递了context参数，则把iterator绑定到context对象上
     * @return {Boolean} 如果有任一数据匹配返回true，否则返回fasle
     */

    /**
     * 如果obj包含指定的value则返回true。Aliased as `include`。如果list 是数组，内部使用indexOf判断
     * Determine if the array or object contains a given value (using `===`).
     * Aliased as `include`.
     * @method contains
     * <pre>
     _.contains([1, 2, 3], 3);
     => true
     * </pre>
     * @param  {Object} obj 一般为数组
     * @param  {Object} target 需要判断的指定值
     * @return {Boolean} 如果对象内包含指定值返回true，否则返回fasle
     */

    /**
     * 在list的每个元素上执行methodName方法。任何传递给invoke的额外参数，invoke都会在调用methodName方法的时候传递给它。
     * Invoke a method (with arguments) on every item in a collection.
     * @method invoke
     * <pre>
     _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     => [[1, 5, 7], [1, 2, 3]]
     * </pre>
     * @param  {Object} obj 一般为数组
     * @param  {Function} method 每一个元素要执行的方法,也可以是方法名称
     * @return {Array} 返回一个新的数组
     */

    /**
     * map最常使用的用例模型的版本，即萃取对象数组中某属性值，返回一个数组。
     * Convenience version of a common use case of `map`: fetching a property.
     * @method pluck
     * <pre>
     var stooges = [{name: 'moe', age: 40}, {name: 'larry', age: 50}, {name: 'curly', age: 60}];
     _.pluck(stooges, 'name');
     => ["moe", "larry", "curly"]
     * </pre>
     * @param  {Object} obj 一般为对象数组
     * @param  {Object} key 要萃取的对象的属性名称
     * @return {Array} 返回一个新的数组
     */

    /**
     * 遍历list中的每一个值，返回一个数组，这个数组包含包含properties所列出的属性的所有的键 - 值对。
     * Convenience version of a common use case of `filter`: selecting only objects
     * containing specific `key:value` pairs.
     * @method where
     * <pre>
     _.where(listOfPlays, {author: "Shakespeare", year: 1611});
     => [{title: "Cymbeline", author: "Shakespeare", year: 1611},
     {title: "The Tempest", author: "Shakespeare", year: 1611}]
     * </pre>
     * @param obj 一般为对象数组
     * @param attrs 需要过滤的属性集合
     * @return {Array} 返回一个新的数组
     */

    /**
     * 遍历list中的每一个值，返回匹配properties所列出的属性的所有的键 - 值对的第一个值。
     * Convenience version of a common use case of `find`: getting the first object
     * containing specific `key:value` pairs.
     * @method findWhere
     * <pre>
     _.findWhere(publicServicePulitzers, {newsroom: "The New York Times"});
     => {year: 1918, newsroom: "The New York Times",
      reason: "For its public service in publishing in full so many official reports,
      documents and speeches by European statesmen relating to the progress and
      conduct of the war."}
     * </pre>
     * @param obj 一般为对象数组
     * @param attrs 需要过滤的属性集合
     * @return {Array} 返回第一个符合条件的对象
     */

    /**
     * 返回list中的最大值。如果传递iterator参数，iterator将作为list排序的依据。如果是数字数组(不超过65535个)，直接调用Math.max方法。
     * Return the maximum element or (element-based computation).
     * Can't optimize arrays of integers longer than 65,535 elements.
     * See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)
     * @method max
     * <pre>
     var stooges = [{name: 'moe', age: 40}, {name: 'larry', age: 50}, {name: 'curly', age: 60}];
     _.max(stooges, function(stooge){ return stooge.age; });
     => {name: 'curly', age: 60};
     * </pre>
     * @param  obj 一般为数组
     * @param  {Function} iterator (optional) 返回每一个数据中用来比较的值，如果未定义，默认为其本身。
     * @param  {Object} context (optional) 如果传递了context参数，则把iterator绑定到context对象上
     * @return {Object} 返回经比较后最大的数据
     */

    /**
     * 返回list中的最小值。如果传递iterator参数，iterator将作为list排序的依据。
     * Return the minimum element (or element-based computation).
     * @method min
     * <pre>
     var numbers = [10, 5, 100, 2, 1000];
     _.min(numbers);
     => 2
     * </pre>
     * @param  obj 一般为数组
     * @param  {Function} iterator (optional) 返回每一个数据中用来比较的值，如果未定义，默认为其本身。
     * @param  {Object} context (optional) 如果传递了context参数，则把iterator绑定到context对象上
     * @return {Object} 返回经比较后最小的数据
     */

    /**
     * 返回一个随机乱序的 obj 副本, 使用[Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle)来进行随机乱序.
     * Shuffle an array, using the modern version of the
     * [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
     * @method shuffle
     * <pre>
     _.shuffle([1, 2, 3, 4, 5, 6]);
     => [4, 1, 6, 3, 5, 2]
     * </pre>
     * @param  {Array} obj 一般为数组
     * @return {Array} 返回乱序的数组
     */

    /**
     * 从 obj中产生一个随机样本。传递一个数字表示从obj中返回n个随机元素。否则将返回一个单一的随机项。
     * Sample **n** random values from a collection.
     * If **n** is not specified, returns a single random element.
     * The internal `guard` argument allows it to work with `map`.
     * @method sample
     * <pre>
     _.sample([1, 2, 3, 4, 5, 6]);
     => 4
     _.sample([1, 2, 3, 4, 5, 6], 3);
     => [1, 6, 2]
     * </pre>
     * @param  {Array} obj 一般为数组
     * @param  {Number} n (optional) 随机返回的元素个数
     * @param  {Object} guard (optional) 设置为true会返回单一的随机项
     * @return {Object} 如果第二参数未定义或者定义了第三个参数，则返回随机一项，其他适合则返回n个随机元素的集合
     */

    /**
     * 返回一个排序后的obj拷贝副本。
     * Sort the object's values by a criterion produced by an iterator.
     * @method sortBy
     * <pre>
     _.sortBy([1, 2, 3, 4, 5, 6], function(num){ return Math.sin(num); });
     => [5, 4, 6, 3, 1, 2]
     * </pre>
     * @param  {Array} obj 一般为数组
     * @param  {Function} iterator (optional) 如果有iterator参数，iterator将作为obj排序的依据。迭代器也可以是字符串的属性的名称进行排序的
     * @param  {Object} context (optional) 如果传递了context参数，则把iterator绑定到context对象上
     * @return {Array} 返回乱序的数组
     */

    /**
     * 把一个集合分组为多个集合，通过 iterator 返回的结果进行分组.
     * Groups the object's values by a criterion. Pass either a string attribute to group by, or a function that returns the criterion.
     * @method groupBy
     * <pre>
     _.groupBy([1.3, 2.1, 2.4], function(num){ return Math.floor(num); });
     => {1: [1.3], 2: [2.1, 2.4]}
     _.groupBy(['one', 'two', 'three'], 'length');
     => {3: ["one", "two"], 5: ["three"]}
     * </pre>
     * @param  {Array} obj 一般为数组
     * @param  {Function} iterator (optional) 用来返回一个在列表中的每个元素键的函数或属性名，返回的值作为key。
     * @param  {Object} context (optional) 如果传递了context参数，则把iterator绑定到context对象上
     * @return {Object} 返回分组的对象
     */

    /**
     * 给定一个集合，和一个， 返回一个每一项索引的对象。
     * Indexes the object's values by a criterion, similar to `groupBy`, but for when you know that your index values will be unique.
     * @method indexBy
     * <pre>
     var stooges = [{name: 'moe', age: 40}, {name: 'larry', age: 50}, {name: 'curly', age: 60}];
     _.indexBy(stooges, 'age');
     => {
          "40": {name: 'moe', age: 40},
          "50": {name: 'larry', age: 50},
          "60": {name: 'curly', age: 60}
        }
     * </pre>
     * @param  {Array} obj 一般为数组
     * @param  {Function} iterator (optional) 用来返回一个在列表中的每个元素键的函数或属性名，返回的值作为key，key值要求唯一。
     * @param  {Object} context (optional) 如果传递了context参数，则把iterator绑定到context对象上
     * @return {Object} 返回一个指定了key的map
     */

    /**
     * 排序一个列表组成一个组，并且返回各组中的对象的数量的计数。
     * Counts instances of an object that group by a certain criterion. Pass either a string attribute to count by, or a function that returns the criterion.
     * @method countBy
     * <pre>
     _.countBy([1, 2, 3, 4, 5], function(num) {
          return num % 2 == 0 ? 'even': 'odd';
        });
     => {odd: 3, even: 2}
     * </pre>
     * @param  {Array} obj 一般为数组
     * @param  {Function} iterator (optional) 用来返回一个在列表中的每个元素键的函数或属性名，返回的值作为key。
     * @param  {Object} context (optional) 如果传递了context参数，则把iterator绑定到context对象上
     * @return {Object} 返回只有key值和对应key的数据总数的分组对象
     */

    /**
     * 使用二分查找确定value在list中的位置序号。
     * Use a comparator function to figure out the smallest index at which an object should be inserted so as to maintain order. Uses binary search.
     * @method sortedIndex
     * <pre>
     _.sortedIndex([10, 20, 30, 40, 50], 35);
     => 3
     var stooges = [{name: 'moe', age: 40}, {name: 'curly', age: 60}];
     _.sortedIndex(stooges, {name: 'larry', age: 50}, 'age');
     => 1
     * </pre>
     * @param  {Array} array 一般为数组
     * @param  {Object} obj  array排序后，定位obj插入的位置,使之能保持list原有的排序
     * @param  {Function} iterator (optional) 作为list排序的依据，也可以是字符串的属性名用来排序(比如length)
     * @param  {Object} context (optional) 如果传递了context参数，则把iterator绑定到context对象上
     * @return {Number} 返回obj所在的最终排序位置的下标。
     */
    /**
     * 把obj(任何可以迭代的对象)转换成一个数组，在转换 arguments 对象时非常有用。
     * Safely create a real, live array from anything iterable.
     * @method toArray
     * <pre>
     (function(){ return _.toArray(arguments).slice(1); })(1, 2, 3, 4);
     => [2, 3, 4]
     * </pre>
     * @param  obj 可以迭代的对象
     * @return {Array} 返回数组
     */
    /**
     * 返回对象的长度。如果对象没有length属性，返回属性的数量
     * Return the number of elements in an object.
     * @method size
     * <pre>
     _.size({one: 1, two: 2, three: 3});
     => 3
     * </pre>
     * @param  obj 可以迭代的对象
     * @return {Number} 返回对象的长度
     */
    /**
     * 返回数组的前n个元素。Aliased as `head` or `take`。
     * Get the first element of an array. Passing **n** will return the first N values in the array. Aliased as `head` and `take`. The **guard** check allows it to work with `_.map`.
     * @method first
     * <pre>
     _.first([5, 4, 3, 2, 1]);
     => 5
     * </pre>
     * @param  {Array} array 对象数组
     * @param  {Number} n (optional) 返回的前几个元素数量，为空默认为1.
     * @param  {Object} guard (optional) 设置为true会返回第一个元素
     * @return {Array} 如果第二参数未定义或者定义了第三个参数，则返回第一个元素，其他情况则返回n个随机元素的集合
     */
    /**
     * 排除数组的后n个元素。
     * Returns everything but the last entry of the array. Especially useful on the arguments object. Passing **n** will return all the values in the array, excluding the last N. The **guard** check allows it to work with `_.map`.
     * @method initial
     * <pre>
     _.initial([5, 4, 3, 2, 1]);
     => [5, 4, 3, 2]
     * </pre>
     * @param  {Array} array 对象数组
     * @param  {Number} n (optional) 排除的后几个元素数量，为空默认为1.
     * @param  {Object} guard (optional) 设置为true会返回第一个元素
     * @return {Array} 返回排除过的数据集合
     */
    /**
     * 返回数组里的后面的n个元素。
     * Get the last element of an array. Passing **n** will return the last N values in the array. The **guard** check allows it to work with `_.map`.
     * @method last
     * <pre>
     _.last([5, 4, 3, 2, 1]);
     => 1
     * </pre>
     * @param  {Array} array 对象数组
     * @param  {Number} n (optional) 返回的后几个元素数量，为空默认为1.
     * @param  {Object} guard (optional) 设置为true会返回最后一个元素
     * @return {Array} 如果第二参数未定义或者定义了第三个参数，则返回最后一个元素，其他情况则返回n个随机元素的集合
     */
    /**
     * 返回数组中除了第n个元素外的其他全部元素。Aliased as `tail` or `drop`。
     * Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
     * Especially useful on the arguments object. Passing an **n** will return the rest N values in the array. The **guard** check allows it to work with `_.map`.
     * @method rest
     * <pre>
     _.rest([5, 4, 3, 2, 1]);
     => [4, 3, 2, 1]
     * </pre>
     * @param  {Array} array 对象数组
     * @param  {Number} n (optional) 从第几个元素后开始返回，为空默认为1.
     * @param  {Object} guard (optional) 设置为true会排除第一个元素
     * @return {Array} 返回排除了前几个元素的数据集合
     */
    /**
     * 返回一个除去所有false值的 array副本。在javascript中, false, null, 0, "", undefined 和 NaN 都是false值.
     * Trim out all falsy values from an array.
     * @method compact
     * <pre>
     _.compact([0, 1, false, 2, '', 3]);
     => [1, 2, 3]
     * </pre>
     * @param  {Array} array 对象数组
     * @return {Array} 返回排除了值为false的数据集合
     */
    /**
     * 将一个嵌套多层的数组array(嵌套可以是任何层数)转换为只有一层的数组。
     * Flatten out an array, either recursively (by default), or just one level.
     * @method flatten
     * <pre>
     _.flatten([1, [2], [3, [[4]]]]);
     => [1, 2, 3, 4];
     _.flatten([1, [2], [3, [[4]]]], true);
     => [1, 2, 3, [[4]]];
     * </pre>
     * @param  {Array} array 对象数组
     * @param  {Object} shallow (optional) 如果传递shallow参数，数组将只减少一维的嵌套。
     * @return {Array} 返回嵌套只有一层的对象，或者减少一维嵌套。
     */
    /**
     * 返回一个删除了指定数据的array副本。剔除的数据为目标数组后面的参数，全等条件。
     * Return a version of the array that does not contain the specified value(s).
     * @method without
     * <pre>
     _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);
     => [2, 3, 4]
     * </pre>
     * @param  {Array} array 目标数组
     * @return {Array} 返回剔除掉指定数据的数组
     */
    /**
     * 将一个数组按照一定的条件拆分成两个。
     * Split an array into two arrays: one whose elements all satisfy the given predicate, and one whose elements all do not satisfy the predicate.
     * @method partition
     * <pre>
     _.partition([1,2,3,4,5],function(item){return item >3 ;});
     => [[4,5],[1,2,3]]
     * </pre>
     * @param  {Array} array
     * @param  {Function} predicate 判断每一个元素，返回true还是false，根据返回值会将元素分到不同的数组里面
     * @param  {Object} context (optional) 如果传递了context参数，则把iterator绑定到context对象上
     * @return {Array} 返回一个长度为2的二维数组，一个数组内符合条件的数据，一个数组内为不符合条件的数据。
     */
    /**
     * 返回array去重后的副本, 使用全等条件.Aliased as `unique`。
     * Produce a duplicate-free version of the array. If the array has already been sorted, you have the option of using a faster algorithm.
     * Aliased as `unique`.
     * @method unique
     * <pre>
     _.uniq([1, 2, 1, 3, 1, 4]);
     => [1, 2, 3, 4]
     * </pre>
     * @param  {Array} array 对象数组
     * @param  {Boolean} isSorted (optional) 如果确定array已经排序, 那么给isSorted参数传递 true值, 此函数将运行的更快的算法。
     * @param  {Function} iterator (optional) 如果要处理对象元素, 传参iterator来获取要对比的属性.
     * @param  {Object} context (optional) 如果传递了context参数，则把iterator绑定到context对象上
     * @return {Array} 返回排过重的数组
     */
    /**
     * 返回传入的arrays（数组）并集：按顺序返回，数组的元素是唯一的，可以传入一个或多个 arrays（数组）
     * Produce an array that contains the union: each distinct element from all of the passed-in arrays.
     * @method union
     * <pre>
     _.union([1, 2, 3], [101, 2, 1, 10], [2, 1]);
     => [1, 2, 3, 101, 10]
     * </pre>
     * @return {Array} 合并了所有参数值的数组
     */
    /**
     * 返回传入arrays（数组）交集。结果中的每个值是存在于传入的每个arrays（数组）里。
     * Produce an array that contains every item shared between all the passed-in arrays.
     * @method intersection
     * <pre>
     _.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]);
     => [1, 2]
     * </pre>
     * @param  {Array} array 目标数组
     * @return {Array} 返回所有参数数组里面都包含的数值的集合
     */
    /**
     * 返回一个删除了指定数据的array副本。剔除的数据为参数数组中任一数组里面出现的元素。
     * Take the difference between one array and a number of other arrays.
     * Only the elements present in just the first array will remain.
     * @method difference
     * <pre>
     _.difference([1, 2, 3, 4, 5], [5, 2, 10]);
     => [1, 3, 4]
     * </pre>
     * @param  {Array} array 目标数组
     * @return {Array} 返回剔除掉指定数据的数组
     */
    /**
     * 将每个相应位置的arrays的值合并在一起。
     * Zip together multiple lists into a single array -- elements that share an index go together.
     * @method zip
     * <pre>
     _.zip(['moe', 'larry', 'curly'], [30, 40, 50], [true, false, false]);
     => [["moe", 30, true], ["larry", 40, false], ["curly", 50, false]]
     _.zip.apply(_, arrayOfRowsOfData);
     => arrayOfColumnsOfData
     * </pre>
     * @return {Array} 行转列之后的数组
     */
    /**
     * 将数组转换为对象。
     * Converts lists into objects. Pass either a single array of `[key, value]` pairs, or two parallel arrays of the same length -- one of keys, and one of the corresponding values.
     * @method object
     * <pre>
     _.object(['moe', 'larry', 'curly'], [30, 40, 50]);
     => {moe: 30, larry: 40, curly: 50}
     _.object([['moe', 30], ['larry', 40], ['curly', 50]]);
     => {moe: 30, larry: 40, curly: 50}
     * </pre>
     * @param  {Array} list 目标数组，可以是每一个元素为[key, value]格式的
     * @param  {Array} values (optional) 如果list参数是key的列表，此参数则为值的列表，长度和list一样
     * @return {Object}        返回一个对象
     */
    /**
     * 返回item在该 array 中的索引值，如果item不存在 array中就返回-1。使用原生的indexOf 函数，除非它失效。
     * If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),we need this function. Return the position of the first occurrence of an item in an array, or -1 if the item is not included in the array.
     * Delegates to **ECMAScript 5**'s native `indexOf` if available.
     * If the array is large and already in sort order, pass `true` for **isSorted** to use binary search.
     * @method indexOf
     * <pre>
     _.indexOf([1, 2, 3], 2);
     => 1
     * </pre>
     * @param  {Array}  array     目标数组
     * @param  {Object}  item     数组内要寻找的目标元素
     * @param  {Boolean} isSorted (optional) 知道数组已经排序，传递true给isSorted将更快的用二进制搜索；也可以传入数字，表示将从你给定的索性值开始搜索。
     * @return {Number}           返回目标元素在数组中的索引值
     */
    /**
     * 返回item在该 array 中的从最后开始的索引值，如果item不存在 array中就返回-1。如果支持原生的lastIndexOf，将使用原生的lastIndexOf函数。
     * Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
     * @method lastIndexOf
     * <pre>
     _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);
     => 4
     * </pre>
     * @param  {Array}  array     目标数组
     * @param  {Object}  item     数组内要寻找的目标元素
     * @param  {Number} from (optional) 将从你给定的索性值开始搜索。
     * @return {Number}           返回目标元素在数组中的索引值
     */
    /**
     * 一个用来创建整数灵活编号的列表的函数，便于each 和 map循环。
     * Generate an integer Array containing an arithmetic progression. A port of the native Python `range()` function. See [the Python documentation](http://docs.python.org/library/functions.html#range).
     * @method range
     * <pre>
     _.range(10);
     => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
     _.range(1, 11);
     => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
     _.range(0, 30, 5);
     => [0, 5, 10, 15, 20, 25]
     _.range(0, -10, -1);
     => [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]
     _.range(0);
     => []
     * </pre>
     * @param  {Number} start (optional) 默认为 0
     * @param  {Number} stop (optional)  决定返回的数据数量
     * @param  {Number} step (optional) 默认为 1,可设置为负数表示负增长
     * @return {Array}       返回一个从start 到stop的整数的列表
     */
    /**
     * 绑定函数 function 到对象 object 上
     * Create a function bound to a given object (assigning `this`, and arguments, optionally).
     * Delegates to **ECMAScript 5**'s native `Function.bind` if available.
     * @method bind
     * <pre>
     var func = function(greeting){ return greeting + ': ' + this.name };
     func = _.bind(func, {name: 'moe'}, 'hi');
     func();
     => 'hi: moe'
     * </pre>
     * @param  {Function} func  要执行的方法
     * @param  {Object} context 方法的执行者，对应func函数内的this
     * @param {Object} arguments (optional) 任意可选参数arguments 可以绑定到函数 function , 可以填充函数所需要的参数
     * @return {Object}         func执行的返回值
     */
    /**
     * 局部应用一个函数填充在任意数值的参数， 不改变其动态this值
     * Partially apply a function by creating a version that has had some of its arguments pre-filled, without changing its dynamic `this` context. _ acts as a placeholder, allowing any combination of arguments to be pre-filled.
     * @method partial
     * <pre>
     var add = function(a, b) { return a + b; };
     add5 = _.partial(add, 5);
     add5(10);
     => 15
     * </pre>
     * @param  {Function} func  要执行的方法
     * @param {Object} arguments (optional) 任意可选参数arguments可以绑定到函数function,可以填充函数所需要的参数
     * @return {Object}         func执行的返回值
     */
    /**
     * 把methodNames参数指定的方法绑定到object上，这些方法就会在对象的上下文环境中执行。绑定函数用作事件处理函数时非常便利，否则函数被调用时this一点用也没有。
     * Bind a number of an object's methods to that object. Remaining arguments are the method names to be bound. Useful for ensuring that all callbacks defined on an object belong to it.
     * @method bindAll
     * <pre>
     var buttonView = {
          label  : 'underscore',
          onClick: function(){ alert('clicked: ' + this.label); },
          onHover: function(){ console.log('hovering: ' + this.label); }
        };
     _.bindAll(buttonView, 'onClick', 'onHover');
     // When the button is clicked, this.label will have the correct value.
     jQuery('#underscore_button').bind('click', buttonView.onClick);
     * </pre>
     * @param  {Object} obj 目标对象
     * @param  {String} methodNames (optional) 如果不设置methodNames参数，对象上的所有方法都会被绑定。
     * @return {Object}     绑定后的目标对象
     */
    /**
     * Memoizes方法可以缓存某函数的计算结果。对于耗时较长的计算是很有帮助的。默认使用function的第一个参数作为key
     * Memoize an expensive function by storing its results.
     * @method memoize
     * <pre>
     var fibonacci = _.memoize(function(n) {
          return n < 2 ? n: fibonacci(n - 1) + fibonacci(n - 2);
        });
     * </pre>
     * @param  {Function} func  要执行的方法
     * @param  {Function} hasher (optional) 的返回值作为key存储函数的计算结果。
     * @return {Object}        返回缓存的结果
     */
    /**
     * 类似setTimeout，等待wait毫秒后调用function。
     * Delays a function for the given number of milliseconds, and then calls it with the arguments supplied.
     * @method delay
     * <pre>
     var log = _.bind(console.log, console);
     _.delay(log, 1000, 'logged later');
     => 'logged later' // Appears after one second.
     * </pre>
     * @param  {Function} func  要执行的方法
     * @param  {Number} wait 延迟执行的时间
     * @param  {Object} arguments (optional) 如果传递可选的参数arguments，当函数func执行时， arguments 会作为参数传入。
     * @return {Object}      返回执行的结果
     */
    /**
     * 延迟调用function直到当前调用栈清空为止，类似使用延时为1的setTimeout方法。对于执行开销大的计算和无阻塞UI线程的HTML渲染时候非常有用。
     * Defers a function, scheduling it to run after the current call stack has cleared.
     * @method defer
     * <pre>
     _.defer(function(){ alert('deferred'); });
     // Returns from the function before the alert runs.
     * </pre>
     * @param  {Function} func  要执行的方法
     * @param  {Object} arguments (optional) 如果传递可选的参数arguments，当函数func执行时，arguments 会作为参数传入。
     * @return {Object}      返回执行的结果
     */
    /**
     * 创建并返回一个像节流阀一样的函数，当重复调用函数的时候，最多每隔 wait毫秒调用一次该函数。 对于想控制一些触发频率较高的事件有帮助。
     * Returns a function, that, when invoked, will only be triggered at most once during a given window of time. Normally, the throttled function will run as much as it can, without ever going more than once per `wait` duration;
     * but if you'd like to disable the execution on the leading edge, pass `{leading: false}`. To disable execution on the trailing edge, ditto.
     * @method throttle
     * <pre>
     var throttled = _.throttle(updatePosition, 100);
     $(window).scroll(throttled);
     * </pre>
     * @param  {Function} func  要执行的方法
     * @param  {Number} wait    函数调用的间隔时间
     * @param  {Object} options (optional) 禁用第一次首先执行的话，传递{leading: false}，禁用最后一次执行的话，传递{trailing: false}。
     * @return {Object}      返回执行的结果
     */
    /**
     * 返回 function 函数的防反跳版本, 将延迟函数的执行(真正的执行)在函数最后一次调用时刻的 wait 毫秒之后. 对于必须在一些输入（多是一些用户操作）停止到达之后执行的行为有帮助。
     * Returns a function, that, as long as it continues to be invoked, will not be triggered. The function will be called after it stops being called for N milliseconds. If `immediate` is passed, trigger the function on the leading edge, instead of the trailing.
     * @method debounce
     * <pre>
     var lazyLayout = _.debounce(calculateLayout, 300);
     $(window).resize(lazyLayout);
     * </pre>
     * @param  {Function} func  要执行的方法
     * @param  {Number} wait    函数调用的延时时间
     * @param  {Boolean} immediate (optional) 传参 immediate 为 true 会让 debounce 在 wait 间隔之后 触发最后的函数调用而不是最先的函数调用. 在类似不小心点了提交按钮两下而提交了两次的情况下很有用.
     * @return {Object}      返回执行的结果
     */
    /**
     * 创建一个只能调用一次的函数。重复调用改进的方法也没有效果，只会返回第一次执行时的结果。 作为初始化函数使用时非常有用, 不用再设一个boolean值来检查是否已经初始化完成.
     * Returns a function that will be executed at most one time, no matter how often you call it. Useful for lazy initialization.
     * @method once
     * <pre>
     var initialize = _.once(createApplication);
     initialize();
     initialize();
     // Application is only created once.
     * </pre>
     * @param  {Function} func  要执行的方法
     * @return {Object}      返回执行的结果
     */
    /**
     * 将第一个函数 function 封装到函数 wrapper 里面, 并把函数 function 作为第一个参数传给 wrapper. 这样可以让 wrapper 在 function 运行之前和之后 执行代码, 调整参数然后附有条件地执行.
     * Returns the first function passed as an argument to the second,allowing you to adjust arguments, run code before and after, and conditionally execute the original function.
     * @method wrap
     * <pre>
     var hello = function(name) { return "hello: " + name; };
     hello = _.wrap(hello, function(func) {
          return "before, " + func("moe") + ", after";
        });
     hello();
     => 'before, hello: moe, after'
     * </pre>
     * @param  {Function} func  要执行的方法
     * @param  {Function} wrapper 外围方法，func将会作为此方法的第一个参数，可以在这个方法里面有条件的调用func
     * @return {Object}      返回执行的结果
     */
    /**
     * 返回函数集 functions 组合后的复合函数, 也就是一个函数执行完之后把返回的结果再作为参数赋给下一个函数来执行. 以此类推. 在数学里, 把函数 f(), g(), 和 h() 组合起来可以得到复合函数 f(g(h())).
     * Returns a function that is the composition of a list of functions, each consuming the return value of the function that follows.
     * @method compose
     * <pre>
     var greet    = function(name){ return "hi: " + name; };
     var exclaim  = function(statement){ return statement.toUpperCase() + "!"; };
     var welcome = _.compose(greet, exclaim);
     welcome('moe');
     => 'hi: MOE!
     * </pre>
     * @param  {Function} func (optional) 任何个参数func将会被嵌套进来执行，后一个func的返回值作为前一个func的参数
     * @return {Object}      返回执行的结果
     */
    /**
     * 创建一个函数, 只有在运行了times次之后才有效果. 在处理同组异步请求返回结果时, 如果你要确保同组里所有异步请求完成之后才 执行这个函数, 这将非常有用.
     * Returns a function that will only be executed after being called N times.
     * @method after
     * <pre>
     var renderNotes = _.after(notes.length, render);
     _.each(notes, function(note) {
          note.asyncSave({success: renderNotes});
        });
     // renderNotes is run once, after all notes have saved.
     * </pre>
     * @param  {Number} times 函数执行的次数
     * @param  {Function} func  函数执行次数到达之后真正触发的事件
     * @return {Object}      返回执行的结果
     */
    /**
     * 获取object对象所有的属性名称。
     * Retrieve the names of an object's properties.
     * Delegates to **ECMAScript 5**'s native `Object.keys`
     * @method keys
     * <pre>
     _.keys({one: 1, two: 2, three: 3});
     => ["one", "two", "three"]
     * </pre>
     * @param  {Object} obj 目标对象
     * @return {Array}     目标对象的属性名称
     */
    /**
     * 返回object对象所有的属性值。
     * Retrieve the values of an object's properties.
     * @method values
     * <pre>
     _.values({one: 1, two: 2, three: 3});
     => [1, 2, 3]
     * </pre>
     * @param  {Object} obj 目标对象
     * @return {Array}     目标对象的属性值
     */
    /**
     * 把一个对象转变为一个[key, value]形式的数组。
     * Convert an object into a list of `[key, value]` pairs.
     * @method pairs
     * <pre>
     _.pairs({one: 1, two: 2, three: 3});
     => [["one", 1], ["two", 2], ["three", 3]]
     * </pre>
     * @param  {Object} obj 目标对象
     * @return {Array}      返回数组，每个元素都是属性名和属性值组成。
     */
    /**
     * 返回一个object副本，使其键（keys）和值（values）对换。对于这个操作，必须确保object里所有的值都是唯一的且可以序列号成字符串.
     * Invert the keys and values of an object. The values must be serializable.
     * @method invert
     * <pre>
     _.invert({Moe: "Moses", Larry: "Louis", Curly: "Jerome"});
     => {Moses: "Moe", Louis: "Larry", Jerome: "Curly"};
     * </pre>
     * @param  {Object} obj 目标对象
     * @return {Object}      转换过属性名和属性值的对象。
     */

    /**
     * 返回一个对象里所有的方法名, 而且是已经排序的 。Aliased as `methods`。
     * Return a sorted list of the function names available on the object.
     * Aliased as `methods`
     * @method functions
     * <pre>
     _.functions(_);
     => ["all", "any", "bind", "bindAll", "clone", "compact", "compose" ...
     * </pre>
     * @param  {Object} obj 目标对象
     * @return {Array}      返回数组，每个元素是属性值为函数的属性名称。
     */

    /**
     * 复制source对象中的所有属性覆盖到destination对象上，并且返回 destination 对象. 复制是按顺序的, 所以后面的对象属性会把前面的对象属性覆盖掉(如果有重复).
     * Extend a given object with all the properties in passed-in object(s).
     * @method extend
     * <pre>
     _.extend({name: 'moe'}, {age: 50});
     => {name: 'moe', age: 50}
     * </pre>
     * @param  {Object} obj 目标参数
     * @param  {Object} objs (optional) 一些列的复制对象，最终这些对象的属性都附加到第一个对象上
     * @return {Object}     返回第一个对象(目标对象)
     */

    /**
     * 返回一个object副本，只过滤出keys(有效的键组成的数组)参数指定的属性值。
     * Return a copy of the object only containing the whitelisted properties.
     * @method pick
     * <pre>
     _.pick({name: 'moe', age: 50, userid: 'moe1'}, 'name', 'age');
     => {name: 'moe', age: 50}
     * </pre>
     * @param  {Object} obj 目标对象
     * @param  {Object} keys (optional) 一些列的属性key，最终obj对象的这些属性都会被提炼到返回副本里面
     * @return {Object}     从目标对象中返回指定keys的副本对象
     */

    /**
     * 返回一个object副本，只过滤出除去keys(有效的键组成的数组)参数指定的属性值。
     * Return a copy of the object without the blacklisted properties.
     * @method omit
     * <pre>
     _.omit({name: 'moe', age: 50, userid: 'moe1'}, 'userid');
     => {name: 'moe', age: 50}
     * </pre>
     * @param  {Object} obj 目标对象
     * @param  {Object} keys (optional) 一些列的属性key，最终obj对象的这些属性都会在返回的副本对象里面剔除
     * @return {Object}     从目标对象中返回不含指定keys的副本对象
     */

    /**
     * 用defaults对象填充object中undefined属性。并且返回这个object。一旦这个属性被填充，再使用defaults方法将不会有任何效果。
     * Fill in a given object with default properties.
     * @method defaults
     * <pre>
     var iceCream = {flavor: "chocolate"};
     _.defaults(iceCream, {flavor: "vanilla", sprinkles: "lots"});
     => {flavor: "chocolate", sprinkles: "lots"}
     * </pre>
     * @param  {Object} obj 目标对象
     * @param  {Object} defaults (optional) 一些列的复制对象，会按顺序将obj中没有的属性加上
     * @return {Object}     返回一个被填充后的对象
     */

    /**
     * 创建 一个浅复制（浅拷贝）的克隆object。任何嵌套的对象或数组都通过引用拷贝，不会复制。
     * Create a (shallow-cloned) duplicate of an object.
     * @method clone
     * <pre>
     _.clone({name: 'moe'});
     => {name: 'moe'};
     * </pre>
     * @param  {Object} obj 目标对象
     * @return {Object}     目标对象的副本
     */

    /**
     * 用 object作为参数来调用函数interceptor，然后返回object。这种方法的主要意图是作为函数链式调用 的一环, 为了对此对象执行操作并返回对象本身。
     * Invokes interceptor with the obj, and then returns obj.
     * The primary purpose of this method is to "tap into" a method chain, in order to perform operations on intermediate results within the chain.
     * @method tap
     * <pre>
     _.chain([1,2,3,200])
     .filter(function(num) { return num % 2 == 0; })
     .tap(alert)
     .map(function(num) { return num * num })
     .value();
     => // [2, 200] (alerted)
     => [4, 40000]
     * </pre>
     * @param  {Object} obj
     * @param  {Function} interceptor
     * @return {Object}  obj
     */

    /**
     * 执行两个对象之间的优化深度比较，确定他们是否应被视为相等。
     * Perform a deep comparison to check if two objects are equal.
     * @method isEqual
     * <pre>
     var moe   = {name: 'moe', luckyNumbers: [13, 27, 34]};
     var clone = {name: 'moe', luckyNumbers: [13, 27, 34]};
     moe == clone;
     => false
     _.isEqual(moe, clone);
     => true
     * </pre>
     * @param  {Object}  a 源对象
     * @param  {Object}  b 目标对象
     * @return {Boolean}   两对象值是否相等
     */
    /**
     * 如果object 不包含任何值(没有可枚举的属性)，返回true。也可以判断字符串或者数组的长度为0
     * Is a given array, string, or object empty?
     * An "empty" object has no enumerable own-properties.
     * @method isEmpty
     * <pre>
     _.isEmpty([1, 2, 3]);
     => false
     _.isEmpty({});
     => true
     * </pre>
     * @param  {Object}  obj 目标对象
     * @return {Boolean}    目标对象是否为空值
     */
    /**
     * 如果object是一个DOM元素，返回true。属性nodeType为1表示为element对象
     * Is a given value a DOM element?
     * @method isElement
     * <pre>
     _.isElement(jQuery('body')[0]);
     => true
     * </pre>
     * @param  {Object}  obj 目标对象
     * @return {Boolean} 是否为dom对象
     */
    /**
     * 如果object是一个数组，返回true。如果存在原生的Array.isArray方法，就用原生方法来代替。
     * Is a given value an array?
     * Delegates to ECMA5's native Array.isArray
     * @method isArray
     * <pre>
     (function(){ return _.isArray(arguments); })();
     => false
     _.isArray([1,2,3]);
     => true
     * </pre>
     * @param  {Object}  obj 目标对象
     * @return {Boolean} 目标对象是否为数组
     */
    /**
     * 如果object是一个对象，返回true。需要注意的是JavaScript数组和函数是对象，字符串和数字不是。
     * Is a given variable an object?
     * @method isObject
     * <pre>
     _.isObject({});
     => true
     _.isObject(1);
     => false
     * </pre>
     * @param  {Object}  obj 目标对象
     * @return {Boolean}     true or false
     */
    /**
     * 如果object是一个参数对象，返回true
     * Is a given variable an arguments?
     * @method isArguments
     * <pre>
     (function(){ return _.isArguments(arguments); })(1, 2, 3);
     => true
     _.isArguments([1,2,3]);
     => false
     * </pre>
     * @param {Object}  obj 目标对象
     * @return {Boolean}    true or false
     */
    /**
     * 如果object是一个函数对象，返回true
     * Is a given variable a function?
     * @method isFunction
     * <pre>
     _.isFunction(alert);
     => true
     * </pre>
     * @param {Object}  obj 目标对象
     * @return {Boolean}    true or false
     */
    /**
     * 如果object是一个字符串，返回true
     * Is a given variable a String?
     * @method isString
     * <pre>
     _.isString("moe");
     => true
     * </pre>
     * @param {Object}  obj 目标对象
     * @return {Boolean}    true or false
     */
    /**
     * 如果object是一个数值，返回true, 包括 NaN
     * Is a given variable a number?
     * @method isNumber
     * <pre>
     _.isNumber(8.4 * 5);
     => true
     * </pre>
     * @param {Object}  obj 目标对象
     * @return {Boolean}    true or false
     */
    /**
     * 如果object是一个日期时间，返回true
     * Is a given variable a date?
     * @method isDate
     * <pre>
     _.isDate(new Date());
     => true
     * </pre>
     * @param {Object}  obj 目标对象
     * @return {Boolean}    true or false
     */
    /**
     * 如果object是一个正则表达式，返回true
     * Is a given variable a regExp?
     * @method isRegExp
     * <pre>
     _.isRegExp(/moe/);
     => true
     * </pre>
     * @param {Object}  obj 目标对象
     * @return {Boolean}    true or false
     */
    /**
     * 如果object是一个有限的数字，返回true。
     * Is a given object a finite number?
     * @method isFinite
     * <pre>
     _.isFinite(-101);
     => true
     _.isFinite(-Infinity);
     => false
     * </pre>
     * @param  {Object}  obj 目标对象
     * @return {Boolean}     true or false
     */
    /**
     * 如果object是数组或者NaN，返回true。和原生的isNaN 函数不一样，如果变量是undefined，原生的isNaN 函数也会返回 true
     * Is the given value `NaN`? (NaN is the only number which does not equal itself).
     * @method isNaN
     * <pre>
     _.isNaN(NaN);
     => true
     isNaN(undefined);
     => true
     _.isNaN(undefined);
     => false
     * </pre>
     * @param  {Object}  obj 目标对象
     * @return {Boolean}     true or false
     */
    /**
     * 如果object是一个布尔值，返回true。
     * Is a given value a boolean?
     * @method isBoolean
     * <pre>
     _.isBoolean(null);
     => false
     * </pre>
     * @param  {Object}  obj 目标对象
     * @return {Boolean}     true or false
     */
    /**
     * 如果object的值是 null，返回true。
     * Is a given value equal to null?
     * @method isNull
     * <pre>
     _.isNull(null);
     => true
     _.isNull(undefined);
     => false
     * </pre>
     * @param  {Object}  obj 目标对象
     * @return {Boolean}     true or false
     */

    /**
     * 如果value是undefined，返回true。
     * Is a given variable undefined?
     * @method isUndefined
     * <pre>
     _.isUndefined(window.missingVariable);
     => true
     * </pre>
     * @param  {Object}  obj 目标对象
     * @return {Boolean}     true or false
     */

    /**
     * 对象是否包含给定的键吗？等同于object.hasOwnProperty(key)，但是使用hasOwnProperty 函数的一个安全引用，以防意外覆盖。
     * Shortcut function for checking if an object has a given property directly on itself (in other words, not on a prototype).
     * @method has
     * <pre>
     _.has({a: 1, b: 2, c: 3}, "b");
     => true
     * </pre>
     * @param  {Object} obj 目标对象
     * @param  {String}  key 目标的属性名称
     * @return {Boolean}     对象是否拥有属性true or false
     */

    /**
     * 返回与传入参数相等的值. 相当于数学里的: f(x) = x, 在Underscore里被用作默认的迭代器iterator.
     * Keep the identity function around for default iterators.
     * @method identity
     * <pre>
     var moe = {name: 'moe'};
     moe === _.identity(moe);
     => true
     * </pre>
     * @param  {Object} value 传入的值
     * @return {Object} 返回传入的值
     */

    /**
     * 返回一个函数，函数的返回值就是传入的参数。 相当于x=f(x)();
     * @method constant
     * <pre>
     var obj={a:11};
     var func=_.constant(a);
     func().a
     => 11
     * </pre>
     * @param  {Object} value 传入的值
     * @return {Function}     返回无参函数，函数返回值为传入的值。
     */

    /**
     * 返回一个函数，在函数的参数对象里面取key对应的值
     * Returns a function that will itself return the key property of any passed-in object.
     * @method property
     * <pre>
     var moe = {name: 'moe'};
     'moe' === _.property('name')(moe);
     => true
     * </pre>
     * @param  {String} key 属性名称
     * @return {Function}   返回函数，函数内会取参数对象的属性名用来返回属性值
     */

    /**
     * 返回一个函数，若函数的参数如果都具有attr中一样的属性，则返回true。
     * Returns a predicate function that will tell you if a passed in object contains all of the key/value properties present in attrs.
     * @method mathes
     * <pre>
     var ready = _.matches({selected: true, visible: true});
     var readyToGoList = _.filter(list, ready);
     * </pre>
     * @param  {Object} attrs 需要判断的属性对象
     * @return {Function}      返回函数，函数内会判断参数对象是否都包含attr的属性值，返回true or false
     */

    /**
     * 调用给定的迭代函数n次,每一次传递index参数，调用迭代函数。 注意: 本例使用 链式语法。
     * Run a function **n** times.
     * @method times
     * <pre>
     _(3).times(function(n){ genie.grantWishNumber(n); });
     => alert(n) 分别打印出为0,1,2
     * </pre>
     * @param  {Number} n        函数调用的次数，每调用一次，index加1，index从0开始
     * @param  {Function} iterator 执行函数
     * @param  {Object} context (optional) 如果传递了context参数，则把iterator绑定到context对象上
     * @return {Array}          返回一个长度为n的数组，每个值为每次调用函数的返回值
     */

    /**
     * 返回一个min 和 max之间的随机整数。
     * Return a random integer between min and max (inclusive).
     * @method random
     * <pre>
     _.random(0, 100);
     => 42
     * </pre>
     * @param  {Number} min (optional) 返回的随机整数的最小范围，此参数不传，默认为0，
     * @param  {Number} max (optional) 返回的随机整数的最大范围
     * @return {Number}     返回一个范围内的整数
     */

    /**
     * 返回当前时间的时间戳
     * A (possibly faster) way to get the current timestamp as an integer.
     * @method now
     * <pre>
     _.now();
     => 1393573920327
     * </pre>
     * @return {Number}     返回时间戳
     */

    /**
     * 转义HTML字符串，替换&, <, >, ", ', and /字符。
     * Functions for escaping strings from HTML interpolation.
     * @method escape
     * <pre>
     _.escape('Curly, Larry & Moe');
     => "Curly, Larry &amp; Moe"
     * </pre>
     * @param {String}  string 目标字符串
     * @return {String}        转义后的字符串
     */
    /**
     * 和**{@link fish.desktop.fish#escape escape}**相反。转义HTML字符串，替换&, &lt;, &gt;, &quot;, &#x27;, and &#x2F;字符。
     * Functions for unescaping strings to HTML interpolation.
     * @method unescape
     * <pre>
     _.unescape('Curly, Larry &amp; Moe');
     => "Curly, Larry & Moe"
     * </pre>
     * @param {String}  string 目标字符串
     * @return {String}        还原转义后的字符串，
     */
    /**
     * 如果对象 object 中的属性 property 是函数, 则调用它, 否则, 返回它。
     * If the value of the named `property` is a function then invoke it with the `object` as context; otherwise, return it.
     * @method result
     * <pre>
     var object = {cheese: 'crumpets', stuff: function(){ return 'nonsense'; }};
     _.result(object, 'cheese');
     => "crumpets"
     _.result(object, 'stuff');
     => "nonsense"
     * </pre>
     * @param  {Object} object   目标对象
     * @param  {String} property 属性名
     * @return {Object}          返回属性对应的值，或者属性对应的方法执行的返回值
     */
    /**
     * 您可以用您自己的实用程序函数扩展Underscore。传递一个 {name: function}定义的哈希添加到Underscore对象，以及面向对象封装。
     * Add your own custom functions to the Underscore object.
     * @method mixin
     * <pre>
     _.mixin({
          capitalize: function(string) {
            return string.charAt(0).toUpperCase() + string.substring(1).toLowerCase();
          }
        });
     _("fabio").capitalize();
     => "Fabio"
     * </pre>
     * @param  {Object} obj 定义为{name: function}的对象附加到Underscore原型链上，支持Underscore对象之间调用name()方法来执行function
     * @return {Object}     将方法定义到Underscore原型链上
     */
    /**
     * 为需要的客户端模型或DOM元素生成一个全局唯一的id。
     * Generate a unique integer id (unique within the entire client session).
     * Useful for temporary DOM ids.
     * @method uniqueId
     * <pre>
     _.uniqueId('contact_');
     => 'contact_104'
     * </pre>
     * @param  {String} prefix (optional) 如果prefix参数存在， id 将附加给它。
     * @return {String}        生成全局唯一的字符串
     */

    /**
     * 对一个对象使用 chain 方法, 会把这个对象封装并 让以后每次方法的调用结束后都返回这个封装的对象.支持链式语法
     * Add a "chain" function, which will delegate to the wrapper.
     * @method chain
     * <pre>
     var stooges = [{name: 'curly', age: 25}, {name: 'moe', age: 21}, {name: 'larry', age: 23}];
     var youngest = _.chain(stooges)
     .sortBy(function(stooge){ return stooge.age; })
     .map(function(stooge){ return stooge.name + ' is ' + stooge.age; })
     .first()
     .value();
     => "moe is 21"
     * </pre>
     * @param  {Object} obj 目标对象
     * @return {Object}     返回链式对象
     */
    /**
     * 获取封装对象的最终值.
     * Extracts the result from a wrapped and chained object.
     * @method value
     * <pre>
     _([1, 2, 3]).value();
     => [1, 2, 3]
     * </pre>
     * @return {Object} 返回封装对象的原始值
     */

}(fish, _);
!function(fish, _, Backbone) {
    _.extend(fish, _.omit(Backbone, 'ajax', 'View'));
    /**
     * @method extend
     * 使用fish.View.extend({//...})的方式来扩展自己的View类。
     */
}(fish, _, Backbone);

/**
 * 基于Backbone.View进行扩展
 *
 * 如果使用beforeRender，afterRender等方法，则需要配置
 * <pre>
 *     fish.View.configure({manage: true});
 * </pre>
 *  如果是弹出View，可以使用fish.popupView
 *
 *<pre>
 *   fish.popupView({
 *     url: 'modules/user/userMgr',
 *     width: "60%"
 *    });
 *</pre>
 * @class fish.View
 */

!function () {
    "use strict";

    // Cache these methods for performance.
    var aConcat = Array.prototype.concat;
    var aPush = Array.prototype.push;
    var aSplice = Array.prototype.splice;

    fish.View = Backbone.View.extend({
        // Can be used to supply a different deferred implementation.
        deferred: function() {
            return $.Deferred();
        },

        // Return a deferred for when all promises resolve/reject.
        when: function (promises) {
            return $.when.apply(null, promises);
        },

        //覆盖Backbone默认的构造函数
        constructor: function (options) {
            options = options || {};
            if (options.manage || this.manage) {
                fish.View.setupView(this, options);
            }

            Backbone.View.apply(this, arguments);
        },
        /**
         * 视图渲染，覆盖Backbone原生的render方法，如果设置manage为true时，请勿重写该方法
         * @chainable
         */
        render: function () {
            var root = this;
            var manager = root.__manager__;
            var parent = manager.parent;
            var rentManager = parent && parent.__manager__;
            var def = root.deferred();

            // Triggered once the render has succeeded.
            function resolve() {

                // Insert all subViews into the parent at once.
                fish.each(manager.views, function (views, selector) {
                    // Fragments aren't used on arrays of subviews.
                    if (fish.isArray(views)) {
                        root._htmlBatch(root, views, selector);
                    }
                });

                // If there is a parent and we weren't attached to it via the previous
                // method (single view), attach.
                if (parent && !manager.insertedViaFragment) {
                    if (!$.contains(parent.el, root.el)) {
                        // Apply the partial using parent's html() method.
                        parent._partial(parent.$el, root.$el, rentManager, manager);
                    }
                }

                // Set this View as successfully rendered.
                root.hasRendered = true;
                manager.renderInProgress = false;

                delete manager.triggeredByTimer;

                // Reusable function for triggering the afterRender callback and event.
                function completeRender() {
                    //#501 兼容层
                    fish.isFunction(root._afterRender) && root._afterRender.call(root, root);

                    fish.isFunction(root.afterRender) && root.afterRender.call(root, root);

                    root.trigger("afterRender", root);
                }

                // If the parent is currently rendering, wait until it has completed
                // until calling the nested View's `afterRender`.
                if (rentManager && ( rentManager.renderInProgress)) {
                    // Wait until the parent View has finished rendering, which could be
                    // asynchronous, and trigger afterRender on this View once it has
                    // completed.
                    parent.once("afterRender", completeRender);
                } else {
                    // This View and its parent have both rendered.
                    completeRender();
                }

                return def.resolveWith(root, [root]);
            }

            // Actually facilitate a render.
            function actuallyRender() {

                // The `_viewRender` method is broken out to abstract away from having
                // too much code in `actuallyRender`.
                root.__render();

                // If there are no children to worry about, complete the render
                // instantly.
                if (!fish.keys(manager.views).length) {
                    return resolve();
                }

                var promises = fish.map(manager.views, function (view, selector) {
                    var insert = fish.isArray(view);

                    // If items are being inserted, they will be in a non-zero length
                    // Array.
                    if (insert && view.length) {
                        // Mark each subview's manager so they don't attempt to attach by
                        // themselves.  Return a single promise representing the entire
                        // render.
                        return root.when(fish.map(view, function (subView) {
                            subView.__manager__.insertedViaFragment = true;
                            return subView.render().__manager__.renderDeferred;
                        }));
                    }

                    return !insert ? view.render().__manager__.renderDeferred : view; //非数组类型直接渲染
                });

                root.when(promises).done(resolve);
            }

            // Mark this render as in progress. This will prevent
            // afterRender from being fired until the entire chain has rendered.
            manager.renderInProgress = true;

            // Start the render.
            // Register this request & cancel any that conflict.
            root._registerRenderView(actuallyRender);

            manager.renderDeferred = def;

            // Return the actual View for chainability purposes.
            return root;
        },

        __render: function () {
            // Ensure all nested Views are properly scrubbed if re-rendering.
            this.hasRendered && this._removeViews();

            fish.isFunction(this.beforeRender) && this.beforeRender.call(this, this);

            this.trigger("beforeRender", this);

            //#501
            if (fish.isFunction(this._render)) {
                this._render();
            } else if (!fish.isEmpty(this.template)) {
                this._viewRender(this.serialize, this.template);
            }
            this.trigger('render', this);
        },

        //渲染视图，如果有模板，自动根据模板编译出html
        _viewRender: function (context, template) {
            var rendered;

            if (fish.isFunction(context)) {
                context = context.call(this);
            }

            if (template) {
                rendered = template.call(this, context);
            }
            this.$el.empty().append(rendered);
        },

        /**
         * @method beforeRender 渲染之前处理函数
         */

        /**
         * @method afterRender 渲染之后处理函数
         */

        /**
         * @method cleanup 移除处理函数
         */

        /**
         * @method configure 配置函数，通过配置进行全局设置，比如传递{manage: true}，让fish.View支持扩展功能
         * @param {Object} options 参数对象
         * @param {Boolean} [options.manage=false] 如果为true，fish.View将进行托管View生命周期
         * @param {Boolean} [options.syncRender=false] 如果为true,则调用render()可返回$el属性
         * @static
         */

        /**
         * @cfg {Boolean} manage 是否采用扩展View新功能，设置为true，才能使用views/serialize/template/options等属性和方法
         */

        /**
         * @cfg {Function} template 模板函数
         */

        /**
         * @cfg {Function} serialize 提供模板数据，默认是从this.model里获取
         */
        serialize: function () {
            return this.model ? fish.clone(this.model.attributes) : {};
        },

        //插入或更新本视图内部的局部视图
        _partial: function ($root, $el, rentManager, manager) {
            // If selector is specified, attempt to find it.
            if (manager.selector) {
                $root = $root.find(manager.selector);
            }

            // Use the insert method if the parent's `insert` argument is true.
            if (rentManager.insert) {
                $root.append($el);
            } else {
                $root.empty().append($el);
            }
        },

        // 处理一个选择器中含有多个视图的情况
        // '.header':[new HeaderView(), new HeaderView2()]
        _htmlBatch: function (rootView, subViews, selector) {
            // Shorthand the parent manager object.
            var rentManager = rootView.__manager__;
            // Create a simplified manager object that tells partial() where
            // place the elements.
            var manager = {selector: selector};

            // Get the elements to be inserted into the root view.
            var els = fish.reduce(subViews, function (memo, sub) {
                // If there is an element and it doesn't already exist in our structure
                // attach it.
                if (sub.el) {
                    memo.push(sub.el);
                }

                return memo;
            }, []);

            // Use partial to apply the elements. Wrap els in jQ obj for cheerio.
            return this._partial(rootView.$el, $(els), rentManager, manager);
        },

        // 待渲染的节点不存在
        _subNodeNotExist: function (selector) {
            console.error('Selector[' + selector + '] is not in current view container, please check.');
        },

        /**
         * 渲染子视图(自己)，当需要更新子视图时调用
         * @param views {Array|String} 子视图,可选
         * @chainable
         */
        renderViews: function (views) {
            var root = this;
            var manager = root.__manager__;
            var newDeferred = root.deferred();

            if (views && fish.isArray(views)) {
                views = fish.chain(views);
            } else {
                views = this.getViews(views);
            }

            var promises = views.map(function(view) {
                return view.render().__manager__.renderDeferred;
            }).value();

            manager.renderDeferred = newDeferred.promise();

            root.when(promises).then(function() {
                newDeferred.resolveWith(root, [root]);
            });

            return this;
        },

        /**
         * 通过RequireJS动态加载子视图(如果原先已有View，则替换)
         *
         * @param {String | Object} options 为String时相当于options.url；Object时可以包含以下属性：
         * @param {String} options.selector 子视图选择器
         * @param {String} options.url 子视图路径
         * @param {String} options.insert 是否是插入子视图，默认false,替换原先的视图节点
         * @param {Function} options.callback 回调函数，可选
         * @param {Object} options.viewOption 子视图参数，如model，'collection', 'attributes', 'className'等，可选
         * @returns {Promise}
         */
        requireView: function (options) {
            if ($.type(options) === 'string') {
                options = {url: options};
            }

            if (!options.url) {
                console.error("requireView方法至少提供一个url参数");
                return;
            }

            if (!window.require) {
                console.error('requireView method depends on RequierJS, please check!');
                return;
            }
            var me = this, deferred = $.Deferred();
            window.require([options.url], function (View) {
                var viewInstance = new View(options.viewOption);
                //必须在模板渲染之后
                viewInstance.once('afterRender', function () {
                    fish.isFunction(options.callback) && options.callback.call(me, viewInstance);
                    deferred.resolve(viewInstance);
                });

                if (options.selector) {
                    me.setView(options.selector, viewInstance, options.insert);
                } else {
                    me.setView(viewInstance, options.insert);//replace all
                }

                me.renderViews([viewInstance]);
            });

            return deferred.promise();
        },

        /**
         * 插入子视图
         *
         * @param {String} selector 选择器
         * @param {Object} view 子视图
         * returns {Object} 视图
         */
        insertView: function (selector, view) {
            if (view) {
                return this.setView(selector, view, true);
            }

            return this.setView(selector, true);
        },

        /**
         * 插入子视图集合
         *
         * @param {Array|Object} views
         * @chainable
         */
        insertViews: function (views) {
            if (fish.isArray(views)) {
                return this.setViews({"": views});
            }

            fish.each(views, function (view, selector) {
                views[selector] = fish.isArray(view) ? view : [view];
            });

            return this.setViews(views);
        },

        /**
         * 根据过滤条件返回查找视图对象
         * @param {String|Object|Function} fn 过滤条件
         * @returns {Object} 视图对象
         */
        getView: function (fn) {
            if (fn == null) {
                fn = arguments[1];
            }
            return this.getViews(fn).first().value();
        },

        /**
         * 根据过滤条件返回查找视图集合
         * @param fn {String|Object|Function} 过滤条件
         * @returns {Array} 由underscore包装的视图集合
         */
        getViews: function (fn) {
            var views;

            if (typeof fn === "string") {
                views = this.__manager__.views[fn] || [];
                return fish.chain([].concat(views));
            }

            views = fish.chain(this.__manager__.views).map(function (view) {
                return fish.isArray(view) ? view : [view];
            }, this).flatten();

            if (typeof fn === "object") {
                return views.where(fn);
            }

            return typeof fn === "function" ? views.filter(fn) : views;
        },

        /**
         * 根据过滤条件返回移除视图集合
         * @param fn {String|Object|Function} 过滤条件
         * @returns {Array} 由underscore包装的视图集合
         */
        removeView: function (fn) {
            var views = this.getViews(fn).each(function (nestedView) {
                nestedView.remove();
            });

            return views.value();
        },

        /**
         * 插入或者替换子视图
         * @param {String} name 视图名称，这个参数不给默认为'',此时是替换整个视图
         * @param {Object} view 视图实例
         * @param {Boolean} insert 插入还是替换
         * @returns {Object} 视图
         */
        setView: function (name, view, insert) {
            var manager, selector;

            if (typeof name !== "string") {
                insert = view;
                view = name;
                name = "";
            }

            manager = view.__manager__;

            if (!manager) {
                throw new Error("The argument associated with selector '" + name +
                    "' is defined and a View.  Set `manage` property to true for " +
                    "Backbone.View instances.");
            }

            // alias parentView to __manager__.parent
            view.parentView = manager.parent = this;

            selector = manager.selector = name;

            //如果是整体替换需要先移除当前存在的所有子视图
            if (!insert) {
                if (this.getView(name) !== view) {
                    this.removeView(name);
                }
                return this.__manager__.views[selector] = view;
            }

            this.__manager__.views[selector] = aConcat.call([], this.__manager__.views[name] || [], view);

            this.__manager__.insert = true;

            return view;
        },

        /**
         * 替换子视图集合
         * @param {Array} views 视图集合
         * @chainable
         */
        setViews: function (views) {
            fish.each(views, function (view, name) {
                if (fish.isArray(view)) {
                    return fish.each(view, function (view) {
                        this.insertView(name, view);
                    }, this);
                }

                this.setView(name, view);
            }, this);

            return this;
        },

        // Ensure the cleanup function is called whenever remove is called.
        remove: function () {
            if (this.__manager__) {
                // Force remove itself from its parent.
                fish.View._removeView(this, true);

                // Call the original remove function.
                return this._remove.apply(this, arguments);
            }

            return Backbone.View.prototype.remove.apply(this, arguments);
        },

        // Register a view render
        _registerRenderView: function (callback) {
            var root = this;
            var manager = root.__manager__;
            var rentManager = manager.parent && manager.parent.__manager__;

            // Allow RAF processing to be shut off using `useRAF`:false.
            if (this.syncRender) {
                callback();
                return;
            }

            // Cancel any other renders on this view that are queued to execute.
            this._cancelQueuedRenderView();

            // Trigger immediately if the parent was triggered by Timer.
            // The flag propagates downward so this view's children are also
            // rendered immediately.
            if (rentManager && rentManager.triggeredByTimer) {
                return finish();
            }

            // Register this request with requestAnimationFrame.
            manager.timerID = setTimeout(finish, 0);

            function finish() {
                // Remove this ID as it is no longer valid.
                manager.timerID = null;

                // Set flag (will propagate to children) so they render
                // without waiting for Timer.
                manager.triggeredByTimer = true;

                callback();
            }
        },

        // Cancel any queued render requests.
        _cancelQueuedRenderView: function () {
            var root = this;
            var manager = root.__manager__;
            if (manager.timerID != null) {
                clearTimeout(manager.timerID);
            }
        }
    }, {
        // Static Properties
        // Remove all nested Views.
        _removeViews: function (root, force) {
            // Shift arguments around.
            if (typeof root === "boolean") {
                force = root;
                root = this;
            }

            // Allow removeView to be called on instances.
            root = root || this;

            // Iterate over all of the nested View's and remove.
            root.getViews().each(function (view) {
                // Force doesn't care about if a View has rendered or not.
                if (view.hasRendered || force) {
                    fish.View._removeView(view, force);
                }

                // call value() in case this chain is evaluated lazily
            }).value();
        },

        // Remove a single nested View.
        _removeView: function (view, force) {
            var parentViews;
            // Shorthand the managers for easier access.
            var manager = view.__manager__;
            var rentManager = manager.parent && manager.parent.__manager__;

            // In insert mode, remove views that do not have `keep` attribute set,
            // unless the force flag is set.
            if ((rentManager && rentManager.insert === true) || force) {
                // Clean out the events.
                fish.View.cleanViews(view);

                // Since we are removing this view, force subviews to remove
                view._removeViews(true);

                // Remove the View completely.
                view.$el.remove();

                // Cancel any pending renders, if present.
                view._cancelQueuedRenderView();

                // Bail out early if no parent exists.
                if (!manager.parent) {
                    return;
                }

                // Assign (if they exist) the sibling Views to a property.
                parentViews = rentManager.views[manager.selector];

                // If this is an array of items remove items that are not marked to
                // keep.
                if (fish.isArray(parentViews)) {
                    // Remove duplicate Views.
                    fish.each(fish.clone(parentViews), function (view, i) {
                        // If the managers match, splice off this View.
                        if (view && view.__manager__ === manager) {
                            aSplice.call(parentViews, i, 1);
                        }
                    });
                    if (fish.isEmpty(parentViews)) {
                        //delete it
                        delete rentManager.views[manager.selector];
                        manager.parent.trigger("empty", manager.selector);
                    }
                    return;
                }

                // Otherwise delete the parent selector.
                delete rentManager.views[manager.selector];
                manager.parent.trigger("empty", manager.selector);
            }
        },

        // Accept either a single view or an array of views to clean of all DOM
        // events internal model and collection references and all Backbone.Events.
        cleanViews: function (views) {
            // Clear out all existing views.
            fish.each(aConcat.call([], views), function (view) {
                // fire cleanup event to the attached handlers
                view.trigger("cleanup", view);

                // Remove all custom events attached to this View.
                view.off();

                // Automatically unbind `model`.
                if (view.model instanceof Backbone.Model) {
                    view.model.off(null, null, view);
                }

                // Automatically unbind `collection`.
                if (view.collection instanceof Backbone.Collection) {
                    view.collection.off(null, null, view);
                }

                // Automatically unbind events bound to this View.
                view.stopListening();

                // If a custom cleanup method was provided on the view, call it after
                // the initial cleanup is done
                if (fish.isFunction(view.cleanup)) {
                    view.cleanup();
                }
            });
        },

        //初始化视图，接受统一视图管理机制的管理
        setupView: function (views, options) {
            // Set up all Views passed.
            fish.each(aConcat.call([], views), function (view) {
                // If the View has already been setup, no need to do it again.
                if (view.__manager__) {
                    return;
                }

                var views,
                    proto = fish.View.prototype;

                // Ensure necessary properties are set.
                // defaults用来做属性拷贝，已经存在的key不会被覆盖掉。
                fish.defaults(view, {
                    // Internal state object used to store whether or not a View has been
                    // taken over by layout manager and if it has been rendered into the
                    // DOM.
                    __manager__: {
                        views: {}
                    },

                    // Add the ability to remove all Views.
                    _removeViews: fish.View._removeViews,

                    // Add the ability to remove itself.
                    _removeView: fish.View._removeView

                    // Mix in all fish.View prototype properties as well.
                }, fish.View.prototype);

                // Assign passed options.
                view.options = options;

                // By default the original Remove function is the Backbone.View one.
                view._remove = Backbone.View.prototype.remove;

                // If the user provided their own remove override, use that instead of
                // the default.
                if (view.remove !== proto.remove) {
                    view._remove = view.remove;
                    view.remove = proto.remove;
                }

                //#501，兼容已有render方法的情形
                if (view.render !== proto.render) {
                    view._render = view.render;
                    view.render = proto.render;
                }
                views = options.views || {};

                if (fish.keys(views).length) {
                    view.setViews(views);
                }
            });
        },

        configure: function (options) {
            fish.View.prototype.manage = options.manage === true;
            fish.View.prototype.syncRender = options.syncRender === true;
        }
    });

    /**
     * 弹出一个view，options中可以使用fish.popup中options参数如modal，height等等
     * options
     * {String} options.url 视图url，必选
     * {Function} options.close 对应popup.close方法
     * {Function} options.dismiss 对应popup.dismiss方法
     * {Function} options.callback(popup, view) 回调函数,popup：当前弹出窗；view当前视图;callback在afterRender事件之后触发
     * {Object} options.viewOption 子视图参数，如model，'collection', 'attributes', 'className'等，可选
     */
    fish.popupView = function (options) {
        if ($.type(options) === 'string' || (options instanceof fish.View)) {
            options = {url: options};
        }

        if (!options.url) {
            console.error("popupView方法至少提供一个url参数");
            return;
        }
        if (!window.require) {
            console.error('popupView method depends on RequierJS, please check!');
            return;
        }
        if (!fish.popup) {
            console.error('popupView method depends on fish.popup component');
            return;
        }

        if (fish.isString(options.url)) {
            window.require([options.url], function (View) {
                var viewInstance = new View($.extend({}, options.viewOption));
                // event order, beforeRender --> render --> afterRender  --> callback
                renderPopupView(viewInstance);
                viewInstance.render();
            });
        } else {
            //view 在页面中高度定制
            var viewInstance;
            if (options.url instanceof fish.View) { //fish.view 实例
                viewInstance = options.url;
            } else { //fish.view type
                var View = options.url;
                viewInstance = new View($.extend({}, options.viewOption));
            }
            // event order, beforeRender --> render --> afterRender  --> callback
            renderPopupView(viewInstance);
            viewInstance.render();
            return viewInstance;
        }

        function renderPopupView(viewInstance) {
            viewInstance.on('render', function () {
                var $popupView, $el = viewInstance.$el, cloneOpts = $.extend({}, options);
                delete cloneOpts.url;
                delete cloneOpts.content;

                $popupView = $el.hasClass('ui-dialog') ? $el : $el.addClass('ui-dialog');

                var popOpts = $.extend({}, {content: $popupView}, cloneOpts); // 这里可以加入初始参数
                var popup = fish.popup(popOpts);
                viewInstance.popup = popup; //注入popup property，如果视图想自己关闭自己

                var promise = popup.result;
                options.close && fish.isFunction(options.close) && promise.then(options.close);
                options.dismiss && fish.isFunction(options.dismiss) && promise.then(null, options.dismiss);

                promise.always(function () {
                    console.log('always remove popup View instance');
                    viewInstance.remove(); //移除body下的view
                });

            });

            //TODO对于grid需要调整位置（style="height:300px"会出现重叠现象）
            viewInstance.on('afterRender', function (view) {
                view.$el.position(view.$el.data('position'));
                if (fish.isFunction(options.callback)) {
                    options.callback.call(window, view.popup, viewInstance);
                }
            });
        }
    };


    //#501 兼容层
    fish.View = fish.View.extend({
        /**
         * @method _render
         * 渲染整体页面,如果页面不需要使用
         */
        _render: null,
        /**
         * @method _afterRender
         * 页面渲染之后
         * @deprecated 请使用afterRender
         */
        _afterRender: $.noop,
        /**
         * 获取子视图
         * @deprecated 请使用getView
         * @param {String} selector 选择器
         */
        findChildView: function (selector) {
            return this.getView(selector);
        },
        /**
         * 插入子视图并渲染
         * @deprecated 请使用setView
         * @param selector {String}  选择器
         * @param {View} viewInstance  视图实例
         */
        insertChildView: function (selector, viewInstance) {
            this.setView(selector, viewInstance);
            this.renderViews(selector);
        },
        /**
         * 插入子视图并渲染
         * @deprecated 请使用setView
         * @param {String} selector 选择器
         * @param {View} viewInstance 视图实例
         */
        addView: function (selector, viewInstance) {
            this.insertChildView(selector, viewInstance);
        },
        /**
         * 移除子视图
         * @deprecated 请使用removeView
         * @param {String} selector 选择器
         */
        removeChildView: function (selector) {
            this.removeView(selector);
        },
        /**
         * 替换子视图
         * @deprecated 请使用setView
         * @param {String} selector选择器
         * @param {View} viewInstance 视图实例
         */
        replaceChildView: function (selector, viewInstance) {
            this.setView(selector, viewInstance);
            this.renderViews(selector);
        }
    });
}();

/**
 * @class fish.desktop.fish
 */
! function(fish, Handlebars) {
    fish.compile = Handlebars.compile;
    /**
     * @since V1.4.3
     * @method compile
     * 用来把模板字符串编译成模板函数，模板采用双花括号取值语法{{}}，内置支持{{#each}}{{/each}}{{#if}}{{/if}}这样的语法。
     */

    //扩展Handlebars辅助工具, 用来做判断
    Handlebars.registerHelper('ifCond', function(v1, operator, v2, options) {
        switch (operator) {
            case "==":
                return (v1 == v2) ? options.fn(this) : options.inverse(this);
            case "!=":
                return (v1 != v2) ? options.fn(this) : options.inverse(this);
            case "===":
                return (v1 === v2) ? options.fn(this) : options.inverse(this);
            case "!==":
                return (v1 !== v2) ? options.fn(this) : options.inverse(this);
            case "&&":
                return (v1 && v2) ? options.fn(this) : options.inverse(this);
            case "||":
                return (v1 || v2) ? options.fn(this) : options.inverse(this);
            case "<":
                return (v1 < v2) ? options.fn(this) : options.inverse(this);
            case "<=":
                return (v1 <= v2) ? options.fn(this) : options.inverse(this);
            case ">":
                return (v1 > v2) ? options.fn(this) : options.inverse(this);
            case ">=":
                return (v1 >= v2) ? options.fn(this) : options.inverse(this);
            case "contains":
                return ((v1 + "").indexOf(v2 + "") != -1) ? options.fn(this) : options.inverse(this);
            case "notcontains":
                return ((v1 + "").indexOf(v2 + "") == -1) ? options.fn(this) : options.inverse(this);
            default:
                return options.inverse(this);
        }
    });

    Handlebars.registerHelper("math", function(lvalue, operator, rvalue, options) {
        lvalue = parseFloat(lvalue);
        rvalue = parseFloat(rvalue);

        return {
            "+": lvalue + rvalue,
            "-": lvalue - rvalue,
            "*": lvalue * rvalue,
            "/": lvalue / rvalue,
            "%": lvalue % rvalue
        }[operator];
    });


    Handlebars.registerHelper("select", function(selectedOpt, list, options) {
        var ret = "";

        for (var i = 0; i < list.length; i++) {
            ret = ret + "<option value='" + list[i] + "' " + ((selectedOpt == list[i]) ? "selected='selected' " : "") + ">" + list[i] + "</option>";
        }

        return ret;
    });

    Handlebars.registerHelper("addOne", function(index, options) {
        return parseInt(index) + 1;
    });

    Handlebars.registerHelper('isEven', function(value, options) {
        if ((value % 2) == 0) {
            return options.fn(this);
        } else {
            return options.inverse(this);
        }
    });

    //#579
    // 判断是否是数组
    Handlebars.registerHelper('isArray', function(v1, options) {
        if (fish.isArray(v1)) {
            return options.fn(this);
        }
    });

    // 递归调用
    var audaciousFn;
    Handlebars.registerHelper('recursive', function (children, options) {
        var out = '';
        if (options.fn !== undefined) {
            audaciousFn = options.fn;
        }
        $.each(children, function (i, child) {
            out = out + audaciousFn(child);
        });
        return out;
    });
}(fish, Handlebars);

/**
 * @class  fish.desktop.widget.Resize
 * 统一resize事件
 */
!function(factory) {
    if (typeof define === "function" && define.amd) {
        define('fish.resize', factory);
    } else {
        factory();
    }
}(function() {

    "use strict";

    var $event = $.event,
        $debouncedresize,
        resizeTimeout;

    // in jquery.debouncedresize.js,
    // it defines the interval used to determine if two resize events are part of the same debouncedresize event.
    // Defaults to 150 (milliseconds)
    /**
     * 绑定window的resize事件,在resize结束之后(默认150毫秒)触发,一般只触发一次
     * @event debouncedresize
     * <pre>
     * $(window).on("debouncedresize", function () {
     *   //todo
     * });
     * </pre>
     */
    $debouncedresize = $event.special.debouncedresize = {
        setup: function() {
            $(this).on("resize", $debouncedresize.handler);
        },
        teardown: function() {
            $(this).off("resize", $debouncedresize.handler);
        },
        handler: function(event, execAsap) {
            // Save the context
            var context = this,
                args = arguments,
                dispatch = function() {
                    // set correct event type
                    event.type = "debouncedresize";
                    $event.dispatch.apply(context, args);
                };

            if (resizeTimeout) {
                clearTimeout(resizeTimeout);
            }

            execAsap ?
                dispatch() :
                resizeTimeout = setTimeout(dispatch, $debouncedresize.threshold);
        },
        threshold: 150
    };

    /**
     * 绑定window的resize事件,在resize的过程中触发
     * @event throttledresize
     * <pre>
     * $(window).on("throttledresize", function () {
     *   //todo
     * });
     * </pre>
     */
    var $throttledresize,
        dummy = {
            _: 0
        },
        frame = 0,
        wasResized, animRunning;

    // in jquery.throttledresize.js,
    // it defines the number of animation ticks (or frames) between each throttledresize event.
    // Defaults to 0 (tick), which means that it's going to fire at a maximum of 60fps.

    $throttledresize = $event.special.throttledresize = {
        setup: function() {
            $(this).on("resize", $throttledresize.handler);
        },
        teardown: function() {
            $(this).off("resize", $throttledresize.handler);
        },
        handler: function(event, execAsap) {
            // Save the context
            var context = this,
                args = arguments;

            wasResized = true;

            if (!animRunning) {
                setInterval(function() {
                    frame++;

                    if (frame > $throttledresize.threshold && wasResized || execAsap) {
                        // set correct event type
                        event.type = "throttledresize";
                        $event.dispatch.apply(context, args);
                        wasResized = false;
                        frame = 0;
                    }
                    if (frame > 9) {
                        $(dummy).stop();
                        animRunning = false;
                        frame = 0;
                    }
                }, 30);
                animRunning = true;
            }
        },
        threshold: 0
    };

});

/* ========================================================================
 * Bootstrap: transition.js v3.3.4
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
    'use strict';

    // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
    // ============================================================

    function transitionEnd() {
        var el = document.createElement('bootstrap');

        var transEndEventNames = {
            WebkitTransition: 'webkitTransitionEnd',
            MozTransition: 'transitionend',
            OTransition: 'oTransitionEnd otransitionend',
            transition: 'transitionend'
        };

        for (var name in transEndEventNames) {
            if (el.style[name] !== undefined) {
                return {end: transEndEventNames[name]};
            }
        }

        return false; // explicit for ie8 (  ._.)
    }

    // http://blog.alexmaccaw.com/css-transitions
    $.fn.emulateTransitionEnd = function (duration) {
        var called = false;
        var $el = this;
        $(this).one('bsTransitionEnd', function () {
            called = true;
        });
        var callback = function () {
            if (!called) $($el).trigger($.support.transition.end);
        };
        setTimeout(callback, duration);
        return this;
    };

    $(function () {
        $.support.transition = transitionEnd();

        if (!$.support.transition) return;

        $.event.special.bsTransitionEnd = {
            bindType: $.support.transition.end,
            delegateType: $.support.transition.end,
            handle: function (e) {
                if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments);
            }
        };
    });

}(jQuery);

/**
 * 3DES加密算法
 * @class fish.desktop.util.TripleDES
 * <pre>
 *   fish.TripleDES.encrypt(msg,key);
 *   fish.TripleDES.decrypt(securityMsg, key);
 * </pre>
 */
!function () {
    fish.TripleDES = {
        /**
         * 使用指定的密钥加密
         * @method
         * @param {String} key 密钥
         * @param {String} message 明文
         * @returns {String} 密文
         */
        encrypt: function (msg, key) {
            var encrypted = fish.CryptoJS.TripleDES.encrypt(msg, key);
            return encrypted.toString();
        },
        /**
         * 使用指定的密钥解密
         * @method
         * @param {String} key 密钥
         * @param {String} message 明文
         * @returns {String} 密文
         */
        decrypt: function (securityMsg, key) {
            var decrypted = fish.CryptoJS.TripleDES.decrypt(securityMsg, key);
            return decrypted.toString(fish.CryptoJS.enc.Utf8);
        }
    };
}();
/*
 * $Id: base64.js,v 2.15 2014/04/05 12:58:57 dankogai Exp dankogai $
 *
 *  Licensed under the MIT license.
 *    http://opensource.org/licenses/mit-license
 *
 *  References:
 *    http://en.wikipedia.org/wiki/Base64
 */

!function() {
    'use strict';
    // constants
    var b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    var b64tab = function(bin) {
        var t = {};
        for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;
        return t;
    }(b64chars);
    var fromCharCode = String.fromCharCode;
    // encoder stuff
    var cb_utob = function(c) {
        if (c.length < 2) {
            var cc = c.charCodeAt(0);
            return cc < 0x80 ? c : cc < 0x800 ? (fromCharCode(0xc0 | (cc >>> 6)) + fromCharCode(0x80 | (cc & 0x3f))) : (fromCharCode(0xe0 | ((cc >>> 12) & 0x0f)) + fromCharCode(0x80 | ((cc >>> 6) & 0x3f)) + fromCharCode(0x80 | (cc & 0x3f)));
        } else {
            var cc = 0x10000 + (c.charCodeAt(0) - 0xD800) * 0x400 + (c.charCodeAt(1) - 0xDC00);
            return (fromCharCode(0xf0 | ((cc >>> 18) & 0x07)) + fromCharCode(0x80 | ((cc >>> 12) & 0x3f)) + fromCharCode(0x80 | ((cc >>> 6) & 0x3f)) + fromCharCode(0x80 | (cc & 0x3f)));
        }
    };
    var re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;
    var utob = function(u) {
        return u.replace(re_utob, cb_utob);
    };
    var cb_encode = function(ccc) {
        var padlen = [0, 2, 1][ccc.length % 3],
            ord = ccc.charCodeAt(0) << 16 | ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8) | ((ccc.length > 2 ? ccc.charCodeAt(2) : 0)),
            chars = [
                b64chars.charAt(ord >>> 18),
                b64chars.charAt((ord >>> 12) & 63),
                padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),
                padlen >= 1 ? '=' : b64chars.charAt(ord & 63)
            ];
        return chars.join('');
    };
    var btoa = window.btoa ? function(b) {
        return window.btoa(b);
    } : function(b) {
        return b.replace(/[\s\S]{1,3}/g, cb_encode);
    };
    var _encode = function(u) {
        return btoa(utob(u))
    };
    var encode = function(u, urisafe) {
        return !urisafe ? _encode(u) : _encode(u).replace(/[+\/]/g, function(m0) {
            return m0 == '+' ? '-' : '_';
        }).replace(/=/g, '');
    };
    var encodeURI = function(u) {
        return encode(u, true)
    };
    // decoder stuff
    // var re_btou = new RegExp([
    //     '[\xC0-\xDF][\x80-\xBF]',
    //     '[\xE0-\xEF][\x80-\xBF]{2}',
    //     '[\xF0-\xF7][\x80-\xBF]{3}'
    // ].join('|'), 'g');
    
    var re_btou=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g;

    var cb_btou = function(cccc) {
        switch (cccc.length) {
            case 4:
                var cp = ((0x07 & cccc.charCodeAt(0)) << 18) | ((0x3f & cccc.charCodeAt(1)) << 12) | ((0x3f & cccc.charCodeAt(2)) << 6) | (0x3f & cccc.charCodeAt(3)),
                    offset = cp - 0x10000;
                return (fromCharCode((offset >>> 10) + 0xD800) + fromCharCode((offset & 0x3FF) + 0xDC00));
            case 3:
                return fromCharCode(
                    ((0x0f & cccc.charCodeAt(0)) << 12) | ((0x3f & cccc.charCodeAt(1)) << 6) | (0x3f & cccc.charCodeAt(2))
                );
            default:
                return fromCharCode(
                    ((0x1f & cccc.charCodeAt(0)) << 6) | (0x3f & cccc.charCodeAt(1))
                );
        }
    };
    var btou = function(b) {
        return b.replace(re_btou, cb_btou);
    };
    var cb_decode = function(cccc) {
        var len = cccc.length,
            padlen = len % 4,
            n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0) | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0) | (len > 2 ? b64tab[cccc.charAt(2)] << 6 : 0) | (len > 3 ? b64tab[cccc.charAt(3)] : 0),
            chars = [
                fromCharCode(n >>> 16),
                fromCharCode((n >>> 8) & 0xff),
                fromCharCode(n & 0xff)
            ];
        chars.length -= [0, 0, 2, 1][padlen];
        return chars.join('');
    };
    var atob = window.atob ? function(a) {
        return window.atob(a);
    } : function(a) {
        return a.replace(/[\s\S]{1,4}/g, cb_decode);
    };
    var _decode = function(a) {
        return btou(atob(a))
    };
    var decode = function(a) {
        return _decode(
            a.replace(/[-_]/g, function(m0) {
                return m0 == '-' ? '+' : '/'
            })
            .replace(/[^A-Za-z0-9\+\/]/g, '')
        );
    };

    /**
     * Base64加密算法
     * @class fish.desktop.util.Base64
     * <pre>
     *   fish.Base64.encode(src);
     * </pre>
     */
    fish.Base64 = {
        /**
         * @ignore
         */
        atob: atob,
        /**
         * @ignore
         */
        btoa: btoa,
        /**
         * 使用base64解密，等同于decode
         * @method
         * @param {String} dst 密文
         * @return {String} 原文
         */
        fromBase64: decode,
        /**
         * 使用base64加密，等同于encode
         * @method
         * @param {String} src 原文
         * @return {String} 密文
         */
        toBase64: encode,
        /**
         * @ignore
         */
        utob: utob,
        /**
         * 使用base64加密
         * @method
         * @param {String} src 原文
         * @return {String} 密文
         */
        encode: encode,
        /**
         * 使用base64加密url
         * @method
         * @param {String} url 原文
         * @return {String} 密文
         */
        encodeURI: encodeURI,
        /**
         * @ignore
         */
        btou: btou,
        /**
         * 使用base64解密
         * @method
         * @param {String} dst 密文
         * @return {String} 原文
         */
        decode: decode
    };
}();

/**
 * @class fish.desktop.util.Config
 * Config工具
 *
 * 使用示例：
 * <pre>
 * fish.config.set("username","test");
 * fish.config.get("username");
 * </pre>
 *
 * 内置配置：
 * <pre>
 * dateDisplayFormat.datetime = 'yyyy-mm-dd hh:ii:ss'
 * dateDisplayFormat.date = 'yyyy-mm-dd'
 * dateDisplayFormat.time = 'hh:ii:ss'
 * dateParseFormat.datetime = 'yyyy-mm-dd hh:ii:ss'
 * dateParseFormat.date = 'yyyy-mm-dd'
 * dateParseFormat.time = 'hh:ii:ss'
 * </pre>
 */

!function () {
    "use strict";

    var configCache = {
        dateDisplayFormat: {
            datetime: 'yyyy-mm-dd hh:ii:ss',
            date: 'yyyy-mm-dd',
            time: 'hh:ii:ss'
        },
        dateParseFormat: {
            datetime: 'yyyy-mm-dd hh:ii:ss',
            date: 'yyyy-mm-dd',
            time: 'hh:ii:ss'
        },
        alertModal: null
    };

    fish.config = {
        /**
         * 获取键值对应配置信息
         * @param key {String} 键值,可以采用'.'号分隔
         * @returns {Object}
         */
        get: function (key) {
            var keys = key.split('.'),
                result = configCache;

            for (var i = 0, n = keys.length; i < n; i++) {
                result = result[keys[i]];

                if (_.isUndefined(result)) {
                    return result;
                }
            }

            return result;
        },

        /**
         * 根据键值设置配置信息，
         * @param key {String} 键值,可以采用'.'号分隔
         * @param value {Object} 存放值
         */
        set: function (key, value) {
            var keys = key.split('.'),
                result = configCache;

            for (var i = 0, n = keys.length; i < n - 1; i++) {
                if (_.isUndefined(result[keys[i]])) {
                    result[keys[i]] = {};
                }

                result = result[keys[i]];
            }

            result[keys[n - 1]] = value;
        }
    };
}();
/**
 * @class fish.desktop.util.Cookies
 * Cookie工具
 *
 * <pre>
 *   fish.cookies.set("username","test");
 *   fish.cookies.get("username");
 *   fish.cookies.remove('username');
 * </pre>
 */

!function () {
    "use strict";

    var lastCookies = {};
    var lastCookieString = '';
    var $base = $(document).find('base');

    function baseHref() {
        var href = $base.attr('href');
        return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';
    }

    function cookieReader() {
        var currentCookieString = document.cookie,
            cookieArray, cookie, i, index, name;

        if (currentCookieString !== lastCookieString) {
            lastCookieString = currentCookieString;
            cookieArray = lastCookieString.split('; ');
            lastCookies = {};

            for (i = 0; i < cookieArray.length; i++) {
                cookie = cookieArray[i];
                index = cookie.indexOf('=');
                if (index > 0) { //ignore nameless cookies
                    name = decodeURIComponent(cookie.substring(0, index));
                    // the first value that is seen for a cookie is the most
                    // specific one.  values for the same cookie name that
                    // follow are for less specific paths.
                    if (lastCookies[name] === undefined) {
                        lastCookies[name] = decodeURIComponent(cookie.substring(index + 1));
                    }
                }
            }
        }
        return lastCookies;
    }

    function cookieWriter() {
        var cookiePath = baseHref();

        function buildCookieString(name, value, options) {
            var path, expires;
            options = options || {};
            expires = options.expires;

            path = _.isUndefined(options.path) ? cookiePath : options.path;
            if (value === undefined) {
                expires = 'Thu, 01 Jan 1970 00:00:00 GMT';
                value = '';
            }
            if (_.isString(expires)) {
                expires = new Date(expires);
            }

            var str = encodeURIComponent(name) + '=' + encodeURIComponent(value);
            str += path ? ';path=' + path : '';
            str += options.domain ? ';domain=' + options.domain : '';
            str += expires ? ';expires=' + expires.toUTCString() : '';
            str += options.secure ? ';secure' : '';

            // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:
            // - 300 cookies
            // - 20 cookies per unique domain
            // - 4096 bytes per cookie
            var cookieLength = str.length + 1;
            if (cookieLength > 4096) {
                console.warn("Cookie '" + name +
                "' possibly not set or overflowed because it was too large (" +
                cookieLength + " > 4096 bytes)!");
            }

            return str;
        }

        return function(name, value, options) {
            document.cookie = buildCookieString(name, value, options);
        };
    }

    fish.cookies = {
        /**
         * 获取cookie记录
         * @param {String} key 键值
         * @return {Object} key对应的cookie记录
         */
        get: function (key) {
            return cookieReader()[key];
        },

        /**
         * @since V2.1.0
         * 获取cookie记录
         * @param {String} key 键值
         * @return {Object} key对应的JSON对象
         */
        getObject: function (key) {
            var value = this.get(key);
            return value ? JSON.parse(value) : value;
        },

        /**
         * 设置cookie记录
         * @param {String} key 键值
         * @param {Object} value 键值内容
         * @param {Object} options 配置项可以包含以下key。
         * expires：指定了coolie的生存期，默认情况下coolie是暂时存在的，他们存储的值只在浏览器会话期间存在，当用户推出浏览器后这些值也会丢失，如果想让cookie存在一段时间，就要为expires属性设置为未来的一个过期日期。现在已经被max-age属性所取代，max-age用秒来设置cookie的生存期。
         * path：它指定与cookie关联在一起的网页。在默认的情况下cookie会与创建它的网页，该网页处于同一目录下的网页以及与这个网页所在目录下的子目录下的网页关联。
         * domain：domain属性可以使多个web服务器共享cookie。domain属性的默认值是创建cookie的网页所在服务器的主机名。不能将一个cookie的域设置成服务器所在的域之外的域。例如让位于order.example.com的服务器能够读取catalog.example.com设置的cookie值。如果catalog.example.com的页面创建的cookie把自己的path属性设置为“/”，把domain属性设置成“.example.com”，那么所有位于catalog.example.com的网页和所有位于orlders.example.com的网页，以及位于example.com域的其他服务器上的网页都可以访问这个coolie。
         * secure：它是一个布尔值，指定在网络上如何传输cookie，默认是不安全的，通过一个普通的http连接传输。
         */
        set: function (key, value, options) {
            cookieWriter()(key, value, options);
        },

        /**
         * @since V2.1.0
         * 设置对象cookie记录
         * @param {String} key 键值
         * @param {Object} value 内容对象
         * @param {Object} options 配置项可以包含以下key。
         * expires：指定了coolie的生存期，默认情况下coolie是暂时存在的，他们存储的值只在浏览器会话期间存在，当用户推出浏览器后这些值也会丢失，如果想让cookie存在一段时间，就要为expires属性设置为未来的一个过期日期。现在已经被max-age属性所取代，max-age用秒来设置cookie的生存期。
         * path：它指定与cookie关联在一起的网页。在默认的情况下cookie会与创建它的网页，该网页处于同一目录下的网页以及与这个网页所在目录下的子目录下的网页关联。
         * domain：domain属性可以使多个web服务器共享cookie。domain属性的默认值是创建cookie的网页所在服务器的主机名。不能将一个cookie的域设置成服务器所在的域之外的域。例如让位于order.example.com的服务器能够读取catalog.example.com设置的cookie值。如果catalog.example.com的页面创建的cookie把自己的path属性设置为“/”，把domain属性设置成“.example.com”，那么所有位于catalog.example.com的网页和所有位于orlders.example.com的网页，以及位于example.com域的其他服务器上的网页都可以访问这个coolie。
         * secure：它是一个布尔值，指定在网络上如何传输cookie，默认是不安全的，通过一个普通的http连接传输。
         */
        setObject: function(key, value, options) {
            this.set(key, JSON.stringify(value), options);
        },

        /**
         * 使cookie立即失效
         * @param  {String} key
         * @param  {Object} [options] 配置项可以包含以下key。
         * expires：指定了coolie的生存期，默认情况下coolie是暂时存在的，他们存储的值只在浏览器会话期间存在，当用户推出浏览器后这些值也会丢失，如果想让cookie存在一段时间，就要为expires属性设置为未来的一个过期日期。现在已经被max-age属性所取代，max-age用秒来设置cookie的生存期。
         * path：它指定与cookie关联在一起的网页。在默认的情况下cookie会与创建它的网页，该网页处于同一目录下的网页以及与这个网页所在目录下的子目录下的网页关联。
         * domain：domain属性可以使多个web服务器共享cookie。domain属性的默认值是创建cookie的网页所在服务器的主机名。不能将一个cookie的域设置成服务器所在的域之外的域。例如让位于order.example.com的服务器能够读取catalog.example.com设置的cookie值。如果catalog.example.com的页面创建的cookie把自己的path属性设置为“/”，把domain属性设置成“.example.com”，那么所有位于catalog.example.com的网页和所有位于orlders.example.com的网页，以及位于example.com域的其他服务器上的网页都可以访问这个coolie。
         * secure：它是一个布尔值，指定在网络上如何传输cookie，默认是不安全的，通过一个普通的http连接传输。
         */
        remove: function (key, options) {
            this.set(key, undefined, options);
        }
    };
}();

/**
 * CryptoJS core components. v3.1.2
 * 挂载fish下
 */
fish.CryptoJS = (function (Math, undefined) {
    /**
     * CryptoJS namespace.
     */
    var C = {};

    /**
     * Library namespace.
     */
    var C_lib = C.lib = {};

    /**
     * Base object for prototypal inheritance.
     */
    var Base = C_lib.Base = (function () {
        function F() {
        }

        return {
            /**
             * Creates a new object that inherits from this object.
             *
             * param {Object} overrides Properties to copy into the new object.
             *
             * return {Object} The new object.
             *
             * static
             *
             *
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         field: 'value',
             *
             *         method: function () {
             *         }
             *     });
             */
            extend: function (overrides) {
                // Spawn
                F.prototype = this;
                var subtype = new F();

                // Augment
                if (overrides) {
                    subtype.mixIn(overrides);
                }

                // Create default initializer
                if (!subtype.hasOwnProperty('init')) {
                    subtype.init = function () {
                        subtype.$super.init.apply(this, arguments);
                    };
                }

                // Initializer's prototype is the subtype object
                subtype.init.prototype = subtype;

                // Reference supertype
                subtype.$super = this;

                return subtype;
            },

            /**
             * Extends this object and runs the init method.
             * Arguments to create() will be passed to init().
             *
             *     var instance = MyType.create();
             */
            create: function () {
                var instance = this.extend();
                instance.init.apply(instance, arguments);

                return instance;
            },

            init: function () {
            },

            /**
             * Copies properties into this object.
             *
             * {Object} properties The properties to mix in.
             *     MyType.mixIn({
             *         field: 'value'
             *     });
             */
            mixIn: function (properties) {
                for (var propertyName in properties) {
                    if (properties.hasOwnProperty(propertyName)) {
                        this[propertyName] = properties[propertyName];
                    }
                }

                // IE won't copy toString using the loop above
                if (properties.hasOwnProperty('toString')) {
                    this.toString = properties.toString;
                }
            },

            /**
             * Creates a copy of this object.
             *
             * {Object} The clone.
             *
             *     var clone = instance.clone();
             */
            clone: function () {
                return this.init.prototype.extend(this);
            }
        };
    }());

    /**
     * An array of 32-bit words.
     *
     *  {Array} words The array of 32-bit words.
     *  {number} sigBytes The number of significant bytes in this word array.
     */
    var WordArray = C_lib.WordArray = Base.extend({
        /**
         * Initializes a newly created word array.
         *
         *  {Array} words (Optional) An array of 32-bit words.
         *  {number} sigBytes (Optional) The number of significant bytes in the words.
         *
         *     var wordArray = CryptoJS.lib.WordArray.create();
         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
         */
        init: function (words, sigBytes) {
            words = this.words = words || [];

            if (sigBytes != undefined) {
                this.sigBytes = sigBytes;
            } else {
                this.sigBytes = words.length * 4;
            }
        },

        /**
         * Converts this word array to a string.
         *
         *  {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
         *
         *  {string} The stringified word array.
         *
         *     var string = wordArray + '';
         *     var string = wordArray.toString();
         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
         */
        toString: function (encoder) {
            return (encoder || Hex).stringify(this);
        },

        /**
         * Concatenates a word array to this word array.
         *
         *  {WordArray} wordArray The word array to append.
         *
         *  {WordArray} This word array.
         *
         *     wordArray1.concat(wordArray2);
         */
        concat: function (wordArray) {
            // Shortcuts
            var thisWords = this.words;
            var thatWords = wordArray.words;
            var thisSigBytes = this.sigBytes;
            var thatSigBytes = wordArray.sigBytes;

            // Clamp excess bits
            this.clamp();

            // Concat
            if (thisSigBytes % 4) {
                // Copy one byte at a time
                for (var i = 0; i < thatSigBytes; i++) {
                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
                }
            } else {
                // Copy one word at a time
                for (var i = 0; i < thatSigBytes; i += 4) {
                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
                }
            }
            this.sigBytes += thatSigBytes;

            // Chainable
            return this;
        },

        /**
         * Removes insignificant bits.
         *     wordArray.clamp();
         */
        clamp: function () {
            // Shortcuts
            var words = this.words;
            var sigBytes = this.sigBytes;

            // Clamp
            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
            words.length = Math.ceil(sigBytes / 4);
        },

        /**
         * Creates a copy of this word array.
         *
         * {WordArray} The clone.
         *     var clone = wordArray.clone();
         */
        clone: function () {
            var clone = Base.clone.call(this);
            clone.words = this.words.slice(0);

            return clone;
        },

        /**
         * Creates a word array filled with random bytes.
         *
         *  {number} nBytes The number of random bytes to generate.
         *
         *  {WordArray} The random word array.
         *
         *     var wordArray = CryptoJS.lib.WordArray.random(16);
         */
        random: function (nBytes) {
            var words = [];

            var r = (function (m_w) {
                var m_w = m_w;
                var m_z = 0x3ade68b1;
                var mask = 0xffffffff;

                return function () {
                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;
                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;
                    var result = ((m_z << 0x10) + m_w) & mask;
                    result /= 0x100000000;
                    result += 0.5;
                    return result * (Math.random() > .5 ? 1 : -1);
                }
            });

            for (var i = 0, rcache; i < nBytes; i += 4) {
                var _r = r((rcache || Math.random()) * 0x100000000);

                rcache = _r() * 0x3ade67b7;
                words.push((_r() * 0x100000000) | 0);
            }

            return new WordArray.init(words, nBytes);
        }
    });

    /**
     * Encoder namespace.
     */
    var C_enc = C.enc = {};

    /**
     * Hex encoding strategy.
     */
    var Hex = C_enc.Hex = {
        /**
         * Converts a word array to a hex string.
         *
         *  {WordArray} wordArray The word array.
         *
         *  {string} The hex string.
         *
         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
         */
        stringify: function (wordArray) {
            // Shortcuts
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;

            // Convert
            var hexChars = [];
            for (var i = 0; i < sigBytes; i++) {
                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
                hexChars.push((bite >>> 4).toString(16));
                hexChars.push((bite & 0x0f).toString(16));
            }

            return hexChars.join('');
        },

        /**
         * Converts a hex string to a word array.
         *
         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
         */
        parse: function (hexStr) {
            // Shortcut
            var hexStrLength = hexStr.length;

            // Convert
            var words = [];
            for (var i = 0; i < hexStrLength; i += 2) {
                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
            }

            return new WordArray.init(words, hexStrLength / 2);
        }
    };

    /**
     * Latin1 encoding strategy.
     */
    var Latin1 = C_enc.Latin1 = {
        /**
         * Converts a word array to a Latin1 string.
         *
         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
         */
        stringify: function (wordArray) {
            // Shortcuts
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;

            // Convert
            var latin1Chars = [];
            for (var i = 0; i < sigBytes; i++) {
                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
                latin1Chars.push(String.fromCharCode(bite));
            }

            return latin1Chars.join('');
        },

        /**
         * Converts a Latin1 string to a word array.
         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
         */
        parse: function (latin1Str) {
            // Shortcut
            var latin1StrLength = latin1Str.length;

            // Convert
            var words = [];
            for (var i = 0; i < latin1StrLength; i++) {
                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
            }

            return new WordArray.init(words, latin1StrLength);
        }
    };

    /**
     * UTF-8 encoding strategy.
     */
    var Utf8 = C_enc.Utf8 = {
        /**
         * Converts a word array to a UTF-8 string.
         *
         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
         */
        stringify: function (wordArray) {
            try {
                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
            } catch (e) {
                throw new Error('Malformed UTF-8 data');
            }
        },

        /**
         * Converts a UTF-8 string to a word array.
         *
         * param {string} utf8Str The UTF-8 string.
         *
         * return {WordArray} The word array.
         *
         * static
         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
         */
        parse: function (utf8Str) {
            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
        }
    };

    /**
     * Abstract buffered block algorithm template.
     *
     * The property blockSize must be implemented in a concrete subtype.
     *
     *  {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
     */
    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
        /**
         * Resets this block algorithm's data buffer to its initial state.
         *     bufferedBlockAlgorithm.reset();
         */
        reset: function () {
            // Initial values
            this._data = new WordArray.init();
            this._nDataBytes = 0;
        },

        /**
         * Adds new data to this block algorithm's buffer.
         *
         *  {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
         *     bufferedBlockAlgorithm._append('data');
         *     bufferedBlockAlgorithm._append(wordArray);
         */
        _append: function (data) {
            // Convert string to WordArray, else assume WordArray already
            if (typeof data == 'string') {
                data = Utf8.parse(data);
            }

            // Append
            this._data.concat(data);
            this._nDataBytes += data.sigBytes;
        },

        /**
         * Processes available data blocks.
         *
         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
         *
         *  {boolean} doFlush Whether all blocks and partial blocks should be processed.
         *
         *  {WordArray} The processed data.
         *
         *     var processedData = bufferedBlockAlgorithm._process();
         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
         */
        _process: function (doFlush) {
            // Shortcuts
            var data = this._data;
            var dataWords = data.words;
            var dataSigBytes = data.sigBytes;
            var blockSize = this.blockSize;
            var blockSizeBytes = blockSize * 4;

            // Count blocks ready
            var nBlocksReady = dataSigBytes / blockSizeBytes;
            if (doFlush) {
                // Round up to include partial blocks
                nBlocksReady = Math.ceil(nBlocksReady);
            } else {
                // Round down to include only full blocks,
                // less the number of blocks that must remain in the buffer
                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
            }

            // Count words ready
            var nWordsReady = nBlocksReady * blockSize;

            // Count bytes ready
            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

            // Process blocks
            if (nWordsReady) {
                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                    // Perform concrete-algorithm logic
                    this._doProcessBlock(dataWords, offset);
                }

                // Remove processed words
                var processedWords = dataWords.splice(0, nWordsReady);
                data.sigBytes -= nBytesReady;
            }

            // Return processed words
            return new WordArray.init(processedWords, nBytesReady);
        },

        /**
         * Creates a copy of this object.
         *
         *     var clone = bufferedBlockAlgorithm.clone();
         */
        clone: function () {
            var clone = Base.clone.call(this);
            clone._data = this._data.clone();

            return clone;
        },

        _minBufferSize: 0
    });

    /**
     * Abstract hasher template.
     *
     *  {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
     */
    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
        /**
         * Configuration options.
         */
        cfg: Base.extend(),

        /**
         * Initializes a newly created hasher.
         *
         *     var hasher = CryptoJS.algo.SHA256.create();
         */
        init: function (cfg) {
            // Apply config defaults
            this.cfg = this.cfg.extend(cfg);

            // Set initial values
            this.reset();
        },

        /**
         * Resets this hasher to its initial state.
         *     hasher.reset();
         */
        reset: function () {
            // Reset data buffer
            BufferedBlockAlgorithm.reset.call(this);

            // Perform concrete-hasher logic
            this._doReset();
        },

        /**
         * Updates this hasher with a message.
         *
         *     hasher.update('message');
         *     hasher.update(wordArray);
         */
        update: function (messageUpdate) {
            // Append
            this._append(messageUpdate);

            // Update the hash
            this._process();

            // Chainable
            return this;
        },

        /**
         * Finalizes the hash computation.
         * Note that the finalize operation is effectively a destructive, read-once operation.
         *
         *     var hash = hasher.finalize();
         *     var hash = hasher.finalize('message');
         *     var hash = hasher.finalize(wordArray);
         */
        finalize: function (messageUpdate) {
            // Final message update
            if (messageUpdate) {
                this._append(messageUpdate);
            }

            // Perform concrete-hasher logic
            var hash = this._doFinalize();

            return hash;
        },

        blockSize: 512 / 32,

        /**
         * Creates a shortcut function to a hasher's object interface.
         *
         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
         */
        _createHelper: function (hasher) {
            return function (message, cfg) {
                return new hasher.init(cfg).finalize(message);
            };
        },

        /**
         * Creates a shortcut function to the HMAC's object interface.
         *
         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
         */
        _createHmacHelper: function (hasher) {
            return function (message, key) {
                return new C_algo.HMAC.init(hasher, key).finalize(message);
            };
        }
    });

    /**
     * Algorithm namespace.
     */
    var C_algo = C.algo = {};

    return C;
}(Math));

//enc-base64.js
(function () {
    // Shortcuts
    var C = fish.CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray;
    var C_enc = C.enc;

    /**
     * Base64 encoding strategy.
     */
    var Base64 = C_enc.Base64 = {
        /**
         * Converts a word array to a Base64 string.
         *
         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
         */
        stringify: function (wordArray) {
            // Shortcuts
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map = this._map;

            // Clamp excess bits
            wordArray.clamp();

            // Convert
            var base64Chars = [];
            for (var i = 0; i < sigBytes; i += 3) {
                var byte1 = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
                }
            }

            // Add padding
            var paddingChar = map.charAt(64);
            if (paddingChar) {
                while (base64Chars.length % 4) {
                    base64Chars.push(paddingChar);
                }
            }

            return base64Chars.join('');
        },

        /**
         * Converts a Base64 string to a word array.
         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
         */
        parse: function (base64Str) {
            // Shortcuts
            var base64StrLength = base64Str.length;
            var map = this._map;

            // Ignore padding
            var paddingChar = map.charAt(64);
            if (paddingChar) {
                var paddingIndex = base64Str.indexOf(paddingChar);
                if (paddingIndex != -1) {
                    base64StrLength = paddingIndex;
                }
            }

            // Convert
            var words = [];
            var nBytes = 0;
            for (var i = 0; i < base64StrLength; i++) {
                if (i % 4) {
                    var bits1 = map.indexOf(base64Str.charAt(i - 1)) << ((i % 4) * 2);
                    var bits2 = map.indexOf(base64Str.charAt(i)) >>> (6 - (i % 4) * 2);
                    var bitsCombined = bits1 | bits2;
                    words[nBytes >>> 2] |= (bitsCombined) << (24 - (nBytes % 4) * 8);
                    nBytes++;
                }
            }

            return WordArray.create(words, nBytes);
        },

        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
    };
}());

//md5.js
//MD5
(function (Math) {
    // Shortcuts
    var C = fish.CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray;
    var Hasher = C_lib.Hasher;
    var C_algo = C.algo;

    // Constants table
    var T = [];

    // Compute constants
    (function () {
        for (var i = 0; i < 64; i++) {
            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
        }
    }());

    /**
     * MD5 hash algorithm.
     */
    var MD5 = C_algo.MD5 = Hasher.extend({
        _doReset: function () {
            this._hash = new WordArray.init([
                0x67452301, 0xefcdab89,
                0x98badcfe, 0x10325476
            ]);
        },

        _doProcessBlock: function (M, offset) {
            // Swap endian
            for (var i = 0; i < 16; i++) {
                // Shortcuts
                var offset_i = offset + i;
                var M_offset_i = M[offset_i];

                M[offset_i] = (
                    (((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) |
                    (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00)
                );
            }

            // Shortcuts
            var H = this._hash.words;

            var M_offset_0 = M[offset + 0];
            var M_offset_1 = M[offset + 1];
            var M_offset_2 = M[offset + 2];
            var M_offset_3 = M[offset + 3];
            var M_offset_4 = M[offset + 4];
            var M_offset_5 = M[offset + 5];
            var M_offset_6 = M[offset + 6];
            var M_offset_7 = M[offset + 7];
            var M_offset_8 = M[offset + 8];
            var M_offset_9 = M[offset + 9];
            var M_offset_10 = M[offset + 10];
            var M_offset_11 = M[offset + 11];
            var M_offset_12 = M[offset + 12];
            var M_offset_13 = M[offset + 13];
            var M_offset_14 = M[offset + 14];
            var M_offset_15 = M[offset + 15];

            // Working varialbes
            var a = H[0];
            var b = H[1];
            var c = H[2];
            var d = H[3];

            // Computation
            a = FF(a, b, c, d, M_offset_0, 7, T[0]);
            d = FF(d, a, b, c, M_offset_1, 12, T[1]);
            c = FF(c, d, a, b, M_offset_2, 17, T[2]);
            b = FF(b, c, d, a, M_offset_3, 22, T[3]);
            a = FF(a, b, c, d, M_offset_4, 7, T[4]);
            d = FF(d, a, b, c, M_offset_5, 12, T[5]);
            c = FF(c, d, a, b, M_offset_6, 17, T[6]);
            b = FF(b, c, d, a, M_offset_7, 22, T[7]);
            a = FF(a, b, c, d, M_offset_8, 7, T[8]);
            d = FF(d, a, b, c, M_offset_9, 12, T[9]);
            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
            a = FF(a, b, c, d, M_offset_12, 7, T[12]);
            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
            b = FF(b, c, d, a, M_offset_15, 22, T[15]);

            a = GG(a, b, c, d, M_offset_1, 5, T[16]);
            d = GG(d, a, b, c, M_offset_6, 9, T[17]);
            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
            b = GG(b, c, d, a, M_offset_0, 20, T[19]);
            a = GG(a, b, c, d, M_offset_5, 5, T[20]);
            d = GG(d, a, b, c, M_offset_10, 9, T[21]);
            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
            b = GG(b, c, d, a, M_offset_4, 20, T[23]);
            a = GG(a, b, c, d, M_offset_9, 5, T[24]);
            d = GG(d, a, b, c, M_offset_14, 9, T[25]);
            c = GG(c, d, a, b, M_offset_3, 14, T[26]);
            b = GG(b, c, d, a, M_offset_8, 20, T[27]);
            a = GG(a, b, c, d, M_offset_13, 5, T[28]);
            d = GG(d, a, b, c, M_offset_2, 9, T[29]);
            c = GG(c, d, a, b, M_offset_7, 14, T[30]);
            b = GG(b, c, d, a, M_offset_12, 20, T[31]);

            a = HH(a, b, c, d, M_offset_5, 4, T[32]);
            d = HH(d, a, b, c, M_offset_8, 11, T[33]);
            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
            a = HH(a, b, c, d, M_offset_1, 4, T[36]);
            d = HH(d, a, b, c, M_offset_4, 11, T[37]);
            c = HH(c, d, a, b, M_offset_7, 16, T[38]);
            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
            a = HH(a, b, c, d, M_offset_13, 4, T[40]);
            d = HH(d, a, b, c, M_offset_0, 11, T[41]);
            c = HH(c, d, a, b, M_offset_3, 16, T[42]);
            b = HH(b, c, d, a, M_offset_6, 23, T[43]);
            a = HH(a, b, c, d, M_offset_9, 4, T[44]);
            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
            b = HH(b, c, d, a, M_offset_2, 23, T[47]);

            a = II(a, b, c, d, M_offset_0, 6, T[48]);
            d = II(d, a, b, c, M_offset_7, 10, T[49]);
            c = II(c, d, a, b, M_offset_14, 15, T[50]);
            b = II(b, c, d, a, M_offset_5, 21, T[51]);
            a = II(a, b, c, d, M_offset_12, 6, T[52]);
            d = II(d, a, b, c, M_offset_3, 10, T[53]);
            c = II(c, d, a, b, M_offset_10, 15, T[54]);
            b = II(b, c, d, a, M_offset_1, 21, T[55]);
            a = II(a, b, c, d, M_offset_8, 6, T[56]);
            d = II(d, a, b, c, M_offset_15, 10, T[57]);
            c = II(c, d, a, b, M_offset_6, 15, T[58]);
            b = II(b, c, d, a, M_offset_13, 21, T[59]);
            a = II(a, b, c, d, M_offset_4, 6, T[60]);
            d = II(d, a, b, c, M_offset_11, 10, T[61]);
            c = II(c, d, a, b, M_offset_2, 15, T[62]);
            b = II(b, c, d, a, M_offset_9, 21, T[63]);

            // Intermediate hash value
            H[0] = (H[0] + a) | 0;
            H[1] = (H[1] + b) | 0;
            H[2] = (H[2] + c) | 0;
            H[3] = (H[3] + d) | 0;
        },

        _doFinalize: function () {
            // Shortcuts
            var data = this._data;
            var dataWords = data.words;

            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;

            // Add padding
            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);

            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
            var nBitsTotalL = nBitsTotal;
            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
                (((nBitsTotalH << 8) | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8)) & 0xff00ff00)
            );
            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
                (((nBitsTotalL << 8) | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8)) & 0xff00ff00)
            );

            data.sigBytes = (dataWords.length + 1) * 4;

            // Hash final blocks
            this._process();

            // Shortcuts
            var hash = this._hash;
            var H = hash.words;

            // Swap endian
            for (var i = 0; i < 4; i++) {
                // Shortcut
                var H_i = H[i];

                H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) |
                    (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00);
            }

            // Return final computed hash
            return hash;
        },

        clone: function () {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();

            return clone;
        }
    });

    function FF(a, b, c, d, x, s, t) {
        var n = a + ((b & c) | (~b & d)) + x + t;
        return ((n << s) | (n >>> (32 - s))) + b;
    }

    function GG(a, b, c, d, x, s, t) {
        var n = a + ((b & d) | (c & ~d)) + x + t;
        return ((n << s) | (n >>> (32 - s))) + b;
    }

    function HH(a, b, c, d, x, s, t) {
        var n = a + (b ^ c ^ d) + x + t;
        return ((n << s) | (n >>> (32 - s))) + b;
    }

    function II(a, b, c, d, x, s, t) {
        var n = a + (c ^ (b | ~d)) + x + t;
        return ((n << s) | (n >>> (32 - s))) + b;
    }


    C.MD5 = Hasher._createHelper(MD5);
    C.HmacMD5 = Hasher._createHmacHelper(MD5);
}(Math));

//evpkdf.js
(function () {
    // Shortcuts
    var C = fish.CryptoJS;
    var C_lib = C.lib;
    var Base = C_lib.Base;
    var WordArray = C_lib.WordArray;
    var C_algo = C.algo;
    var MD5 = C_algo.MD5;

    /**
     * This key derivation function is meant to conform with EVP_BytesToKey.
     * www.openssl.org/docs/crypto/EVP_BytesToKey.html
     */
    var EvpKDF = C_algo.EvpKDF = Base.extend({
        /**
         * Configuration options.
         */
        cfg: Base.extend({
            keySize: 128 / 32,
            hasher: MD5,
            iterations: 1
        }),

        /**
         * Initializes a newly created key derivation function.
         *
         *     var kdf = CryptoJS.algo.EvpKDF.create();
         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
         */
        init: function (cfg) {
            this.cfg = this.cfg.extend(cfg);
        },

        /**
         * Derives a key from a password.
         *     var key = kdf.compute(password, salt);
         */
        compute: function (password, salt) {
            // Shortcut
            var cfg = this.cfg;

            // Init hasher
            var hasher = cfg.hasher.create();

            // Initial values
            var derivedKey = WordArray.create();

            // Shortcuts
            var derivedKeyWords = derivedKey.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;

            // Generate key
            while (derivedKeyWords.length < keySize) {
                if (block) {
                    hasher.update(block);
                }
                var block = hasher.update(password).finalize(salt);
                hasher.reset();

                // Iterations
                for (var i = 1; i < iterations; i++) {
                    block = hasher.finalize(block);
                    hasher.reset();
                }

                derivedKey.concat(block);
            }
            derivedKey.sigBytes = keySize * 4;

            return derivedKey;
        }
    });

    /**
     * Derives a key from a password.
     *
     *     var key = CryptoJS.EvpKDF(password, salt);
     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
     */
    C.EvpKDF = function (password, salt, cfg) {
        return EvpKDF.create(cfg).compute(password, salt);
    };
}());

//clipher-core.js
fish.CryptoJS.lib.Cipher || (function (undefined) {
    // Shortcuts
    var C = fish.CryptoJS;
    var C_lib = C.lib;
    var Base = C_lib.Base;
    var WordArray = C_lib.WordArray;
    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
    var C_enc = C.enc;
    var Utf8 = C_enc.Utf8;
    var Base64 = C_enc.Base64;
    var C_algo = C.algo;
    var EvpKDF = C_algo.EvpKDF;

    /**
     * Abstract base cipher template.
     *
     * property {number} keySize This cipher's key size. Default: 4 (128 bits)
     * property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
     * property {number} _ENC_XFORM_MODE A constant representing encryption mode.
     * property {number} _DEC_XFORM_MODE A constant representing decryption mode.
     */
    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
        /**
         * Configuration options.
         *
         * property {WordArray} iv The IV to use for this operation.
         */
        cfg: Base.extend(),

        /**
         * Creates this cipher in encryption mode.
         *
         * param {WordArray} key The key.
         * param {Object} cfg (Optional) The configuration options to use for this operation.
         *
         * return {Cipher} A cipher instance.
         *
         * static
         *
         *
         *
         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
         */
        createEncryptor: function (key, cfg) {
            return this.create(this._ENC_XFORM_MODE, key, cfg);
        },

        /**
         * Creates this cipher in decryption mode.
         *
         * param {WordArray} key The key.
         * param {Object} cfg (Optional) The configuration options to use for this operation.
         *
         * return {Cipher} A cipher instance.
         *
         * static
         *
         *
         *
         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
         */
        createDecryptor: function (key, cfg) {
            return this.create(this._DEC_XFORM_MODE, key, cfg);
        },

        /**
         * Initializes a newly created cipher.
         *
         * param {number} xformMode Either the encryption or decryption transormation mode constant.
         * param {WordArray} key The key.
         * param {Object} cfg (Optional) The configuration options to use for this operation.
         *
         *
         *
         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
         */
        init: function (xformMode, key, cfg) {
            // Apply config defaults
            this.cfg = this.cfg.extend(cfg);

            // Store transform mode and key
            this._xformMode = xformMode;
            this._key = key;

            // Set initial values
            this.reset();
        },

        /**
         * Resets this cipher to its initial state.
         *
         *
         *
         *     cipher.reset();
         */
        reset: function () {
            // Reset data buffer
            BufferedBlockAlgorithm.reset.call(this);

            // Perform concrete-cipher logic
            this._doReset();
        },

        /**
         * Adds data to be encrypted or decrypted.
         *
         * param {WordArray|string} dataUpdate The data to encrypt or decrypt.
         *
         * return {WordArray} The data after processing.
         *
         *
         *
         *     var encrypted = cipher.process('data');
         *     var encrypted = cipher.process(wordArray);
         */
        process: function (dataUpdate) {
            // Append
            this._append(dataUpdate);

            // Process available blocks
            return this._process();
        },

        /**
         * Finalizes the encryption or decryption process.
         * Note that the finalize operation is effectively a destructive, read-once operation.
         *
         * param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
         *
         * return {WordArray} The data after final processing.
         *
         *
         *
         *     var encrypted = cipher.finalize();
         *     var encrypted = cipher.finalize('data');
         *     var encrypted = cipher.finalize(wordArray);
         */
        finalize: function (dataUpdate) {
            // Final data update
            if (dataUpdate) {
                this._append(dataUpdate);
            }

            // Perform concrete-cipher logic
            var finalProcessedData = this._doFinalize();

            return finalProcessedData;
        },

        keySize: 128 / 32,

        ivSize: 128 / 32,

        _ENC_XFORM_MODE: 1,

        _DEC_XFORM_MODE: 2,

        /**
         * Creates shortcut functions to a cipher's object interface.
         *
         * param {Cipher} cipher The cipher to create a helper for.
         *
         * return {Object} An object with encrypt and decrypt shortcut functions.
         *
         * static
         *
         *
         *
         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
         */
        _createHelper: (function () {
            function selectCipherStrategy(key) {
                if (typeof key == 'string') {
                    return PasswordBasedCipher;
                } else {
                    return SerializableCipher;
                }
            }

            return function (cipher) {
                return {
                    encrypt: function (message, key, cfg) {
                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                    },

                    decrypt: function (ciphertext, key, cfg) {
                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                    }
                };
            };
        }())
    });

    /**
     * Abstract base stream cipher template.
     *
     * property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
     */
    var StreamCipher = C_lib.StreamCipher = Cipher.extend({
        _doFinalize: function () {
            // Process partial blocks
            var finalProcessedBlocks = this._process(!!'flush');

            return finalProcessedBlocks;
        },

        blockSize: 1
    });

    /**
     * Mode namespace.
     */
    var C_mode = C.mode = {};

    /**
     * Abstract base block cipher mode template.
     */
    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
        /**
         * Creates this mode for encryption.
         *
         * param {Cipher} cipher A block cipher instance.
         * param {Array} iv The IV words.
         *
         * static
         *
         *
         *
         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
         */
        createEncryptor: function (cipher, iv) {
            return this.Encryptor.create(cipher, iv);
        },

        /**
         * Creates this mode for decryption.
         *
         * param {Cipher} cipher A block cipher instance.
         * param {Array} iv The IV words.
         *
         * static
         *
         *
         *
         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
         */
        createDecryptor: function (cipher, iv) {
            return this.Decryptor.create(cipher, iv);
        },

        /**
         * Initializes a newly created mode.
         *
         * param {Cipher} cipher A block cipher instance.
         * param {Array} iv The IV words.
         *
         *
         *
         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
         */
        init: function (cipher, iv) {
            this._cipher = cipher;
            this._iv = iv;
        }
    });

    /**
     * Cipher Block Chaining mode.
     */
    var CBC = C_mode.CBC = (function () {
        /**
         * Abstract base CBC mode.
         */
        var CBC = BlockCipherMode.extend();

        /**
         * CBC encryptor.
         */
        CBC.Encryptor = CBC.extend({
            /**
             * Processes the data block at offset.
             *
             * param {Array} words The data words to operate on.
             * param {number} offset The offset where the block starts.
             *
             *
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function (words, offset) {
                // Shortcuts
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;

                // XOR and encrypt
                xorBlock.call(this, words, offset, blockSize);
                cipher.encryptBlock(words, offset);

                // Remember this block to use with next block
                this._prevBlock = words.slice(offset, offset + blockSize);
            }
        });

        /**
         * CBC decryptor.
         */
        CBC.Decryptor = CBC.extend({
            /**
             * Processes the data block at offset.
             *
             * param {Array} words The data words to operate on.
             * param {number} offset The offset where the block starts.
             *
             *
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function (words, offset) {
                // Shortcuts
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;

                // Remember this block to use with next block
                var thisBlock = words.slice(offset, offset + blockSize);

                // Decrypt and XOR
                cipher.decryptBlock(words, offset);
                xorBlock.call(this, words, offset, blockSize);

                // This block becomes the previous block
                this._prevBlock = thisBlock;
            }
        });

        function xorBlock(words, offset, blockSize) {
            // Shortcut
            var iv = this._iv;

            // Choose mixing block
            if (iv) {
                var block = iv;

                // Remove IV for subsequent blocks
                this._iv = undefined;
            } else {
                var block = this._prevBlock;
            }

            // XOR blocks
            for (var i = 0; i < blockSize; i++) {
                words[offset + i] ^= block[i];
            }
        }

        return CBC;
    }());

    /**
     * Padding namespace.
     */
    var C_pad = C.pad = {};

    /**
     * PKCS #5/7 padding strategy.
     */
    var Pkcs7 = C_pad.Pkcs7 = {
        /**
         * Pads data using the algorithm defined in PKCS #5/7.
         *
         * param {WordArray} data The data to pad.
         * param {number} blockSize The multiple that the data should be padded to.
         *
         * static
         *
         *
         *
         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
         */
        pad: function (data, blockSize) {
            // Shortcut
            var blockSizeBytes = blockSize * 4;

            // Count padding bytes
            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

            // Create padding word
            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;

            // Create padding
            var paddingWords = [];
            for (var i = 0; i < nPaddingBytes; i += 4) {
                paddingWords.push(paddingWord);
            }
            var padding = WordArray.create(paddingWords, nPaddingBytes);

            // Add padding
            data.concat(padding);
        },

        /**
         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
         *
         * param {WordArray} data The data to unpad.
         *
         * static
         *
         *
         *
         *     CryptoJS.pad.Pkcs7.unpad(wordArray);
         */
        unpad: function (data) {
            // Get number of padding bytes from last byte
            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

            // Remove padding
            data.sigBytes -= nPaddingBytes;
        }
    };

    /**
     * Abstract base block cipher template.
     *
     * property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
     */
    var BlockCipher = C_lib.BlockCipher = Cipher.extend({
        /**
         * Configuration options.
         *
         * property {Mode} mode The block mode to use. Default: CBC
         * property {Padding} padding The padding strategy to use. Default: Pkcs7
         */
        cfg: Cipher.cfg.extend({
            mode: CBC,
            padding: Pkcs7
        }),

        reset: function () {
            // Reset cipher
            Cipher.reset.call(this);

            // Shortcuts
            var cfg = this.cfg;
            var iv = cfg.iv;
            var mode = cfg.mode;

            // Reset block mode
            if (this._xformMode == this._ENC_XFORM_MODE) {
                var modeCreator = mode.createEncryptor;
            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
                var modeCreator = mode.createDecryptor;

                // Keep at least one block in the buffer for unpadding
                this._minBufferSize = 1;
            }
            this._mode = modeCreator.call(mode, this, iv && iv.words);
        },

        _doProcessBlock: function (words, offset) {
            this._mode.processBlock(words, offset);
        },

        _doFinalize: function () {
            // Shortcut
            var padding = this.cfg.padding;

            // Finalize
            if (this._xformMode == this._ENC_XFORM_MODE) {
                // Pad data
                padding.pad(this._data, this.blockSize);

                // Process final blocks
                var finalProcessedBlocks = this._process(!!'flush');
            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
                // Process final blocks
                var finalProcessedBlocks = this._process(!!'flush');

                // Unpad data
                padding.unpad(finalProcessedBlocks);
            }

            return finalProcessedBlocks;
        },

        blockSize: 128 / 32
    });

    /**
     * A collection of cipher parameters.
     *
     * property {WordArray} ciphertext The raw ciphertext.
     * property {WordArray} key The key to this ciphertext.
     * property {WordArray} iv The IV used in the ciphering operation.
     * property {WordArray} salt The salt used with a key derivation function.
     * property {Cipher} algorithm The cipher algorithm.
     * property {Mode} mode The block mode used in the ciphering operation.
     * property {Padding} padding The padding scheme used in the ciphering operation.
     * property {number} blockSize The block size of the cipher.
     * property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
     */
    var CipherParams = C_lib.CipherParams = Base.extend({
        /**
         * Initializes a newly created cipher params object.
         *
         * param {Object} cipherParams An object with any of the possible cipher parameters.
         *
         *
         *
         *     var cipherParams = CryptoJS.lib.CipherParams.create({
         *         ciphertext: ciphertextWordArray,
         *         key: keyWordArray,
         *         iv: ivWordArray,
         *         salt: saltWordArray,
         *         algorithm: CryptoJS.algo.AES,
         *         mode: CryptoJS.mode.CBC,
         *         padding: CryptoJS.pad.PKCS7,
         *         blockSize: 4,
         *         formatter: CryptoJS.format.OpenSSL
         *     });
         */
        init: function (cipherParams) {
            this.mixIn(cipherParams);
        },

        /**
         * Converts this cipher params object to a string.
         *
         * param {Format} formatter (Optional) The formatting strategy to use.
         *
         * return {string} The stringified cipher params.
         *
         * throws Error If neither the formatter nor the default formatter is set.
         *
         *
         *
         *     var string = cipherParams + '';
         *     var string = cipherParams.toString();
         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
         */
        toString: function (formatter) {
            return (formatter || this.formatter).stringify(this);
        }
    });

    /**
     * Format namespace.
     */
    var C_format = C.format = {};

    /**
     * OpenSSL formatting strategy.
     */
    var OpenSSLFormatter = C_format.OpenSSL = {
        /**
         * Converts a cipher params object to an OpenSSL-compatible string.
         *
         * param {CipherParams} cipherParams The cipher params object.
         *
         * return {string} The OpenSSL-compatible string.
         *
         * static
         *
         *
         *
         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
         */
        stringify: function (cipherParams) {
            // Shortcuts
            var ciphertext = cipherParams.ciphertext;
            var salt = cipherParams.salt;

            // Format
            if (salt) {
                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
            } else {
                var wordArray = ciphertext;
            }

            return wordArray.toString(Base64);
        },

        /**
         * Converts an OpenSSL-compatible string to a cipher params object.
         *
         * param {string} openSSLStr The OpenSSL-compatible string.
         *
         * return {CipherParams} The cipher params object.
         *
         * static
         *
         *
         *
         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
         */
        parse: function (openSSLStr) {
            // Parse base64
            var ciphertext = Base64.parse(openSSLStr);

            // Shortcut
            var ciphertextWords = ciphertext.words;

            // Test for salt
            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
                // Extract salt
                var salt = WordArray.create(ciphertextWords.slice(2, 4));

                // Remove salt from ciphertext
                ciphertextWords.splice(0, 4);
                ciphertext.sigBytes -= 16;
            }

            return CipherParams.create({ciphertext: ciphertext, salt: salt});
        }
    };

    /**
     * A cipher wrapper that returns ciphertext as a serializable cipher params object.
     */
    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
        /**
         * Configuration options.
         *
         * property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
         */
        cfg: Base.extend({
            format: OpenSSLFormatter
        }),

        /**
         * Encrypts a message.
         *
         * param {Cipher} cipher The cipher algorithm to use.
         * param {WordArray|string} message The message to encrypt.
         * param {WordArray} key The key.
         * param {Object} cfg (Optional) The configuration options to use for this operation.
         *
         * return {CipherParams} A cipher params object.
         *
         * static
         *
         *
         *
         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
         */
        encrypt: function (cipher, message, key, cfg) {
            // Apply config defaults
            cfg = this.cfg.extend(cfg);

            // Encrypt
            var encryptor = cipher.createEncryptor(key, cfg);
            var ciphertext = encryptor.finalize(message);

            // Shortcut
            var cipherCfg = encryptor.cfg;

            // Create and return serializable cipher params
            return CipherParams.create({
                ciphertext: ciphertext,
                key: key,
                iv: cipherCfg.iv,
                algorithm: cipher,
                mode: cipherCfg.mode,
                padding: cipherCfg.padding,
                blockSize: cipher.blockSize,
                formatter: cfg.format
            });
        },

        /**
         * Decrypts serialized ciphertext.
         *
         * param {Cipher} cipher The cipher algorithm to use.
         * param {CipherParams|string} ciphertext The ciphertext to decrypt.
         * param {WordArray} key The key.
         * param {Object} cfg (Optional) The configuration options to use for this operation.
         *
         * return {WordArray} The plaintext.
         *
         * static
         *
         *
         *
         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
         */
        decrypt: function (cipher, ciphertext, key, cfg) {
            // Apply config defaults
            cfg = this.cfg.extend(cfg);

            // Convert string to CipherParams
            ciphertext = this._parse(ciphertext, cfg.format);

            // Decrypt
            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);

            return plaintext;
        },

        /**
         * Converts serialized ciphertext to CipherParams,
         * else assumed CipherParams already and returns ciphertext unchanged.
         *
         * param {CipherParams|string} ciphertext The ciphertext.
         * param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
         *
         * return {CipherParams} The unserialized ciphertext.
         *
         * static
         *
         *
         *
         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
         */
        _parse: function (ciphertext, format) {
            if (typeof ciphertext == 'string') {
                return format.parse(ciphertext, this);
            } else {
                return ciphertext;
            }
        }
    });

    /**
     * Key derivation function namespace.
     */
    var C_kdf = C.kdf = {};

    /**
     * OpenSSL key derivation function.
     */
    var OpenSSLKdf = C_kdf.OpenSSL = {
        /**
         * Derives a key and IV from a password.
         *
         * param {string} password The password to derive from.
         * param {number} keySize The size in words of the key to generate.
         * param {number} ivSize The size in words of the IV to generate.
         * param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
         *
         * return {CipherParams} A cipher params object with the key, IV, and salt.
         *
         * static
         *
         *
         *
         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
         */
        execute: function (password, keySize, ivSize, salt) {
            // Generate random salt
            if (!salt) {
                salt = WordArray.random(64 / 8);
            }

            // Derive key and IV
            var key = EvpKDF.create({keySize: keySize + ivSize}).compute(password, salt);

            // Separate key and IV
            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
            key.sigBytes = keySize * 4;

            // Return params
            return CipherParams.create({key: key, iv: iv, salt: salt});
        }
    };

    /**
     * A serializable cipher wrapper that derives the key from a password,
     * and returns ciphertext as a serializable cipher params object.
     */
    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
        /**
         * Configuration options.
         *
         * property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
         */
        cfg: SerializableCipher.cfg.extend({
            kdf: OpenSSLKdf
        }),

        /**
         * Encrypts a message using a password.
         *
         * param {Cipher} cipher The cipher algorithm to use.
         * param {WordArray|string} message The message to encrypt.
         * param {string} password The password.
         * param {Object} cfg (Optional) The configuration options to use for this operation.
         *
         * return {CipherParams} A cipher params object.
         *
         * static
         *
         *
         *
         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
         */
        encrypt: function (cipher, message, password, cfg) {
            // Apply config defaults
            cfg = this.cfg.extend(cfg);

            // Derive key and other params
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);

            // Add IV to config
            cfg.iv = derivedParams.iv;

            // Encrypt
            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

            // Mix in derived params
            ciphertext.mixIn(derivedParams);

            return ciphertext;
        },

        /**
         * Decrypts serialized ciphertext using a password.
         *
         * param {Cipher} cipher The cipher algorithm to use.
         * param {CipherParams|string} ciphertext The ciphertext to decrypt.
         * param {string} password The password.
         * param {Object} cfg (Optional) The configuration options to use for this operation.
         *
         * return {WordArray} The plaintext.
         *
         * static
         *
         *
         *
         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
         */
        decrypt: function (cipher, ciphertext, password, cfg) {
            // Apply config defaults
            cfg = this.cfg.extend(cfg);

            // Convert string to CipherParams
            ciphertext = this._parse(ciphertext, cfg.format);

            // Derive key and other params
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);

            // Add IV to config
            cfg.iv = derivedParams.iv;

            // Decrypt
            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);

            return plaintext;
        }
    });
}());

/**
 * 日期格式化工具
 * @class fish.desktop.util.DateUtil
 * <pre>
 fish.dateutil.format(new Date(), 'yyyy-mm-dd');
 * </pre>
 */
(function(factory) {
    if (typeof define === 'function' && define.amd) {
        define('fish.dateutil', factory);
    } else {
        factory();
    }
})(function() {
    var MILLIS_PER_SECOND = 1000,
        MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND,
        MILLIS_PER_HOUR = 60 * MILLIS_PER_MINUTE,
        MILLIS_PER_DAY = 24 * MILLIS_PER_HOUR,
        NON_PUNCTUATION_EXPRESSION = /[^ -\/:-@\[-`{-~\t\n\rTZ]+/g;

    /**
     * 获取一天的起始时间点
     * @param {Date} date 日期
     * @returns {Date} 日期起始点
     */
    function getStartOfDay(date){
        return new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0);
    }

    /**
     * 获取一天的结束时间点
     * @param {Date} date 日期
     * @returns {Date} 日期结束点
     */
    function getEndOfDay(date) {
        return new Date(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59, 999);
    }

    /**
     * 在指定的时间点上加上指定的年数
     * @param {Date} date 日期
     * @param {Number} years 年数
     * @returns {Date} 日期
     */
    function addYears(date, years) {
        var result = new Date(date.getTime());
        result.setYear(date.getFullYear() + years);
        return result;
    }

    /**
     * 在指定的时间点上加上指定的月数
     * @param {Date} date 日期
     * @param {Number} months 月数
     * @returns {Date} 日期
     */
    function addMonths(date, months) {
        var result = new Date(date.getTime());
        result.setMonth(date.getMonth() + months);
        result = handleShorterMonth(date, result);
        return result;
    }

    /**
     * 在指定的时间点上加上指定的天数
     * @param {Date} date 日期
     * @param {Number} days 天数
     * @returns {Date} 日期
     */
    function addDays(date, days) {
        return add(date, MILLIS_PER_DAY, days);
    }

    /**
     * 在指定的时间点上加上指定的小时数
     * @param {Date} date 日期
     * @param {Number} hours 小时数
     * @returns {Date} 日期
     */
    function addHours(date, hours) {
        return add(date, MILLIS_PER_HOUR, hours);
    }

    /**
     * 在指定的时间点上加上指定的分钟数
     * @param {Date} date 日期
     * @param {Number} minutes 分钟数
     * @returns {Date} 日期
     */
    function addMinutes(date, minutes) {
        return add(date, MILLIS_PER_MINUTE, minutes);
    }

    function add(date, multiplier, num) {
        var resultTime = date.getTime() + multiplier * num;
        return new Date(resultTime);
    }

    function handleShorterMonth(originalDate, newDate) {
        var result = newDate;
        var originalDayOfMonth = originalDate.getDate();
        if (originalDayOfMonth > result.getDate()) {
            result = addDays(newDate, -(newDate.getDate()));
        }
        return result;
    }

    /**
     * 日期格式化
     * @method format
     * @param {Date} date 日期
     * @param format 格式化字符串
     * @returns {String} 返回格式化后的字符串
     */
    function formatDate(date, format) {
        if (date == null) {
            return '';
        }
        var meridian = fish.getResource('datetimepicker.meridiem'),
            monthsShort = fish.getResource('datetimepicker.monthsShort'),
            months = fish.getResource('datetimepicker.months'),
            daysShort = fish.getResource('datetimepicker.daysShort'),
            days = fish.getResource('datetimepicker.days'),
            val = {
                // year
                yy: date.getFullYear().toString().substring(2),
                yyyy: date.getFullYear(),
                // month
                m: date.getMonth() + 1,
                M: monthsShort[date.getMonth()],
                MM: months[date.getMonth()],
                // day
                d: date.getDate(),
                D: daysShort[date.getDay()],
                DD: days[date.getDay()],
                p: (meridian.length == 2 ? meridian[date.getHours() < 12 ? 0 : 1] : ''),
                // hour
                h: date.getHours(),
                // minute
                i: date.getMinutes(),
                // second
                s: date.getSeconds()
            };

        format = parseFormat(format);

        if (meridian.length == 2) {
            val.H = (val.h % 12 == 0 ? 12 : val.h % 12);
        } else {
            val.H = val.h;
        }
        val.HH = (val.H < 10 ? '0' : '') + val.H;
        val.P = val.p.toUpperCase();
        val.hh = (val.h < 10 ? '0' : '') + val.h;
        val.ii = (val.i < 10 ? '0' : '') + val.i;
        val.ss = (val.s < 10 ? '0' : '') + val.s;
        val.dd = (val.d < 10 ? '0' : '') + val.d;
        val.mm = (val.m < 10 ? '0' : '') + val.m;

        date = [];
        var seps = $.extend([], format.separators);
        for (var i = 0, cnt = format.parts.length; i < cnt; i++) {
            if (seps.length) {
                date.push(seps.shift());
            }
            date.push(val[format.parts[i]]);
        }
        if (seps.length) {
            date.push(seps.shift());
        }
        return date.join('');
    }

    function parseFormat(format) {
        var pattern = /hh?|HH?|p|P|ii?|ss?|dd?|DD?|mm?|MM?|yy(?:yy)?/g,
            separators = format.replace(pattern, '\0').split('\0'),
            parts = format.match(pattern);
        if (!separators || !separators.length || !parts || parts.length == 0) {
            throw new Error("Invalid date format.");
        }
        return {
            separators: separators,
            parts: parts
        };
    }

    /**
     * 日期解析
     * @method parse
     * @param {String} date 日期字符串
     * @param {String} format 日期格式
     * @returns {Date} 返回日期对象
     */
    function parseDate(date, format) {
        if (date instanceof Date) {
            return date;
        }

        if (date == null || date.length != format.length)
            return null;

        if (/^[-+]\d+[dmwy]([\s,]+[-+]\d+[dmwy])*$/.test(date)) {
            var part_re = /([-+]\d+)([dmwy])/,
                parts = date.match(/([-+]\d+)([dmwy])/g),
                part, dir;
            date = new Date();
            for (var i = 0; i < parts.length; i++) {
                part = part_re.exec(parts[i]);
                dir = parseInt(part[1]);
                switch (part[2]) {
                    case 'd':
                        date.setDate(date.getDate() + dir);
                        break;
                    case 'm':
                        date = addMonths(date, dir);
                        break;
                    case 'w':
                        date.setDate(date.getDate() + dir * 7);
                        break;
                    case 'y':
                        date = addYears(date, dir);
                        break;
                }
            }
            return new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), 0);
        }

        format = parseFormat(format);

        var parts = date && date.match(NON_PUNCTUATION_EXPRESSION) || [],
            date = new Date(0, 0, 0, 0, 0, 0, 0),
            months = fish.getResource('datetimepicker.months'),
            monthsShort = fish.getResource('datetimepicker.monthsShort'),
            meridian = fish.getResource('datetimepicker.meridian'),
            parsed = {},
            setters_order = ['hh', 'h', 'ii', 'i', 'ss', 's', 'yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'D', 'DD', 'd', 'dd', 'H', 'HH', 'p', 'P'],
            setters_map = {
                hh: function(d, v) {
                    return d.setHours(v);
                },
                h: function(d, v) {
                    return d.setHours(v);
                },
                HH: function(d, v) {
                    return d.setHours(v == 12 ? 0 : v);
                },
                H: function(d, v) {
                    return d.setHours(v == 12 ? 0 : v);
                },
                ii: function(d, v) {
                    return d.setMinutes(v);
                },
                i: function(d, v) {
                    return d.setMinutes(v);
                },
                ss: function(d, v) {
                    return d.setSeconds(v);
                },
                s: function(d, v) {
                    return d.setSeconds(v);
                },
                yyyy: function(d, v) {
                    return d.setFullYear(v);
                },
                yy: function(d, v) {
                    return d.setFullYear(2000 + v);
                },
                m: function(d, v) {
                    v -= 1;
                    while (v < 0) v += 12;
                    v %= 12;
                    d.setMonth(v);
                    while (d.getMonth() != v)
                        d.setDate(d.getDate() - 1);
                    return d;
                },
                d: function(d, v) {
                    return d.setDate(v);
                },
                p: function(d, v) {
                    return d.setHours(v == 1 ? d.getHours() + 12 : d.getHours());
                }
            },
            val, filtered, part;
        setters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];
        setters_map['dd'] = setters_map['d'];
        setters_map['P'] = setters_map['p'];
        date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds());
        if (parts.length == format.parts.length) {
            for (var i = 0, cnt = format.parts.length; i < cnt; i++) {
                val = parseInt(parts[i], 10);
                part = format.parts[i];
                if (isNaN(val)) {
                    switch (part) {
                        case 'MM':
                            filtered = $(months).filter(function() {
                                var m = this.slice(0, parts[i].length),
                                    p = parts[i].slice(0, m.length);
                                return m == p;
                            });
                            val = $.inArray(filtered[0], months) + 1;
                            break;
                        case 'M':
                            filtered = $(monthsShort).filter(function() {
                                var m = this.slice(0, parts[i].length),
                                    p = parts[i].slice(0, m.length);
                                return m == p;
                            });
                            val = $.inArray(filtered[0], monthsShort) + 1;
                            break;
                        case 'p':
                        case 'P':
                            val = $.inArray(parts[i].toLowerCase(), meridian);
                            break;
                    }
                }
                parsed[part] = val;
            }
            for (var i = 0, s; i < setters_order.length; i++) {
                s = setters_order[i];
                if (s in parsed && !isNaN(parsed[s]))
                    setters_map[s](date, parsed[s])
            }
        }
        return date;
    }

    function isLeapYear(year) {
        return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));
    }

    function getDaysInMonth(year, month) {
        return [31, (isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
    }

    /**
     * 日期展示，根据解析日期格式解析日期字符串，然后在根据展示日期格式，返回格式化日期字符串
     * @param {String} date 日期字符串
     * @param {String} [parseFormat=fish.config.get('dateParseFormat.date')]
     * 解析日期格式，默认值获取 `dateParseFormat.date` 配置项
     * @param {String} [displayFormat=fish.config.get('dateDisplayFormat.date')]
     * 展示日期格式，默认值获取 `dateDisplayFormat.date` 配置项
     * @returns {String} 日期字符串
     */
    function displayDate(date, parseFormat, displayFormat) {
        parseFormat = parseFormat || fish.config.get('dateParseFormat.date');
        displayFormat = displayFormat || fish.config.get('dateDisplayFormat.date');

        return formatDate(parseDate(date, parseFormat), displayFormat);
    }

    return fish.dateutil = {
        addYears: addYears,
        addMonths: addMonths,
        addDays: addDays,
        addHours: addHours,
        addMinutes: addMinutes,
        format: formatDate,
        parse: parseDate,
        displayDate: displayDate,
        getDaysInMonth: getDaysInMonth,
        getStartOfDay: getStartOfDay,
        getEndOfDay: getEndOfDay,
        diffYears: function (date1, date2) {
            return date1.getFullYear() - date2.getFullYear();
        },

        diffMonths: function (date1, date2) {
            var diff = this.diffYears(date1, date2) * 12;
            diff += date1.getMonth() - date2.getMonth();
            return diff;
        },

        diffDays: function (date1, date2) {
            var diff = date1.valueOf() - date2.valueOf();
            return diff / MILLIS_PER_DAY;
        }
    };
});
/**
 * DES加密算法
 * @class fish.desktop.util.DES
 * <pre>
 *   fish.DES.encrypt(msg,key);
 *   fish.DES.decrypt(securityMsg, key);
 * </pre>
 */
(function () {
    // Shortcuts
    var C = fish.CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray;
    var BlockCipher = C_lib.BlockCipher;
    var C_algo = C.algo;

    // Permuted Choice 1 constants
    var PC1 = [
        57, 49, 41, 33, 25, 17, 9, 1,
        58, 50, 42, 34, 26, 18, 10, 2,
        59, 51, 43, 35, 27, 19, 11, 3,
        60, 52, 44, 36, 63, 55, 47, 39,
        31, 23, 15, 7, 62, 54, 46, 38,
        30, 22, 14, 6, 61, 53, 45, 37,
        29, 21, 13, 5, 28, 20, 12, 4
    ];

    // Permuted Choice 2 constants
    var PC2 = [
        14, 17, 11, 24, 1, 5,
        3, 28, 15, 6, 21, 10,
        23, 19, 12, 4, 26, 8,
        16, 7, 27, 20, 13, 2,
        41, 52, 31, 37, 47, 55,
        30, 40, 51, 45, 33, 48,
        44, 49, 39, 56, 34, 53,
        46, 42, 50, 36, 29, 32
    ];

    // Cumulative bit shift constants
    var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];

    // SBOXes and round permutation constants
    var SBOX_P = [
        {
            0x0: 0x808200,
            0x10000000: 0x8000,
            0x20000000: 0x808002,
            0x30000000: 0x2,
            0x40000000: 0x200,
            0x50000000: 0x808202,
            0x60000000: 0x800202,
            0x70000000: 0x800000,
            0x80000000: 0x202,
            0x90000000: 0x800200,
            0xa0000000: 0x8200,
            0xb0000000: 0x808000,
            0xc0000000: 0x8002,
            0xd0000000: 0x800002,
            0xe0000000: 0x0,
            0xf0000000: 0x8202,
            0x8000000: 0x0,
            0x18000000: 0x808202,
            0x28000000: 0x8202,
            0x38000000: 0x8000,
            0x48000000: 0x808200,
            0x58000000: 0x200,
            0x68000000: 0x808002,
            0x78000000: 0x2,
            0x88000000: 0x800200,
            0x98000000: 0x8200,
            0xa8000000: 0x808000,
            0xb8000000: 0x800202,
            0xc8000000: 0x800002,
            0xd8000000: 0x8002,
            0xe8000000: 0x202,
            0xf8000000: 0x800000,
            0x1: 0x8000,
            0x10000001: 0x2,
            0x20000001: 0x808200,
            0x30000001: 0x800000,
            0x40000001: 0x808002,
            0x50000001: 0x8200,
            0x60000001: 0x200,
            0x70000001: 0x800202,
            0x80000001: 0x808202,
            0x90000001: 0x808000,
            0xa0000001: 0x800002,
            0xb0000001: 0x8202,
            0xc0000001: 0x202,
            0xd0000001: 0x800200,
            0xe0000001: 0x8002,
            0xf0000001: 0x0,
            0x8000001: 0x808202,
            0x18000001: 0x808000,
            0x28000001: 0x800000,
            0x38000001: 0x200,
            0x48000001: 0x8000,
            0x58000001: 0x800002,
            0x68000001: 0x2,
            0x78000001: 0x8202,
            0x88000001: 0x8002,
            0x98000001: 0x800202,
            0xa8000001: 0x202,
            0xb8000001: 0x808200,
            0xc8000001: 0x800200,
            0xd8000001: 0x0,
            0xe8000001: 0x8200,
            0xf8000001: 0x808002
        },
        {
            0x0: 0x40084010,
            0x1000000: 0x4000,
            0x2000000: 0x80000,
            0x3000000: 0x40080010,
            0x4000000: 0x40000010,
            0x5000000: 0x40084000,
            0x6000000: 0x40004000,
            0x7000000: 0x10,
            0x8000000: 0x84000,
            0x9000000: 0x40004010,
            0xa000000: 0x40000000,
            0xb000000: 0x84010,
            0xc000000: 0x80010,
            0xd000000: 0x0,
            0xe000000: 0x4010,
            0xf000000: 0x40080000,
            0x800000: 0x40004000,
            0x1800000: 0x84010,
            0x2800000: 0x10,
            0x3800000: 0x40004010,
            0x4800000: 0x40084010,
            0x5800000: 0x40000000,
            0x6800000: 0x80000,
            0x7800000: 0x40080010,
            0x8800000: 0x80010,
            0x9800000: 0x0,
            0xa800000: 0x4000,
            0xb800000: 0x40080000,
            0xc800000: 0x40000010,
            0xd800000: 0x84000,
            0xe800000: 0x40084000,
            0xf800000: 0x4010,
            0x10000000: 0x0,
            0x11000000: 0x40080010,
            0x12000000: 0x40004010,
            0x13000000: 0x40084000,
            0x14000000: 0x40080000,
            0x15000000: 0x10,
            0x16000000: 0x84010,
            0x17000000: 0x4000,
            0x18000000: 0x4010,
            0x19000000: 0x80000,
            0x1a000000: 0x80010,
            0x1b000000: 0x40000010,
            0x1c000000: 0x84000,
            0x1d000000: 0x40004000,
            0x1e000000: 0x40000000,
            0x1f000000: 0x40084010,
            0x10800000: 0x84010,
            0x11800000: 0x80000,
            0x12800000: 0x40080000,
            0x13800000: 0x4000,
            0x14800000: 0x40004000,
            0x15800000: 0x40084010,
            0x16800000: 0x10,
            0x17800000: 0x40000000,
            0x18800000: 0x40084000,
            0x19800000: 0x40000010,
            0x1a800000: 0x40004010,
            0x1b800000: 0x80010,
            0x1c800000: 0x0,
            0x1d800000: 0x4010,
            0x1e800000: 0x40080010,
            0x1f800000: 0x84000
        },
        {
            0x0: 0x104,
            0x100000: 0x0,
            0x200000: 0x4000100,
            0x300000: 0x10104,
            0x400000: 0x10004,
            0x500000: 0x4000004,
            0x600000: 0x4010104,
            0x700000: 0x4010000,
            0x800000: 0x4000000,
            0x900000: 0x4010100,
            0xa00000: 0x10100,
            0xb00000: 0x4010004,
            0xc00000: 0x4000104,
            0xd00000: 0x10000,
            0xe00000: 0x4,
            0xf00000: 0x100,
            0x80000: 0x4010100,
            0x180000: 0x4010004,
            0x280000: 0x0,
            0x380000: 0x4000100,
            0x480000: 0x4000004,
            0x580000: 0x10000,
            0x680000: 0x10004,
            0x780000: 0x104,
            0x880000: 0x4,
            0x980000: 0x100,
            0xa80000: 0x4010000,
            0xb80000: 0x10104,
            0xc80000: 0x10100,
            0xd80000: 0x4000104,
            0xe80000: 0x4010104,
            0xf80000: 0x4000000,
            0x1000000: 0x4010100,
            0x1100000: 0x10004,
            0x1200000: 0x10000,
            0x1300000: 0x4000100,
            0x1400000: 0x100,
            0x1500000: 0x4010104,
            0x1600000: 0x4000004,
            0x1700000: 0x0,
            0x1800000: 0x4000104,
            0x1900000: 0x4000000,
            0x1a00000: 0x4,
            0x1b00000: 0x10100,
            0x1c00000: 0x4010000,
            0x1d00000: 0x104,
            0x1e00000: 0x10104,
            0x1f00000: 0x4010004,
            0x1080000: 0x4000000,
            0x1180000: 0x104,
            0x1280000: 0x4010100,
            0x1380000: 0x0,
            0x1480000: 0x10004,
            0x1580000: 0x4000100,
            0x1680000: 0x100,
            0x1780000: 0x4010004,
            0x1880000: 0x10000,
            0x1980000: 0x4010104,
            0x1a80000: 0x10104,
            0x1b80000: 0x4000004,
            0x1c80000: 0x4000104,
            0x1d80000: 0x4010000,
            0x1e80000: 0x4,
            0x1f80000: 0x10100
        },
        {
            0x0: 0x80401000,
            0x10000: 0x80001040,
            0x20000: 0x401040,
            0x30000: 0x80400000,
            0x40000: 0x0,
            0x50000: 0x401000,
            0x60000: 0x80000040,
            0x70000: 0x400040,
            0x80000: 0x80000000,
            0x90000: 0x400000,
            0xa0000: 0x40,
            0xb0000: 0x80001000,
            0xc0000: 0x80400040,
            0xd0000: 0x1040,
            0xe0000: 0x1000,
            0xf0000: 0x80401040,
            0x8000: 0x80001040,
            0x18000: 0x40,
            0x28000: 0x80400040,
            0x38000: 0x80001000,
            0x48000: 0x401000,
            0x58000: 0x80401040,
            0x68000: 0x0,
            0x78000: 0x80400000,
            0x88000: 0x1000,
            0x98000: 0x80401000,
            0xa8000: 0x400000,
            0xb8000: 0x1040,
            0xc8000: 0x80000000,
            0xd8000: 0x400040,
            0xe8000: 0x401040,
            0xf8000: 0x80000040,
            0x100000: 0x400040,
            0x110000: 0x401000,
            0x120000: 0x80000040,
            0x130000: 0x0,
            0x140000: 0x1040,
            0x150000: 0x80400040,
            0x160000: 0x80401000,
            0x170000: 0x80001040,
            0x180000: 0x80401040,
            0x190000: 0x80000000,
            0x1a0000: 0x80400000,
            0x1b0000: 0x401040,
            0x1c0000: 0x80001000,
            0x1d0000: 0x400000,
            0x1e0000: 0x40,
            0x1f0000: 0x1000,
            0x108000: 0x80400000,
            0x118000: 0x80401040,
            0x128000: 0x0,
            0x138000: 0x401000,
            0x148000: 0x400040,
            0x158000: 0x80000000,
            0x168000: 0x80001040,
            0x178000: 0x40,
            0x188000: 0x80000040,
            0x198000: 0x1000,
            0x1a8000: 0x80001000,
            0x1b8000: 0x80400040,
            0x1c8000: 0x1040,
            0x1d8000: 0x80401000,
            0x1e8000: 0x400000,
            0x1f8000: 0x401040
        },
        {
            0x0: 0x80,
            0x1000: 0x1040000,
            0x2000: 0x40000,
            0x3000: 0x20000000,
            0x4000: 0x20040080,
            0x5000: 0x1000080,
            0x6000: 0x21000080,
            0x7000: 0x40080,
            0x8000: 0x1000000,
            0x9000: 0x20040000,
            0xa000: 0x20000080,
            0xb000: 0x21040080,
            0xc000: 0x21040000,
            0xd000: 0x0,
            0xe000: 0x1040080,
            0xf000: 0x21000000,
            0x800: 0x1040080,
            0x1800: 0x21000080,
            0x2800: 0x80,
            0x3800: 0x1040000,
            0x4800: 0x40000,
            0x5800: 0x20040080,
            0x6800: 0x21040000,
            0x7800: 0x20000000,
            0x8800: 0x20040000,
            0x9800: 0x0,
            0xa800: 0x21040080,
            0xb800: 0x1000080,
            0xc800: 0x20000080,
            0xd800: 0x21000000,
            0xe800: 0x1000000,
            0xf800: 0x40080,
            0x10000: 0x40000,
            0x11000: 0x80,
            0x12000: 0x20000000,
            0x13000: 0x21000080,
            0x14000: 0x1000080,
            0x15000: 0x21040000,
            0x16000: 0x20040080,
            0x17000: 0x1000000,
            0x18000: 0x21040080,
            0x19000: 0x21000000,
            0x1a000: 0x1040000,
            0x1b000: 0x20040000,
            0x1c000: 0x40080,
            0x1d000: 0x20000080,
            0x1e000: 0x0,
            0x1f000: 0x1040080,
            0x10800: 0x21000080,
            0x11800: 0x1000000,
            0x12800: 0x1040000,
            0x13800: 0x20040080,
            0x14800: 0x20000000,
            0x15800: 0x1040080,
            0x16800: 0x80,
            0x17800: 0x21040000,
            0x18800: 0x40080,
            0x19800: 0x21040080,
            0x1a800: 0x0,
            0x1b800: 0x21000000,
            0x1c800: 0x1000080,
            0x1d800: 0x40000,
            0x1e800: 0x20040000,
            0x1f800: 0x20000080
        },
        {
            0x0: 0x10000008,
            0x100: 0x2000,
            0x200: 0x10200000,
            0x300: 0x10202008,
            0x400: 0x10002000,
            0x500: 0x200000,
            0x600: 0x200008,
            0x700: 0x10000000,
            0x800: 0x0,
            0x900: 0x10002008,
            0xa00: 0x202000,
            0xb00: 0x8,
            0xc00: 0x10200008,
            0xd00: 0x202008,
            0xe00: 0x2008,
            0xf00: 0x10202000,
            0x80: 0x10200000,
            0x180: 0x10202008,
            0x280: 0x8,
            0x380: 0x200000,
            0x480: 0x202008,
            0x580: 0x10000008,
            0x680: 0x10002000,
            0x780: 0x2008,
            0x880: 0x200008,
            0x980: 0x2000,
            0xa80: 0x10002008,
            0xb80: 0x10200008,
            0xc80: 0x0,
            0xd80: 0x10202000,
            0xe80: 0x202000,
            0xf80: 0x10000000,
            0x1000: 0x10002000,
            0x1100: 0x10200008,
            0x1200: 0x10202008,
            0x1300: 0x2008,
            0x1400: 0x200000,
            0x1500: 0x10000000,
            0x1600: 0x10000008,
            0x1700: 0x202000,
            0x1800: 0x202008,
            0x1900: 0x0,
            0x1a00: 0x8,
            0x1b00: 0x10200000,
            0x1c00: 0x2000,
            0x1d00: 0x10002008,
            0x1e00: 0x10202000,
            0x1f00: 0x200008,
            0x1080: 0x8,
            0x1180: 0x202000,
            0x1280: 0x200000,
            0x1380: 0x10000008,
            0x1480: 0x10002000,
            0x1580: 0x2008,
            0x1680: 0x10202008,
            0x1780: 0x10200000,
            0x1880: 0x10202000,
            0x1980: 0x10200008,
            0x1a80: 0x2000,
            0x1b80: 0x202008,
            0x1c80: 0x200008,
            0x1d80: 0x0,
            0x1e80: 0x10000000,
            0x1f80: 0x10002008
        },
        {
            0x0: 0x100000,
            0x10: 0x2000401,
            0x20: 0x400,
            0x30: 0x100401,
            0x40: 0x2100401,
            0x50: 0x0,
            0x60: 0x1,
            0x70: 0x2100001,
            0x80: 0x2000400,
            0x90: 0x100001,
            0xa0: 0x2000001,
            0xb0: 0x2100400,
            0xc0: 0x2100000,
            0xd0: 0x401,
            0xe0: 0x100400,
            0xf0: 0x2000000,
            0x8: 0x2100001,
            0x18: 0x0,
            0x28: 0x2000401,
            0x38: 0x2100400,
            0x48: 0x100000,
            0x58: 0x2000001,
            0x68: 0x2000000,
            0x78: 0x401,
            0x88: 0x100401,
            0x98: 0x2000400,
            0xa8: 0x2100000,
            0xb8: 0x100001,
            0xc8: 0x400,
            0xd8: 0x2100401,
            0xe8: 0x1,
            0xf8: 0x100400,
            0x100: 0x2000000,
            0x110: 0x100000,
            0x120: 0x2000401,
            0x130: 0x2100001,
            0x140: 0x100001,
            0x150: 0x2000400,
            0x160: 0x2100400,
            0x170: 0x100401,
            0x180: 0x401,
            0x190: 0x2100401,
            0x1a0: 0x100400,
            0x1b0: 0x1,
            0x1c0: 0x0,
            0x1d0: 0x2100000,
            0x1e0: 0x2000001,
            0x1f0: 0x400,
            0x108: 0x100400,
            0x118: 0x2000401,
            0x128: 0x2100001,
            0x138: 0x1,
            0x148: 0x2000000,
            0x158: 0x100000,
            0x168: 0x401,
            0x178: 0x2100400,
            0x188: 0x2000001,
            0x198: 0x2100000,
            0x1a8: 0x0,
            0x1b8: 0x2100401,
            0x1c8: 0x100401,
            0x1d8: 0x400,
            0x1e8: 0x2000400,
            0x1f8: 0x100001
        },
        {
            0x0: 0x8000820,
            0x1: 0x20000,
            0x2: 0x8000000,
            0x3: 0x20,
            0x4: 0x20020,
            0x5: 0x8020820,
            0x6: 0x8020800,
            0x7: 0x800,
            0x8: 0x8020000,
            0x9: 0x8000800,
            0xa: 0x20800,
            0xb: 0x8020020,
            0xc: 0x820,
            0xd: 0x0,
            0xe: 0x8000020,
            0xf: 0x20820,
            0x80000000: 0x800,
            0x80000001: 0x8020820,
            0x80000002: 0x8000820,
            0x80000003: 0x8000000,
            0x80000004: 0x8020000,
            0x80000005: 0x20800,
            0x80000006: 0x20820,
            0x80000007: 0x20,
            0x80000008: 0x8000020,
            0x80000009: 0x820,
            0x8000000a: 0x20020,
            0x8000000b: 0x8020800,
            0x8000000c: 0x0,
            0x8000000d: 0x8020020,
            0x8000000e: 0x8000800,
            0x8000000f: 0x20000,
            0x10: 0x20820,
            0x11: 0x8020800,
            0x12: 0x20,
            0x13: 0x800,
            0x14: 0x8000800,
            0x15: 0x8000020,
            0x16: 0x8020020,
            0x17: 0x20000,
            0x18: 0x0,
            0x19: 0x20020,
            0x1a: 0x8020000,
            0x1b: 0x8000820,
            0x1c: 0x8020820,
            0x1d: 0x20800,
            0x1e: 0x820,
            0x1f: 0x8000000,
            0x80000010: 0x20000,
            0x80000011: 0x800,
            0x80000012: 0x8020020,
            0x80000013: 0x20820,
            0x80000014: 0x20,
            0x80000015: 0x8020000,
            0x80000016: 0x8000000,
            0x80000017: 0x8000820,
            0x80000018: 0x8020820,
            0x80000019: 0x8000020,
            0x8000001a: 0x8000800,
            0x8000001b: 0x0,
            0x8000001c: 0x20800,
            0x8000001d: 0x820,
            0x8000001e: 0x20020,
            0x8000001f: 0x8020800
        }
    ];

    // Masks that select the SBOX input
    var SBOX_MASK = [
        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,
        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f
    ];

    //DES block cipher algorithm.
    var DES = C_algo.DES = BlockCipher.extend({
        _doReset: function () {
            // Shortcuts
            var key = this._key;
            var keyWords = key.words;

            // Select 56 bits according to PC1
            var keyBits = [];
            for (var i = 0; i < 56; i++) {
                var keyBitPos = PC1[i] - 1;
                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;
            }

            // Assemble 16 subkeys
            var subKeys = this._subKeys = [];
            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
                // Create subkey
                var subKey = subKeys[nSubKey] = [];

                // Shortcut
                var bitShift = BIT_SHIFTS[nSubKey];

                // Select 48 bits according to PC2
                for (var i = 0; i < 24; i++) {
                    // Select from the left 28 key bits
                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);

                    // Select from the right 28 key bits
                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);
                }

                // Since each subkey is applied to an expanded 32-bit input,
                // the subkey can be broken into 8 values scaled to 32-bits,
                // which allows the key to be used without expansion
                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);
                for (var i = 1; i < 7; i++) {
                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);
                }
                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);
            }

            // Compute inverse subkeys
            var invSubKeys = this._invSubKeys = [];
            for (var i = 0; i < 16; i++) {
                invSubKeys[i] = subKeys[15 - i];
            }
        },

        encryptBlock: function (M, offset) {
            this._doCryptBlock(M, offset, this._subKeys);
        },

        decryptBlock: function (M, offset) {
            this._doCryptBlock(M, offset, this._invSubKeys);
        },

        _doCryptBlock: function (M, offset, subKeys) {
            // Get input
            this._lBlock = M[offset];
            this._rBlock = M[offset + 1];

            // Initial permutation
            exchangeLR.call(this, 4, 0x0f0f0f0f);
            exchangeLR.call(this, 16, 0x0000ffff);
            exchangeRL.call(this, 2, 0x33333333);
            exchangeRL.call(this, 8, 0x00ff00ff);
            exchangeLR.call(this, 1, 0x55555555);

            // Rounds
            for (var round = 0; round < 16; round++) {
                // Shortcuts
                var subKey = subKeys[round];
                var lBlock = this._lBlock;
                var rBlock = this._rBlock;

                // Feistel function
                var f = 0;
                for (var i = 0; i < 8; i++) {
                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
                }
                this._lBlock = rBlock;
                this._rBlock = lBlock ^ f;
            }

            // Undo swap from last round
            var t = this._lBlock;
            this._lBlock = this._rBlock;
            this._rBlock = t;

            // Final permutation
            exchangeLR.call(this, 1, 0x55555555);
            exchangeRL.call(this, 8, 0x00ff00ff);
            exchangeRL.call(this, 2, 0x33333333);
            exchangeLR.call(this, 16, 0x0000ffff);
            exchangeLR.call(this, 4, 0x0f0f0f0f);

            // Set output
            M[offset] = this._lBlock;
            M[offset + 1] = this._rBlock;
        },

        keySize: 64 / 32,

        ivSize: 64 / 32,

        blockSize: 64 / 32
    });

    // Swap bits across the left and right words
    function exchangeLR(offset, mask) {
        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;
        this._rBlock ^= t;
        this._lBlock ^= t << offset;
    }

    function exchangeRL(offset, mask) {
        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;
        this._lBlock ^= t;
        this._rBlock ^= t << offset;
    }

    // Shortcut functions to the cipher's object interface.
    //   var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
    //   var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
    C.DES = BlockCipher._createHelper(DES);

    //Triple-DES block cipher algorithm.
    var TripleDES = C_algo.TripleDES = BlockCipher.extend({
        _doReset: function () {
            // Shortcuts
            var key = this._key;
            var keyWords = key.words;

            // Create DES instances
            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));
            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));
            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));
        },

        encryptBlock: function (M, offset) {
            this._des1.encryptBlock(M, offset);
            this._des2.decryptBlock(M, offset);
            this._des3.encryptBlock(M, offset);
        },

        decryptBlock: function (M, offset) {
            this._des3.decryptBlock(M, offset);
            this._des2.encryptBlock(M, offset);
            this._des1.decryptBlock(M, offset);
        },

        keySize: 192 / 32,

        ivSize: 64 / 32,

        blockSize: 64 / 32
    });

    //* Shortcut functions to the cipher's object interface.
    //*     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
    //*     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
    C.TripleDES = BlockCipher._createHelper(TripleDES);

    fish.DES = {
        /**
         * 使用指定的密钥加密
         * @method
         * @param {String} key 密钥
         * @param {String} message 明文
         * @returns {String} 密文
         */
        encrypt: function (msg, key) {
            var encrypted = C.DES.encrypt(msg, key);
            return encrypted.toString();
        },
        /**
         * 使用指定的密钥解密
         * @method
         * @param {String} key 密钥
         * @param {String} message 明文
         * @returns {String} 密文
         */
        decrypt: function (securityMsg, key) {
            var decrypted = C.DES.decrypt(securityMsg, key);
            return decrypted.toString(C.enc.Utf8);
        }
    };
}());

/**
 * @class fish.desktop.util.MD5
 * md5加密工具
 * <pre>
 *   fish.MD5(string)
 *   fish.HmacMD5(msg, key);
 * </pre>
 */


//hmac
(function () {
    // Shortcuts
    var C = fish.CryptoJS;
    var C_lib = C.lib;
    var Base = C_lib.Base;
    var C_enc = C.enc;
    var Utf8 = C_enc.Utf8;
    var C_algo = C.algo;

    //HMAC algorithm.
    var HMAC = C_algo.HMAC = Base.extend({
        init: function (hasher, key) {
            // Init hasher
            hasher = this._hasher = new hasher.init();

            // Convert string to WordArray, else assume WordArray already
            if (typeof key == 'string') {
                key = Utf8.parse(key);
            }

            // Shortcuts
            var hasherBlockSize = hasher.blockSize;
            var hasherBlockSizeBytes = hasherBlockSize * 4;

            // Allow arbitrary length keys
            if (key.sigBytes > hasherBlockSizeBytes) {
                key = hasher.finalize(key);
            }

            // Clamp excess bits
            key.clamp();

            // Clone key for inner and outer pads
            var oKey = this._oKey = key.clone();
            var iKey = this._iKey = key.clone();

            // Shortcuts
            var oKeyWords = oKey.words;
            var iKeyWords = iKey.words;

            // XOR keys with pad constants
            for (var i = 0; i < hasherBlockSize; i++) {
                oKeyWords[i] ^= 0x5c5c5c5c;
                iKeyWords[i] ^= 0x36363636;
            }
            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

            // Set initial values
            this.reset();
        },

        /**
         * Resets this HMAC to its initial state.
         *
         *
         *     hmacHasher.reset();
         */
        reset: function () {
            // Shortcut
            var hasher = this._hasher;

            // Reset
            hasher.reset();
            hasher.update(this._iKey);
        },

        /**
         * Updates this HMAC with a message.
         *
         *
         *
         *     hmacHasher.update('message');
         *     hmacHasher.update(wordArray);
         */
        update: function (messageUpdate) {
            this._hasher.update(messageUpdate);

            // Chainable
            return this;
        },

        /**
         * Finalizes the HMAC computation.
         * Note that the finalize operation is effectively a destructive, read-once operation.
         *
         *     var hmac = hmacHasher.finalize();
         *     var hmac = hmacHasher.finalize('message');
         *     var hmac = hmacHasher.finalize(wordArray);
         */
        finalize: function (messageUpdate) {
            // Shortcut
            var hasher = this._hasher;

            // Compute HMAC
            var innerHash = hasher.finalize(messageUpdate);
            hasher.reset();
            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));

            return hmac;
        }
    });
}());


!function () {
    /**
     * 返回32位msg内容摘要
     * @method MD5
     * @param msg 待做摘要的内容
     * @returns {string} 返回32位msg内容摘要
     */
    fish.MD5 = function (msg) {
        return fish.CryptoJS.MD5(msg).toString();
    };

    /**
     * HMACMD5 是从 MD5 哈希函数构造的一种键控哈希算法，被用作基于哈希的消息验证代码 (HMAC)。此 HMAC 进程将密钥与消息数据混合，使用哈希函数对混合结果进行哈希计算，将所得哈希值与该密钥混合，然后再次应用哈希函数。输出的哈希值长度为 128 位
     * @method HmacMD5
     * @param msg 待做摘要的内容
     * @param key 秘钥
     * @returns {String} 返回32位16进制摘要
     */
    fish.HmacMD5 = function (msg, key) {
        return fish.CryptoJS.HmacMD5(msg, key).toString();
    };
}();

///**
// * @method MD5
// * MD5是输入不定長度信息，輸出固定長度128-bits的演算法。经过程序流程，生成四个32位数据，最后联合起来成为一个128-bits散列。基本方式为，求余、取余、调整长度、与链接变量进行循环运算。得出结果。一般128位的MD5散列被表示为32位十六进制数字
// *   fish.MD5提供了两种形式的结果返回，一个是16进制形式，一种未经转换的128位散列值
// * @param {String} string 输入的信息
// * @param {String} key    密钥
// * @param {Boolean} [raw=false]    是否返回128bit的散列摘要
// * @return {String} 如果raw传入true，则返回128bit的散列摘要；否则返回32位16进制数字摘要
// */
//fish.MD5 = function (string, key, raw) {
//    if (!key) {
//        if (!raw) {
//            return hex_md5(string);
//        }
//        return raw_md5(string);
//    }
//    if (!raw) {
//        return hex_hmac_md5(key, string);
//    }
//    return raw_hmac_md5(key, string);
//}

/**
 * @class fish.desktop.util.Store
 * 本地存储，localStorage适配层
 * <pre>
 *   fish.store.set(key, value)
 *   fish.store.get(key)
 * </pre>
 */
fish.store = {
    /**
     * 获取本地存储容量数量
     * @method length
     * @return {Number} 返回本地存储容量数量
     */
    length: function() {
        return localStorage.length;
    },
    /**
     * 存储
     * @method set
     * @param {Object} key 键名
     * @param {Object} value 存储内容
     */
    set: function(key, value) {
        localStorage.setItem(key, value);
    },
    /**
     * 获取对应key内容
     * @method get
     * @param {Object} key 键名
     * @return {Object}
     */
    get: function(key) {
        return localStorage.getItem(key);
    },
    /**
     * 删除对应key
     * @method remove
     * @param {Object} key 键名
     */
    remove: function(key) {
        localStorage.removeItem(key);
    },
    /**
     * 清空所有项
     * @method clear
     */
    clear: function() {
        localStorage.clear();
    },
    /**
     * 遍历
     * @method each
     * @param {Function} fn 回调函数
     * @param {Object} fn.key 键
     * @param {Object} fn.value 值
     */
    each: function(fn) {
        var n = localStorage.length,
            i = 0;

        fn = fn || function() {};
        for (; i < n; i++) {
            var key = localStorage.key(i);
            if (fn.call(this, key, this.get(key)) === false)
                break;
            //如果内容被删除，则总长度和索引都同步减少
            if (localStorage.length < n) {
                n--;
                i--;
            }
        }
    }
};

/*!
 * jQuery UI Core 1.11.4
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/category/ui-core/
 */


// $.ui might exist from components with no dependencies, e.g., $.ui.position
$.ui = $.ui || {};

$.extend( $.ui, {
	version: "1.11.4",

	keyCode: {
		BACKSPACE: 8,
		COMMA: 188,
		DELETE: 46,
		DOWN: 40,
		END: 35,
		ENTER: 13,
		ESCAPE: 27,
		HOME: 36,
		LEFT: 37,
		PAGE_DOWN: 34,
		PAGE_UP: 33,
		PERIOD: 190,
		RIGHT: 39,
		SPACE: 32,
		TAB: 9,
		UP: 38
	}
});

// plugins
$.fn.extend({
	scrollParent: function( includeHidden ) {
		var position = this.css( "position" ),
			excludeStaticParent = position === "absolute",
			overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
			scrollParent = this.parents().filter( function() {
				var parent = $( this );
				if ( excludeStaticParent && parent.css( "position" ) === "static" ) {
					return false;
						}
				return overflowRegex.test( parent.css( "overflow" ) + parent.css( "overflow-y" ) + parent.css( "overflow-x" ) );
			}).eq(0);

		return position === "fixed" || !scrollParent.length ? $( this[ 0 ].ownerDocument || document ) : scrollParent;
	},

	uniqueId: (function() {
		var uuid = 0;

		return function() {
		return this.each(function() {
			if ( !this.id ) {
				this.id = "ui-id-" + (++uuid);
			}
		});
		};
	})(),

	removeUniqueId: function() {
		return this.each(function() {
			if ( /^ui-id-\d+$/.test( this.id ) ) {
				$( this ).removeAttr( "id" );
			}
		});
	}
});

// selectors
function focusable( element, isTabIndexNotNaN ) {
	var map, mapName, img,
		nodeName = element.nodeName.toLowerCase();
	if ( "area" === nodeName ) {
		map = element.parentNode;
		mapName = map.name;
		if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
			return false;
		}
		img = $( "img[usemap='#" + mapName + "']" )[ 0 ];
		return !!img && visible( img );
	}
	return ( /^(input|select|textarea|button|object)$/.test( nodeName ) ?
		!element.disabled :
		"a" === nodeName ?
			element.href || isTabIndexNotNaN :
			isTabIndexNotNaN) &&
		// the element and all of its ancestors must be visible
		visible( element );
}

function visible( element ) {
	return $.expr.filters.visible( element ) &&
		!$( element ).parents().addBack().filter(function() {
			return $.css( this, "visibility" ) === "hidden";
		}).length;
}

$.extend( $.expr[ ":" ], {
	data: $.expr.createPseudo ?
		$.expr.createPseudo(function( dataName ) {
			return function( elem ) {
				return !!$.data( elem, dataName );
			};
		}) :
		// support: jQuery <1.8
		function( elem, i, match ) {
			return !!$.data( elem, match[ 3 ] );
		},

	focusable: function( element ) {
		return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );
	},

	tabbable: function( element ) {
		var tabIndex = $.attr( element, "tabindex" ),
			isTabIndexNaN = isNaN( tabIndex );
		return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );
	}
});

// deprecated
$.ui.ie = !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() );

$.fn.extend({
	focus: (function( orig ) {
		return function( delay, fn ) {
			return typeof delay === "number" ?
				this.each(function() {
					var elem = this;
					setTimeout(function() {
						$( elem ).focus();
						if ( fn ) {
							fn.call( elem );
						}
					}, delay );
				}) :
				orig.apply( this, arguments );
		};
	})( $.fn.focus ),

	disableSelection: (function() {
		var eventType = "onselectstart" in document.createElement( "div" ) ?
			"selectstart" :
			"mousedown";

		return function() {
			return this.bind( eventType + ".ui-disableSelection", function( event ) {
				event.preventDefault();
			});
		};
	})(),

	enableSelection: function() {
		return this.unbind( ".ui-disableSelection" );
	},

	zIndex: function( zIndex ) {
		if ( zIndex !== undefined ) {
			return this.css( "zIndex", zIndex );
		}

		if ( this.length ) {
			var elem = $( this[ 0 ] ), position, value;
			while ( elem.length && elem[ 0 ] !== document ) {
				// Ignore z-index if position is set to a value where z-index is ignored by the browser
				// This makes behavior of this function consistent across browsers
				// WebKit always returns auto if the element is positioned
				position = elem.css( "position" );
				if ( position === "absolute" || position === "relative" || position === "fixed" ) {
					// IE returns 0 when zIndex is not specified
					// other browsers return a string
					// we ignore the case of nested elements with an explicit value of 0
					// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
					value = parseInt( elem.css( "zIndex" ), 10 );
					if ( !isNaN( value ) && value !== 0 ) {
						return value;
					}
				}
				elem = elem.parent();
			}
		}

		return 0;
	}
});

// $.ui.plugin is deprecated. Use $.widget() extensions instead.
$.ui.plugin = {
	add: function( module, option, set ) {
		var i,
			proto = $.ui[ module ].prototype;
		for ( i in set ) {
			proto.plugins[ i ] = proto.plugins[ i ] || [];
			proto.plugins[ i ].push( [ option, set[ i ] ] );
		}
	},
	call: function( instance, name, args, allowDisconnected ) {
		var i,
			set = instance.plugins[ name ];

		if ( !set ) {
			return;
		}

		if ( !allowDisconnected && ( !instance.element[ 0 ].parentNode || instance.element[ 0 ].parentNode.nodeType === 11 ) ) {
			return;
		}

		for ( i = 0; i < set.length; i++ ) {
			if ( instance.options[ set[ i ][ 0 ] ] ) {
				set[ i ][ 1 ].apply( instance.element, args );
			}
		}
	}
};

//2014/9/4 fix position bug in firefox
$.support.offsetFractions = true;

/*
 * jQuery UI Widget 1.11.4
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/jQuery.widget/
 */


var widget_uuid = 0,
	widget_slice = Array.prototype.slice;

$.cleanData = (function( orig ) {
	return function( elems ) {
		var events, elem, i;
		for ( i = 0; (elem = elems[i]) != null; i++ ) {
			try {

				// Only trigger remove when necessary to save time
				events = $._data( elem, "events" );
				if ( events && events.remove ) {
					$( elem ).triggerHandler( "remove" );
				}

			// http://bugs.jquery.com/ticket/8235
			} catch ( e ) {}
		}
		orig( elems );
	};
})( $.cleanData );

//$.widget是一个全局静态工厂方法，主要用来实现多级继承
//

/**
 * @class fish.desktop.widget
 * Widget的基础控件,通过部分公用的功能
 */
$.widget = function( name, base, prototype ) {
	var fullName, existingConstructor, constructor, basePrototype,
		// proxiedPrototype allows the provided prototype to remain unmodified
		// so that it can be used as a mixin for multiple widgets (#8876)
		proxiedPrototype = {},
		namespace = name.split( "." )[ 0 ];

	name = name.split( "." )[ 1 ];
	fullName = namespace + "-" + name;

	if ( !prototype ) {
		prototype = base;
		base = $.Widget;
	}

	// create selector for plugin
	$.expr[ ":" ][ fullName.toLowerCase() ] = function( elem ) {
		return !!$.data( elem, fullName );
	};

	$[ namespace ] = $[ namespace ] || {};
	existingConstructor = $[ namespace ][ name ];
	constructor = $[ namespace ][ name ] = function( options, element ) {
		// allow instantiation without "new" keyword
		if ( !this._createWidget ) {
			return new constructor( options, element );
		}

		// allow instantiation without initializing for simple inheritance
		// must use "new" keyword (the code above always passes args)
		if ( arguments.length ) {
			this._createWidget( options, element );
		}
	};
	// extend with the existing constructor to carry over any static properties
	$.extend( constructor, existingConstructor, {
		version: prototype.version,
		// copy the object used to create the prototype in case we need to
		// redefine the widget later
		_proto: $.extend( {}, prototype ),
		// track widgets that inherit from this widget in case this widget is
		// redefined after a widget inherits from it
		_childConstructors: []
	});

	basePrototype = new base();
	// we need to make the options hash a property directly on the new instance
	// otherwise we'll modify the options hash on the prototype that we're
	// inheriting from
	basePrototype.options = $.widget.extend( {}, basePrototype.options );
	$.each( prototype, function( prop, value ) {
		if ( !$.isFunction( value ) ) {
			proxiedPrototype[ prop ] = value;
			return;
		}
		proxiedPrototype[ prop ] = (function() {
			var _super = function() {
					return base.prototype[ prop ].apply( this, arguments );
				},
				_superApply = function( args ) {
					return base.prototype[ prop ].apply( this, args );
				};
			return function() {
				var __super = this._super,
					__superApply = this._superApply,
					returnValue;

				this._super = _super;
				this._superApply = _superApply;

				returnValue = value.apply( this, arguments );

				this._super = __super;
				this._superApply = __superApply;

				return returnValue;
			};
		})();
	});
	constructor.prototype = $.widget.extend( basePrototype, {
		// TODO: remove support for widgetEventPrefix
		// always use the name + a colon as the prefix, e.g., draggable:start
		// don't prefix for widgets that aren't DOM-based
		widgetEventPrefix: existingConstructor ? (basePrototype.widgetEventPrefix || name) : name
	}, proxiedPrototype, {
		constructor: constructor,
		namespace: namespace,
		widgetName: name,
		widgetFullName: fullName
	});

	// If this widget is being redefined then we need to find all widgets that
	// are inheriting from it and redefine all of them so that they inherit from
	// the new version of this widget. We're essentially trying to replace one
	// level in the prototype chain.
	if ( existingConstructor ) {
		$.each( existingConstructor._childConstructors, function( i, child ) {
			var childPrototype = child.prototype;

			// redefine the child widget using the same prototype that was
			// originally used, but inherit from the new version of the base
			$.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto );
		});
		// remove the list of existing child constructors from the old constructor
		// so the old child constructors can be garbage collected
		delete existingConstructor._childConstructors;
	} else {
		base._childConstructors.push( constructor );
	}

	//这里是最核心的调用，把组件类和jQuery的原型fn桥接起来
	$.widget.bridge( name, constructor );

	return constructor;
};

$.widget.extend = function( target ) {
	var input = widget_slice.call( arguments, 1 ),
		inputIndex = 0,
		inputLength = input.length,
		key,
		value;
	for ( ; inputIndex < inputLength; inputIndex++ ) {
		for ( key in input[ inputIndex ] ) {
			value = input[ inputIndex ][ key ];
			if ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {
				// Clone objects
				if ( $.isPlainObject( value ) ) {
					target[ key ] = $.isPlainObject( target[ key ] ) ?
						$.widget.extend( {}, target[ key ], value ) :
						// Don't extend strings, arrays, etc. with objects
						$.widget.extend( {}, value );
				// Copy everything else by reference
				} else {
					if( $.isArray(value) ){//如果是数组,copy后再赋值 http://10.45.61.11/fish/fish-desktop/issues/243
						  target[ key ] = $.widget.extend( [] , value );
					}else{
							target[ key ] = value;
					}
				}
			}
		}
	}
	return target;
};

//这是jQueryUI组件和jQuery之间的“桥梁”，通过此方法，把组件名称挂接到jQuery.fn上去，从而可以通过选择器的方式创建组件实例。
$.widget.bridge = function( name, object ) {
	var fullName = object.prototype.widgetFullName || name;
	$.fn[ name ] = function( options ) {
		var isMethodCall = typeof options === "string",
			args = widget_slice.call( arguments, 1 ),
			returnValue = this;

		//如果是方法调用
		if ( isMethodCall ) {
			this.each(function() {
				var methodValue,
					instance = $.data( this, fullName );//从缓存里面查找到组件的实例
				if ( options === "instance" ) {
					returnValue = instance;
					return false;
				}
				if ( !instance ) {
					//http://10.45.61.11/fish/fish-desktop/issues/299
					$.data( this, fullName, (instance = new object(null, this )));
				}
				if ( !$.isFunction( instance[options] ) || options.charAt( 0 ) === "_" ) {
					return $.error( "no such method '" + options + "' for " + name + " widget instance" );
				}
				methodValue = instance[ options ].apply( instance, args );
				if ( methodValue !== instance && methodValue !== undefined ) {
					returnValue = methodValue && methodValue.jquery ?
						returnValue.pushStack( methodValue.get() ) :
						methodValue;
					return false;
				}
			});
		} else {

			// Allow multiple hashes to be passed on init
			if ( args.length ) {
				options = $.widget.extend.apply( null, [ options ].concat(args) );
			}

			this.each(function() {
				var instance = $.data( this, fullName );//从缓存里面查找组件的实例
				if ( instance ) {//如果组件实例已经存在，调用一下实例上的_init方法
					instance.option( options || {} );
					if ( instance._init ) {
						instance._init();
					}
				} else {//否则，调用组件的构造函数创建一个新的实例，并放到缓存中去
					$.data( this, fullName, new object( options, this ) );
				}
			});
		}

		return returnValue;
	};
};

//Widget是所有UI组件的基类，Widget上定义了组件通用的公共方法以及私有方法模板。
$.Widget = function( /* options, element */ ) {};
$.Widget._childConstructors = [];

$.Widget.prototype = {
	widgetName: "widget",
	widgetEventPrefix: "",
	defaultElement: "<div>",//组件默认元素为div，这个配置项是用来支持使用new关键字创建组件的。
	options: {
		disabled: false,

      // callbacks
		create: null
	},
	_createWidget: function( options, element ) {
		element = $( element || this.defaultElement || this )[ 0 ];
		this.element = $( element );
		this.uuid = widget_uuid++;
		this.eventNamespace = "." + this.widgetName + this.uuid;

		this.bindings = $();
		this.hoverable = $();
		this.focusable = $();

		if ( element !== this ) {
			$.data( element, this.widgetFullName, this );
			this._on( true, this.element, {
				remove: function( event ) {
					if ( event.target === element ) {
						this.destroy();
					}
				}
			});
			this.document = $( element.style ?
				// element within the document
				element.ownerDocument :
				// element is window or document
				element.document || element );
			this.window = $( this.document[0].defaultView || this.document[0].parentWindow );
		}

		this.options = $.widget.extend( {},
			this.options,
			this.element.data(),
			this._getCreateOptions(),
			options );

		this._create();
		this._trigger( "create", null, this._getCreateEventData() );
		this._init();
      this._validateHandler();//增加对校验控件的支持
	},
	_getCreateOptions: $.noop,
	_getCreateEventData: $.noop,
	_create: $.noop,
	_init: $.noop,
    _validateHandler:$.noop,
    _getValidFlag:function(){
        var el = this.element[0],
          wrap = el.form || $(el).closest('.ui-validator');
        return $(wrap).attr('novalidate')==='novalidate';
    },
   /**
     * Removes the widget functionality completely. This will return the element back to its pre-init state.
     * @method
     * @return jQuery(Plugin Only)
     */
	destroy: function() {
		this._destroy();
		// we can probably remove the unbind calls in 2.0
		// all event bindings should go through this._on()
		this.element
			.unbind( this.eventNamespace )
			.removeData( this.widgetFullName )
			// support: jquery <1.6.3
			// http://bugs.jquery.com/ticket/9413
			.removeData( $.camelCase( this.widgetFullName ) );
		this.widget()
			.unbind( this.eventNamespace )
			.removeAttr( "aria-disabled" )
			.removeClass(
				this.widgetFullName + "-disabled ");// + "ui-state-disabled" 

		// clean up events and states
		this.bindings.unbind( this.eventNamespace );
		this.hoverable.removeClass( "ui-state-hover" );
		this.focusable.removeClass( "ui-state-focus" );
	},
	_destroy: $.noop,
	/**
     * Returns a jQuery object containing the original element or other relevant generated element.
     * @method
     * @returns {jQuery}
     */
	widget: function() {
		return this.element;
	},
	/**
     * Sets the value of the widget option associated with the specified optionName.<br>
     * <b>no arguments</b>: Gets an object containing key/value pairs representing the current options hash.<br>
     * <b>one string arguments</b>: Gets the value currently associated with the specified optionName.<br>
     * <b>two string arguments</b>: Sets the value of the option associated with the specified optionName.<br>
     * <b>one object arguments</b>: Sets one or more options.<br>

     * @method option
     * @param {String} [key] The name of the option to set.
     * @param {Object} [value] A value to set for the option.
     * @return {jQuery}
     */
	option: function( key, value ) {
		var options = key,
			parts,
			curOption,
			i;

		if ( arguments.length === 0 ) {
			// don't return a reference to the internal hash
			return $.widget.extend( {}, this.options );
		}

		if ( typeof key === "string" ) {
			// handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
			options = {};
			parts = key.split( "." );
			key = parts.shift();
			if ( parts.length ) {
				curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );
				for ( i = 0; i < parts.length - 1; i++ ) {
					curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
					curOption = curOption[ parts[ i ] ];
				}
				key = parts.pop();
				if ( arguments.length === 1 ) {
					return curOption[ key ] === undefined ? null : curOption[ key ];
				}
				curOption[ key ] = value;
			} else {
				if ( arguments.length === 1 ) {
					return this.options[ key ] === undefined ? null : this.options[ key ];
				}
				options[ key ] = value;
			}
		}

		this._setOptions( options );

		return this;
	},
	_setOptions: function( options ) {
		var key;

		for ( key in options ) {
			this._setOption( key, options[ key ] );
		}

		return this;
	},
	_setOption: function( key, value ) {
		this.options[ key ] = value;

		if ( key === "disabled" ) {
			this.widget()
				.toggleClass( this.widgetFullName + "-disabled", !!value );

			// If the widget is becoming disabled, then nothing is interactive
			if ( value ) {
				this.hoverable.removeClass( "ui-state-hover" );
				this.focusable.removeClass( "ui-state-focus" );
			}
		}

		return this;
	},
	/**
     * Enables the widget.
     * @method
     * @returns {jQuery}
     */
	enable: function() {
		return this._setOptions({ disabled: false });
	},
	/**
     * Disables the widget.
     * @method
     * @returns {jQuery}
     */
	disable: function() {
		return this._setOptions({ disabled: true });
	},

	_on: function( suppressDisabledCheck, element, handlers ) {
		var delegateElement,
			instance = this;

		// no suppressDisabledCheck flag, shuffle arguments
		if ( typeof suppressDisabledCheck !== "boolean" ) {
			handlers = element;
			element = suppressDisabledCheck;
			suppressDisabledCheck = false;
		}

		// no element argument, shuffle and use this.element
		if ( !handlers ) {
			handlers = element;
			element = this.element;
			delegateElement = this.widget();
		} else {
			element = delegateElement = $( element );
			this.bindings = this.bindings.add( element );
		}

		$.each( handlers, function( event, handler ) {
			function handlerProxy() {
				// allow widgets to customize the disabled handling
				// - disabled as an array instead of boolean
				// - disabled class as method for disabling individual parts
				if ( !suppressDisabledCheck &&
						( instance.options.disabled === true ||
							$( this ).hasClass( "ui-state-disabled" ) ) ) {
					return;
				}
				return ( typeof handler === "string" ? instance[ handler ] : handler )
					.apply( instance, arguments );
			}

			// copy the guid so direct unbinding works
			if ( typeof handler !== "string" ) {
				handlerProxy.guid = handler.guid =
					handler.guid || handlerProxy.guid || $.guid++;
			}

			var match = event.match( /^([\w:-]*)\s*(.*)$/ ),
				eventName = match[1] + instance.eventNamespace,
				selector = match[2];
			if ( selector ) {
				delegateElement.delegate( selector, eventName, handlerProxy );
			} else {
				element.bind( eventName, handlerProxy );
			}
		});
	},

	_off: function( element, eventName ) {
		eventName = (eventName || "").split( " " ).join( this.eventNamespace + " " ) +
			this.eventNamespace;
		element.unbind( eventName ).undelegate( eventName );

		// Clear the stack to avoid memory leaks (#10056)
		this.bindings = $( this.bindings.not( element ).get() );
		this.focusable = $( this.focusable.not( element ).get() );
		this.hoverable = $( this.hoverable.not( element ).get() );
	},

	_delay: function( handler, delay ) {
		function handlerProxy() {
			return ( typeof handler === "string" ? instance[ handler ] : handler )
				.apply( instance, arguments );
		}
		var instance = this;
		return setTimeout( handlerProxy, delay || 0 );
	},

	_hoverable: function( element ) {
		this.hoverable = this.hoverable.add( element );
		this._on( element, {
			mouseenter: function( event ) {
				$( event.currentTarget ).addClass( "ui-state-hover" );
			},
			mouseleave: function( event ) {
				$( event.currentTarget ).removeClass( "ui-state-hover" );
			}
		});
	},

	_focusable: function( element ) {
		this.focusable = this.focusable.add( element );
		this._on( element, {
			focusin: function( event ) {
				$( event.currentTarget ).addClass( "ui-state-focus" );
			},
			focusout: function( event ) {
				$( event.currentTarget ).removeClass( "ui-state-focus" );
			}
		});
	},

	_trigger: function( type, event, data ) {
		var prop, orig,
			callback = this.options[ type ];

		if (data === void 0) data = {};
		event = $.Event( event );
		event.type = ( type === this.widgetEventPrefix ?
			type :
			this.widgetEventPrefix + ':' + type ).toLowerCase(); // 组件暴露事件名修改使用:拼接
		// the original event may come from any element
		// so we need to reset the target on the new event
		event.target = this.element[ 0 ];

		// copy original event properties over to the new event
		orig = event.originalEvent;
		if ( orig ) {
			for ( prop in orig ) {
				if ( !( prop in event ) ) {
					event[ prop ] = orig[ prop ];
				}
			}
		}

		this.element.trigger( event, data );
		//如果创建组件实例的时候在options里面传递了对应事件的回调函数，这里会直接调用。
		return !( $.isFunction( callback ) &&
			callback.apply( this.element[0], [ event ].concat( data ) ) === false ||
			event.isDefaultPrevented() );
	}
};

//提供最基本的淡入淡出动画
$.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
	  /*
       * @cfg {*} hide=null type:Boolean,Number,String,Object
       *      If and how to animate the hiding of the element.<br>
       *      <b>Multiple types supported:</b><br>
       *      <b>Boolean</b>: When set to false, no animation will be used and the element will be hidden immediately. When set to true, the element will fade out with the default duration and the default easing.<br>
       *      <b>Number</b>: The element will fade out with the specified duration and the default easing.<br>
       *      <b>String</b>: The element will be hidden using the specified effect. The value can either be the name of a built-in jQuery animateion method, such as "slideUp", or the name of a jQuery UI effect, such as "fold". In either case the effect will be used with the default duration and the default easing.<br>
       *      <b>Object</b>: If the value is an object, then effect, duration, and easing properties may be provided. If the effect property contains the name of a jQuery method, then that method will be used; otherwise it is assumed to be the name of a jQuery UI effect. When using a jQuery UI effect that supports additional settings, you may include those settings in the object and they will be passed to the effect. If duration or easing is omitted, then the default values will be used. If effect is omitted, then "fadeOut" will be used.<br>
       *
       *
       *   <pre>
       *   $( ".selector" ).widget({ hide: { effect: "explode", duration: 1000 } });
       *
       *   // getter
       *   var hide = $( ".selector" ).widget( "option", "hide" );
       *   // setter
       *   $( ".selector" ).widget( "option", "hide", { effect: "explode", duration: 1000 } );
       *  </pre>
       */
      //hide
      /*
       * @cfg {*} show=null type:Boolean,Number,String,Object
       * If and how to animate the showing of the element.<br/>
       * <b>Multiple types supported:</b><br/>
       * <b>Boolean</b>: When set to false, no animation will be used and the element will be shown immediately. When set to true, the element will fade in with the default duration and the default easing.<br/>
       * <b>Number</b>: The element will fade in with the specified duration and the default easing.<br/>
       * <b>String</b>: The element will be shown using the specified effect. The value can either be the name of a built-in jQuery animateion method, such as "slideDown", or the name of a jQuery UI effect, such as "fold". In either case the effect will be used with the default duration and the default easing.<br/>
       * <b>Object</b>: If the value is an object, then effect, duration, and easing properties may be provided. If the effect property contains the name of a jQuery method, then that method will be used; otherwise it is assumed to be the name of a jQuery UI effect. When using a jQuery UI effect that supports additional settings, you may include those settings in the object and they will be passed to the effect. If duration or easing is omitted, then the default values will be used. If effect is omitted, then "fadeIn" will be used.<br/>
       *
       * <pre>
       *   $( ".selector" ).widget({ show: { effect: "blind", duration: 800 } });
       *   //or
       *
       *  // getter
       *  var show = $( ".selector" ).widget( "option", "show" );
       *   // setter
       *  $( ".selector" ).widget( "option", "show", { effect: "blind", duration: 800 } );
       * </pre>
       */
      //show	
    $.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
		if ( typeof options === "string" ) {
			options = { effect: options };
		}
		var hasOptions,
			effectName = !options ?
				method :
				options === true || typeof options === "number" ?
					defaultEffect :
					options.effect || defaultEffect;
		options = options || {};
		if ( typeof options === "number" ) {
			options = { duration: options };
		}
		hasOptions = !$.isEmptyObject( options );
		options.complete = callback;
		if ( options.delay ) {
			element.delay( options.delay );
		}
		if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
			element[ method ]( options );
		} else if ( effectName !== method && element[ effectName ] ) {
			element[ effectName ]( options.duration, options.easing, callback );
		} else {
			element.queue(function( next ) {
				$( this )[ method ]();
				if ( callback ) {
					callback.call( element[ 0 ] );
				}
				next();
			});
		}
	};
});

var widget = $.widget;

/*!
 * jQuery UI Mouse 1.11.4
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/mouse/
 */


var mouseHandled = false;
$( document ).mouseup( function() {
	mouseHandled = false;
});


/**
 * Similar to jQuery.Widget, the mouse interaction is not intended to be used directly. <br>
 * It is purely a base layer for other widgets to inherit from. <br>
 * This page only documents what is added to jQuery.Widget, but it does include internal methods that are not intended to be overwritten.<br>
 * The intended public API is _mouseStart(), _mouseDrag(), _mouseStop(), and _mouseCapture().<br>
 *
 * @class fish.desktop.widget.Mouse
 * @alternateClassName desktop.widget.Mouse
 * @extends fish.desktop.widget
 */
var mouse = $.widget("ui.mouse", {
	version: "1.11.4",
	options: {
	 /**
       * @cfg {Selector} cancel='input,textarea,button,select,option' Prevents interactions from starting on specified elements.
       */
		cancel: "input,textarea,button,select,option",
	 /**
       * @cfg {Number} distance=1
       * Distance in pixels after mousedown the mouse must move before the interaction should start.<br/>
       * This option can be used to prevent unwanted interactions when clicking on an element.
       */
		distance: 1,
	 /**
       * @cfg {Number} delay=0
       * Time in milliseconds after mousedown until the interaction should start.<br/>
       * This option can be used to prevent unwanted interactions when clicking on an element.
       */		delay: 0
	},
	_mouseInit: function() {
		var that = this;

		this.element
			.bind("mousedown."+this.widgetName, function(event) {
				return that._mouseDown(event);
			})
			.bind("click."+this.widgetName, function(event) {
				if (true === $.data(event.target, that.widgetName + ".preventClickEvent")) {
					$.removeData(event.target, that.widgetName + ".preventClickEvent");
					event.stopImmediatePropagation();
					return false;
				}
			});

		this.started = false;
	},

	// TODO: make sure destroying one instance of mouse doesn't mess with
	// other instances of mouse
	_mouseDestroy: function() {
		this.element.unbind("."+this.widgetName);
		if ( this._mouseMoveDelegate ) {
			this.document
				.unbind("mousemove."+this.widgetName, this._mouseMoveDelegate)
				.unbind("mouseup."+this.widgetName, this._mouseUpDelegate);
		}
	},

	_mouseDown: function(event) {
		// don't let more than one widget handle mouseStart
		if ( mouseHandled ) {
			return;
		}

		this._mouseMoved = false;

		// we may have missed mouseup (out of window)
		(this._mouseStarted && this._mouseUp(event));

		this._mouseDownEvent = event;

		var that = this,
			btnIsLeft = (event.which === 1),
			// event.target.nodeName works around a bug in IE 8 with
			// disabled inputs (#7620)
			elIsCancel = (typeof this.options.cancel === "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false);
		if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
			return true;
		}

		this.mouseDelayMet = !this.options.delay;
		if (!this.mouseDelayMet) {
			this._mouseDelayTimer = setTimeout(function() {
				that.mouseDelayMet = true;
			}, this.options.delay);
		}

		if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
			this._mouseStarted = (this._mouseStart(event) !== false);
			if (!this._mouseStarted) {
				event.preventDefault();
				return true;
			}
		}

		// Click event may never have fired (Gecko & Opera)
		if (true === $.data(event.target, this.widgetName + ".preventClickEvent")) {
			$.removeData(event.target, this.widgetName + ".preventClickEvent");
		}

		// these delegates are required to keep context
		this._mouseMoveDelegate = function(event) {
			return that._mouseMove(event);
		};
		this._mouseUpDelegate = function(event) {
			return that._mouseUp(event);
		};

		this.document
			.bind("mousemove."+this.widgetName, this._mouseMoveDelegate)
			.bind("mouseup."+this.widgetName, this._mouseUpDelegate);

		event.preventDefault();

		mouseHandled = true;
		return true;
	},

	_mouseMove: function(event) {
		// Only check for mouseups outside the document if you've moved inside the document
		// at least once. This prevents the firing of mouseup in the case of IE<9, which will
		// fire a mousemove event if content is placed under the cursor. See #7778
		// Support: IE <9
		if ( this._mouseMoved ) {
		// IE mouseup check - mouseup happened when mouse was out of window
		if ($.ui.ie && ( !document.documentMode || document.documentMode < 9 ) && !event.button) {
			return this._mouseUp(event);

			// Iframe mouseup check - mouseup occurred in another document
			} else if ( !event.which ) {
				return this._mouseUp( event );
			}
		}

		if ( event.which || event.button ) {
			this._mouseMoved = true;
		}

		if (this._mouseStarted) {
			this._mouseDrag(event);
			return event.preventDefault();
		}

		if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
			this._mouseStarted =
				(this._mouseStart(this._mouseDownEvent, event) !== false);
			(this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));
		}

		return !this._mouseStarted;
	},

	_mouseUp: function(event) {
		this.document
			.unbind("mousemove."+this.widgetName, this._mouseMoveDelegate)
			.unbind("mouseup."+this.widgetName, this._mouseUpDelegate);

		if (this._mouseStarted) {
			this._mouseStarted = false;

			if (event.target === this._mouseDownEvent.target) {
				$.data(event.target, this.widgetName + ".preventClickEvent", true);
			}

			this._mouseStop(event);
		}

		mouseHandled = false;
		return false;
	},

	_mouseDistanceMet: function(event) {
		return (Math.max(
				Math.abs(this._mouseDownEvent.pageX - event.pageX),
				Math.abs(this._mouseDownEvent.pageY - event.pageY)
			) >= this.options.distance
		);
	},

	_mouseDelayMet: function(/* event */) {
		return this.mouseDelayMet;
	},

	// These are placeholder methods, to be overriden by extending plugin
	/**
     * The extending widget should implement a _mouseStart() method to handle the beginning of an interaction.<br>
     * This method will receive the mouse event associated with the start of the interaction.
     * @param {Event} event event
     * @return {jQuery}
     */	
	_mouseStart: function(/* event */) {},
	/**
     * The extending widget should implement a _mouseDrag() method to handle each movement of an interaction.<br>
     * This method will receive the mouse event associated with the movement.
     * @param {Event} event event
     * @return {jQuery}
     */
	_mouseDrag: function(/* event */) {},
	/**
     * The extending widget should implement a _mouseStop() method to handle the end of an interaction.<br>
     * This method will receive the mouse event associated with the end of the interaction.
     * @param {Event} event event
     * @return {jQuery}
     */
	_mouseStop: function(/* event */) {},
	/**
     * Determines whether an interaction should start based on event target of the interaction.<br>
     * The default implementation always returns true.
     * @param {Event} event event
     * @return {Boolean}
     */
	_mouseCapture: function(/* event */) { return true; }
});

/*!
 * jQuery UI Position 1.11.4
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/position/
 */

(function() {

$.ui = $.ui || {};

var cachedScrollbarWidth, supportsOffsetFractions,
	max = Math.max,
	abs = Math.abs,
	round = Math.round,
	rhorizontal = /left|center|right/,
	rvertical = /top|center|bottom/,
	roffset = /[\+\-]\d+(\.[\d]+)?%?/,
	rposition = /^\w+/,
	rpercent = /%$/,
	_position = $.fn.position;

function getOffsets( offsets, width, height ) {
	return [
		parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
		parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
	];
}

function parseCss( element, property ) {
	return parseInt( $.css( element, property ), 10 ) || 0;
}

function getDimensions( elem ) {
	var raw = elem[0];
	if ( raw.nodeType === 9 ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: 0, left: 0 }
		};
	}
	if ( $.isWindow( raw ) ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: elem.scrollTop(), left: elem.scrollLeft() }
		};
	}
	if ( raw.preventDefault ) {
		return {
			width: 0,
			height: 0,
			offset: { top: raw.pageY, left: raw.pageX }
		};
	}
	return {
		width: elem.outerWidth(),
		height: elem.outerHeight(),
		offset: elem.offset()
	};
}

/**
 * position()方法由jQuery UI提供，用来设置元素的位置，位置可以相对于window/document，或者
 * 其它元素，也可以相对于鼠标指针，无需关注在父元素中的偏移量。
 * <pre>
$('selector').position({
	my: "center top",
	at: "center bottom",
	collision: "flipfit flip"
});
 *</pre>
 * <a href="http://jqueryui.com/position/" title='Live Demo' target='_blank'>Demo</a>
 * @class fish.desktop.uicore.Position
 */
$.position = {
	scrollbarWidth: function() {
		if ( cachedScrollbarWidth !== undefined ) {
			return cachedScrollbarWidth;
		}
		var w1, w2,
			div = $( "<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>" ),
			innerDiv = div.children()[0];

		$( "body" ).append( div );
		w1 = innerDiv.offsetWidth;
		div.css( "overflow", "scroll" );

		w2 = innerDiv.offsetWidth;

		if ( w1 === w2 ) {
			w2 = div[0].clientWidth;
		}

		div.remove();

		return (cachedScrollbarWidth = w1 - w2);
	},
	getScrollInfo: function( within ) {
		var overflowX = within.isWindow || within.isDocument ? "" :
				within.element.css( "overflow-x" ),
			overflowY = within.isWindow || within.isDocument ? "" :
				within.element.css( "overflow-y" ),
			hasOverflowX = overflowX === "scroll" ||
				( overflowX === "auto" && within.width < within.element[0].scrollWidth ),
			hasOverflowY = overflowY === "scroll" ||
				( overflowY === "auto" && within.height < within.element[0].scrollHeight );
		return {
			width: hasOverflowY ? $.position.scrollbarWidth() : 0,
			height: hasOverflowX ? $.position.scrollbarWidth() : 0
		};
	},
	getWithinInfo: function( element ) {
		var withinElement = $( element || window ),
			isWindow = $.isWindow( withinElement[0] ),
			isDocument = !!withinElement[ 0 ] && withinElement[ 0 ].nodeType === 9;
		return {
			element: withinElement,
			isWindow: isWindow,
			isDocument: isDocument,
			offset: withinElement.offset() || { left: 0, top: 0 },
			scrollLeft: withinElement.scrollLeft(),
			scrollTop: withinElement.scrollTop(),

			// support: jQuery 1.6.x
			// jQuery 1.6 doesn't support .outerWidth/Height() on documents or windows
			width: isWindow || isDocument ? withinElement.width() : withinElement.outerWidth(),
			height: isWindow || isDocument ? withinElement.height() : withinElement.outerHeight()
		};
	}
};
/**
   *  Position an element relative to another.
   * @method
   * @param {Object} options options
   * @param {String} options.my=center
   *        Defines which position on the element being positioned to align with the target element: "horizontal vertical" alignment.
   *        A single value such as "right" will be normalized to "right center", "top" will be normalized to "center top"
   *        (following CSS convention). Acceptable horizontal values: "left", "center", "right". Acceptable vertical
   *        values: "top", "center", "bottom". Example: "left top" or "center center". Each dimension can also contain offsets,
   *        in pixels or percent, e.g., "right+10 top-25%". Percentage offsets are relative to the element being positioned.
   *
   * @param {String} options.at=center
   *    Defines which position on the target element to align the positioned element against: "horizontal vertical" alignment.
   *    See the my option for full details on possible values. Percentage offsets are relative to the target element.
   *
   * @param {*} options.of=null
   *  Type:Selector, Element, jQuery, Event<br>
   *   Which element to position against. If you provide a selector or jQuery object,
   *   the first matching element will be used. If you provide an event object, the pageX and pageY properties will be used. Example: "#top-menu"
   *
   * @param {String} options.collision='flip'
   *  When the positioned element overflows the window in some direction, move it to an alternative position. Similar to my and at, this accepts a single value or a pair for horizontal/vertical, e.g., "flip", "fit", "fit flip", "fit none".<br>
   *  <b>"flip"</b>: Flips the element to the opposite side of the target and the collision detection is run again to see if it will fit. Whichever side allows more of the element to be visible will be used.<br>
   *  <b>"fit"</b>: Shift the element away from the edge of the window.<br>
   *  <b>"flipfit"</b>: First applies the flip logic, placing the element on whichever side allows more of the element to be visible. Then the fit logic is applied to ensure as much of the element is visible as possible.<br>
   *  <b>"none"</b>: Does not apply any collision detection.<br>
   *
   * @param {Function} options.using=null
   *    When specified, the actual property setting is delegated to this callback. Receives two parameters:<br/>
   *    The first is a hash of top and left values for the position that should be set and can be forwarded to .css() or
   *    .animate().<br/>
   *    The second provides feedback about the position and dimensions of both elements, as well as calculations to
   *    their relative position. Both target and element have these properties: element, left, top, width, height.
   *    In addition, there's horizontal, vertical and important, giving you twelve potential directions like
   *    { horizontal: "center", vertical: "left", important: "horizontal" }.<br/>
   *
   * @param {*} options.within
   * Type:Selector, Element, jQuery<br>
   * Element to position within, affecting collision detection.
   * If you provide a selector or jQuery object, the first matching element will be used.
   *
   */
$.fn.position = function( options ) {
	if ( !options || !options.of ) {
		return _position.apply( this, arguments );
	}

	// make a copy, we don't want to modify arguments
	options = $.extend( {}, options );

	var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,
		target = $( options.of ),
		within = $.position.getWithinInfo( options.within ),
		scrollInfo = $.position.getScrollInfo( within ),
		collision = ( options.collision || "flip" ).split( " " ),
		offsets = {};

	dimensions = getDimensions( target );
	if ( target[0].preventDefault ) {
		// force left top to allow flipping
		options.at = "left top";
	}
	targetWidth = dimensions.width;
	targetHeight = dimensions.height;
	targetOffset = dimensions.offset;
	// clone to reuse original targetOffset later
	basePosition = $.extend( {}, targetOffset );

	// force my and at to have valid horizontal and vertical positions
	// if a value is missing or invalid, it will be converted to center
	$.each( [ "my", "at" ], function() {
		var pos = ( options[ this ] || "" ).split( " " ),
			horizontalOffset,
			verticalOffset;

		if ( pos.length === 1) {
			pos = rhorizontal.test( pos[ 0 ] ) ?
				pos.concat( [ "center" ] ) :
				rvertical.test( pos[ 0 ] ) ?
					[ "center" ].concat( pos ) :
					[ "center", "center" ];
		}
		pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
		pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";

		// calculate offsets
		horizontalOffset = roffset.exec( pos[ 0 ] );
		verticalOffset = roffset.exec( pos[ 1 ] );
		offsets[ this ] = [
			horizontalOffset ? horizontalOffset[ 0 ] : 0,
			verticalOffset ? verticalOffset[ 0 ] : 0
		];

		// reduce to just the positions without the offsets
		options[ this ] = [
			rposition.exec( pos[ 0 ] )[ 0 ],
			rposition.exec( pos[ 1 ] )[ 0 ]
		];
	});

	// normalize collision option
	if ( collision.length === 1 ) {
		collision[ 1 ] = collision[ 0 ];
	}

	if ( options.at[ 0 ] === "right" ) {
		basePosition.left += targetWidth;
	} else if ( options.at[ 0 ] === "center" ) {
		basePosition.left += targetWidth / 2;
	}

	if ( options.at[ 1 ] === "bottom" ) {
		basePosition.top += targetHeight;
	} else if ( options.at[ 1 ] === "center" ) {
		basePosition.top += targetHeight / 2;
	}

	atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
	basePosition.left += atOffset[ 0 ];
	basePosition.top += atOffset[ 1 ];

	return this.each(function() {
		var collisionPosition, using,
			elem = $( this ),
			elemWidth = elem.outerWidth(),
			elemHeight = elem.outerHeight(),
			marginLeft = parseCss( this, "marginLeft" ),
			marginTop = parseCss( this, "marginTop" ),
			collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) + scrollInfo.width,
			collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) + scrollInfo.height,
			position = $.extend( {}, basePosition ),
			myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );

		if ( options.my[ 0 ] === "right" ) {
			position.left -= elemWidth;
		} else if ( options.my[ 0 ] === "center" ) {
			position.left -= elemWidth / 2;
		}

		if ( options.my[ 1 ] === "bottom" ) {
			position.top -= elemHeight;
		} else if ( options.my[ 1 ] === "center" ) {
			position.top -= elemHeight / 2;
		}

		position.left += myOffset[ 0 ];
		position.top += myOffset[ 1 ];

		// if the browser doesn't support fractions, then round for consistent results
		if ( !supportsOffsetFractions ) {
			position.left = round( position.left );
			position.top = round( position.top );
		}

		collisionPosition = {
			marginLeft: marginLeft,
			marginTop: marginTop
		};

		$.each( [ "left", "top" ], function( i, dir ) {
			if ( $.ui.position[ collision[ i ] ] ) {
				$.ui.position[ collision[ i ] ][ dir ]( position, {
					targetWidth: targetWidth,
					targetHeight: targetHeight,
					elemWidth: elemWidth,
					elemHeight: elemHeight,
					collisionPosition: collisionPosition,
					collisionWidth: collisionWidth,
					collisionHeight: collisionHeight,
					offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
					my: options.my,
					at: options.at,
					within: within,
					elem : elem
				});
			}
		});

		if ( options.using ) {
			// adds feedback as second argument to using callback, if present
			using = function( props ) {
				var left = targetOffset.left - position.left,
					right = left + targetWidth - elemWidth,
					top = targetOffset.top - position.top,
					bottom = top + targetHeight - elemHeight,
					feedback = {
						target: {
							element: target,
							left: targetOffset.left,
							top: targetOffset.top,
							width: targetWidth,
							height: targetHeight
						},
						element: {
							element: elem,
							left: position.left,
							top: position.top,
							width: elemWidth,
							height: elemHeight
						},
						horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
						vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
					};
				if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
					feedback.horizontal = "center";
				}
				if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
					feedback.vertical = "middle";
				}
				if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
					feedback.important = "horizontal";
				} else {
					feedback.important = "vertical";
				}
				options.using.call( this, props, feedback );
			};
		}

		elem.offset( $.extend( position, { using: using } ) );
	});
};

$.ui.position = {
	fit: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
				outerWidth = within.width,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = withinOffset - collisionPosLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
				newOverRight;

			// element is wider than within
			if ( data.collisionWidth > outerWidth ) {
				// element is initially over the left side of within
				if ( overLeft > 0 && overRight <= 0 ) {
					newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
					position.left += overLeft - newOverRight;
				// element is initially over right side of within
				} else if ( overRight > 0 && overLeft <= 0 ) {
					position.left = withinOffset;
				// element is initially over both left and right sides of within
				} else {
					if ( overLeft > overRight ) {
						position.left = withinOffset + outerWidth - data.collisionWidth;
					} else {
						position.left = withinOffset;
					}
				}
			// too far left -> align with left edge
			} else if ( overLeft > 0 ) {
				position.left += overLeft;
			// too far right -> align with right edge
			} else if ( overRight > 0 ) {
				position.left -= overRight;
			// adjust based on position and margin
			} else {
				position.left = max( position.left - collisionPosLeft, position.left );
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
				outerHeight = data.within.height,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = withinOffset - collisionPosTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
				newOverBottom;

			// element is taller than within
			if ( data.collisionHeight > outerHeight ) {
				// element is initially over the top of within
				if ( overTop > 0 && overBottom <= 0 ) {
					newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
					position.top += overTop - newOverBottom;
				// element is initially over bottom of within
				} else if ( overBottom > 0 && overTop <= 0 ) {
					position.top = withinOffset;
				// element is initially over both top and bottom of within
				} else {
					if ( overTop > overBottom ) {
						position.top = withinOffset + outerHeight - data.collisionHeight;
					} else {
						position.top = withinOffset;
					}
				}
			// too far up -> align with top
			} else if ( overTop > 0 ) {
				position.top += overTop;
			// too far down -> align with bottom edge
			} else if ( overBottom > 0 ) {
				position.top -= overBottom;
			// adjust based on position and margin
			} else {
				position.top = max( position.top - collisionPosTop, position.top );
			}
		}
	},
	flip: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.left + within.scrollLeft,
				outerWidth = within.width,
				offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = collisionPosLeft - offsetLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
				myOffset = data.my[ 0 ] === "left" ?
					-data.elemWidth :
					data.my[ 0 ] === "right" ?
						data.elemWidth :
						0,
				atOffset = data.at[ 0 ] === "left" ?
					data.targetWidth :
					data.at[ 0 ] === "right" ?
						-data.targetWidth :
						0,
				offset = -2 * data.offset[ 0 ],
				newOverRight,
				newOverLeft;

			if ( overLeft < 0 ) {
				newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
				if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
					position.left += myOffset + atOffset + offset;
				}
			} else if ( overRight > 0 ) {
				newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
				if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
					position.left += myOffset + atOffset + offset;
				}
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.top + within.scrollTop,
				outerHeight = within.height,
				offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = collisionPosTop - offsetTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
				top = data.my[ 1 ] === "top",
				myOffset = top ?
					-data.elemHeight :
					data.my[ 1 ] === "bottom" ?
						data.elemHeight :
						0,
				atOffset = data.at[ 1 ] === "top" ?
					data.targetHeight :
					data.at[ 1 ] === "bottom" ?
						-data.targetHeight :
						0,
				offset = -2 * data.offset[ 1 ],
				newOverTop,
				newOverBottom;
			if ( overTop < 0 ) {
				newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
				if ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) {
					position.top += myOffset + atOffset + offset;
				}
			} else if ( overBottom > 0 ) {
				newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
				if ( newOverTop > 0 || abs( newOverTop ) < overBottom ) {
					position.top += myOffset + atOffset + offset;
				}
			}
		}
	},
	flipfit: {
		left: function() {
			$.ui.position.flip.left.apply( this, arguments );
			$.ui.position.fit.left.apply( this, arguments );
		},
		top: function() {
			$.ui.position.flip.top.apply( this, arguments );
			$.ui.position.fit.top.apply( this, arguments );
		}
	}
};

// fraction support test
(function () {
	var testElement, testElementParent, testElementStyle, offsetLeft, i,
		body = document.getElementsByTagName( "body" )[ 0 ],
		div = document.createElement( "div" );

	//Create a "fake body" for testing based on method used in jQuery.support
	testElement = document.createElement( body ? "div" : "body" );
	testElementStyle = {
		visibility: "hidden",
		width: 0,
		height: 0,
		border: 0,
		margin: 0,
		background: "none"
	};
	if ( body ) {
		$.extend( testElementStyle, {
			position: "absolute",
			left: "-1000px",
			top: "-1000px"
		});
	}
	for ( i in testElementStyle ) {
		testElement.style[ i ] = testElementStyle[ i ];
	}
	testElement.appendChild( div );
	testElementParent = body || document.documentElement;
	testElementParent.insertBefore( testElement, testElementParent.firstChild );

	div.style.cssText = "position: absolute; left: 10.7432222px;";

	offsetLeft = $( div ).offset().left;
	supportsOffsetFractions = offsetLeft > 10 && offsetLeft < 11;

	testElement.innerHTML = "";
	testElementParent.removeChild( testElement );
})();

})();

var position = $.ui.position;
/*!
 * jQuery UI Draggable 1.11.4
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/draggable/
 */


$.widget("ui.draggable", $.ui.mouse, {
	version: "1.11.4",
	widgetEventPrefix: "drag",
	options: {
		addClasses: true, //是否添加ui-draggable样式
		appendTo: "parent", //用来指定控件在拖动过程中ui.helper的容器
		axis: false, //'x': 只能水平拖动;'y': 只能垂直拖动;false: 既可以水平, 也可以垂直拖动.
		connectToSortable: false,//此选项需要和sortable联合使用,详见"draggable"的plugin "connectToSortable"
		containment: false,//拖动的范围
		cursor: "auto",//鼠标样式
		cursorAt: false,//在拖动控件的过程中, 鼠标在控件上显示的位置(相对控件自身左上角偏移位置)
		grid: false,//可拖动控件拖动时采用grid的方式拖动, 也就是说拖动过程中的单位是guid选项指定的数组描述的格子
		handle: false,//指定触发拖动的元素,譬如dialog中只能点击列头才能拖动
		helper: "original",//'original': 可拖动控件本身移动;'clone': 将可拖动控件自身克隆一个移动, 自身在原始位置不变
		iframeFix: false,//设置为true, 将会阻止拖动过程中当前页面上所有的iframe的mousemove事件, 如果设置一个选择器, 将会阻止指定的iframe的mousemove事件;选择器的选择结果需要是iframe元素
		opacity: false,//拖动过程中helper(拖动时跟随鼠标移动的控件)的不透明度
		refreshPositions: false,//如果设置为true, 所有的droppable位置会在每次mousemove事件中进行计算. 注意: 该选项主要用于解决高级动态页面展现问题. 慎用.
		revert: false,//影响一次拖动之后是否回归到原始位置.
		revertDuration: 500,//revert(回归到原始位置)整个过程需要的时间, 单位是毫秒. 如果设置revert选项设置为false, 则忽略此
		scope: "default",//和droppable的同名选项结合使用, droppable的accept选项用来设置可以接受的draggable控件, 同时, 可接受的drggable控件受scope选项约束, 必须是同一个scope中的draggable和droppable才可以互相拖放.
		scroll: true,//在拖动过程中超出可拖动控件容器的时候, 容器自动增加滚动条
		scrollSensitivity: 20,//鼠标指针和与draggable控件所在容器的边距离为多少的时候, 滚动条开始滚动.
		scrollSpeed: 20,//由于scrollSensitivity导致的滚动发生时, 滚动条一次滚动多少像素值
		snap: false,//拖动过程中, 靠近但是还没有挨上目标组件是, 自动的将正在拖动的组件吸过去.
		snapMode: "both",// 'inner': 在指定的元素内部可以吸附;'outer': 在指定元素外部可以吸附;'both': 里面外面都可以吸附.
		snapTolerance: 20,//设定离目标对象的边多少像素的时候, 进行吸附.
		stack: false,//{group: '.selector', min: 50} 一次初始化一组draggable控件;可以实现当前被拖动的始终在最前效果, min用来指定这一组的z-index值的最小值.
		zIndex: false,//拖动时的helper(跟随鼠标移动的控件)的z-index值. z-index就是css中的层叠层数, 数值越大, 越在上层.

		// callbacks
		drag: null,//拖动过程中鼠标移动.
		start: null,//拖动开始, 指鼠标按下, 开始移动.
		stop: null//拖动结束.
	},
	_create: function() {

		if ( this.options.helper === "original" ) {
			this._setPositionRelative();
		}
		if (this.options.addClasses){
			this.element.addClass("ui-draggable");
		}
		if (this.options.disabled){
			this.element.addClass("ui-draggable-disabled");
		}
		this._setHandleClassName();

		this._mouseInit();
	},

	_setOption: function( key, value ) {
		this._super( key, value );
		if ( key === "handle" ) {
			this._removeHandleClassName();
			this._setHandleClassName();
		}
	},

	_destroy: function() {
		if ( ( this.helper || this.element ).is( ".ui-draggable-dragging" ) ) {
			this.destroyOnClear = true;
			return;
		}
		this.element.removeClass( "ui-draggable ui-draggable-dragging ui-draggable-disabled" );
		this._removeHandleClassName();
		this._mouseDestroy();
	},

	_mouseCapture: function(event) {
		var o = this.options;

		this._blurActiveElement( event );

		// among others, prevent a drag on a resizable-handle
		if (this.helper || o.disabled || $(event.target).closest(".ui-resizable-handle").length > 0) {
			return false;
		}

		//Quit if we're not on a valid handle
		this.handle = this._getHandle(event);
		if (!this.handle) {
			return false;
		}

		this._blockFrames( o.iframeFix === true ? "iframe" : o.iframeFix );

		return true;

	},

	_blockFrames: function( selector ) {
		this.iframeBlocks = this.document.find( selector ).map(function() {
			var iframe = $( this );

			return $( "<div>" )
				.css( "position", "absolute" )
				.appendTo( iframe.parent() )
				.outerWidth( iframe.outerWidth() )
				.outerHeight( iframe.outerHeight() )
				.offset( iframe.offset() )[ 0 ];
		});
	},

	_unblockFrames: function() {
		if ( this.iframeBlocks ) {
			this.iframeBlocks.remove();
			delete this.iframeBlocks;
		}
	},

	_blurActiveElement: function( event ) {
		var document = this.document[ 0 ];

		// Only need to blur if the event occurred on the draggable itself, see #10527
		if ( !this.handleElement.is( event.target ) ) {
			return;
		}

		// support: IE9
		// IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
		try {

			// Support: IE9, IE10
			// If the <body> is blurred, IE will switch windows, see #9520
			if ( document.activeElement && document.activeElement.nodeName.toLowerCase() !== "body" ) {

				// Blur any element that currently has focus, see #4261
				$( document.activeElement ).blur();
			}
		} catch ( error ) {}
	},

	_mouseStart: function(event) {

		var o = this.options;

		//Create and append the visible helper
		this.helper = this._createHelper(event);

		this.helper.addClass("ui-draggable-dragging");

		//Cache the helper size
		this._cacheHelperProportions();

		//If ddmanager is used for droppables, set the global draggable
		if ($.ui.ddmanager) {
			$.ui.ddmanager.current = this;
		}

		/*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */

		//Cache the margins of the original element
		this._cacheMargins();

		//Store the helper's css position
		this.cssPosition = this.helper.css( "position" );
		this.scrollParent = this.helper.scrollParent( true );
		this.offsetParent = this.helper.offsetParent();
		this.hasFixedAncestor = this.helper.parents().filter(function() {
				return $( this ).css( "position" ) === "fixed";
			}).length > 0;

		//The element's absolute position on the page minus margins
		this.positionAbs = this.element.offset();
		this._refreshOffsets( event );

		//Generate the original position
		this.originalPosition = this.position = this._generatePosition( event, false );
		this.originalPageX = event.pageX;
		this.originalPageY = event.pageY;

		//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
		(o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));

		//Set a containment if given in the options
		this._setContainment();

		//Trigger event + callbacks
		if (this._trigger("start", event) === false) {
			this._clear();
			return false;
		}

		//Recache the helper size
		this._cacheHelperProportions();

		//Prepare the droppable offsets
		if ($.ui.ddmanager && !o.dropBehaviour) {
			$.ui.ddmanager.prepareOffsets(this, event);
		}

		// Reset helper's right/bottom css if they're set and set explicit width/height instead
		// as this prevents resizing of elements with right/bottom set (see #7772)
		this._normalizeRightBottom();

		this._mouseDrag(event, true); //Execute the drag once - this causes the helper not to be visible before getting its correct position

		//If the ddmanager is used for droppables, inform the manager that dragging has started (see #5003)
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.dragStart(this, event);
		}

		return true;
	},

	_refreshOffsets: function( event ) {
		this.offset = {
			top: this.positionAbs.top - this.margins.top,
			left: this.positionAbs.left - this.margins.left,
			scroll: false,
			parent: this._getParentOffset(),
			relative: this._getRelativeOffset()
		};

		this.offset.click = {
			left: event.pageX - this.offset.left,
			top: event.pageY - this.offset.top
		};
	},

	_mouseDrag: function(event, noPropagation) {
		// reset any necessary cached properties (see #5009)
		if ( this.hasFixedAncestor ) {
			this.offset.parent = this._getParentOffset();
		}

		//Compute the helpers position
		this.position = this._generatePosition( event, true );
		this.positionAbs = this._convertPositionTo("absolute");

		//Call plugins and callbacks and use the resulting position if something is returned
		if (!noPropagation) {
			var ui = this._uiHash();
			if (this._trigger("drag", event, ui) === false) {
				this._mouseUp({});
				return false;
			}
			this.position = ui.position;
		}

		this.helper[ 0 ].style.left = this.position.left + "px";
		this.helper[ 0 ].style.top = this.position.top + "px";

		if ($.ui.ddmanager) {
			$.ui.ddmanager.drag(this, event);
		}

		return false;
	},

	_mouseStop: function(event) {

		//If we are using droppables, inform the manager about the drop
		var that = this,
			dropped = false;
		if ($.ui.ddmanager && !this.options.dropBehaviour) {
			dropped = $.ui.ddmanager.drop(this, event);
		}

		//if a drop comes from outside (a sortable)
		if (this.dropped) {
			dropped = this.dropped;
			this.dropped = false;
		}

		if ((this.options.revert === "invalid" && !dropped) || (this.options.revert === "valid" && dropped) || this.options.revert === true || ($.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped))) {
			$(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
				if (that._trigger("stop", event) !== false) {
					that._clear();
				}
			});
		} else {
			if (this._trigger("stop", event) !== false) {
				this._clear();
			}
		}

		return false;
	},

	_mouseUp: function( event ) {
		this._unblockFrames();

		//If the ddmanager is used for droppables, inform the manager that dragging has stopped (see #5003)
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.dragStop(this, event);
		}

		// Only need to focus if the event occurred on the draggable itself, see #10527
		if ( this.handleElement.is( event.target ) ) {
			// The interaction is over; whether or not the click resulted in a drag, focus the element
			this.element.focus();
		}

		return $.ui.mouse.prototype._mouseUp.call(this, event);
	},

	cancel: function() {

		if (this.helper.is(".ui-draggable-dragging")) {
			this._mouseUp({});
		} else {
			this._clear();
		}

		return this;

	},

	_getHandle: function(event) {
		return this.options.handle ?
			!!$( event.target ).closest( this.element.find( this.options.handle ) ).length :
			true;
	},

	_setHandleClassName: function() {
		this.handleElement = this.options.handle ?
			this.element.find( this.options.handle ) : this.element;
		this.handleElement.addClass( "ui-draggable-handle" );
	},

	_removeHandleClassName: function() {
		this.handleElement.removeClass( "ui-draggable-handle" );
	},

	_createHelper: function(event) {

		var o = this.options,
			helperIsFunction = $.isFunction( o.helper ),
			helper = helperIsFunction ?
				$( o.helper.apply( this.element[ 0 ], [ event ] ) ) :
				( o.helper === "clone" ?
					this.element.clone().removeAttr( "id" ) :
					this.element );

		if (!helper.parents("body").length) {
			helper.appendTo((o.appendTo === "parent" ? this.element[0].parentNode : o.appendTo));
		}

		// http://bugs.jqueryui.com/ticket/9446
		// a helper function can return the original element
		// which wouldn't have been set to relative in _create
		if ( helperIsFunction && helper[ 0 ] === this.element[ 0 ] ) {
			this._setPositionRelative();
		}

		if (helper[0] !== this.element[0] && !(/(fixed|absolute)/).test(helper.css("position"))) {
			helper.css("position", "absolute");
		}

		return helper;

	},

	_setPositionRelative: function() {
		if ( !( /^(?:r|a|f)/ ).test( this.element.css( "position" ) ) ) {
			this.element[ 0 ].style.position = "relative";
		}
	},

	_adjustOffsetFromHelper: function(obj) {
		if (typeof obj === "string") {
			obj = obj.split(" ");
		}
		if ($.isArray(obj)) {
			obj = { left: +obj[0], top: +obj[1] || 0 };
		}
		if ("left" in obj) {
			this.offset.click.left = obj.left + this.margins.left;
		}
		if ("right" in obj) {
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
		}
		if ("top" in obj) {
			this.offset.click.top = obj.top + this.margins.top;
		}
		if ("bottom" in obj) {
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
		}
	},

	_isRootNode: function( element ) {
		return ( /(html|body)/i ).test( element.tagName ) || element === this.document[ 0 ];
	},

	_getParentOffset: function() {

		//Get the offsetParent and cache its position
		var po = this.offsetParent.offset(),
			document = this.document[ 0 ];

		// This is a special case where we need to modify a offset calculated on start, since the following happened:
		// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
		//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
		if (this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
			po.left += this.scrollParent.scrollLeft();
			po.top += this.scrollParent.scrollTop();
		}

		if ( this._isRootNode( this.offsetParent[ 0 ] ) ) {
			po = { top: 0, left: 0 };
		}

		return {
			top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
			left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
		};

	},

	_getRelativeOffset: function() {
		if ( this.cssPosition !== "relative" ) {
			return { top: 0, left: 0 };
		}

		var p = this.element.position(),
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );

		return {
			top: p.top - ( parseInt(this.helper.css( "top" ), 10) || 0 ) + ( !scrollIsRootNode ? this.scrollParent.scrollTop() : 0 ),
			left: p.left - ( parseInt(this.helper.css( "left" ), 10) || 0 ) + ( !scrollIsRootNode ? this.scrollParent.scrollLeft() : 0 )
		};

	},

	_cacheMargins: function() {
		this.margins = {
			left: (parseInt(this.element.css("marginLeft"), 10) || 0),
			top: (parseInt(this.element.css("marginTop"), 10) || 0),
			right: (parseInt(this.element.css("marginRight"), 10) || 0),
			bottom: (parseInt(this.element.css("marginBottom"), 10) || 0)
		};
	},

	_cacheHelperProportions: function() {
		this.helperProportions = {
			width: this.helper.outerWidth(),
			height: this.helper.outerHeight()
		};
	},

	_setContainment: function() {

		var isUserScrollable, c, ce,
			o = this.options,
			document = this.document[ 0 ];

		this.relativeContainer = null;

		if ( !o.containment ) {
			this.containment = null;
			return;
		}

		if ( o.containment === "window" ) {
			this.containment = [
				$( window ).scrollLeft() - this.offset.relative.left - this.offset.parent.left,
				$( window ).scrollTop() - this.offset.relative.top - this.offset.parent.top,
				$( window ).scrollLeft() + $( window ).width() - this.helperProportions.width - this.margins.left,
				$( window ).scrollTop() + ( $( window ).height() || document.body.parentNode.scrollHeight ) - this.helperProportions.height - this.margins.top
			];
			return;
		}

		if ( o.containment === "document") {
			this.containment = [
				0,
				0,
				$( document ).width() - this.helperProportions.width - this.margins.left,
				( $( document ).height() || document.body.parentNode.scrollHeight ) - this.helperProportions.height - this.margins.top
			];
			return;
		}

		if ( o.containment.constructor === Array ) {
			this.containment = o.containment;
			return;
		}

		if ( o.containment === "parent" ) {
			o.containment = this.helper[ 0 ].parentNode;
		}

		c = $( o.containment );
		ce = c[ 0 ];

		if ( !ce ) {
			return;
		}

		isUserScrollable = /(scroll|auto)/.test( c.css( "overflow" ) );

		this.containment = [
			( parseInt( c.css( "borderLeftWidth" ), 10 ) || 0 ) + ( parseInt( c.css( "paddingLeft" ), 10 ) || 0 ),
			( parseInt( c.css( "borderTopWidth" ), 10 ) || 0 ) + ( parseInt( c.css( "paddingTop" ), 10 ) || 0 ),
			( isUserScrollable ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) -
				( parseInt( c.css( "borderRightWidth" ), 10 ) || 0 ) -
				( parseInt( c.css( "paddingRight" ), 10 ) || 0 ) -
				this.helperProportions.width -
				this.margins.left -
				this.margins.right,
			( isUserScrollable ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) -
				( parseInt( c.css( "borderBottomWidth" ), 10 ) || 0 ) -
				( parseInt( c.css( "paddingBottom" ), 10 ) || 0 ) -
				this.helperProportions.height -
				this.margins.top -
				this.margins.bottom
		];
		this.relativeContainer = c;
	},

	_convertPositionTo: function(d, pos) {

		if (!pos) {
			pos = this.position;
		}

		var mod = d === "absolute" ? 1 : -1,
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );

		return {
			top: (
				pos.top	+																// The absolute mouse position
				this.offset.relative.top * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top * mod -										// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.offset.scroll.top : ( scrollIsRootNode ? 0 : this.offset.scroll.top ) ) * mod)
			),
			left: (
				pos.left +																// The absolute mouse position
				this.offset.relative.left * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left * mod	-										// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.offset.scroll.left : ( scrollIsRootNode ? 0 : this.offset.scroll.left ) ) * mod)
			)
		};

	},

	_generatePosition: function( event, constrainPosition ) {

		var containment, co, top, left,
			o = this.options,
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] ),
			pageX = event.pageX,
			pageY = event.pageY;

		// Cache the scroll
		if ( !scrollIsRootNode || !this.offset.scroll ) {
			this.offset.scroll = {
				top: this.scrollParent.scrollTop(),
				left: this.scrollParent.scrollLeft()
			};
		}

		/*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */

		// If we are not dragging yet, we won't check for options
		if ( constrainPosition ) {
			if ( this.containment ) {
				if ( this.relativeContainer ){
					co = this.relativeContainer.offset();
					containment = [
						this.containment[ 0 ] + co.left,
						this.containment[ 1 ] + co.top,
						this.containment[ 2 ] + co.left,
						this.containment[ 3 ] + co.top
					];
				} else {
					containment = this.containment;
				}

				if (event.pageX - this.offset.click.left < containment[0]) {
					pageX = containment[0] + this.offset.click.left;
				}
				if (event.pageY - this.offset.click.top < containment[1]) {
					pageY = containment[1] + this.offset.click.top;
				}
				if (event.pageX - this.offset.click.left > containment[2]) {
					pageX = containment[2] + this.offset.click.left;
				}
				if (event.pageY - this.offset.click.top > containment[3]) {
					pageY = containment[3] + this.offset.click.top;
				}
			}

			if (o.grid) {
				//Check for grid elements set to 0 to prevent divide by 0 error causing invalid argument errors in IE (see ticket #6950)
				top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
				pageY = containment ? ((top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3]) ? top : ((top - this.offset.click.top >= containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

				left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
				pageX = containment ? ((left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2]) ? left : ((left - this.offset.click.left >= containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
			}

			if ( o.axis === "y" ) {
				pageX = this.originalPageX;
			}

			if ( o.axis === "x" ) {
				pageY = this.originalPageY;
			}
		}

		return {
			top: (
				pageY -																	// The absolute mouse position
				this.offset.click.top	-												// Click offset (relative to the element)
				this.offset.relative.top -												// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top +												// The offsetParent's offset without borders (offset + border)
				( this.cssPosition === "fixed" ? -this.offset.scroll.top : ( scrollIsRootNode ? 0 : this.offset.scroll.top ) )
			),
			left: (
				pageX -																	// The absolute mouse position
				this.offset.click.left -												// Click offset (relative to the element)
				this.offset.relative.left -												// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left +												// The offsetParent's offset without borders (offset + border)
				( this.cssPosition === "fixed" ? -this.offset.scroll.left : ( scrollIsRootNode ? 0 : this.offset.scroll.left ) )
			)
		};

	},

	_clear: function() {
		this.helper.removeClass("ui-draggable-dragging");
		if (this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {
			this.helper.remove();
		}
		this.helper = null;
		this.cancelHelperRemoval = false;
		if ( this.destroyOnClear ) {
			this.destroy();
		}
	},

	_normalizeRightBottom: function() {
		if ( this.options.axis !== "y" && this.helper.css( "right" ) !== "auto" ) {
			this.helper.width( this.helper.width() );
			this.helper.css( "right", "auto" );
		}
		if ( this.options.axis !== "x" && this.helper.css( "bottom" ) !== "auto" ) {
			this.helper.height( this.helper.height() );
			this.helper.css( "bottom", "auto" );
		}
	},

	// From now on bulk stuff - mainly helpers

	_trigger: function( type, event, ui ) {
		ui = ui || this._uiHash();
		$.ui.plugin.call( this, type, [ event, ui, this ], true );

		// Absolute position and offset (see #6884 ) have to be recalculated after plugins
		if ( /^(drag|start|stop)/.test( type ) ) {
			this.positionAbs = this._convertPositionTo( "absolute" );
			ui.offset = this.positionAbs;
		}
		return $.Widget.prototype._trigger.call( this, type, event, ui );
	},

	plugins: {},

	_uiHash: function() {
		return {
			helper: this.helper,
			position: this.position,
			originalPosition: this.originalPosition,
			offset: this.positionAbs
		};
	}

});

$.ui.plugin.add( "draggable", "connectToSortable", {
	start: function( event, ui, draggable ) {
		var uiSortable = $.extend( {}, ui, {
			item: draggable.element
		});

		draggable.sortables = [];
		$( draggable.options.connectToSortable ).each(function() {			var sortable = $( this ).sortable( "instance" );

			if ( sortable && !sortable.options.disabled ) {
				draggable.sortables.push( sortable );

				// refreshPositions is called at drag start to refresh the containerCache
				// which is used in drag. This ensures it's initialized and synchronized
				// with any changes that might have happened on the page since initialization.
				sortable.refreshPositions();
				sortable._trigger("activate", event, uiSortable);
			}
		});
	},
	stop: function( event, ui, draggable ) {
		var uiSortable = $.extend( {}, ui, {
			item: draggable.element
		});

		draggable.cancelHelperRemoval = false;

		$.each( draggable.sortables, function() {
			var sortable = this;

			if ( sortable.isOver ) {
				sortable.isOver = 0;

				// Allow this sortable to handle removing the helper
				draggable.cancelHelperRemoval = true;
				sortable.cancelHelperRemoval = false;

				// Use _storedCSS To restore properties in the sortable,
				// as this also handles revert (#9675) since the draggable
				// may have modified them in unexpected ways (#8809)
				sortable._storedCSS = {
					position: sortable.placeholder.css( "position" ),
					top: sortable.placeholder.css( "top" ),
					left: sortable.placeholder.css( "left" )
				};

				sortable._mouseStop(event);

				// Once drag has ended, the sortable should return to using
				// its original helper, not the shared helper from draggable
				sortable.options.helper = sortable.options._helper;
			} else {
				// Prevent this Sortable from removing the helper.
				// However, don't set the draggable to remove the helper
				// either as another connected Sortable may yet handle the removal.
				sortable.cancelHelperRemoval = true;

				sortable._trigger( "deactivate", event, uiSortable );
			}
		});
	},
	drag: function( event, ui, draggable ) {
		$.each( draggable.sortables, function() {
			var innermostIntersecting = false,
				sortable = this;

			// Copy over variables that sortable's _intersectsWith uses
			sortable.positionAbs = draggable.positionAbs;
			sortable.helperProportions = draggable.helperProportions;
			sortable.offset.click = draggable.offset.click;

			if ( sortable._intersectsWith( sortable.containerCache ) ) {
				innermostIntersecting = true;

				$.each( draggable.sortables, function() {
					// Copy over variables that sortable's _intersectsWith uses
					this.positionAbs = draggable.positionAbs;
					this.helperProportions = draggable.helperProportions;
					this.offset.click = draggable.offset.click;

					if ( this !== sortable &&
							this._intersectsWith( this.containerCache ) &&
							$.contains( sortable.element[ 0 ], this.element[ 0 ] ) ) {
						innermostIntersecting = false;
					}

					return innermostIntersecting;
				});
			}

			if ( innermostIntersecting ) {
				// If it intersects, we use a little isOver variable and set it once,
				// so that the move-in stuff gets fired only once.
				if ( !sortable.isOver ) {
					sortable.isOver = 1;

					// Store draggable's parent in case we need to reappend to it later.
					draggable._parent = ui.helper.parent();

					sortable.currentItem = ui.helper
						.appendTo( sortable.element )
						.data( "ui-sortable-item", true );

					// Store helper option to later restore it
					sortable.options._helper = sortable.options.helper;

					sortable.options.helper = function() {
						return ui.helper[ 0 ];
					};

					// Fire the start events of the sortable with our passed browser event,
					// and our own helper (so it doesn't create a new one)
					event.target = sortable.currentItem[ 0 ];
					sortable._mouseCapture( event, true );
					sortable._mouseStart( event, true, true );

					// Because the browser event is way off the new appended portlet,
					// modify necessary variables to reflect the changes
					sortable.offset.click.top = draggable.offset.click.top;
					sortable.offset.click.left = draggable.offset.click.left;
					sortable.offset.parent.left -= draggable.offset.parent.left -
						sortable.offset.parent.left;
					sortable.offset.parent.top -= draggable.offset.parent.top -
						sortable.offset.parent.top;

					draggable._trigger( "toSortable", event );

					// Inform draggable that the helper is in a valid drop zone,
					// used solely in the revert option to handle "valid/invalid".
					draggable.dropped = sortable.element;

					// Need to refreshPositions of all sortables in the case that
					// adding to one sortable changes the location of the other sortables (#9675)
					$.each( draggable.sortables, function() {
						this.refreshPositions();
					});

					// hack so receive/update callbacks work (mostly)
					draggable.currentItem = draggable.element;
					sortable.fromOutside = draggable;
				}

				if ( sortable.currentItem ) {
					sortable._mouseDrag( event );
					// Copy the sortable's position because the draggable's can potentially reflect
					// a relative position, while sortable is always absolute, which the dragged
					// element has now become. (#8809)
					ui.position = sortable.position;
				}
			} else {
				// If it doesn't intersect with the sortable, and it intersected before,
				// we fake the drag stop of the sortable, but make sure it doesn't remove
				// the helper by using cancelHelperRemoval.
				if ( sortable.isOver ) {

					sortable.isOver = 0;
					sortable.cancelHelperRemoval = true;

					// Calling sortable's mouseStop would trigger a revert,
					// so revert must be temporarily false until after mouseStop is called.
					sortable.options._revert = sortable.options.revert;
					sortable.options.revert = false;

					sortable._trigger( "out", event, sortable._uiHash( sortable ) );
					sortable._mouseStop( event, true );

					// restore sortable behaviors that were modfied
					// when the draggable entered the sortable area (#9481)
					sortable.options.revert = sortable.options._revert;
					sortable.options.helper = sortable.options._helper;

					if ( sortable.placeholder ) {
						sortable.placeholder.remove();
					}

					// Restore and recalculate the draggable's offset considering the sortable
					// may have modified them in unexpected ways. (#8809, #10669)
					ui.helper.appendTo( draggable._parent );
					draggable._refreshOffsets( event );
					ui.position = draggable._generatePosition( event, true );

					draggable._trigger( "fromSortable", event );

					// Inform draggable that the helper is no longer in a valid drop zone
					draggable.dropped = false;

					// Need to refreshPositions of all sortables just in case removing
					// from one sortable changes the location of other sortables (#9675)
					$.each( draggable.sortables, function() {
						this.refreshPositions();
					});
				}
			}
		});
	}
});

$.ui.plugin.add("draggable", "cursor", {
	start: function( event, ui, instance ) {
		var t = $( "body" ),
			o = instance.options;

		if (t.css("cursor")) {
			o._cursor = t.css("cursor");
		}
		t.css("cursor", o.cursor);
	},
	stop: function( event, ui, instance ) {
		var o = instance.options;
		if (o._cursor) {
			$("body").css("cursor", o._cursor);
		}
	}
});

$.ui.plugin.add("draggable", "opacity", {
	start: function( event, ui, instance ) {
		var t = $( ui.helper ),
			o = instance.options;
		if (t.css("opacity")) {
			o._opacity = t.css("opacity");
		}
		t.css("opacity", o.opacity);
	},
	stop: function( event, ui, instance ) {
		var o = instance.options;
		if (o._opacity) {
			$(ui.helper).css("opacity", o._opacity);
		}
	}
});

$.ui.plugin.add("draggable", "scroll", {
	start: function( event, ui, i ) {
		if ( !i.scrollParentNotHidden ) {
			i.scrollParentNotHidden = i.helper.scrollParent( false );
		}

		if ( i.scrollParentNotHidden[ 0 ] !== i.document[ 0 ] && i.scrollParentNotHidden[ 0 ].tagName !== "HTML" ) {
			i.overflowOffset = i.scrollParentNotHidden.offset();
		}
	},
	drag: function( event, ui, i  ) {

		var o = i.options,
			scrolled = false,
			scrollParent = i.scrollParentNotHidden[ 0 ],
			document = i.document[ 0 ];

		if ( scrollParent !== document && scrollParent.tagName !== "HTML" ) {
			if ( !o.axis || o.axis !== "x" ) {
				if ( ( i.overflowOffset.top + scrollParent.offsetHeight ) - event.pageY < o.scrollSensitivity ) {
					scrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed;
				} else if ( event.pageY - i.overflowOffset.top < o.scrollSensitivity ) {
					scrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed;
				}
			}

			if ( !o.axis || o.axis !== "y" ) {
				if ( ( i.overflowOffset.left + scrollParent.offsetWidth ) - event.pageX < o.scrollSensitivity ) {
					scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed;
				} else if ( event.pageX - i.overflowOffset.left < o.scrollSensitivity ) {
					scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed;
				}
			}

		} else {

			if (!o.axis || o.axis !== "x") {
				if (event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
					scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
				} else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
					scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
				}
			}

			if (!o.axis || o.axis !== "y") {
				if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
					scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
				} else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
					scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
				}
			}

		}

		if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
			$.ui.ddmanager.prepareOffsets(i, event);
		}

	}
});

$.ui.plugin.add("draggable", "snap", {
	start: function( event, ui, i ) {

		var o = i.options;

		i.snapElements = [];

		$(o.snap.constructor !== String ? ( o.snap.items || ":data(ui-draggable)" ) : o.snap).each(function() {
			var $t = $(this),
				$o = $t.offset();
			if (this !== i.element[0]) {
				i.snapElements.push({
					item: this,
					width: $t.outerWidth(), height: $t.outerHeight(),
					top: $o.top, left: $o.left
				});
			}
		});

	},
	drag: function( event, ui, inst ) {

		var ts, bs, ls, rs, l, r, t, b, i, first,
			o = inst.options,
			d = o.snapTolerance,
			x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,
			y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;

		for (i = inst.snapElements.length - 1; i >= 0; i--){

			l = inst.snapElements[i].left - inst.margins.left;
			r = l + inst.snapElements[i].width;
			t = inst.snapElements[i].top - inst.margins.top;
			b = t + inst.snapElements[i].height;

			if ( x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d || !$.contains( inst.snapElements[ i ].item.ownerDocument, inst.snapElements[ i ].item ) ) {
				if (inst.snapElements[i].snapping) {
					(inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
				}
				inst.snapElements[i].snapping = false;
				continue;
			}

			if (o.snapMode !== "inner") {
				ts = Math.abs(t - y2) <= d;
				bs = Math.abs(b - y1) <= d;
				ls = Math.abs(l - x2) <= d;
				rs = Math.abs(r - x1) <= d;
				if (ts) {
					ui.position.top = inst._convertPositionTo("relative", { top: t - inst.helperProportions.height, left: 0 }).top;
				}
				if (bs) {
					ui.position.top = inst._convertPositionTo("relative", { top: b, left: 0 }).top;
				}
				if (ls) {
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l - inst.helperProportions.width }).left;
				}
				if (rs) {
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r }).left;
				}
			}

			first = (ts || bs || ls || rs);

			if (o.snapMode !== "outer") {
				ts = Math.abs(t - y1) <= d;
				bs = Math.abs(b - y2) <= d;
				ls = Math.abs(l - x1) <= d;
				rs = Math.abs(r - x2) <= d;
				if (ts) {
					ui.position.top = inst._convertPositionTo("relative", { top: t, left: 0 }).top;
				}
				if (bs) {
					ui.position.top = inst._convertPositionTo("relative", { top: b - inst.helperProportions.height, left: 0 }).top;
				}
				if (ls) {
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l }).left;
				}
				if (rs) {
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r - inst.helperProportions.width }).left;
				}
			}

			if (!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) {
				(inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
			}
			inst.snapElements[i].snapping = (ts || bs || ls || rs || first);

		}

	}
});

$.ui.plugin.add("draggable", "stack", {
	start: function( event, ui, instance ) {
		var min,
			o = instance.options,
			group = $.makeArray($(o.stack)).sort(function(a, b) {
				return (parseInt($(a).css("zIndex"), 10) || 0) - (parseInt($(b).css("zIndex"), 10) || 0);
			});

		if (!group.length) { return; }

		min = parseInt($(group[0]).css("zIndex"), 10) || 0;
		$(group).each(function(i) {
			$(this).css("zIndex", min + i);
		});
		this.css("zIndex", (min + group.length));
	}
});

$.ui.plugin.add("draggable", "zIndex", {
	start: function( event, ui, instance ) {
		var t = $( ui.helper ),
			o = instance.options;

		if (t.css("zIndex")) {
			o._zIndex = t.css("zIndex");
		}
		t.css("zIndex", o.zIndex);
	},
	stop: function( event, ui, instance ) {
		var o = instance.options;

		if (o._zIndex) {
			$(ui.helper).css("zIndex", o._zIndex);
		}
	}
});


var draggable = $.ui.draggable;

/*!
 * jQuery UI Droppable 1.11.4
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/droppable/
 */


$.widget( "ui.droppable", {
	version: "1.11.4",
	widgetEventPrefix: "drop",
	options: {
		accept: "*",//接受所有符合选择器条件的draggable对象. 如果指定了一个函数, 该函数要求为页面上每个draggable对象(符合函数第一个条件的对象)提供一个过滤器.如果要这些元素被dropable接受,该函数需要返回true.
		activeClass: false,//如果指定了该参数,在被允许的draggable对象填充时,droppable会被添加上指定的样式.
		addClasses: true,//如果设置为false, 可以防止ui-droppable类在进行时添加. 这可能会使在初始化数百个元素执行.droppable()时使性能得到理想的优化.
		greedy: false,//如果设置为true,将在嵌套的droppable对象中阻止事件的传播.（阻止事件向上冒泡）
		hoverClass: false,//如果设置了该参数,将在一个被允许的draggable对象悬停在droppable对象上时向droppable对象添加一个指定的样式.
		scope: "default",//用来设置draggle对象和droppable对象的组, 除了droppable中的accept属性指定的元素外,和droppable对象相同组的draggable对象也被允许添加到droppable对象中.
		tolerance: "intersect",//允许使用的值: ‘fit’, ‘intersect’, ‘pointer’, ‘touch’.fit: draggable 完全重叠到droppable ; intersect: draggable 和droppable至少重叠50%;pointer: 鼠标重叠到droppable;touch: draggable和droppable的任意重叠

		// callbacks
		activate: null,
		deactivate: null,
		drop: null,
		out: null,
		over: null
	},
	_create: function() {

		var proportions,
			o = this.options,
			accept = o.accept;

		this.isover = false;
		this.isout = true;

		this.accept = $.isFunction( accept ) ? accept : function( d ) {
			return d.is( accept );
		};

		this.proportions = function( /* valueToWrite */ ) {
			if ( arguments.length ) {
				// Store the droppable's proportions
				proportions = arguments[ 0 ];
			} else {
				// Retrieve or derive the droppable's proportions
				return proportions ?
					proportions :
					proportions = {
						width: this.element[ 0 ].offsetWidth,
						height: this.element[ 0 ].offsetHeight
					};
			}
		};

		this._addToManager( o.scope );

		o.addClasses && this.element.addClass( "ui-droppable" );

	},

	_addToManager: function( scope ) {
		// Add the reference and positions to the manager
		$.ui.ddmanager.droppables[ scope ] = $.ui.ddmanager.droppables[ scope ] || [];
		$.ui.ddmanager.droppables[ scope ].push( this );
	},

	_splice: function( drop ) {
		var i = 0;
		for ( ; i < drop.length; i++ ) {
			if ( drop[ i ] === this ) {
				drop.splice( i, 1 );
			}
		}
	},

	_destroy: function() {
		var drop = $.ui.ddmanager.droppables[ this.options.scope ];

		this._splice( drop );

		this.element.removeClass( "ui-droppable ui-droppable-disabled" );
	},

	_setOption: function( key, value ) {

		if ( key === "accept" ) {
			this.accept = $.isFunction( value ) ? value : function( d ) {
				return d.is( value );
			};
		} else if ( key === "scope" ) {
			var drop = $.ui.ddmanager.droppables[ this.options.scope ];

			this._splice( drop );
			this._addToManager( value );
		}

		this._super( key, value );
	},

	_activate: function( event ) {
		var draggable = $.ui.ddmanager.current;
		if ( this.options.activeClass ) {
			this.element.addClass( this.options.activeClass );
		}
		if ( draggable ){
			this._trigger( "activate", event, this.ui( draggable ) );
		}
	},

	_deactivate: function( event ) {
		var draggable = $.ui.ddmanager.current;
		if ( this.options.activeClass ) {
			this.element.removeClass( this.options.activeClass );
		}
		if ( draggable ){
			this._trigger( "deactivate", event, this.ui( draggable ) );
		}
	},

	_over: function( event ) {

		var draggable = $.ui.ddmanager.current;

		// Bail if draggable and droppable are same element
		if ( !draggable || ( draggable.currentItem || draggable.element )[ 0 ] === this.element[ 0 ] ) {
			return;
		}

		if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem || draggable.element ) ) ) {
			if ( this.options.hoverClass ) {
				this.element.addClass( this.options.hoverClass );
			}
			this._trigger( "over", event, this.ui( draggable ) );
		}

	},

	_out: function( event ) {

		var draggable = $.ui.ddmanager.current;

		// Bail if draggable and droppable are same element
		if ( !draggable || ( draggable.currentItem || draggable.element )[ 0 ] === this.element[ 0 ] ) {
			return;
		}

		if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem || draggable.element ) ) ) {
			if ( this.options.hoverClass ) {
				this.element.removeClass( this.options.hoverClass );
			}
			this._trigger( "out", event, this.ui( draggable ) );
		}

	},

	_drop: function( event, custom ) {

		var draggable = custom || $.ui.ddmanager.current,
			childrenIntersection = false;

		// Bail if draggable and droppable are same element
		if ( !draggable || ( draggable.currentItem || draggable.element )[ 0 ] === this.element[ 0 ] ) {
			return false;
		}

		this.element.find( ":data(ui-droppable)" ).not( ".ui-draggable-dragging" ).each(function() {
			var inst = $( this ).droppable( "instance" );
			if (
				inst.options.greedy &&
				!inst.options.disabled &&
				inst.options.scope === draggable.options.scope &&
				inst.accept.call( inst.element[ 0 ], ( draggable.currentItem || draggable.element ) ) &&
				$.ui.intersect( draggable, $.extend( inst, { offset: inst.element.offset() } ), inst.options.tolerance, event )
			) { childrenIntersection = true; return false; }
		});
		if ( childrenIntersection ) {
			return false;
		}

		if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem || draggable.element ) ) ) {
			if ( this.options.activeClass ) {
				this.element.removeClass( this.options.activeClass );
			}
			if ( this.options.hoverClass ) {
				this.element.removeClass( this.options.hoverClass );
			}
			this._trigger( "drop", event, this.ui( draggable ) );
			return this.element;
		}

		return false;

	},

	ui: function( c ) {
		return {
			draggable: ( c.currentItem || c.element ),
			helper: c.helper,
			position: c.position,
			offset: c.positionAbs
		};
	}

});

$.ui.intersect = (function() {
	function isOverAxis( x, reference, size ) {
		return ( x >= reference ) && ( x < ( reference + size ) );
	}

	return function( draggable, droppable, toleranceMode, event ) {

		if ( !droppable.offset ) {
			return false;
		}

		var x1 = ( draggable.positionAbs || draggable.position.absolute ).left + draggable.margins.left,
			y1 = ( draggable.positionAbs || draggable.position.absolute ).top + draggable.margins.top,
			x2 = x1 + draggable.helperProportions.width,
			y2 = y1 + draggable.helperProportions.height,
			l = droppable.offset.left,
			t = droppable.offset.top,
			r = l + droppable.proportions().width,
			b = t + droppable.proportions().height;

		switch ( toleranceMode ) {
		case "fit":
			return ( l <= x1 && x2 <= r && t <= y1 && y2 <= b );
		case "intersect":
			return ( l < x1 + ( draggable.helperProportions.width / 2 ) && // Right Half
				x2 - ( draggable.helperProportions.width / 2 ) < r && // Left Half
				t < y1 + ( draggable.helperProportions.height / 2 ) && // Bottom Half
				y2 - ( draggable.helperProportions.height / 2 ) < b ); // Top Half
		case "pointer":
			return isOverAxis( event.pageY, t, droppable.proportions().height ) && isOverAxis( event.pageX, l, droppable.proportions().width );
		case "touch":
			return (
				( y1 >= t && y1 <= b ) || // Top edge touching
				( y2 >= t && y2 <= b ) || // Bottom edge touching
				( y1 < t && y2 > b ) // Surrounded vertically
			) && (
				( x1 >= l && x1 <= r ) || // Left edge touching
				( x2 >= l && x2 <= r ) || // Right edge touching
				( x1 < l && x2 > r ) // Surrounded horizontally
			);
		default:
			return false;
		}
	};
})();

/*
	This manager tracks offsets of draggables and droppables
*/
$.ui.ddmanager = {
	current: null,
	droppables: { "default": [] },
	prepareOffsets: function( t, event ) {

		var i, j,
			m = $.ui.ddmanager.droppables[ t.options.scope ] || [],
			type = event ? event.type : null, // workaround for #2317
			list = ( t.currentItem || t.element ).find( ":data(ui-droppable)" ).addBack();

		droppablesLoop: for ( i = 0; i < m.length; i++ ) {

			// No disabled and non-accepted
			if ( m[ i ].options.disabled || ( t && !m[ i ].accept.call( m[ i ].element[ 0 ], ( t.currentItem || t.element ) ) ) ) {
				continue;
			}

			// Filter out elements in the current dragged item
			for ( j = 0; j < list.length; j++ ) {
				if ( list[ j ] === m[ i ].element[ 0 ] ) {
					m[ i ].proportions().height = 0;
					continue droppablesLoop;
				}
			}

			m[ i ].visible = m[ i ].element.css( "display" ) !== "none";
			if ( !m[ i ].visible ) {
				continue;
			}

			// Activate the droppable if used directly from draggables
			if ( type === "mousedown" ) {
				m[ i ]._activate.call( m[ i ], event );
			}

			m[ i ].offset = m[ i ].element.offset();
			m[ i ].proportions({ width: m[ i ].element[ 0 ].offsetWidth, height: m[ i ].element[ 0 ].offsetHeight });

		}

	},
	drop: function( draggable, event ) {

		var dropped = false;
		// Create a copy of the droppables in case the list changes during the drop (#9116)
		$.each( ( $.ui.ddmanager.droppables[ draggable.options.scope ] || [] ).slice(), function() {

			if ( !this.options ) {
				return;
			}
			if ( !this.options.disabled && this.visible && $.ui.intersect( draggable, this, this.options.tolerance, event ) ) {
				dropped = this._drop.call( this, event ) || dropped;
			}

			if ( !this.options.disabled && this.visible && this.accept.call( this.element[ 0 ], ( draggable.currentItem || draggable.element ) ) ) {
				this.isout = true;
				this.isover = false;
				this._deactivate.call( this, event );
			}

		});
		return dropped;

	},
	dragStart: function( draggable, event ) {
		// Listen for scrolling so that if the dragging causes scrolling the position of the droppables can be recalculated (see #5003)
		draggable.element.parentsUntil( "body" ).bind( "scroll.droppable", function() {
			if ( !draggable.options.refreshPositions ) {
				$.ui.ddmanager.prepareOffsets( draggable, event );
			}
		});
	},
	drag: function( draggable, event ) {

		// If you have a highly dynamic page, you might try this option. It renders positions every time you move the mouse.
		if ( draggable.options.refreshPositions ) {
			$.ui.ddmanager.prepareOffsets( draggable, event );
		}

		// Run through all droppables and check their positions based on specific tolerance options
		$.each( $.ui.ddmanager.droppables[ draggable.options.scope ] || [], function() {

			if ( this.options.disabled || this.greedyChild || !this.visible ) {
				return;
			}

			var parentInstance, scope, parent,
				intersects = $.ui.intersect( draggable, this, this.options.tolerance, event ),
				c = !intersects && this.isover ? "isout" : ( intersects && !this.isover ? "isover" : null );
			if ( !c ) {
				return;
			}

			if ( this.options.greedy ) {
				// find droppable parents with same scope
				scope = this.options.scope;
				parent = this.element.parents( ":data(ui-droppable)" ).filter(function() {
					return $( this ).droppable( "instance" ).options.scope === scope;
				});

				if ( parent.length ) {
					parentInstance = $( parent[ 0 ] ).droppable( "instance" );
					parentInstance.greedyChild = ( c === "isover" );
				}
			}

			// we just moved into a greedy child
			if ( parentInstance && c === "isover" ) {
				parentInstance.isover = false;
				parentInstance.isout = true;
				parentInstance._out.call( parentInstance, event );
			}

			this[ c ] = true;
			this[c === "isout" ? "isover" : "isout"] = false;
			this[c === "isover" ? "_over" : "_out"].call( this, event );

			// we just moved out of a greedy child
			if ( parentInstance && c === "isout" ) {
				parentInstance.isout = false;
				parentInstance.isover = true;
				parentInstance._over.call( parentInstance, event );
			}
		});

	},
	dragStop: function( draggable, event ) {
		draggable.element.parentsUntil( "body" ).unbind( "scroll.droppable" );
		// Call prepareOffsets one final time since IE does not fire return scroll events when overflow was caused by drag (see #5003)
		if ( !draggable.options.refreshPositions ) {
			$.ui.ddmanager.prepareOffsets( draggable, event );
		}
	}
};

var droppable = $.ui.droppable;

/*!
 * jQuery UI Resizable 1.11.4
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/resizable/
 */


$.widget("ui.resizable", $.ui.mouse, {
	version: "1.11.4",
	widgetEventPrefix: "resize",
	options: {
		alsoResize: false,
		animate: false,
		animateDuration: "slow",
		animateEasing: "swing",
		aspectRatio: false,
		autoHide: false,
		containment: false,
		ghost: false,
		grid: false,
		handles: "e,s,se",
		helper: false,
		maxHeight: null,
		maxWidth: null,
		minHeight: 10,
		minWidth: 10,
		// See #7960
		zIndex: 90,

		// callbacks
		resize: null,
		start: null,
		stop: null
	},

	_num: function( value ) {
		return parseInt( value, 10 ) || 0;
	},

	_isNumber: function( value ) {
		return !isNaN( parseInt( value, 10 ) );
	},

	_hasScroll: function( el, a ) {

		if ( $( el ).css( "overflow" ) === "hidden") {
			return false;
		}

		var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
			has = false;

		if ( el[ scroll ] > 0 ) {
			return true;
		}

		// TODO: determine which cases actually cause this to happen
		// if the element doesn't have the scroll set, see if it's possible to
		// set the scroll
		el[ scroll ] = 1;
		has = ( el[ scroll ] > 0 );
		el[ scroll ] = 0;
		return has;
	},

	_create: function() {

		var n, i, handle, axis, hname,
			that = this,
			o = this.options;
		this.element.addClass("ui-resizable");

		$.extend(this, {
			_aspectRatio: !!(o.aspectRatio),
			aspectRatio: o.aspectRatio,
			originalElement: this.element,
			_proportionallyResizeElements: [],
			_helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
		});

		// Wrap the element if it cannot hold child nodes
		if (this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i)) {

			this.element.wrap(
				$("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({
					position: this.element.css("position"),
					width: this.element.outerWidth(),
					height: this.element.outerHeight(),
					top: this.element.css("top"),
					left: this.element.css("left")
				})
			);

			this.element = this.element.parent().data(
				"ui-resizable", this.element.resizable( "instance" )
			);

			this.elementIsWrapper = true;

			this.element.css({
				marginLeft: this.originalElement.css("marginLeft"),
				marginTop: this.originalElement.css("marginTop"),
				marginRight: this.originalElement.css("marginRight"),
				marginBottom: this.originalElement.css("marginBottom")
			});
			this.originalElement.css({
				marginLeft: 0,
				marginTop: 0,
				marginRight: 0,
				marginBottom: 0
			});
			// support: Safari
			// Prevent Safari textarea resize
			this.originalResizeStyle = this.originalElement.css("resize");
			this.originalElement.css("resize", "none");

			this._proportionallyResizeElements.push( this.originalElement.css({
				position: "static",
				zoom: 1,
				display: "block"
			}) );

			// support: IE9
			// avoid IE jump (hard set the margin)
			this.originalElement.css({ margin: this.originalElement.css("margin") });

			this._proportionallyResize();
		}

		this.handles = o.handles ||
			( !$(".ui-resizable-handle", this.element).length ?
				"e,s,se" : {
					n: ".ui-resizable-n",
					e: ".ui-resizable-e",
					s: ".ui-resizable-s",
					w: ".ui-resizable-w",
					se: ".ui-resizable-se",
					sw: ".ui-resizable-sw",
					ne: ".ui-resizable-ne",
					nw: ".ui-resizable-nw"
				} );

		this._handles = $();
		if ( this.handles.constructor === String ) {

			if ( this.handles === "all") {
				this.handles = "n,e,s,w,se,sw,ne,nw";
			}

			n = this.handles.split(",");
			this.handles = {};

			for (i = 0; i < n.length; i++) {

				handle = $.trim(n[i]);
				hname = "ui-resizable-" + handle;
				axis = $("<div class='ui-resizable-handle " + hname + "'></div>");

				axis.css({ zIndex: o.zIndex });

				// TODO : What's going on here?
				if ("se" === handle) {
					axis.addClass("ui-icon ui-icon-gripsmall-diagonal-se");
				}

				this.handles[handle] = ".ui-resizable-" + handle;
				this.element.append(axis);
			}

		}

		this._renderAxis = function(target) {

			var i, axis, padPos, padWrapper;

			target = target || this.element;

			for (i in this.handles) {

				if (this.handles[i].constructor === String) {
					this.handles[i] = this.element.children( this.handles[ i ] ).first().show();
				} else if ( this.handles[ i ].jquery || this.handles[ i ].nodeType ) {
					this.handles[ i ] = $( this.handles[ i ] );
					this._on( this.handles[ i ], { "mousedown": that._mouseDown });
				}

				if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i)) {

					axis = $(this.handles[i], this.element);

					padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();

					padPos = [ "padding",
						/ne|nw|n/.test(i) ? "Top" :
						/se|sw|s/.test(i) ? "Bottom" :
						/^e$/.test(i) ? "Right" : "Left" ].join("");

					target.css(padPos, padWrapper);

					this._proportionallyResize();
				}

				this._handles = this._handles.add( this.handles[ i ] );
			}
		};

		// TODO: make renderAxis a prototype function
		this._renderAxis(this.element);

		this._handles = this._handles.add( this.element.find( ".ui-resizable-handle" ) );
		this._handles.disableSelection();

		this._handles.mouseover(function() {
			if (!that.resizing) {
				if (this.className) {
					axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
				}
				that.axis = axis && axis[1] ? axis[1] : "se";
			}
		});

		if (o.autoHide) {
			this._handles.hide();
			$(this.element)
				.addClass("ui-resizable-autohide")
				.mouseenter(function() {
					if (o.disabled) {
						return;
					}
					$(this).removeClass("ui-resizable-autohide");
					that._handles.show();
				})
				.mouseleave(function() {
					if (o.disabled) {
						return;
					}
					if (!that.resizing) {
						$(this).addClass("ui-resizable-autohide");
						that._handles.hide();
					}
				});
		}

		this._mouseInit();
	},

	_destroy: function() {

		this._mouseDestroy();

		var wrapper,
			_destroy = function(exp) {
				$(exp)
					.removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing")
					.removeData("resizable")
					.removeData("ui-resizable")
					.unbind(".resizable")
					.find(".ui-resizable-handle")
						.remove();
			};

		// TODO: Unwrap at same DOM position
		if (this.elementIsWrapper) {
			_destroy(this.element);
			wrapper = this.element;
			this.originalElement.css({
				position: wrapper.css("position"),
				width: wrapper.outerWidth(),
				height: wrapper.outerHeight(),
				top: wrapper.css("top"),
				left: wrapper.css("left")
			}).insertAfter( wrapper );
			wrapper.remove();
		}

		this.originalElement.css("resize", this.originalResizeStyle);
		_destroy(this.originalElement);

		return this;
	},

	_mouseCapture: function(event) {
		var i, handle,
			capture = false;

		for (i in this.handles) {
			handle = $(this.handles[i])[0];
			if (handle === event.target || $.contains(handle, event.target)) {
				capture = true;
			}
		}

		return !this.options.disabled && capture;
	},

	_mouseStart: function(event) {

		var curleft, curtop, cursor,
			o = this.options,
			el = this.element;

		this.resizing = true;

		this._renderProxy();

		curleft = this._num(this.helper.css("left"));
		curtop = this._num(this.helper.css("top"));

		if (o.containment) {
			curleft += $(o.containment).scrollLeft() || 0;
			curtop += $(o.containment).scrollTop() || 0;
		}

		this.offset = this.helper.offset();
		this.position = { left: curleft, top: curtop };

		this.size = this._helper ? {
				width: this.helper.width(),
				height: this.helper.height()
			} : {
				width: el.width(),
				height: el.height()
			};

		this.originalSize = this._helper ? {
				width: el.outerWidth(),
				height: el.outerHeight()
			} : {
				width: el.width(),
				height: el.height()
			};

		this.sizeDiff = {
			width: el.outerWidth() - el.width(),
			height: el.outerHeight() - el.height()
		};

		this.originalPosition = { left: curleft, top: curtop };
		this.originalMousePosition = { left: event.pageX, top: event.pageY };

		this.aspectRatio = (typeof o.aspectRatio === "number") ?
			o.aspectRatio :
			((this.originalSize.width / this.originalSize.height) || 1);

		cursor = $(".ui-resizable-" + this.axis).css("cursor");
		$("body").css("cursor", cursor === "auto" ? this.axis + "-resize" : cursor);

		el.addClass("ui-resizable-resizing");
		this._propagate("start", event);
		return true;
	},

	_mouseDrag: function(event) {

		var data, props,
			smp = this.originalMousePosition,
			a = this.axis,
			dx = (event.pageX - smp.left) || 0,
			dy = (event.pageY - smp.top) || 0,
			trigger = this._change[a];

		this._updatePrevProperties();

		if (!trigger) {
			return false;
		}

		data = trigger.apply(this, [ event, dx, dy ]);

		this._updateVirtualBoundaries(event.shiftKey);
		if (this._aspectRatio || event.shiftKey) {
			data = this._updateRatio(data, event);
		}

		data = this._respectSize(data, event);

		this._updateCache(data);

		this._propagate("resize", event);

		props = this._applyChanges();

		if ( !this._helper && this._proportionallyResizeElements.length ) {
			this._proportionallyResize();
		}

		if ( !$.isEmptyObject( props ) ) {
			this._updatePrevProperties();
			this._trigger( "resize", event, this.ui() );
			this._applyChanges();
		}

		return false;
	},

	_mouseStop: function(event) {

		this.resizing = false;
		var pr, ista, soffseth, soffsetw, s, left, top,
			o = this.options, that = this;

		if (this._helper) {

			pr = this._proportionallyResizeElements;
			ista = pr.length && (/textarea/i).test(pr[0].nodeName);
			soffseth = ista && this._hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height;
			soffsetw = ista ? 0 : that.sizeDiff.width;

			s = {
				width: (that.helper.width()  - soffsetw),
				height: (that.helper.height() - soffseth)
			};
			left = (parseInt(that.element.css("left"), 10) +
				(that.position.left - that.originalPosition.left)) || null;
			top = (parseInt(that.element.css("top"), 10) +
				(that.position.top - that.originalPosition.top)) || null;

			if (!o.animate) {
				this.element.css($.extend(s, { top: top, left: left }));
			}

			that.helper.height(that.size.height);
			that.helper.width(that.size.width);

			if (this._helper && !o.animate) {
				this._proportionallyResize();
			}
		}

		$("body").css("cursor", "auto");

		this.element.removeClass("ui-resizable-resizing");

		this._propagate("stop", event);

		if (this._helper) {
			this.helper.remove();
		}

		return false;

	},

	_updatePrevProperties: function() {
		this.prevPosition = {
			top: this.position.top,
			left: this.position.left
		};
		this.prevSize = {
			width: this.size.width,
			height: this.size.height
		};
	},

	_applyChanges: function() {
		var props = {};

		if ( this.position.top !== this.prevPosition.top ) {
			props.top = this.position.top + "px";
		}
		if ( this.position.left !== this.prevPosition.left ) {
			props.left = this.position.left + "px";
		}
		if ( this.size.width !== this.prevSize.width ) {
			props.width = this.size.width + "px";
		}
		if ( this.size.height !== this.prevSize.height ) {
			props.height = this.size.height + "px";
		}

		this.helper.css( props );

		return props;
	},

	_updateVirtualBoundaries: function(forceAspectRatio) {
		var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b,
			o = this.options;

		b = {
			minWidth: this._isNumber(o.minWidth) ? o.minWidth : 0,
			maxWidth: this._isNumber(o.maxWidth) ? o.maxWidth : Infinity,
			minHeight: this._isNumber(o.minHeight) ? o.minHeight : 0,
			maxHeight: this._isNumber(o.maxHeight) ? o.maxHeight : Infinity
		};

		if (this._aspectRatio || forceAspectRatio) {
			pMinWidth = b.minHeight * this.aspectRatio;
			pMinHeight = b.minWidth / this.aspectRatio;
			pMaxWidth = b.maxHeight * this.aspectRatio;
			pMaxHeight = b.maxWidth / this.aspectRatio;

			if (pMinWidth > b.minWidth) {
				b.minWidth = pMinWidth;
			}
			if (pMinHeight > b.minHeight) {
				b.minHeight = pMinHeight;
			}
			if (pMaxWidth < b.maxWidth) {
				b.maxWidth = pMaxWidth;
			}
			if (pMaxHeight < b.maxHeight) {
				b.maxHeight = pMaxHeight;
			}
		}
		this._vBoundaries = b;
	},

	_updateCache: function(data) {
		this.offset = this.helper.offset();
		if (this._isNumber(data.left)) {
			this.position.left = data.left;
		}
		if (this._isNumber(data.top)) {
			this.position.top = data.top;
		}
		if (this._isNumber(data.height)) {
			this.size.height = data.height;
		}
		if (this._isNumber(data.width)) {
			this.size.width = data.width;
		}
	},

	_updateRatio: function( data ) {

		var cpos = this.position,
			csize = this.size,
			a = this.axis;

		if (this._isNumber(data.height)) {
			data.width = (data.height * this.aspectRatio);
		} else if (this._isNumber(data.width)) {
			data.height = (data.width / this.aspectRatio);
		}

		if (a === "sw") {
			data.left = cpos.left + (csize.width - data.width);
			data.top = null;
		}
		if (a === "nw") {
			data.top = cpos.top + (csize.height - data.height);
			data.left = cpos.left + (csize.width - data.width);
		}

		return data;
	},

	_respectSize: function( data ) {

		var o = this._vBoundaries,
			a = this.axis,
			ismaxw = this._isNumber(data.width) && o.maxWidth && (o.maxWidth < data.width),
			ismaxh = this._isNumber(data.height) && o.maxHeight && (o.maxHeight < data.height),
			isminw = this._isNumber(data.width) && o.minWidth && (o.minWidth > data.width),
			isminh = this._isNumber(data.height) && o.minHeight && (o.minHeight > data.height),
			dw = this.originalPosition.left + this.originalSize.width,
			dh = this.position.top + this.size.height,
			cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);
		if (isminw) {
			data.width = o.minWidth;
		}
		if (isminh) {
			data.height = o.minHeight;
		}
		if (ismaxw) {
			data.width = o.maxWidth;
		}
		if (ismaxh) {
			data.height = o.maxHeight;
		}

		if (isminw && cw) {
			data.left = dw - o.minWidth;
		}
		if (ismaxw && cw) {
			data.left = dw - o.maxWidth;
		}
		if (isminh && ch) {
			data.top = dh - o.minHeight;
		}
		if (ismaxh && ch) {
			data.top = dh - o.maxHeight;
		}

		// Fixing jump error on top/left - bug #2330
		if (!data.width && !data.height && !data.left && data.top) {
			data.top = null;
		} else if (!data.width && !data.height && !data.top && data.left) {
			data.left = null;
		}

		return data;
	},

	_getPaddingPlusBorderDimensions: function( element ) {
		var i = 0,
			widths = [],
			borders = [
				element.css( "borderTopWidth" ),
				element.css( "borderRightWidth" ),
				element.css( "borderBottomWidth" ),
				element.css( "borderLeftWidth" )
			],
			paddings = [
				element.css( "paddingTop" ),
				element.css( "paddingRight" ),
				element.css( "paddingBottom" ),
				element.css( "paddingLeft" )
			];

		for ( ; i < 4; i++ ) {
			widths[ i ] = ( parseInt( borders[ i ], 10 ) || 0 );
			widths[ i ] += ( parseInt( paddings[ i ], 10 ) || 0 );
		}

		return {
			height: widths[ 0 ] + widths[ 2 ],
			width: widths[ 1 ] + widths[ 3 ]
		};
	},

	_proportionallyResize: function() {

		if (!this._proportionallyResizeElements.length) {
			return;
		}

		var prel,
			i = 0,
			element = this.helper || this.element;

		for ( ; i < this._proportionallyResizeElements.length; i++) {

			prel = this._proportionallyResizeElements[i];

			// TODO: Seems like a bug to cache this.outerDimensions
			// considering that we are in a loop.
			if (!this.outerDimensions) {
				this.outerDimensions = this._getPaddingPlusBorderDimensions( prel );
			}

			prel.css({
				height: (element.height() - this.outerDimensions.height) || 0,
				width: (element.width() - this.outerDimensions.width) || 0
			});

		}

	},

	_renderProxy: function() {

		var el = this.element, o = this.options;
		this.elementOffset = el.offset();

		if (this._helper) {

			this.helper = this.helper || $("<div style='overflow:hidden;'></div>");

			this.helper.addClass(this._helper).css({
				width: this.element.outerWidth() - 1,
				height: this.element.outerHeight() - 1,
				position: "absolute",
				left: this.elementOffset.left + "px",
				top: this.elementOffset.top + "px",
				zIndex: ++o.zIndex //TODO: Don't modify option
			});

			this.helper
				.appendTo("body")
				.disableSelection();

		} else {
			this.helper = this.element;
		}

	},

	_change: {
		e: function(event, dx) {
			return { width: this.originalSize.width + dx };
		},
		w: function(event, dx) {
			var cs = this.originalSize, sp = this.originalPosition;
			return { left: sp.left + dx, width: cs.width - dx };
		},
		n: function(event, dx, dy) {
			var cs = this.originalSize, sp = this.originalPosition;
			return { top: sp.top + dy, height: cs.height - dy };
		},
		s: function(event, dx, dy) {
			return { height: this.originalSize.height + dy };
		},
		se: function(event, dx, dy) {
			return $.extend(this._change.s.apply(this, arguments),
				this._change.e.apply(this, [ event, dx, dy ]));
		},
		sw: function(event, dx, dy) {
			return $.extend(this._change.s.apply(this, arguments),
				this._change.w.apply(this, [ event, dx, dy ]));
		},
		ne: function(event, dx, dy) {
			return $.extend(this._change.n.apply(this, arguments),
				this._change.e.apply(this, [ event, dx, dy ]));
		},
		nw: function(event, dx, dy) {
			return $.extend(this._change.n.apply(this, arguments),
				this._change.w.apply(this, [ event, dx, dy ]));
		}
	},

	_propagate: function(n, event) {
		$.ui.plugin.call(this, n, [ event, this.ui() ]);
		(n !== "resize" && this._trigger(n, event, this.ui()));
	},

	plugins: {},

	ui: function() {
		return {
			originalElement: this.originalElement,
			element: this.element,
			helper: this.helper,
			position: this.position,
			size: this.size,
			originalSize: this.originalSize,
			originalPosition: this.originalPosition
		};
	}

});

/*
 * Resizable Extensions
 */

$.ui.plugin.add("resizable", "animate", {

	stop: function( event ) {
		var that = $(this).resizable( "instance" ),
			o = that.options,
			pr = that._proportionallyResizeElements,
			ista = pr.length && (/textarea/i).test(pr[0].nodeName),
			soffseth = ista && that._hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height,
			soffsetw = ista ? 0 : that.sizeDiff.width,
			style = { width: (that.size.width - soffsetw), height: (that.size.height - soffseth) },
			left = (parseInt(that.element.css("left"), 10) +
				(that.position.left - that.originalPosition.left)) || null,
			top = (parseInt(that.element.css("top"), 10) +
				(that.position.top - that.originalPosition.top)) || null;

		that.element.animate(
			$.extend(style, top && left ? { top: top, left: left } : {}), {
				duration: o.animateDuration,
				easing: o.animateEasing,
				step: function() {

					var data = {
						width: parseInt(that.element.css("width"), 10),
						height: parseInt(that.element.css("height"), 10),
						top: parseInt(that.element.css("top"), 10),
						left: parseInt(that.element.css("left"), 10)
					};

					if (pr && pr.length) {
						$(pr[0]).css({ width: data.width, height: data.height });
					}

					// propagating resize, and updating values for each animation step
					that._updateCache(data);
					that._propagate("resize", event);

				}
			}
		);
	}

});

$.ui.plugin.add( "resizable", "containment", {

	start: function() {
		var element, p, co, ch, cw, width, height,
			that = $( this ).resizable( "instance" ),
			o = that.options,
			el = that.element,
			oc = o.containment,
			ce = ( oc instanceof $ ) ? oc.get( 0 ) : ( /parent/.test( oc ) ) ? el.parent().get( 0 ) : oc;

		if ( !ce ) {
			return;
		}

		that.containerElement = $( ce );

		if ( /document/.test( oc ) || oc === document ) {
			that.containerOffset = {
				left: 0,
				top: 0
			};
			that.containerPosition = {
				left: 0,
				top: 0
			};

			that.parentData = {
				element: $( document ),
				left: 0,
				top: 0,
				width: $( document ).width(),
				height: $( document ).height() || document.body.parentNode.scrollHeight
			};
		} else {
			element = $( ce );
			p = [];
			$([ "Top", "Right", "Left", "Bottom" ]).each(function( i, name ) {
				p[ i ] = that._num( element.css( "padding" + name ) );
			});

			that.containerOffset = element.offset();
			that.containerPosition = element.position();
			that.containerSize = {
				height: ( element.innerHeight() - p[ 3 ] ),
				width: ( element.innerWidth() - p[ 1 ] )
			};

			co = that.containerOffset;
			ch = that.containerSize.height;
			cw = that.containerSize.width;
			width = ( that._hasScroll ( ce, "left" ) ? ce.scrollWidth : cw );
			height = ( that._hasScroll ( ce ) ? ce.scrollHeight : ch ) ;

			that.parentData = {
				element: ce,
				left: co.left,
				top: co.top,
				width: width,
				height: height
			};
		}
	},

	resize: function( event ) {
		var woset, hoset, isParent, isOffsetRelative,
			that = $( this ).resizable( "instance" ),
			o = that.options,
			co = that.containerOffset,
			cp = that.position,
			pRatio = that._aspectRatio || event.shiftKey,
			cop = {
				top: 0,
				left: 0
			},
			ce = that.containerElement,
			continueResize = true;

		if ( ce[ 0 ] !== document && ( /static/ ).test( ce.css( "position" ) ) ) {
			cop = co;
		}

		if ( cp.left < ( that._helper ? co.left : 0 ) ) {
			that.size.width = that.size.width +
				( that._helper ?
					( that.position.left - co.left ) :
					( that.position.left - cop.left ) );

			if ( pRatio ) {
				that.size.height = that.size.width / that.aspectRatio;
				continueResize = false;
			}
			that.position.left = o.helper ? co.left : 0;
		}

		if ( cp.top < ( that._helper ? co.top : 0 ) ) {
			that.size.height = that.size.height +
				( that._helper ?
					( that.position.top - co.top ) :
					that.position.top );

			if ( pRatio ) {
				that.size.width = that.size.height * that.aspectRatio;
				continueResize = false;
			}
			that.position.top = that._helper ? co.top : 0;
		}

		isParent = that.containerElement.get( 0 ) === that.element.parent().get( 0 );
		isOffsetRelative = /relative|absolute/.test( that.containerElement.css( "position" ) );

		if ( isParent && isOffsetRelative ) {
			that.offset.left = that.parentData.left + that.position.left;
			that.offset.top = that.parentData.top + that.position.top;
		} else {
			that.offset.left = that.element.offset().left;
			that.offset.top = that.element.offset().top;
		}

		woset = Math.abs( that.sizeDiff.width +
			(that._helper ?
				that.offset.left - cop.left :
				(that.offset.left - co.left)) );

		hoset = Math.abs( that.sizeDiff.height +
			(that._helper ?
				that.offset.top - cop.top :
				(that.offset.top - co.top)) );

		if ( woset + that.size.width >= that.parentData.width ) {
			that.size.width = that.parentData.width - woset;
			if ( pRatio ) {
				that.size.height = that.size.width / that.aspectRatio;
				continueResize = false;
			}
		}

		if ( hoset + that.size.height >= that.parentData.height ) {
			that.size.height = that.parentData.height - hoset;
			if ( pRatio ) {
				that.size.width = that.size.height * that.aspectRatio;
				continueResize = false;
			}
		}

		if ( !continueResize ) {
			that.position.left = that.prevPosition.left;
			that.position.top = that.prevPosition.top;
			that.size.width = that.prevSize.width;
			that.size.height = that.prevSize.height;
		}
	},

	stop: function() {
		var that = $( this ).resizable( "instance" ),
			o = that.options,
			co = that.containerOffset,
			cop = that.containerPosition,
			ce = that.containerElement,
			helper = $( that.helper ),
			ho = helper.offset(),
			w = helper.outerWidth() - that.sizeDiff.width,
			h = helper.outerHeight() - that.sizeDiff.height;

		if ( that._helper && !o.animate && ( /relative/ ).test( ce.css( "position" ) ) ) {
			$( this ).css({
				left: ho.left - cop.left - co.left,
				width: w,
				height: h
			});
		}

		if ( that._helper && !o.animate && ( /static/ ).test( ce.css( "position" ) ) ) {
			$( this ).css({
				left: ho.left - cop.left - co.left,
				width: w,
				height: h
			});
		}
	}
});

$.ui.plugin.add("resizable", "alsoResize", {

	start: function() {
		var that = $(this).resizable( "instance" ),
			o = that.options;

		$(o.alsoResize).each(function() {
			var el = $(this);
			el.data("ui-resizable-alsoresize", {
				width: parseInt(el.width(), 10), height: parseInt(el.height(), 10),
				left: parseInt(el.css("left"), 10), top: parseInt(el.css("top"), 10)
			});
		});
	},

	resize: function(event, ui) {
		var that = $(this).resizable( "instance" ),
			o = that.options,
			os = that.originalSize,
			op = that.originalPosition,
			delta = {
				height: (that.size.height - os.height) || 0,
				width: (that.size.width - os.width) || 0,
				top: (that.position.top - op.top) || 0,
				left: (that.position.left - op.left) || 0
			};

			$(o.alsoResize).each(function() {
				var el = $(this), start = $(this).data("ui-resizable-alsoresize"), style = {},
					css = el.parents(ui.originalElement[0]).length ?
							[ "width", "height" ] :
							[ "width", "height", "top", "left" ];

				$.each(css, function(i, prop) {
					var sum = (start[prop] || 0) + (delta[prop] || 0);
					if (sum && sum >= 0) {
						style[prop] = sum || null;
					}
				});

				el.css(style);
			});
	},

	stop: function() {
		$(this).removeData("resizable-alsoresize");
	}
});

$.ui.plugin.add("resizable", "ghost", {

	start: function() {

		var that = $(this).resizable( "instance" ), o = that.options, cs = that.size;

		that.ghost = that.originalElement.clone();
		that.ghost
			.css({
				opacity: 0.25,
				display: "block",
				position: "relative",
				height: cs.height,
				width: cs.width,
				margin: 0,
				left: 0,
				top: 0
			})
			.addClass("ui-resizable-ghost")
			.addClass(typeof o.ghost === "string" ? o.ghost : "");

		that.ghost.appendTo(that.helper);

	},

	resize: function() {
		var that = $(this).resizable( "instance" );
		if (that.ghost) {
			that.ghost.css({
				position: "relative",
				height: that.size.height,
				width: that.size.width
			});
		}
	},

	stop: function() {
		var that = $(this).resizable( "instance" );
		if (that.ghost && that.helper) {
			that.helper.get(0).removeChild(that.ghost.get(0));
		}
	}

});

$.ui.plugin.add("resizable", "grid", {

	resize: function() {
		var outerDimensions,
			that = $(this).resizable( "instance" ),
			o = that.options,
			cs = that.size,
			os = that.originalSize,
			op = that.originalPosition,
			a = that.axis,
			grid = typeof o.grid === "number" ? [ o.grid, o.grid ] : o.grid,
			gridX = (grid[0] || 1),
			gridY = (grid[1] || 1),
			ox = Math.round((cs.width - os.width) / gridX) * gridX,
			oy = Math.round((cs.height - os.height) / gridY) * gridY,
			newWidth = os.width + ox,
			newHeight = os.height + oy,
			isMaxWidth = o.maxWidth && (o.maxWidth < newWidth),
			isMaxHeight = o.maxHeight && (o.maxHeight < newHeight),
			isMinWidth = o.minWidth && (o.minWidth > newWidth),
			isMinHeight = o.minHeight && (o.minHeight > newHeight);

		o.grid = grid;

		if (isMinWidth) {
			newWidth += gridX;
		}
		if (isMinHeight) {
			newHeight += gridY;
		}
		if (isMaxWidth) {
			newWidth -= gridX;
		}
		if (isMaxHeight) {
			newHeight -= gridY;
		}

		if (/^(se|s|e)$/.test(a)) {
			that.size.width = newWidth;
			that.size.height = newHeight;
		} else if (/^(ne)$/.test(a)) {
			that.size.width = newWidth;
			that.size.height = newHeight;
			that.position.top = op.top - oy;
		} else if (/^(sw)$/.test(a)) {
			that.size.width = newWidth;
			that.size.height = newHeight;
			that.position.left = op.left - ox;
		} else {
			if ( newHeight - gridY <= 0 || newWidth - gridX <= 0) {
				outerDimensions = that._getPaddingPlusBorderDimensions( this );
			}

			if ( newHeight - gridY > 0 ) {
				that.size.height = newHeight;
				that.position.top = op.top - oy;
			} else {
				newHeight = gridY - outerDimensions.height;
				that.size.height = newHeight;
				that.position.top = op.top + os.height - newHeight;
			}
			if ( newWidth - gridX > 0 ) {
				that.size.width = newWidth;
				that.position.left = op.left - ox;
			} else {
				newWidth = gridX - outerDimensions.width;
				that.size.width = newWidth;
				that.position.left = op.left + os.width - newWidth;
			}
		}
	}

});

var resizable = $.ui.resizable;

/*!
 * jQuery UI Selectable 1.11.4
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/selectable/
 */


var selectable = $.widget("ui.selectable", $.ui.mouse, {
	version: "1.11.4",
	options: {
		appendTo: "body",
		autoRefresh: true,
		distance: 0,
		filter: "*",
		tolerance: "touch",

		// callbacks
		selected: null,
		selecting: null,
		start: null,
		stop: null,
		unselected: null,
		unselecting: null
	},
	_create: function() {
		var selectees,
			that = this;

		this.element.addClass("ui-selectable");

		this.dragged = false;

		// cache selectee children based on filter
		this.refresh = function() {
			selectees = $(that.options.filter, that.element[0]);
			selectees.addClass("ui-selectee");
			selectees.each(function() {
				var $this = $(this),
					pos = $this.offset();
				$.data(this, "selectable-item", {
					element: this,
					$element: $this,
					left: pos.left,
					top: pos.top,
					right: pos.left + $this.outerWidth(),
					bottom: pos.top + $this.outerHeight(),
					startselected: false,
					selected: $this.hasClass("ui-selected"),
					selecting: $this.hasClass("ui-selecting"),
					unselecting: $this.hasClass("ui-unselecting")
				});
			});
		};
		this.refresh();

		this.selectees = selectees.addClass("ui-selectee");

		this._mouseInit();

		this.helper = $("<div class='ui-selectable-helper'></div>");
	},

	_destroy: function() {
		this.selectees
			.removeClass("ui-selectee")
			.removeData("selectable-item");
		this.element
			.removeClass("ui-selectable ui-selectable-disabled");
		this._mouseDestroy();
	},

	_mouseStart: function(event) {
		var that = this,
			options = this.options;

		this.opos = [ event.pageX, event.pageY ];

		if (this.options.disabled) {
			return;
		}

		this.selectees = $(options.filter, this.element[0]);

		this._trigger("start", event);

		$(options.appendTo).append(this.helper);
		// position helper (lasso)
		this.helper.css({
			"left": event.pageX,
			"top": event.pageY,
			"width": 0,
			"height": 0
		});

		if (options.autoRefresh) {
			this.refresh();
		}

		this.selectees.filter(".ui-selected").each(function() {
			var selectee = $.data(this, "selectable-item");
			selectee.startselected = true;
			if (!event.metaKey && !event.ctrlKey) {
				selectee.$element.removeClass("ui-selected");
				selectee.selected = false;
				selectee.$element.addClass("ui-unselecting");
				selectee.unselecting = true;
				// selectable UNSELECTING callback
				that._trigger("unselecting", event, {
					unselecting: selectee.element
				});
			}
		});

		$(event.target).parents().addBack().each(function() {
			var doSelect,
				selectee = $.data(this, "selectable-item");
			if (selectee) {
				doSelect = (!event.metaKey && !event.ctrlKey) || !selectee.$element.hasClass("ui-selected");
				selectee.$element
					.removeClass(doSelect ? "ui-unselecting" : "ui-selected")
					.addClass(doSelect ? "ui-selecting" : "ui-unselecting");
				selectee.unselecting = !doSelect;
				selectee.selecting = doSelect;
				selectee.selected = doSelect;
				// selectable (UN)SELECTING callback
				if (doSelect) {
					that._trigger("selecting", event, {
						selecting: selectee.element
					});
				} else {
					that._trigger("unselecting", event, {
						unselecting: selectee.element
					});
				}
				return false;
			}
		});

	},

	_mouseDrag: function(event) {

		this.dragged = true;

		if (this.options.disabled) {
			return;
		}

		var tmp,
			that = this,
			options = this.options,
			x1 = this.opos[0],
			y1 = this.opos[1],
			x2 = event.pageX,
			y2 = event.pageY;

		if (x1 > x2) { tmp = x2; x2 = x1; x1 = tmp; }
		if (y1 > y2) { tmp = y2; y2 = y1; y1 = tmp; }
		this.helper.css({ left: x1, top: y1, width: x2 - x1, height: y2 - y1 });

		this.selectees.each(function() {
			var selectee = $.data(this, "selectable-item"),
				hit = false;

			//prevent helper from being selected if appendTo: selectable
			if (!selectee || selectee.element === that.element[0]) {
				return;
			}

			if (options.tolerance === "touch") {
				hit = ( !(selectee.left > x2 || selectee.right < x1 || selectee.top > y2 || selectee.bottom < y1) );
			} else if (options.tolerance === "fit") {
				hit = (selectee.left > x1 && selectee.right < x2 && selectee.top > y1 && selectee.bottom < y2);
			}

			if (hit) {
				// SELECT
				if (selectee.selected) {
					selectee.$element.removeClass("ui-selected");
					selectee.selected = false;
				}
				if (selectee.unselecting) {
					selectee.$element.removeClass("ui-unselecting");
					selectee.unselecting = false;
				}
				if (!selectee.selecting) {
					selectee.$element.addClass("ui-selecting");
					selectee.selecting = true;
					// selectable SELECTING callback
					that._trigger("selecting", event, {
						selecting: selectee.element
					});
				}
			} else {
				// UNSELECT
				if (selectee.selecting) {
					if ((event.metaKey || event.ctrlKey) && selectee.startselected) {
						selectee.$element.removeClass("ui-selecting");
						selectee.selecting = false;
						selectee.$element.addClass("ui-selected");
						selectee.selected = true;
					} else {
						selectee.$element.removeClass("ui-selecting");
						selectee.selecting = false;
						if (selectee.startselected) {
							selectee.$element.addClass("ui-unselecting");
							selectee.unselecting = true;
						}
						// selectable UNSELECTING callback
						that._trigger("unselecting", event, {
							unselecting: selectee.element
						});
					}
				}
				if (selectee.selected) {
					if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {
						selectee.$element.removeClass("ui-selected");
						selectee.selected = false;

						selectee.$element.addClass("ui-unselecting");
						selectee.unselecting = true;
						// selectable UNSELECTING callback
						that._trigger("unselecting", event, {
							unselecting: selectee.element
						});
					}
				}
			}
		});

		return false;
	},

	_mouseStop: function(event) {
		var that = this;

		this.dragged = false;

		$(".ui-unselecting", this.element[0]).each(function() {
			var selectee = $.data(this, "selectable-item");
			selectee.$element.removeClass("ui-unselecting");
			selectee.unselecting = false;
			selectee.startselected = false;
			that._trigger("unselected", event, {
				unselected: selectee.element
			});
		});
		$(".ui-selecting", this.element[0]).each(function() {
			var selectee = $.data(this, "selectable-item");
			selectee.$element.removeClass("ui-selecting").addClass("ui-selected");
			selectee.selecting = false;
			selectee.selected = true;
			selectee.startselected = true;
			that._trigger("selected", event, {
				selected: selectee.element
			});
		});
		this._trigger("stop", event);

		this.helper.remove();

		return false;
	}

});

/*!
 * jQuery UI Sortable 1.11.4
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/sortable/
 */


var sortable = $.widget("ui.sortable", $.ui.mouse, {
	version: "1.11.4",
	widgetEventPrefix: "sort",
	ready: false,
	options: {
		appendTo: "parent",
		axis: false, //如果有设置，则元素仅能横向或纵向拖动。可选值：’x’, ‘y’
		connectWith: false,//允许sortable对象连接另一个sortable对象，可将item元素拖拽到另一个中.(类型：Selector)
		containment: false,//约束排序动作只能在一个指定的范围内发生。可选值：DOM对象, ‘parent’, ‘document’, ‘window’, 或jQuery对象
		cursor: "auto",//定义在开始排序动作时，鼠标的样式。如 cursor: “move”
		cursorAt: false,//当开始移动时，元素的偏移的位置（最多两个方向）。可选值：{ top, left, right, bottom }。如 cursorAt: {left:5,bottom:5}
		dropOnEmpty: true,//是否允許拖拽到一個空的sortable对象中。
		forcePlaceholderSize: false,
		forceHelperSize: false,
		grid: false,//每次移动都按一个格子大小移动，数组值：[x,y]如 grid: [50, 20]
		handle: false,//限制排序的动作只能在item元素中的某种元素如 handle: ‘h2′
		helper: "original",//设置是否在拖拽元素时，显示一个辅助的元素。可选值：‘original’, ‘clone’。如 helper: ‘clone’
		items: "> *",//指定在排序对象中，哪些元素是可以进行拖拽排序的。如 items: “> li”
		opacity: false,//辅助元素(helper)显示的透明度 如 opacity: 0.6
		placeholder: false,//设置当排序动作发生时，空白占位符的CSS样式 如 placeholder: ‘css-class-name’ （指定一个css的class）
		revert: false,//如果设置成true，则被拖拽的元素在返回新位置时，会有一个动画效果
		scroll: true,//如果设置成true，则元素被拖动到页面边缘时，会自动滚动。
		scrollSensitivity: 20,//设置当元素移动至边缘多少像素时，便开始滚动页面
		scrollSpeed: 20,//设置页面滚动的速度
		scope: "default",
		tolerance: "intersect",//设置当拖动元素越过其它元素多少时便对元素进行重新排序。可选值：’intersect’, ‘pointer’;intersect：至少重叠50%;pointer：鼠标指针重叠元素
		zIndex: 1000,

		// callbacks
		activate: null,
		beforeStop: null,
		change: null,
		deactivate: null,
		out: null,
		over: null,
		receive: null,
		remove: null,
		sort: null,
		start: null,
		stop: null,
		update: null
	},

	_isOverAxis: function( x, reference, size ) {
		return ( x >= reference ) && ( x < ( reference + size ) );
	},

	_isFloating: function( item ) {
		return (/left|right/).test(item.css("float")) || (/inline|table-cell/).test(item.css("display"));
	},

	_create: function() {
		this.containerCache = {};
		this.element.addClass("ui-sortable");

		//Get the items
		this.refresh();

		//Let's determine the parent's offset
		this.offset = this.element.offset();

		//Initialize mouse events for interaction
		this._mouseInit();

		this._setHandleClassName();

		//We're ready to go
		this.ready = true;

	},

	_setOption: function( key, value ) {
		this._super( key, value );

		if ( key === "handle" ) {
			this._setHandleClassName();
		}
	},

	_setHandleClassName: function() {
		this.element.find( ".ui-sortable-handle" ).removeClass( "ui-sortable-handle" );
		$.each( this.items, function() {
			( this.instance.options.handle ?
				this.item.find( this.instance.options.handle ) : this.item )
				.addClass( "ui-sortable-handle" );
		});
	},

	_destroy: function() {
		this.element
			.removeClass( "ui-sortable ui-sortable-disabled" )
			.find( ".ui-sortable-handle" )
				.removeClass( "ui-sortable-handle" );
		this._mouseDestroy();

		for ( var i = this.items.length - 1; i >= 0; i-- ) {
			this.items[i].item.removeData(this.widgetName + "-item");
		}

		return this;
	},

	_mouseCapture: function(event, overrideHandle) {
		var currentItem = null,
			validHandle = false,
			that = this;

		if (this.reverting) {
			return false;
		}

		if(this.options.disabled || this.options.type === "static") {
			return false;
		}

		//We have to refresh the items data once first
		this._refreshItems(event);

		//Find out if the clicked node (or one of its parents) is a actual item in this.items
		$(event.target).parents().each(function() {
			if($.data(this, that.widgetName + "-item") === that) {
				currentItem = $(this);
				return false;
			}
		});
		if($.data(event.target, that.widgetName + "-item") === that) {
			currentItem = $(event.target);
		}

		if(!currentItem) {
			return false;
		}
		if(this.options.handle && !overrideHandle) {
			$(this.options.handle, currentItem).find("*").addBack().each(function() {
				if(this === event.target) {
					validHandle = true;
				}
			});
			if(!validHandle) {
				return false;
			}
		}

		this.currentItem = currentItem;
		this._removeCurrentsFromItems();
		return true;

	},

	_mouseStart: function(event, overrideHandle, noActivation) {

		var i, body,
			o = this.options;

		this.currentContainer = this;

		//We only need to call refreshPositions, because the refreshItems call has been moved to mouseCapture
		this.refreshPositions();

		//Create and append the visible helper
		this.helper = this._createHelper(event);

		//Cache the helper size
		this._cacheHelperProportions();

		/*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */

		//Cache the margins of the original element
		this._cacheMargins();

		//Get the next scrolling parent
		this.scrollParent = this.helper.scrollParent();

		//The element's absolute position on the page minus margins
		this.offset = this.currentItem.offset();
		this.offset = {
			top: this.offset.top - this.margins.top,
			left: this.offset.left - this.margins.left
		};

		$.extend(this.offset, {
			click: { //Where the click happened, relative to the element
				left: event.pageX - this.offset.left,
				top: event.pageY - this.offset.top
			},
			parent: this._getParentOffset(),
			relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
		});

		// Only after we got the offset, we can change the helper's position to absolute
		// TODO: Still need to figure out a way to make relative sorting possible
		this.helper.css("position", "absolute");
		this.cssPosition = this.helper.css("position");

		//Generate the original position
		this.originalPosition = this._generatePosition(event);
		this.originalPageX = event.pageX;
		this.originalPageY = event.pageY;

		//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
		(o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));

		//Cache the former DOM position
		this.domPosition = { prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0] };

		//If the helper is not the original, hide the original so it's not playing any role during the drag, won't cause anything bad this way
		if(this.helper[0] !== this.currentItem[0]) {
			this.currentItem.hide();
		}

		//Create the placeholder
		this._createPlaceholder();

		//Set a containment if given in the options
		if(o.containment) {
			this._setContainment();
		}

		if( o.cursor && o.cursor !== "auto" ) { // cursor option
			body = this.document.find( "body" );

			// support: IE
			this.storedCursor = body.css( "cursor" );
			body.css( "cursor", o.cursor );

			this.storedStylesheet = $( "<style>*{ cursor: "+o.cursor+" !important; }</style>" ).appendTo( body );
		}

		if(o.opacity) { // opacity option
			if (this.helper.css("opacity")) {
				this._storedOpacity = this.helper.css("opacity");
			}
			this.helper.css("opacity", o.opacity);
		}

		if(o.zIndex) { // zIndex option
			if (this.helper.css("zIndex")) {
				this._storedZIndex = this.helper.css("zIndex");
			}
			this.helper.css("zIndex", o.zIndex);
		}

		//Prepare scrolling
		if(this.scrollParent[0] !== this.document[0] && this.scrollParent[0].tagName !== "HTML") {
			this.overflowOffset = this.scrollParent.offset();
		}

		//Call callbacks
		this._trigger("start", event, this._uiHash());

		//Recache the helper size
		if(!this._preserveHelperProportions) {
			this._cacheHelperProportions();
		}


		//Post "activate" events to possible containers
		if( !noActivation ) {
			for ( i = this.containers.length - 1; i >= 0; i-- ) {
				this.containers[ i ]._trigger( "activate", event, this._uiHash( this ) );
			}
		}

		//Prepare possible droppables
		if($.ui.ddmanager) {
			$.ui.ddmanager.current = this;
		}

		if ($.ui.ddmanager && !o.dropBehaviour) {
			$.ui.ddmanager.prepareOffsets(this, event);
		}

		this.dragging = true;

		this.helper.addClass("ui-sortable-helper");
		this._mouseDrag(event); //Execute the drag once - this causes the helper not to be visible before getting its correct position
		return true;

	},

	_mouseDrag: function(event) {
		var i, item, itemElement, intersection,
			o = this.options,
			scrolled = false;

		//Compute the helpers position
		this.position = this._generatePosition(event);
		this.positionAbs = this._convertPositionTo("absolute");

		if (!this.lastPositionAbs) {
			this.lastPositionAbs = this.positionAbs;
		}

		//Do scrolling
		if(this.options.scroll) {
			if(this.scrollParent[0] !== this.document[0] && this.scrollParent[0].tagName !== "HTML") {

				if((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity) {
					this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;
				} else if(event.pageY - this.overflowOffset.top < o.scrollSensitivity) {
					this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;
				}

				if((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity) {
					this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;
				} else if(event.pageX - this.overflowOffset.left < o.scrollSensitivity) {
					this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;
				}

			} else {

				if(event.pageY - this.document.scrollTop() < o.scrollSensitivity) {
					scrolled = this.document.scrollTop(this.document.scrollTop() - o.scrollSpeed);
				} else if(this.window.height() - (event.pageY - this.document.scrollTop()) < o.scrollSensitivity) {
					scrolled = this.document.scrollTop(this.document.scrollTop() + o.scrollSpeed);
				}

				if(event.pageX - this.document.scrollLeft() < o.scrollSensitivity) {
					scrolled = this.document.scrollLeft(this.document.scrollLeft() - o.scrollSpeed);
				} else if(this.window.width() - (event.pageX - this.document.scrollLeft()) < o.scrollSensitivity) {
					scrolled = this.document.scrollLeft(this.document.scrollLeft() + o.scrollSpeed);
				}

			}

			if(scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
				$.ui.ddmanager.prepareOffsets(this, event);
			}
		}

		//Regenerate the absolute position used for position checks
		this.positionAbs = this._convertPositionTo("absolute");

		//Set the helper position
		if(!this.options.axis || this.options.axis !== "y") {
			this.helper[0].style.left = this.position.left+"px";
		}
		if(!this.options.axis || this.options.axis !== "x") {
			this.helper[0].style.top = this.position.top+"px";
		}

		//Rearrange
		for (i = this.items.length - 1; i >= 0; i--) {

			//Cache variables and intersection, continue if no intersection
			item = this.items[i];
			itemElement = item.item[0];
			intersection = this._intersectsWithPointer(item);
			if (!intersection) {
				continue;
			}

			// Only put the placeholder inside the current Container, skip all
			// items from other containers. This works because when moving
			// an item from one container to another the
			// currentContainer is switched before the placeholder is moved.
			//
			// Without this, moving items in "sub-sortables" can cause
			// the placeholder to jitter between the outer and inner container.
			if (item.instance !== this.currentContainer) {
				continue;
			}

			// cannot intersect with itself
			// no useless actions that have been done before
			// no action if the item moved is the parent of the item checked
			if (itemElement !== this.currentItem[0] &&
				this.placeholder[intersection === 1 ? "next" : "prev"]()[0] !== itemElement &&
				!$.contains(this.placeholder[0], itemElement) &&
				(this.options.type === "semi-dynamic" ? !$.contains(this.element[0], itemElement) : true)
			) {

				this.direction = intersection === 1 ? "down" : "up";

				if (this.options.tolerance === "pointer" || this._intersectsWithSides(item)) {
					this._rearrange(event, item);
				} else {
					break;
				}

				this._trigger("change", event, this._uiHash());
				break;
			}
		}

		//Post events to containers
		this._contactContainers(event);

		//Interconnect with droppables
		if($.ui.ddmanager) {
			$.ui.ddmanager.drag(this, event);
		}

		//Call callbacks
		this._trigger("sort", event, this._uiHash());

		this.lastPositionAbs = this.positionAbs;
		return false;

	},

	_mouseStop: function(event, noPropagation) {

		if(!event) {
			return;
		}

		//If we are using droppables, inform the manager about the drop
		if ($.ui.ddmanager && !this.options.dropBehaviour) {
			$.ui.ddmanager.drop(this, event);
		}

		if(this.options.revert) {
			var that = this,
				cur = this.placeholder.offset(),
				axis = this.options.axis,
				animation = {};

			if ( !axis || axis === "x" ) {
				animation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollLeft);
			}
			if ( !axis || axis === "y" ) {
				animation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollTop);
			}
			this.reverting = true;
			$(this.helper).animate( animation, parseInt(this.options.revert, 10) || 500, function() {
				that._clear(event);
			});
		} else {
			this._clear(event, noPropagation);
		}

		return false;

	},

	cancel: function() {

		if(this.dragging) {

			this._mouseUp({ target: null });

			if(this.options.helper === "original") {
				this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
			} else {
				this.currentItem.show();
			}

			//Post deactivating events to containers
			for (var i = this.containers.length - 1; i >= 0; i--){
				this.containers[i]._trigger("deactivate", null, this._uiHash(this));
				if(this.containers[i].containerCache.over) {
					this.containers[i]._trigger("out", null, this._uiHash(this));
					this.containers[i].containerCache.over = 0;
				}
			}

		}

		if (this.placeholder) {
			//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
			if(this.placeholder[0].parentNode) {
				this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
			}
			if(this.options.helper !== "original" && this.helper && this.helper[0].parentNode) {
				this.helper.remove();
			}

			$.extend(this, {
				helper: null,
				dragging: false,
				reverting: false,
				_noFinalSort: null
			});

			if(this.domPosition.prev) {
				$(this.domPosition.prev).after(this.currentItem);
			} else {
				$(this.domPosition.parent).prepend(this.currentItem);
			}
		}

		return this;

	},

	serialize: function(o) {

		var items = this._getItemsAsjQuery(o && o.connected),
			str = [];
		o = o || {};

		$(items).each(function() {
			var res = ($(o.item || this).attr(o.attribute || "id") || "").match(o.expression || (/(.+)[\-=_](.+)/));
			if (res) {
				str.push((o.key || res[1]+"[]")+"="+(o.key && o.expression ? res[1] : res[2]));
			}
		});

		if(!str.length && o.key) {
			str.push(o.key + "=");
		}

		return str.join("&");

	},

	toArray: function(o) {

		var items = this._getItemsAsjQuery(o && o.connected),
			ret = [];

		o = o || {};

		items.each(function() { ret.push($(o.item || this).attr(o.attribute || "id") || ""); });
		return ret;

	},

	/* Be careful with the following core functions */
	_intersectsWith: function(item) {

		var x1 = this.positionAbs.left,
			x2 = x1 + this.helperProportions.width,
			y1 = this.positionAbs.top,
			y2 = y1 + this.helperProportions.height,
			l = item.left,
			r = l + item.width,
			t = item.top,
			b = t + item.height,
			dyClick = this.offset.click.top,
			dxClick = this.offset.click.left,
			isOverElementHeight = ( this.options.axis === "x" ) || ( ( y1 + dyClick ) > t && ( y1 + dyClick ) < b ),
			isOverElementWidth = ( this.options.axis === "y" ) || ( ( x1 + dxClick ) > l && ( x1 + dxClick ) < r ),
			isOverElement = isOverElementHeight && isOverElementWidth;

		if ( this.options.tolerance === "pointer" ||
			this.options.forcePointerForContainers ||
			(this.options.tolerance !== "pointer" && this.helperProportions[this.floating ? "width" : "height"] > item[this.floating ? "width" : "height"])
		) {
			return isOverElement;
		} else {

			return (l < x1 + (this.helperProportions.width / 2) && // Right Half
				x2 - (this.helperProportions.width / 2) < r && // Left Half
				t < y1 + (this.helperProportions.height / 2) && // Bottom Half
				y2 - (this.helperProportions.height / 2) < b ); // Top Half

		}
	},

	_intersectsWithPointer: function(item) {

		var isOverElementHeight = (this.options.axis === "x") || this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height),
			isOverElementWidth = (this.options.axis === "y") || this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width),
			isOverElement = isOverElementHeight && isOverElementWidth,
			verticalDirection = this._getDragVerticalDirection(),
			horizontalDirection = this._getDragHorizontalDirection();

		if (!isOverElement) {
			return false;
		}

		return this.floating ?
			( ((horizontalDirection && horizontalDirection === "right") || verticalDirection === "down") ? 2 : 1 )
			: ( verticalDirection && (verticalDirection === "down" ? 2 : 1) );

	},

	_intersectsWithSides: function(item) {

		var isOverBottomHalf = this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + (item.height/2), item.height),
			isOverRightHalf = this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + (item.width/2), item.width),
			verticalDirection = this._getDragVerticalDirection(),
			horizontalDirection = this._getDragHorizontalDirection();

		if (this.floating && horizontalDirection) {
			return ((horizontalDirection === "right" && isOverRightHalf) || (horizontalDirection === "left" && !isOverRightHalf));
		} else {
			return verticalDirection && ((verticalDirection === "down" && isOverBottomHalf) || (verticalDirection === "up" && !isOverBottomHalf));
		}

	},

	_getDragVerticalDirection: function() {
		var delta = this.positionAbs.top - this.lastPositionAbs.top;
		return delta !== 0 && (delta > 0 ? "down" : "up");
	},

	_getDragHorizontalDirection: function() {
		var delta = this.positionAbs.left - this.lastPositionAbs.left;
		return delta !== 0 && (delta > 0 ? "right" : "left");
	},

	refresh: function(event) {
		this._refreshItems(event);
		this._setHandleClassName();
		this.refreshPositions();
		return this;
	},

	_connectWith: function() {
		var options = this.options;
		return options.connectWith.constructor === String ? [options.connectWith] : options.connectWith;
	},

	_getItemsAsjQuery: function(connected) {

		var i, j, cur, inst,
			items = [],
			queries = [],
			connectWith = this._connectWith();

		if(connectWith && connected) {
			for (i = connectWith.length - 1; i >= 0; i--){
				cur = $(connectWith[i], this.document[0]);
				for ( j = cur.length - 1; j >= 0; j--){
					inst = $.data(cur[j], this.widgetFullName);
					if(inst && inst !== this && !inst.options.disabled) {
						queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), inst]);
					}
				}
			}
		}

		queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, { options: this.options, item: this.currentItem }) : $(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]);

		function addItems() {
			items.push( this );
		}
		for (i = queries.length - 1; i >= 0; i--){
			queries[i][0].each( addItems );
		}

		return $(items);

	},

	_removeCurrentsFromItems: function() {

		var list = this.currentItem.find(":data(" + this.widgetName + "-item)");

		this.items = $.grep(this.items, function (item) {
			for (var j=0; j < list.length; j++) {
				if(list[j] === item.item[0]) {
					return false;
				}
			}
			return true;
		});

	},

	_refreshItems: function(event) {

		this.items = [];
		this.containers = [this];

		var i, j, cur, inst, targetData, _queries, item, queriesLength,
			items = this.items,
			queries = [[$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, { item: this.currentItem }) : $(this.options.items, this.element), this]],
			connectWith = this._connectWith();

		if(connectWith && this.ready) { //Shouldn't be run the first time through due to massive slow-down
			for (i = connectWith.length - 1; i >= 0; i--){
				cur = $(connectWith[i], this.document[0]);
				for (j = cur.length - 1; j >= 0; j--){
					inst = $.data(cur[j], this.widgetFullName);
					if(inst && inst !== this && !inst.options.disabled) {
						queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, { item: this.currentItem }) : $(inst.options.items, inst.element), inst]);
						this.containers.push(inst);
					}
				}
			}
		}

		for (i = queries.length - 1; i >= 0; i--) {
			targetData = queries[i][1];
			_queries = queries[i][0];

			for (j=0, queriesLength = _queries.length; j < queriesLength; j++) {
				item = $(_queries[j]);

				item.data(this.widgetName + "-item", targetData); // Data for target checking (mouse manager)

				items.push({
					item: item,
					instance: targetData,
					width: 0, height: 0,
					left: 0, top: 0
				});
			}
		}

	},

	refreshPositions: function(fast) {

		// Determine whether items are being displayed horizontally
		this.floating = this.items.length ?
			this.options.axis === "x" || this._isFloating( this.items[ 0 ].item ) :
			false;

		//This has to be redone because due to the item being moved out/into the offsetParent, the offsetParent's position will change
		if(this.offsetParent && this.helper) {
			this.offset.parent = this._getParentOffset();
		}

		var i, item, t, p;

		for (i = this.items.length - 1; i >= 0; i--){
			item = this.items[i];

			//We ignore calculating positions of all connected containers when we're not over them
			if(item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0]) {
				continue;
			}

			t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;

			if (!fast) {
				item.width = t.outerWidth();
				item.height = t.outerHeight();
			}

			p = t.offset();
			item.left = p.left;
			item.top = p.top;
		}

		if(this.options.custom && this.options.custom.refreshContainers) {
			this.options.custom.refreshContainers.call(this);
		} else {
			for (i = this.containers.length - 1; i >= 0; i--){
				p = this.containers[i].element.offset();
				this.containers[i].containerCache.left = p.left;
				this.containers[i].containerCache.top = p.top;
				this.containers[i].containerCache.width = this.containers[i].element.outerWidth();
				this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
			}
		}

		return this;
	},

	_createPlaceholder: function(that) {
		that = that || this;
		var className,
			o = that.options;

		if(!o.placeholder || o.placeholder.constructor === String) {
			className = o.placeholder;
			o.placeholder = {
				element: function() {

					var nodeName = that.currentItem[0].nodeName.toLowerCase(),
						element = $( "<" + nodeName + ">", that.document[0] )
							.addClass(className || that.currentItem[0].className+" ui-sortable-placeholder")
							.removeClass("ui-sortable-helper");

					if ( nodeName === "tbody" ) {
						that._createTrPlaceholder(
							that.currentItem.find( "tr" ).eq( 0 ),
							$( "<tr>", that.document[ 0 ] ).appendTo( element )
						);
					} else if ( nodeName === "tr" ) {
						that._createTrPlaceholder( that.currentItem, element );
					} else if ( nodeName === "img" ) {
						element.attr( "src", that.currentItem.attr( "src" ) );
					}

					if ( !className ) {
						element.css( "visibility", "hidden" );
					}

					return element;
				},
				update: function(container, p) {

					// 1. If a className is set as 'placeholder option, we don't force sizes - the class is responsible for that
					// 2. The option 'forcePlaceholderSize can be enabled to force it even if a class name is specified
					if(className && !o.forcePlaceholderSize) {
						return;
					}

					//If the element doesn't have a actual height by itself (without styles coming from a stylesheet), it receives the inline height from the dragged item
					if(!p.height()) { p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css("paddingTop")||0, 10) - parseInt(that.currentItem.css("paddingBottom")||0, 10)); }
					if(!p.width()) { p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css("paddingLeft")||0, 10) - parseInt(that.currentItem.css("paddingRight")||0, 10)); }
				}
			};
		}

		//Create the placeholder
		that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));

		//Append it after the actual current item
		that.currentItem.after(that.placeholder);

		//Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
		o.placeholder.update(that, that.placeholder);

	},

	_createTrPlaceholder: function( sourceTr, targetTr ) {
		var that = this;

		sourceTr.children().each(function() {
			$( "<td>&#160;</td>", that.document[ 0 ] )
				.attr( "colspan", $( this ).attr( "colspan" ) || 1 )
				.appendTo( targetTr );
		});
	},

	_contactContainers: function(event) {
		var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, cur, nearBottom, floating, axis,
			innermostContainer = null,
			innermostIndex = null;

		// get innermost container that intersects with item
		for (i = this.containers.length - 1; i >= 0; i--) {

			// never consider a container that's located within the item itself
			if($.contains(this.currentItem[0], this.containers[i].element[0])) {
				continue;
			}

			if(this._intersectsWith(this.containers[i].containerCache)) {

				// if we've already found a container and it's more "inner" than this, then continue
				if(innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) {
					continue;
				}

				innermostContainer = this.containers[i];
				innermostIndex = i;

			} else {
				// container doesn't intersect. trigger "out" event if necessary
				if(this.containers[i].containerCache.over) {
					this.containers[i]._trigger("out", event, this._uiHash(this));
					this.containers[i].containerCache.over = 0;
				}
			}

		}

		// if no intersecting containers found, return
		if(!innermostContainer) {
			return;
		}

		// move the item into the container if it's not there already
		if(this.containers.length === 1) {
			if (!this.containers[innermostIndex].containerCache.over) {
				this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
				this.containers[innermostIndex].containerCache.over = 1;
			}
		} else {

			//When entering a new container, we will find the item with the least distance and append our item near it
			dist = 10000;
			itemWithLeastDistance = null;
			floating = innermostContainer.floating || this._isFloating(this.currentItem);
			posProperty = floating ? "left" : "top";
			sizeProperty = floating ? "width" : "height";
			axis = floating ? "clientX" : "clientY";

			for (j = this.items.length - 1; j >= 0; j--) {
				if(!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) {
					continue;
				}
				if(this.items[j].item[0] === this.currentItem[0]) {
					continue;
				}

				cur = this.items[j].item.offset()[posProperty];
				nearBottom = false;
				if ( event[ axis ] - cur > this.items[ j ][ sizeProperty ] / 2 ) {
					nearBottom = true;
				}

				if ( Math.abs( event[ axis ] - cur ) < dist ) {
					dist = Math.abs( event[ axis ] - cur );
					itemWithLeastDistance = this.items[ j ];
					this.direction = nearBottom ? "up": "down";
				}
			}

			//Check if dropOnEmpty is enabled
			if(!itemWithLeastDistance && !this.options.dropOnEmpty) {
				return;
			}

			if(this.currentContainer === this.containers[innermostIndex]) {
				if ( !this.currentContainer.containerCache.over ) {
					this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash() );
					this.currentContainer.containerCache.over = 1;
				}
				return;
			}

			itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);
			this._trigger("change", event, this._uiHash());
			this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));
			this.currentContainer = this.containers[innermostIndex];

			//Update the placeholder
			this.options.placeholder.update(this.currentContainer, this.placeholder);

			this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
			this.containers[innermostIndex].containerCache.over = 1;
		}


	},

	_createHelper: function(event) {

		var o = this.options,
			helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : (o.helper === "clone" ? this.currentItem.clone() : this.currentItem);

		//Add the helper to the DOM if that didn't happen already
		if(!helper.parents("body").length) {
			$(o.appendTo !== "parent" ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);
		}

		if(helper[0] === this.currentItem[0]) {
			this._storedCSS = { width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css("position"), top: this.currentItem.css("top"), left: this.currentItem.css("left") };
		}

		if(!helper[0].style.width || o.forceHelperSize) {
			helper.width(this.currentItem.width());
		}
		if(!helper[0].style.height || o.forceHelperSize) {
			helper.height(this.currentItem.height());
		}

		return helper;

	},

	_adjustOffsetFromHelper: function(obj) {
		if (typeof obj === "string") {
			obj = obj.split(" ");
		}
		if ($.isArray(obj)) {
			obj = {left: +obj[0], top: +obj[1] || 0};
		}
		if ("left" in obj) {
			this.offset.click.left = obj.left + this.margins.left;
		}
		if ("right" in obj) {
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
		}
		if ("top" in obj) {
			this.offset.click.top = obj.top + this.margins.top;
		}
		if ("bottom" in obj) {
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
		}
	},

	_getParentOffset: function() {


		//Get the offsetParent and cache its position
		this.offsetParent = this.helper.offsetParent();
		var po = this.offsetParent.offset();

		// This is a special case where we need to modify a offset calculated on start, since the following happened:
		// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
		//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
		if(this.cssPosition === "absolute" && this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) {
			po.left += this.scrollParent.scrollLeft();
			po.top += this.scrollParent.scrollTop();
		}

		// This needs to be actually done for all browsers, since pageX/pageY includes this information
		// with an ugly IE fix
		if( this.offsetParent[0] === this.document[0].body || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $.ui.ie)) {
			po = { top: 0, left: 0 };
		}

		return {
			top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),
			left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)
		};

	},

	_getRelativeOffset: function() {

		if(this.cssPosition === "relative") {
			var p = this.currentItem.position();
			return {
				top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),
				left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()
			};
		} else {
			return { top: 0, left: 0 };
		}

	},

	_cacheMargins: function() {
		this.margins = {
			left: (parseInt(this.currentItem.css("marginLeft"),10) || 0),
			top: (parseInt(this.currentItem.css("marginTop"),10) || 0)
		};
	},

	_cacheHelperProportions: function() {
		this.helperProportions = {
			width: this.helper.outerWidth(),
			height: this.helper.outerHeight()
		};
	},

	_setContainment: function() {

		var ce, co, over,
			o = this.options;
		if(o.containment === "parent") {
			o.containment = this.helper[0].parentNode;
		}
		if(o.containment === "document" || o.containment === "window") {
			this.containment = [
				0 - this.offset.relative.left - this.offset.parent.left,
				0 - this.offset.relative.top - this.offset.parent.top,
				o.containment === "document" ? this.document.width() : this.window.width() - this.helperProportions.width - this.margins.left,
				(o.containment === "document" ? this.document.width() : this.window.height() || this.document[0].body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
			];
		}

		if(!(/^(document|window|parent)$/).test(o.containment)) {
			ce = $(o.containment)[0];
			co = $(o.containment).offset();
			over = ($(ce).css("overflow") !== "hidden");

			this.containment = [
				co.left + (parseInt($(ce).css("borderLeftWidth"),10) || 0) + (parseInt($(ce).css("paddingLeft"),10) || 0) - this.margins.left,
				co.top + (parseInt($(ce).css("borderTopWidth"),10) || 0) + (parseInt($(ce).css("paddingTop"),10) || 0) - this.margins.top,
				co.left+(over ? Math.max(ce.scrollWidth,ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"),10) || 0) - (parseInt($(ce).css("paddingRight"),10) || 0) - this.helperProportions.width - this.margins.left,
				co.top+(over ? Math.max(ce.scrollHeight,ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"),10) || 0) - (parseInt($(ce).css("paddingBottom"),10) || 0) - this.helperProportions.height - this.margins.top
			];
		}

	},

	_convertPositionTo: function(d, pos) {

		if(!pos) {
			pos = this.position;
		}
		var mod = d === "absolute" ? 1 : -1,
			scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
			scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

		return {
			top: (
				pos.top	+																// The absolute mouse position
				this.offset.relative.top * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top * mod -											// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod)
			),
			left: (
				pos.left +																// The absolute mouse position
				this.offset.relative.left * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left * mod	-										// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ) * mod)
			)
		};

	},

	_generatePosition: function(event) {

		var top, left,
			o = this.options,
			pageX = event.pageX,
			pageY = event.pageY,
			scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

		// This is another very weird special case that only happens for relative elements:
		// 1. If the css position is relative
		// 2. and the scroll parent is the document or similar to the offset parent
		// we have to refresh the relative offset during the scroll so there are no jumps
		if(this.cssPosition === "relative" && !(this.scrollParent[0] !== this.document[0] && this.scrollParent[0] !== this.offsetParent[0])) {
			this.offset.relative = this._getRelativeOffset();
		}

		/*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */

		if(this.originalPosition) { //If we are not dragging yet, we won't check for options

			if(this.containment) {
				if(event.pageX - this.offset.click.left < this.containment[0]) {
					pageX = this.containment[0] + this.offset.click.left;
				}
				if(event.pageY - this.offset.click.top < this.containment[1]) {
					pageY = this.containment[1] + this.offset.click.top;
				}
				if(event.pageX - this.offset.click.left > this.containment[2]) {
					pageX = this.containment[2] + this.offset.click.left;
				}
				if(event.pageY - this.offset.click.top > this.containment[3]) {
					pageY = this.containment[3] + this.offset.click.top;
				}
			}

			if(o.grid) {
				top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
				pageY = this.containment ? ( (top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3]) ? top : ((top - this.offset.click.top >= this.containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

				left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
				pageX = this.containment ? ( (left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2]) ? left : ((left - this.offset.click.left >= this.containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
			}

		}

		return {
			top: (
				pageY -																// The absolute mouse position
				this.offset.click.top -													// Click offset (relative to the element)
				this.offset.relative.top	-											// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top +												// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ))
			),
			left: (
				pageX -																// The absolute mouse position
				this.offset.click.left -												// Click offset (relative to the element)
				this.offset.relative.left	-											// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left +												// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ))
			)
		};

	},

	_rearrange: function(event, i, a, hardRefresh) {

		a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], (this.direction === "down" ? i.item[0] : i.item[0].nextSibling));

		//Various things done here to improve the performance:
		// 1. we create a setTimeout, that calls refreshPositions
		// 2. on the instance, we have a counter variable, that get's higher after every append
		// 3. on the local scope, we copy the counter variable, and check in the timeout, if it's still the same
		// 4. this lets only the last addition to the timeout stack through
		this.counter = this.counter ? ++this.counter : 1;
		var counter = this.counter;

		this._delay(function() {
			if(counter === this.counter) {
				this.refreshPositions(!hardRefresh); //Precompute after each DOM insertion, NOT on mousemove
			}
		});

	},

	_clear: function(event, noPropagation) {

		this.reverting = false;
		// We delay all events that have to be triggered to after the point where the placeholder has been removed and
		// everything else normalized again
		var i,
			delayedTriggers = [];

		// We first have to update the dom position of the actual currentItem
		// Note: don't do it if the current item is already removed (by a user), or it gets reappended (see #4088)
		if(!this._noFinalSort && this.currentItem.parent().length) {
			this.placeholder.before(this.currentItem);
		}
		this._noFinalSort = null;

		if(this.helper[0] === this.currentItem[0]) {
			for(i in this._storedCSS) {
				if(this._storedCSS[i] === "auto" || this._storedCSS[i] === "static") {
					this._storedCSS[i] = "";
				}
			}
			this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
		} else {
			this.currentItem.show();
		}

		if(this.fromOutside && !noPropagation) {
			delayedTriggers.push(function(event) { this._trigger("receive", event, this._uiHash(this.fromOutside)); });
		}
		if((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) {
			delayedTriggers.push(function(event) { this._trigger("update", event, this._uiHash()); }); //Trigger update callback if the DOM position has changed
		}

		// Check if the items Container has Changed and trigger appropriate
		// events.
		if (this !== this.currentContainer) {
			if(!noPropagation) {
				delayedTriggers.push(function(event) { this._trigger("remove", event, this._uiHash()); });
				delayedTriggers.push((function(c) { return function(event) { c._trigger("receive", event, this._uiHash(this)); };  }).call(this, this.currentContainer));
				delayedTriggers.push((function(c) { return function(event) { c._trigger("update", event, this._uiHash(this));  }; }).call(this, this.currentContainer));
			}
		}


		//Post events to containers
		function delayEvent( type, instance, container ) {
			return function( event ) {
				container._trigger( type, event, instance._uiHash( instance ) );
			};
		}
		for (i = this.containers.length - 1; i >= 0; i--){
			if (!noPropagation) {
				delayedTriggers.push( delayEvent( "deactivate", this, this.containers[ i ] ) );
			}
			if(this.containers[i].containerCache.over) {
				delayedTriggers.push( delayEvent( "out", this, this.containers[ i ] ) );
				this.containers[i].containerCache.over = 0;
			}
		}

		//Do what was originally in plugins
		if ( this.storedCursor ) {
			this.document.find( "body" ).css( "cursor", this.storedCursor );
			this.storedStylesheet.remove();
		}
		if(this._storedOpacity) {
			this.helper.css("opacity", this._storedOpacity);
		}
		if(this._storedZIndex) {
			this.helper.css("zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex);
		}

		this.dragging = false;

		if(!noPropagation) {
			this._trigger("beforeStop", event, this._uiHash());
		}

		//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
		this.placeholder[0].parentNode.removeChild(this.placeholder[0]);

		if ( !this.cancelHelperRemoval ) {
			if ( this.helper[ 0 ] !== this.currentItem[ 0 ] ) {
				this.helper.remove();
			}
			this.helper = null;
		}

		if(!noPropagation) {
			for (i=0; i < delayedTriggers.length; i++) {
				delayedTriggers[i].call(this, event);
			} //Trigger all delayed events
			this._trigger("stop", event, this._uiHash());
		}

		this.fromOutside = false;
		return !this.cancelHelperRemoval;

	},

	_trigger: function() {
		if ($.Widget.prototype._trigger.apply(this, arguments) === false) {
			this.cancel();
		}
	},

	_uiHash: function(_inst) {
		var inst = _inst || this;
		return {
			helper: inst.helper,
			placeholder: inst.placeholder || $([]),
			position: inst.position,
			originalPosition: inst.originalPosition,
			offset: inst.positionAbs,
			item: inst.currentItem,
			sender: _inst ? _inst.element : null
		};
	}

});

/*! Copyright (c) 2013 Brandon Aaron (http://brandon.aaron.sh)
 * Licensed under the MIT License (LICENSE.txt).
 *
 * Version: 3.1.12
 *
 * Requires: jQuery 1.2.2+
 */

(function (factory) {
    if ( typeof define === 'function' && define.amd ) {
        // AMD. Register as an anonymous module.
        define('jquery.mousewheel',['jquery'], factory);
    } else if (typeof exports === 'object') {
        // Node/CommonJS style for Browserify
        module.exports = factory;
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {

    var toFix  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
        toBind = ( 'onwheel' in document || document.documentMode >= 9 ) ?
                    ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
        slice  = Array.prototype.slice,
        nullLowestDeltaTimeout, lowestDelta;

    if ( $.event.fixHooks ) {
        for ( var i = toFix.length; i; ) {
            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;
        }
    }

    var special = $.event.special.mousewheel = {
        version: '3.1.12',

        setup: function() {
            if ( this.addEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.addEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = handler;
            }
            // Store the line height and page height for this particular element
            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
        },

        teardown: function() {
            if ( this.removeEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.removeEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = null;
            }
            // Clean up the data we added to the element
            $.removeData(this, 'mousewheel-line-height');
            $.removeData(this, 'mousewheel-page-height');
        },

        getLineHeight: function(elem) {
            var $elem = $(elem),
                $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();
            if (!$parent.length) {
                $parent = $('body');
            }
            return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;
        },

        getPageHeight: function(elem) {
            return $(elem).height();
        },

        settings: {
            adjustOldDeltas: true, // see shouldAdjustOldDeltas() below
            normalizeOffset: true  // calls getBoundingClientRect for each event
        }
    };

    $.fn.extend({
        mousewheel: function(fn) {
            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
        },

        unmousewheel: function(fn) {
            return this.unbind('mousewheel', fn);
        }
    });


    function handler(event) {
        var orgEvent   = event || window.event,
            args       = slice.call(arguments, 1),
            delta      = 0,
            deltaX     = 0,
            deltaY     = 0,
            absDelta   = 0,
            offsetX    = 0,
            offsetY    = 0;
        event = $.event.fix(orgEvent);
        event.type = 'mousewheel';

        // Old school scrollwheel delta
        if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1;      }
        if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;       }
        if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY;      }
        if ( 'wheelDeltaX' in orgEvent ) { deltaX = orgEvent.wheelDeltaX * -1; }

        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
        if ( 'axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {
            deltaX = deltaY * -1;
            deltaY = 0;
        }

        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
        delta = deltaY === 0 ? deltaX : deltaY;

        // New school wheel delta (wheel event)
        if ( 'deltaY' in orgEvent ) {
            deltaY = orgEvent.deltaY * -1;
            delta  = deltaY;
        }
        if ( 'deltaX' in orgEvent ) {
            deltaX = orgEvent.deltaX;
            if ( deltaY === 0 ) { delta  = deltaX * -1; }
        }

        // No change actually happened, no reason to go any further
        if ( deltaY === 0 && deltaX === 0 ) { return; }

        // Need to convert lines and pages to pixels if we aren't already in pixels
        // There are three delta modes:
        //   * deltaMode 0 is by pixels, nothing to do
        //   * deltaMode 1 is by lines
        //   * deltaMode 2 is by pages
        if ( orgEvent.deltaMode === 1 ) {
            var lineHeight = $.data(this, 'mousewheel-line-height');
            delta  *= lineHeight;
            deltaY *= lineHeight;
            deltaX *= lineHeight;
        } else if ( orgEvent.deltaMode === 2 ) {
            var pageHeight = $.data(this, 'mousewheel-page-height');
            delta  *= pageHeight;
            deltaY *= pageHeight;
            deltaX *= pageHeight;
        }

        // Store lowest absolute delta to normalize the delta values
        absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );

        if ( !lowestDelta || absDelta < lowestDelta ) {
            lowestDelta = absDelta;

            // Adjust older deltas if necessary
            if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
                lowestDelta /= 40;
            }
        }

        // Adjust older deltas if necessary
        if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
            // Divide all the things by 40!
            delta  /= 40;
            deltaX /= 40;
            deltaY /= 40;
        }

        // Get a whole, normalized value for the deltas
        delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);
        deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);
        deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);

        // Normalise offsetX and offsetY properties
        if ( special.settings.normalizeOffset && this.getBoundingClientRect ) {
            var boundingRect = this.getBoundingClientRect();
            offsetX = event.clientX - boundingRect.left;
            offsetY = event.clientY - boundingRect.top;
        }

        // Add information to the event object
        event.deltaX = deltaX;
        event.deltaY = deltaY;
        event.deltaFactor = lowestDelta;
        event.offsetX = offsetX;
        event.offsetY = offsetY;
        // Go ahead and set deltaMode to 0 since we converted to pixels
        // Although this is a little odd since we overwrite the deltaX/Y
        // properties with normalized deltas.
        event.deltaMode = 0;

        // Add event and delta to the front of the arguments
        args.unshift(event, delta, deltaX, deltaY);

        // Clearout lowestDelta after sometime to better
        // handle multiple device types that give different
        // a different lowestDelta
        // Ex: trackpad = 3 and mouse wheel = 120
        if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }
        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

        return ($.event.dispatch || $.event.handle).apply(this, args);
    }

    function nullLowestDelta() {
        lowestDelta = null;
    }

    function shouldAdjustOldDeltas(orgEvent, absDelta) {
        // If this is an older event and the delta is divisable by 120,
        // then we are assuming that the browser is treating this as an
        // older mouse wheel event and that we should divide the deltas
        // by 40 to try and get a more usable deltaFactor.
        // Side note, this actually impacts the reported scroll distance
        // in older browsers and can cause scrolling to be slower than native.
        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
    }

}));

/*! Copyright (c) 2011 Piotr Rochala (http://rocha.la)
 * Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
 * and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.
 *
 * Version: 1.3.3
 *
 */
(function($) {

  $.fn.extend({
    slimScroll: function(options) {

      var defaults = {

        // width in pixels of the visible scroll area
        width : 'auto',

        // height in pixels of the visible scroll area
        height : '250px',

        // width in pixels of the scrollbar and rail
        size : '7px',

        // scrollbar color, accepts any hex/color value
        color: '#000',

        // scrollbar position - left/right
        position : 'right',

        // distance in pixels between the side edge and the scrollbar
        distance : '1px',

        // default scroll position on load - top / bottom / $('selector')
        start : 'top',

        // sets scrollbar opacity
        opacity : .4,

        // enables always-on mode for the scrollbar
        alwaysVisible : false,

        // check if we should hide the scrollbar when user is hovering over
        disableFadeOut : false,

        // sets visibility of the rail
        railVisible : false,

        // sets rail color
        railColor : '#333',

        // sets rail opacity
        railOpacity : .2,

        // whether  we should use jQuery UI Draggable to enable bar dragging
        railDraggable : true,

        // defautlt CSS class of the slimscroll rail
        railClass : 'slimScrollRail',

        // defautlt CSS class of the slimscroll bar
        barClass : 'slimScrollBar',

        // defautlt CSS class of the slimscroll wrapper
        wrapperClass : 'slimScrollDiv',

        // check if mousewheel should scroll the window if we reach top/bottom
        allowPageScroll : false,

        // scroll amount applied to each mouse wheel step
        wheelStep : 20,

        // scroll amount applied when user is using gestures
        touchScrollStep : 200,

        // sets border radius
        borderRadius: '7px',

        // sets border radius of the rail
        railBorderRadius : '7px'
      };

      var o = $.extend(defaults, options);

      // do it for every element that matches selector
      this.each(function(){

      var isOverPanel, isOverBar, isDragg, queueHide, touchDif,
        barHeight, percentScroll, lastScroll,
        divS = '<div></div>',
        minBarHeight = 30,
        releaseScroll = false;

        // used in event handlers and for better minification
        var me = $(this);

        // ensure we are not binding it again
        if (me.parent().hasClass(o.wrapperClass))
        {
            // start from last bar position
            var offset = me.scrollTop();

            // find bar and rail
            bar = me.parent().find('.' + o.barClass);
            rail = me.parent().find('.' + o.railClass);

            getBarHeight();

            // check if we should scroll existing instance
            if ($.isPlainObject(options))
            {
              // Pass height: auto to an existing slimscroll object to force a resize after contents have changed
              if ( 'height' in options && options.height == 'auto' ) {
                me.parent().css('height', 'auto');
                me.css('height', 'auto');
                var height = me.parent().parent().height();
                me.parent().css('height', height);
                me.css('height', height);
              }

              if ('scrollTo' in options)
              {
                // jump to a static point
                offset = parseInt(o.scrollTo);
              }
              else if ('scrollBy' in options)
              {
                // jump by value pixels
                offset += parseInt(o.scrollBy);
              }
              else if ('destroy' in options)
              {
                // remove slimscroll elements
                bar.remove();
                rail.remove();
                me.unwrap();
                return;
              }

              // scroll content by the given offset
              scrollContent(offset, false, true);
            }

            return;
        }
        else if ($.isPlainObject(options))
        {
            if ('destroy' in options)
            {
            	return;
            }
        }

        // optionally set height to the parent's height
        o.height = (o.height == 'auto') ? me.parent().height() : o.height;

        // wrap content
        var wrapper = $(divS)
          .addClass(o.wrapperClass)
          .css({
            position: 'relative',
            overflow: 'hidden',
            width: o.width,
            height: o.height
          });

        // update style for the div
        me.css({
          overflow: 'hidden',
          width: o.width,
          height: o.height
        });

        // create scrollbar rail
        var rail = $(divS)
          .addClass(o.railClass)
          .css({
            width: o.size,
            height: '100%',
            position: 'absolute',
            top: 0,
            display: (o.alwaysVisible && o.railVisible) ? 'block' : 'none',
            'border-radius': o.railBorderRadius,
            background: o.railColor,
            opacity: o.railOpacity,
            zIndex: 90
          });

        // create scrollbar
        var bar = $(divS)
          .addClass(o.barClass)
          .css({
            background: o.color,
            width: o.size,
            position: 'absolute',
            top: 0,
            opacity: o.opacity,
            display: o.alwaysVisible ? 'block' : 'none',
            'border-radius' : o.borderRadius,
            BorderRadius: o.borderRadius,
            MozBorderRadius: o.borderRadius,
            WebkitBorderRadius: o.borderRadius,
            zIndex: 99
          });

        // set position
        var posCss = (o.position == 'right') ? { right: o.distance } : { left: o.distance };
        rail.css(posCss);
        bar.css(posCss);

        // wrap it
        me.wrap(wrapper);

        // append to parent div
        me.parent().append(bar);
        me.parent().append(rail);

        // make it draggable and no longer dependent on the jqueryUI
        if (o.railDraggable){
          bar.bind("mousedown", function(e) {
            var $doc = $(document);
            isDragg = true;
            t = parseFloat(bar.css('top'));
            pageY = e.pageY;

            $doc.bind("mousemove.slimscroll", function(e){
              currTop = t + e.pageY - pageY;
              bar.css('top', currTop);
              scrollContent(0, bar.position().top, false);// scroll content
            });

            $doc.bind("mouseup.slimscroll", function(e) {
              isDragg = false;hideBar();
              $doc.unbind('.slimscroll');
            });
            return false;
          }).bind("selectstart.slimscroll", function(e){
            e.stopPropagation();
            e.preventDefault();
            return false;
          });
        }

        // on rail over
        rail.hover(function(){
          showBar();
        }, function(){
          hideBar();
        });

        // on bar over
        bar.hover(function(){
          isOverBar = true;
        }, function(){
          isOverBar = false;
        });

        // show on parent mouseover
        me.hover(function(){
          isOverPanel = true;
          showBar();
          hideBar();
        }, function(){
          isOverPanel = false;
          hideBar();
        });

        // support for mobile
        me.bind('touchstart', function(e,b){
          if (e.originalEvent.touches.length)
          {
            // record where touch started
            touchDif = e.originalEvent.touches[0].pageY;
          }
        });

        me.bind('touchmove', function(e){
          // prevent scrolling the page if necessary
          if(!releaseScroll)
          {
  		      e.originalEvent.preventDefault();
		      }
          if (e.originalEvent.touches.length)
          {
            // see how far user swiped
            var diff = (touchDif - e.originalEvent.touches[0].pageY) / o.touchScrollStep;
            // scroll content
            scrollContent(diff, true);
            touchDif = e.originalEvent.touches[0].pageY;
          }
        });

        // set up initial height
        getBarHeight();

        // check start position
        if (o.start === 'bottom')
        {
          // scroll content to bottom
          bar.css({ top: me.outerHeight() - bar.outerHeight() });
          scrollContent(0, true);
        }
        else if (o.start !== 'top')
        {
          // assume jQuery selector
          scrollContent($(o.start).position().top, null, true);

          // make sure bar stays hidden
          if (!o.alwaysVisible) { bar.hide(); }
        }

        // attach scroll events
        attachWheel();

        function _onWheel(e)
        {
          // use mouse wheel only when mouse is over
          if (!isOverPanel) { return; }

          var e = e || window.event;

          var delta = 0;
          if (e.wheelDelta) { delta = -e.wheelDelta/120; }
          if (e.detail) { delta = e.detail / 3; }

          var target = e.target || e.srcTarget || e.srcElement;
          if ($(target).closest('.' + o.wrapperClass).is(me.parent())) {
            // scroll content
            scrollContent(delta, true);
          }

          // stop window scroll
          if (e.preventDefault && !releaseScroll) { e.preventDefault(); }
          if (!releaseScroll) { e.returnValue = false; }
        }

        function scrollContent(y, isWheel, isJump)
        {
          releaseScroll = false;
          var delta = y;
          var maxTop = me.outerHeight() - bar.outerHeight();

          if (isWheel)
          {
            // move bar with mouse wheel
            delta = parseInt(bar.css('top')) + y * parseInt(o.wheelStep) / 100 * bar.outerHeight();

            // move bar, make sure it doesn't go out
            delta = Math.min(Math.max(delta, 0), maxTop);

            // if scrolling down, make sure a fractional change to the
            // scroll position isn't rounded away when the scrollbar's CSS is set
            // this flooring of delta would happened automatically when
            // bar.css is set below, but we floor here for clarity
            delta = (y > 0) ? Math.ceil(delta) : Math.floor(delta);

            // scroll the scrollbar
            bar.css({ top: delta + 'px' });
          }

          // calculate actual scroll amount
          percentScroll = parseInt(bar.css('top')) / (me.outerHeight() - bar.outerHeight());
          delta = percentScroll * (me[0].scrollHeight - me.outerHeight());

          if (isJump)
          {
            delta = y;
            var offsetTop = delta / me[0].scrollHeight * me.outerHeight();
            offsetTop = Math.min(Math.max(offsetTop, 0), maxTop);
            bar.css({ top: offsetTop + 'px' });
          }

          // scroll content
          me.scrollTop(delta);

          // fire scrolling event
          me.trigger('slimscrolling', ~~delta);

          // ensure bar is visible
          showBar();

          // trigger hide when scroll is stopped
          hideBar();
        }

        function attachWheel()
        {
          if (window.addEventListener)
          {
            this.addEventListener('DOMMouseScroll', _onWheel, false );
            this.addEventListener('mousewheel', _onWheel, false );
          }
          else
          {
            document.attachEvent("onmousewheel", _onWheel)
          }
        }

        function getBarHeight()
        {
          // calculate scrollbar height and make sure it is not too small
          barHeight = Math.max((me.outerHeight() / me[0].scrollHeight) * me.outerHeight(), minBarHeight);
          bar.css({ height: barHeight + 'px' });

          // hide scrollbar if content is not long enough
          var display = barHeight >= me.outerHeight() ? 'none' : 'block';
          bar.css({ display: display });
          me.css({ width: '100%' });
          setTimeout(function(){
            me.css({width:o.width})
          },0)
        }

        function showBar()
        {
          // recalculate bar height
          getBarHeight();
          clearTimeout(queueHide);

          // when bar reached top or bottom
          if (percentScroll == ~~percentScroll)
          {
            //release wheel
            releaseScroll = o.allowPageScroll;

            // publish approporiate event
            if (lastScroll != percentScroll)
            {
                var msg = (~~percentScroll == 0) ? 'top' : 'bottom';
                me.trigger('slimscroll', msg);
            }
          }
          else
          {
            releaseScroll = false;
          }
          lastScroll = percentScroll;

          // show only when required
          if(barHeight >= me.outerHeight()) {
            //allow window scroll
            releaseScroll = true;
            return;
          }
          bar.stop(true,true).fadeIn('fast');
          if (o.railVisible) { rail.stop(true,true).fadeIn('fast'); }
        }

        function hideBar()
        {
          // only hide when options allow it
          if (!o.alwaysVisible)
          {
            queueHide = setTimeout(function(){
              if (!(o.disableFadeOut && isOverPanel) && !isOverBar && !isDragg)
              {
                bar.fadeOut('slow');
                rail.fadeOut('slow');
              }
            }, 1000);
          }
        }

      });

      // maintain chainability
      return this;
    }
  });

  $.fn.extend({
    slimscroll: $.fn.slimScroll
  });

})(jQuery);

/* jquery.nicescroll
-- version 3.6.6
-- copyright 2015-11-17 InuYaksa*2015
-- licensed under the MIT
--
-- http://nicescroll.areaaperta.com/
-- https://github.com/inuyaksa/jquery.nicescroll
--
*/

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as anonymous module.
    define(['jquery'], factory);
  } else if (typeof exports === 'object') {
    // Node/CommonJS.
    module.exports = factory(require('jquery'));
  } else {
    // Browser globals.
    factory(jQuery);
  }
}(function(jQuery) {
  "use strict";

  // globals
  var domfocus = false;
  var mousefocus = false;
  var tabindexcounter = 0;
  var ascrailcounter = 2000;
  var globalmaxzindex = 0;

  var $ = jQuery; // sandbox

  // http://stackoverflow.com/questions/2161159/get-script-path
  function getScriptPath() {
    var scripts = document.getElementsByTagName('script');
    var path = scripts.length ? scripts[scripts.length - 1].src.split('?')[0] : '';
    return (path.split('/').length > 0) ? path.split('/').slice(0, -1).join('/') + '/' : '';
  }

  var vendors = ['webkit','ms','moz','o'];

  var setAnimationFrame = window.requestAnimationFrame || false;
  var clearAnimationFrame = window.cancelAnimationFrame || false;

  if (!setAnimationFrame) {  // legacy detection
    for (var vx in vendors) {
      var v = vendors[vx];
      if (!setAnimationFrame) setAnimationFrame = window[v + 'RequestAnimationFrame'];
      if (!clearAnimationFrame) clearAnimationFrame = window[v + 'CancelAnimationFrame'] || window[v + 'CancelRequestAnimationFrame'];
    }
  }

  var ClsMutationObserver = window.MutationObserver || window.WebKitMutationObserver || false;

  var _globaloptions = {
    zindex: "auto",
    cursoropacitymin: 0,
    cursoropacitymax: 1,
    cursorcolor: "#424242",
    cursorwidth: "5px",
    cursorborder: "1px solid #fff",
    cursorborderradius: "5px",
    scrollspeed: 60,
    mousescrollstep: 8 * 3,
    touchbehavior: false,
    hwacceleration: true,
    usetransition: true,
    boxzoom: false,
    dblclickzoom: true,
    gesturezoom: true,
    grabcursorenabled: true,
    autohidemode: true,
    background: "",
    iframeautoresize: true,
    cursorminheight: 32,
    preservenativescrolling: true,
    railoffset: false,
    railhoffset: false,
    bouncescroll: true,
    spacebarenabled: true,
    railpadding: {
      top: 0,
      right: 0,
      left: 0,
      bottom: 0
    },
    disableoutline: true,
    horizrailenabled: true,
    railalign: "right",
    railvalign: "bottom",
    enabletranslate3d: true,
    enablemousewheel: true,
    enablekeyboard: true,
    smoothscroll: true,
    sensitiverail: true,
    enablemouselockapi: true,
    //      cursormaxheight:false,
    cursorfixedheight: false,
    directionlockdeadzone: 6,
    hidecursordelay: 400,
    nativeparentscrolling: true,
    enablescrollonselection: true,
    overflowx: true,
    overflowy: true,
    cursordragspeed: 0.3,
    rtlmode: "auto",
    cursordragontouch: false,
    oneaxismousemode: "auto",
    scriptpath: getScriptPath(),
    preventmultitouchscrolling: true
  };

  var browserdetected = false;

  var getBrowserDetection = function() {

    if (browserdetected) return browserdetected;

    var _el = document.createElement('DIV'),
        _style = _el.style,
        _agent = navigator.userAgent,
        _platform = navigator.platform,
        d = {};

    d.haspointerlock = "pointerLockElement" in document || "webkitPointerLockElement" in document || "mozPointerLockElement" in document;

    d.isopera = ("opera" in window); // 12-
    d.isopera12 = (d.isopera && ("getUserMedia" in navigator));
    d.isoperamini = (Object.prototype.toString.call(window.operamini) === "[object OperaMini]");

    d.isie = (("all" in document) && ("attachEvent" in _el) && !d.isopera); //IE10-
    d.isieold = (d.isie && !("msInterpolationMode" in _style)); // IE6 and older
    d.isie7 = d.isie && !d.isieold && (!("documentMode" in document) || (document.documentMode == 7));
    d.isie8 = d.isie && ("documentMode" in document) && (document.documentMode == 8);
    d.isie9 = d.isie && ("performance" in window) && (document.documentMode >= 9);
    d.isie10 = d.isie && ("performance" in window) && (document.documentMode == 10);
    d.isie11 = ("msRequestFullscreen" in _el) && (document.documentMode >= 11); // IE11+
		d.isieedge = (navigator.userAgent.match(/Edge\/12\./));

    d.isie9mobile = /iemobile.9/i.test(_agent); //wp 7.1 mango
    if (d.isie9mobile) d.isie9 = false;
    d.isie7mobile = (!d.isie9mobile && d.isie7) && /iemobile/i.test(_agent); //wp 7.0

    d.ismozilla = ("MozAppearance" in _style);

    d.iswebkit = ("WebkitAppearance" in _style);

    d.ischrome = ("chrome" in window);
    d.ischrome22 = (d.ischrome && d.haspointerlock);
    d.ischrome26 = (d.ischrome && ("transition" in _style)); // issue with transform detection (maintain prefix)

    d.cantouch = ("ontouchstart" in document.documentElement) || ("ontouchstart" in window); // detection for Chrome Touch Emulation
    d.hasmstouch = (window.MSPointerEvent || false); // IE10 pointer events
    d.hasw3ctouch = (window.PointerEvent || false) && ((navigator.MaxTouchPoints > 0)||(navigator.msMaxTouchPoints > 0)); //IE11 pointer events, following W3C Pointer Events spec

    d.ismac = /^mac$/i.test(_platform);

    d.isios = (d.cantouch && /iphone|ipad|ipod/i.test(_platform));
    d.isios4 = ((d.isios) && !("seal" in Object));
    d.isios7 = ((d.isios)&&("webkitHidden" in document));  //iOS 7+

    d.isandroid = (/android/i.test(_agent));

    d.haseventlistener = ("addEventListener" in _el);

    d.trstyle = false;
    d.hastransform = false;
    d.hastranslate3d = false;
    d.transitionstyle = false;
    d.hastransition = false;
    d.transitionend = false;

    var a;
    var check = ['transform', 'msTransform', 'webkitTransform', 'MozTransform', 'OTransform'];
    for (a = 0; a < check.length; a++) {
      if (typeof _style[check[a]] != "undefined") {
        d.trstyle = check[a];
        break;
      }
    }
    d.hastransform = (!!d.trstyle);
    if (d.hastransform) {
      _style[d.trstyle] = "translate3d(1px,2px,3px)";
      d.hastranslate3d = /translate3d/.test(_style[d.trstyle]);
    }

    d.transitionstyle = false;
    d.prefixstyle = '';
    d.transitionend = false;
    check = ['transition', 'webkitTransition', 'msTransition', 'MozTransition', 'OTransition', 'OTransition', 'KhtmlTransition'];
    var prefix = ['', '-webkit-', '-ms-', '-moz-', '-o-', '-o', '-khtml-'];
    var evs = ['transitionend', 'webkitTransitionEnd', 'msTransitionEnd',  'transitionend', 'otransitionend', 'oTransitionEnd', 'KhtmlTransitionEnd'];
    for (a = 0; a < check.length; a++) {
      if (check[a] in _style) {
        d.transitionstyle = check[a];
        d.prefixstyle = prefix[a];
        d.transitionend = evs[a];
        break;
      }
    }
    if (d.ischrome26) {  // always use prefix
      d.prefixstyle = prefix[1];
    }

    d.hastransition = (d.transitionstyle);

    function detectCursorGrab() {
      var lst = ['-webkit-grab', '-moz-grab', 'grab'];
      if ((d.ischrome && !d.ischrome22) || d.isie) lst = []; // force setting for IE returns false positive and chrome cursor bug
      for (var a = 0; a < lst.length; a++) {
        var p = lst[a];
        _style.cursor = p;
        if (_style.cursor == p) return p;
      }
      return 'url(//mail.google.com/mail/images/2/openhand.cur),n-resize'; // thank you google for custom cursor!
    }
    d.cursorgrabvalue = detectCursorGrab();

    d.hasmousecapture = ("setCapture" in _el);

    d.hasMutationObserver = (ClsMutationObserver !== false);

    _el = null; //memory released

    browserdetected = d;

    return d;
  };

  var NiceScrollClass = function(myopt, me) {

    var self = this;

    this.version = '3.6.6';
    this.name = 'nicescroll';

    this.me = me;

    this.opt = {
      doc: $("body"),
      win: false
    };

    $.extend(this.opt, _globaloptions);  // clone opts

    // Options for internal use
    this.opt.snapbackspeed = 80;

    if (myopt || false) {
      for (var a in self.opt) {
        if (typeof myopt[a] != "undefined") self.opt[a] = myopt[a];
      }
    }

    this.doc = self.opt.doc;
    this.iddoc = (this.doc && this.doc[0]) ? this.doc[0].id || '' : '';
    this.ispage = /^BODY|HTML/.test((self.opt.win) ? self.opt.win[0].nodeName : this.doc[0].nodeName);
    this.haswrapper = (self.opt.win !== false);
    this.win = self.opt.win || (this.ispage ? $(window) : this.doc);
    this.docscroll = (this.ispage && !this.haswrapper) ? $(window) : this.win;
    this.body = $("body");
    this.viewport = false;

    this.isfixed = false;

    this.iframe = false;
    this.isiframe = ((this.doc[0].nodeName == 'IFRAME') && (this.win[0].nodeName == 'IFRAME'));

    this.istextarea = (this.win[0].nodeName == 'TEXTAREA');

    this.forcescreen = false; //force to use screen position on events

    this.canshowonmouseevent = (self.opt.autohidemode != "scroll");

    // Events jump table
    this.onmousedown = false;
    this.onmouseup = false;
    this.onmousemove = false;
    this.onmousewheel = false;
    this.onkeypress = false;
    this.ongesturezoom = false;
    this.onclick = false;

    // Nicescroll custom events
    this.onscrollstart = false;
    this.onscrollend = false;
    this.onscrollcancel = false;

    this.onzoomin = false;
    this.onzoomout = false;

    // Let's start!
    this.view = false;
    this.page = false;

    this.scroll = {
      x: 0,
      y: 0
    };
    this.scrollratio = {
      x: 0,
      y: 0
    };
    this.cursorheight = 20;
    this.scrollvaluemax = 0;

    this.isrtlmode = (this.opt.rtlmode == "auto") ? ((this.win[0] == window ? this.body : this.win).css("direction") == "rtl") : (this.opt.rtlmode === true);
    //    this.checkrtlmode = false;

    this.scrollrunning = false;

    this.scrollmom = false;

    this.observer        = false;  // observer div changes
    this.observerremover = false;  // observer on parent for remove detection
    this.observerbody    = false;  // observer on body for position change

    do {
      this.id = "ascrail" + (ascrailcounter++);
    } while (document.getElementById(this.id));

    this.rail = false;
    this.cursor = false;
    this.cursorfreezed = false;
    this.selectiondrag = false;

    this.zoom = false;
    this.zoomactive = false;

    this.hasfocus = false;
    this.hasmousefocus = false;

    this.visibility = true;
    this.railslocked = false;  // locked by resize
    this.locked = false;  // prevent lost of locked status sets by user
    this.hidden = false; // rails always hidden
    this.cursoractive = true; // user can interact with cursors

    this.wheelprevented = false; //prevent mousewheel event

    this.overflowx = self.opt.overflowx;
    this.overflowy = self.opt.overflowy;

    this.nativescrollingarea = false;
    this.checkarea = 0;

    this.events = []; // event list for unbind

    this.saved = {};  // style saved

    this.delaylist = {};
    this.synclist = {};

    this.lastdeltax = 0;
    this.lastdeltay = 0;

    this.detected = getBrowserDetection();

    var cap = $.extend({}, this.detected);

    this.canhwscroll = (cap.hastransform && self.opt.hwacceleration);
    this.ishwscroll = (this.canhwscroll && self.haswrapper);

    this.hasreversehr = (this.isrtlmode&&!cap.iswebkit);  //RTL mode with reverse horizontal axis

    this.istouchcapable = false; // desktop devices with touch screen support

    //## Check WebKit-based desktop with touch support
    //## + Firefox 18 nightly build (desktop) false positive (or desktop with touch support)
    if (cap.cantouch && !cap.isios && !cap.isandroid && (cap.iswebkit || cap.ismozilla)) {
      this.istouchcapable = true;
      cap.cantouch = false; // parse normal desktop events
    }

    //## disable MouseLock API on user request
    if (!self.opt.enablemouselockapi) {
      cap.hasmousecapture = false;
      cap.haspointerlock = false;
    }

/* deprecated
    this.delayed = function(name, fn, tm, lazy) {
    };
*/

    this.debounced = function(name, fn, tm) {
      var dd = self.delaylist[name];
      self.delaylist[name] = fn;
      if (!dd) {
        self.debouncedelayed =  setTimeout(function() {
					if (!self) return;
          var fn = self.delaylist[name];
          self.delaylist[name] = false;
          fn.call(self);
        }, tm);
      }
    };

    var _onsync = false;

    this.synched = function(name, fn) {

      function requestSync() {
        if (_onsync) return;
        setAnimationFrame(function() {
          _onsync = false;
          for (var nn in self.synclist) {
            var fn = self.synclist[nn];
            if (fn) fn.call(self);
            self.synclist[nn] = false;
          }
        });
        _onsync = true;
      }

      self.synclist[name] = fn;
      requestSync();
      return name;
    };

    this.unsynched = function(name) {
      if (self.synclist[name]) self.synclist[name] = false;
    };

    this.css = function(el, pars) { // save & set
      for (var n in pars) {
        self.saved.css.push([el, n, el.css(n)]);
        el.css(n, pars[n]);
      }
    };

    this.scrollTop = function(val) {
      return (typeof val == "undefined") ? self.getScrollTop() : self.setScrollTop(val);
    };

    this.scrollLeft = function(val) {
      return (typeof val == "undefined") ? self.getScrollLeft() : self.setScrollLeft(val);
    };

    // derived by by Dan Pupius www.pupius.net
    var BezierClass = function(st, ed, spd, p1, p2, p3, p4) {

      this.st = st;
      this.ed = ed;
      this.spd = spd;

      this.p1 = p1 || 0;
      this.p2 = p2 || 1;
      this.p3 = p3 || 0;
      this.p4 = p4 || 1;

      this.ts = (new Date()).getTime();
      this.df = this.ed - this.st;
    };
    BezierClass.prototype = {
      B2: function(t) {
        return 3 * t * t * (1 - t);
      },
      B3: function(t) {
        return 3 * t * (1 - t) * (1 - t);
      },
      B4: function(t) {
        return (1 - t) * (1 - t) * (1 - t);
      },
      getNow: function() {
        var nw = (new Date()).getTime();
        var pc = 1 - ((nw - this.ts) / this.spd);
        var bz = this.B2(pc) + this.B3(pc) + this.B4(pc);
        return (pc < 0) ? this.ed : this.st + Math.round(this.df * bz);
      },
      update: function(ed, spd) {
        this.st = this.getNow();
        this.ed = ed;
        this.spd = spd;
        this.ts = (new Date()).getTime();
        this.df = this.ed - this.st;
        return this;
      }
    };

    //derived from http://stackoverflow.com/questions/11236090/
    function getMatrixValues() {
      var tr = self.doc.css(cap.trstyle);
      if (tr && (tr.substr(0, 6) == "matrix")) {
        return tr.replace(/^.*\((.*)\)$/g, "$1").replace(/px/g, '').split(/, +/);
      }
      return false;
    }

    if (this.ishwscroll) {
      // hw accelerated scroll
      this.doc.translate = {
        x: 0,
        y: 0,
        tx: "0px",
        ty: "0px"
      };

      //this one can help to enable hw accel on ios6 http://indiegamr.com/ios6-html-hardware-acceleration-changes-and-how-to-fix-them/
      if (cap.hastranslate3d && cap.isios) this.doc.css("-webkit-backface-visibility", "hidden"); // prevent flickering http://stackoverflow.com/questions/3461441/

      this.getScrollTop = function(last) {
        if (!last) {
          var mtx = getMatrixValues();
          if (mtx) return (mtx.length == 16) ? -mtx[13] : -mtx[5]; //matrix3d 16 on IE10
          if (self.timerscroll && self.timerscroll.bz) return self.timerscroll.bz.getNow();
        }
        return self.doc.translate.y;
      };

      this.getScrollLeft = function(last) {
        if (!last) {
          var mtx = getMatrixValues();
          if (mtx) return (mtx.length == 16) ? -mtx[12] : -mtx[4]; //matrix3d 16 on IE10
          if (self.timerscroll && self.timerscroll.bh) return self.timerscroll.bh.getNow();
        }
        return self.doc.translate.x;
      };

      this.notifyScrollEvent = function(el) {
        var e = document.createEvent("UIEvents");
        e.initUIEvent("scroll", false, true, window, 1);
        e.niceevent = true;
        el.dispatchEvent(e);
      };

      var cxscrollleft = (this.isrtlmode) ? 1 : -1;

      if (cap.hastranslate3d && self.opt.enabletranslate3d) {
        this.setScrollTop = function(val, silent) {
          self.doc.translate.y = val;
          self.doc.translate.ty = (val * -1) + "px";
          self.doc.css(cap.trstyle, "translate3d(" + self.doc.translate.tx + "," + self.doc.translate.ty + ",0px)");
          if (!silent) self.notifyScrollEvent(self.win[0]);
        };
        this.setScrollLeft = function(val, silent) {
          self.doc.translate.x = val;
          self.doc.translate.tx = (val * cxscrollleft) + "px";
          self.doc.css(cap.trstyle, "translate3d(" + self.doc.translate.tx + "," + self.doc.translate.ty + ",0px)");
          if (!silent) self.notifyScrollEvent(self.win[0]);
        };
      } else {
        this.setScrollTop = function(val, silent) {
          self.doc.translate.y = val;
          self.doc.translate.ty = (val * -1) + "px";
          self.doc.css(cap.trstyle, "translate(" + self.doc.translate.tx + "," + self.doc.translate.ty + ")");
          if (!silent) self.notifyScrollEvent(self.win[0]);
        };
        this.setScrollLeft = function(val, silent) {
          self.doc.translate.x = val;
          self.doc.translate.tx = (val * cxscrollleft) + "px";
          self.doc.css(cap.trstyle, "translate(" + self.doc.translate.tx + "," + self.doc.translate.ty + ")");
          if (!silent) self.notifyScrollEvent(self.win[0]);
        };
      }
    } else {
      // native scroll
      this.getScrollTop = function() {
        return self.docscroll.scrollTop();
      };
      this.setScrollTop = function(val) {
        return setTimeout(function() {if (self) self.docscroll.scrollTop(val)}, 1);
      };
      this.getScrollLeft = function() {
        if (self.detected.ismozilla && self.isrtlmode)
          return Math.abs(self.docscroll.scrollLeft());
        return self.docscroll.scrollLeft();
      };
      this.setScrollLeft = function(val) {
        return setTimeout(function() {if (self) self.docscroll.scrollLeft((self.detected.ismozilla && self.isrtlmode) ? -val : val)}, 1);
      };
    }

    this.getTarget = function(e) {
      if (!e) return false;
      if (e.target) return e.target;
      if (e.srcElement) return e.srcElement;
      return false;
    };

    this.hasParent = function(e, id) {
      if (!e) return false;
      var el = e.target || e.srcElement || e || false;
      while (el && el.id != id) {
        el = el.parentNode || false;
      }
      return (el !== false);
    };

    function getZIndex() {
      var dom = self.win;
      if ("zIndex" in dom) return dom.zIndex(); // use jQuery UI method when available
      while (dom.length > 0) {
        if (dom[0].nodeType == 9) return false;
        var zi = dom.css('zIndex');
        if (!isNaN(zi) && zi != 0) return parseInt(zi);
        dom = dom.parent();
      }
      return false;
    }

    //inspired by http://forum.jquery.com/topic/width-includes-border-width-when-set-to-thin-medium-thick-in-ie
    var _convertBorderWidth = {
      "thin": 1,
      "medium": 3,
      "thick": 5
    };

    function getWidthToPixel(dom, prop, chkheight) {
      var wd = dom.css(prop);
      var px = parseFloat(wd);
      if (isNaN(px)) {
        px = _convertBorderWidth[wd] || 0;
        var brd = (px == 3) ? ((chkheight) ? (self.win.outerHeight() - self.win.innerHeight()) : (self.win.outerWidth() - self.win.innerWidth())) : 1; //DON'T TRUST CSS
        if (self.isie8 && px) px += 1;
        return (brd) ? px : 0;
      }
      return px;
    }

    this.getDocumentScrollOffset = function() {
      return {top:window.pageYOffset||document.documentElement.scrollTop,
              left:window.pageXOffset||document.documentElement.scrollLeft};
    }

    this.getOffset = function() {
      if (self.isfixed) {
        var ofs = self.win.offset();  // fix Chrome auto issue (when right/bottom props only)
        var scrl = self.getDocumentScrollOffset();
        ofs.top-=scrl.top;
        ofs.left-=scrl.left;
        return ofs;
      }
      var ww = self.win.offset();
      if (!self.viewport) return ww;
      var vp = self.viewport.offset();
      return {
        top: ww.top - vp.top,// + self.viewport.scrollTop(),
        left: ww.left - vp.left // + self.viewport.scrollLeft()
      };
    };

    this.updateScrollBar = function(len) {
      if (self.ishwscroll) {
        self.rail.css({  //**
          height: self.win.innerHeight() - (self.opt.railpadding.top + self.opt.railpadding.bottom)
        });
        if (self.railh) self.railh.css({  //**
          width: self.win.innerWidth() - (self.opt.railpadding.left + self.opt.railpadding.right)
        });

      } else {
        var wpos = self.getOffset();
        var pos = {
          top: wpos.top,
          left: wpos.left  - (self.opt.railpadding.left + self.opt.railpadding.right)
        };
        pos.top += getWidthToPixel(self.win, 'border-top-width', true);
        pos.left += (self.rail.align) ? self.win.outerWidth() - getWidthToPixel(self.win, 'border-right-width') - self.rail.width : getWidthToPixel(self.win, 'border-left-width');

        var off = self.opt.railoffset;
        if (off) {
          if (off.top) pos.top += off.top;
          if (off.left) pos.left += off.left;
        }

        if (!self.railslocked) self.rail.css({
          top: pos.top,
          left: pos.left,
          height: ((len) ? len.h : self.win.innerHeight()) - (self.opt.railpadding.top + self.opt.railpadding.bottom)
        });

        if (self.zoom) {
          self.zoom.css({
            top: pos.top + 1,
            left: (self.rail.align == 1) ? pos.left - 20 : pos.left + self.rail.width + 4
          });
        }

        if (self.railh && !self.railslocked) {
          var pos = {
            top: wpos.top,
            left: wpos.left
          };
          var off = self.opt.railhoffset;
          if (!!off) {
            if (!!off.top) pos.top += off.top;
            if (!!off.left) pos.left += off.left;
          }
          var y = (self.railh.align) ? pos.top + getWidthToPixel(self.win, 'border-top-width', true) + self.win.innerHeight() - self.railh.height : pos.top + getWidthToPixel(self.win, 'border-top-width', true);
          var x = pos.left + getWidthToPixel(self.win, 'border-left-width');
          self.railh.css({
            top: y  - (self.opt.railpadding.top + self.opt.railpadding.bottom),
            left: x,
            width: self.railh.width
          });
        }


      }
    };

    this.doRailClick = function(e, dbl, hr) {
      var fn, pg, cur, pos;

      if (self.railslocked) return;
      self.cancelEvent(e);

      if (dbl) {
        fn = (hr) ? self.doScrollLeft : self.doScrollTop;
        cur = (hr) ? ((e.pageX - self.railh.offset().left - (self.cursorwidth / 2)) * self.scrollratio.x) : ((e.pageY - self.rail.offset().top - (self.cursorheight / 2)) * self.scrollratio.y);
        fn(cur);
      } else {
        fn = (hr) ? self.doScrollLeftBy : self.doScrollBy;
        cur = (hr) ? self.scroll.x : self.scroll.y;
        pos = (hr) ? e.pageX - self.railh.offset().left : e.pageY - self.rail.offset().top;
        pg = (hr) ? self.view.w : self.view.h;
        fn((cur >= pos) ? pg: -pg);//   (cur >= pos) ? fn(pg): fn(-pg);
      }

    };

    self.hasanimationframe = (setAnimationFrame);
    self.hascancelanimationframe = (clearAnimationFrame);

    if (!self.hasanimationframe) {
      setAnimationFrame = function(fn) {
        return setTimeout(fn, 15 - Math.floor((+new Date()) / 1000) % 16);
      }; // 1000/60)};
      clearAnimationFrame = clearInterval;
    } else if (!self.hascancelanimationframe) clearAnimationFrame = function() {
      self.cancelAnimationFrame = true;
    };

    this.init = function() {

      self.saved.css = [];

      if (cap.isie7mobile) return true; // SORRY, DO NOT WORK!
      if (cap.isoperamini) return true; // SORRY, DO NOT WORK!

      if (cap.hasmstouch) self.css((self.ispage) ? $("html") : self.win, {
        '-ms-touch-action': 'none'
      });

      self.zindex = "auto";
      if (!self.ispage && self.opt.zindex == "auto") {
        self.zindex = getZIndex() || "auto";
      } else {
        self.zindex = self.opt.zindex;
      }

      if (!self.ispage && self.zindex != "auto") {
        if (self.zindex > globalmaxzindex) globalmaxzindex = self.zindex;
      }

      if (self.isie && self.zindex == 0 && self.opt.zindex == "auto") { // fix IE auto == 0
        self.zindex = "auto";
      }

      if (!self.ispage || (!cap.cantouch && !cap.isieold && !cap.isie9mobile)) {

        var cont = self.docscroll;
        if (self.ispage) cont = (self.haswrapper) ? self.win : self.doc;

        if (!cap.isie9mobile) self.css(cont, {
          'overflow-y': 'hidden'
        });

        if (self.ispage && cap.isie7) {
          if (self.doc[0].nodeName == 'BODY') self.css($("html"), {
            'overflow-y': 'hidden'
          }); //IE7 double scrollbar issue
          else if (self.doc[0].nodeName == 'HTML') self.css($("body"), {
            'overflow-y': 'hidden'
          }); //IE7 double scrollbar issue
        }

        if (cap.isios && !self.ispage && !self.haswrapper) self.css($("body"), {
          "-webkit-overflow-scrolling": "touch"
        }); //force hw acceleration

        var cursor = $(document.createElement('div'));
        cursor.css({
          position: "relative",
          top: 0,
          "float": "right",
          width: self.opt.cursorwidth,
          height: "0px",
          'background-color': self.opt.cursorcolor,
          border: self.opt.cursorborder,
          'background-clip': 'padding-box',
          '-webkit-border-radius': self.opt.cursorborderradius,
          '-moz-border-radius': self.opt.cursorborderradius,
          'border-radius': self.opt.cursorborderradius
        });

        cursor.hborder = parseFloat(cursor.outerHeight() - cursor.innerHeight());

        cursor.addClass('nicescroll-cursors');

        self.cursor = cursor;

        var rail = $(document.createElement('div'));
        rail.attr('id', self.id);
        rail.addClass('nicescroll-rails nicescroll-rails-vr');

        var v, a, kp = ["left","right","top","bottom"];  //**
        for (var n in kp) {
          a = kp[n];
          v = self.opt.railpadding[a];
          (v) ? rail.css("padding-"+a,v+"px") : self.opt.railpadding[a] = 0;
        }

        rail.append(cursor);

        rail.width = Math.max(parseFloat(self.opt.cursorwidth), cursor.outerWidth());
        rail.css({
          width: rail.width + "px",
          'zIndex': self.zindex,
          "background": self.opt.background,
          cursor: "default"
        });

        rail.visibility = true;
        rail.scrollable = true;

        rail.align = (self.opt.railalign == "left") ? 0 : 1;

        self.rail = rail;

        self.rail.drag = false;

        var zoom = false;
        if (self.opt.boxzoom && !self.ispage && !cap.isieold) {
          zoom = document.createElement('div');

          self.bind(zoom, "click", self.doZoom);
          self.bind(zoom, "mouseenter", function() {
            self.zoom.css('opacity', self.opt.cursoropacitymax);
          });
          self.bind(zoom, "mouseleave", function() {
            self.zoom.css('opacity', self.opt.cursoropacitymin);
          });

          self.zoom = $(zoom);
          self.zoom.css({
            "cursor": "pointer",
            'z-index': self.zindex,
            'backgroundImage': 'url(' + self.opt.scriptpath + 'zoomico.png)',
            'height': 18,
            'width': 18,
            'backgroundPosition': '0px 0px'
          });
          if (self.opt.dblclickzoom) self.bind(self.win, "dblclick", self.doZoom);
          if (cap.cantouch && self.opt.gesturezoom) {
            self.ongesturezoom = function(e) {
              if (e.scale > 1.5) self.doZoomIn(e);
              if (e.scale < 0.8) self.doZoomOut(e);
              return self.cancelEvent(e);
            };
            self.bind(self.win, "gestureend", self.ongesturezoom);
          }
        }

        // init HORIZ

        self.railh = false;
        var railh;

        if (self.opt.horizrailenabled) {

          self.css(cont, {
            'overflow-x': 'hidden'
          });

          var cursor = $(document.createElement('div'));
          cursor.css({
            position: "absolute",
            top: 0,
            height: self.opt.cursorwidth,
            width: "0px",
            'background-color': self.opt.cursorcolor,
            border: self.opt.cursorborder,
            'background-clip': 'padding-box',
            '-webkit-border-radius': self.opt.cursorborderradius,
            '-moz-border-radius': self.opt.cursorborderradius,
            'border-radius': self.opt.cursorborderradius
          });

          if (cap.isieold) cursor.css({'overflow':'hidden'});  //IE6 horiz scrollbar issue

          cursor.wborder = parseFloat(cursor.outerWidth() - cursor.innerWidth());

          cursor.addClass('nicescroll-cursors');

          self.cursorh = cursor;

          railh = $(document.createElement('div'));
          railh.attr('id', self.id + '-hr');
          railh.addClass('nicescroll-rails nicescroll-rails-hr');
          railh.height = Math.max(parseFloat(self.opt.cursorwidth), cursor.outerHeight());
          railh.css({
            height: railh.height + "px",
            'zIndex': self.zindex,
            "background": self.opt.background
          });

          railh.append(cursor);

          railh.visibility = true;
          railh.scrollable = true;

          railh.align = (self.opt.railvalign == "top") ? 0 : 1;

          self.railh = railh;

          self.railh.drag = false;

        }

        //

        if (self.ispage) {
          rail.css({
            position: "fixed",
            top: "0px",
            height: "100%"
          });
          (rail.align) ? rail.css({
            right: "0px"
          }): rail.css({
            left: "0px"
          });
          self.body.append(rail);
          if (self.railh) {
            railh.css({
              position: "fixed",
              left: "0px",
              width: "100%"
            });
            (railh.align) ? railh.css({
              bottom: "0px"
            }): railh.css({
              top: "0px"
            });
            self.body.append(railh);
          }
        } else {
          if (self.ishwscroll) {
            if (self.win.css('position') == 'static') self.css(self.win, {
              'position': 'relative'
            });
            var bd = (self.win[0].nodeName == 'HTML') ? self.body : self.win;
            $(bd).scrollTop(0).scrollLeft(0);  // fix rail position if content already scrolled
            if (self.zoom) {
              self.zoom.css({
                position: "absolute",
                top: 1,
                right: 0,
                "margin-right": rail.width + 4
              });
              bd.append(self.zoom);
            }
            rail.css({
              position: "absolute",
              top: 0
            });
            (rail.align) ? rail.css({
              right: 0
            }): rail.css({
              left: 0
            });
            bd.append(rail);
            if (railh) {
              railh.css({
                position: "absolute",
                left: 0,
                bottom: 0
              });
              (railh.align) ? railh.css({
                bottom: 0
              }): railh.css({
                top: 0
              });
              bd.append(railh);
            }
          } else {
            self.isfixed = (self.win.css("position") == "fixed");
            var rlpos = (self.isfixed) ? "fixed" : "absolute";

            if (!self.isfixed) self.viewport = self.getViewport(self.win[0]);
            if (self.viewport) {
              self.body = self.viewport;
              if ((/fixed|absolute/.test(self.viewport.css("position"))) == false) self.css(self.viewport, {
                "position": "relative"
              });
            }

            rail.css({
              position: rlpos
            });
            if (self.zoom) self.zoom.css({
              position: rlpos
            });
            self.updateScrollBar();
            self.body.append(rail);
            if (self.zoom) self.body.append(self.zoom);
            if (self.railh) {
              railh.css({
                position: rlpos
              });
              self.body.append(railh);
            }
          }

          if (cap.isios) self.css(self.win, {
            '-webkit-tap-highlight-color': 'rgba(0,0,0,0)',
            '-webkit-touch-callout': 'none'
          }); // prevent grey layer on click

          if (cap.isie && self.opt.disableoutline) self.win.attr("hideFocus", "true"); // IE, prevent dotted rectangle on focused div
          if (cap.iswebkit && self.opt.disableoutline) self.win.css({"outline": "none"});  // Webkit outline
          //if (cap.isopera&&self.opt.disableoutline) self.win.css({"outline":"0"});  // Opera 12- to test [TODO]

        }

        if (self.opt.autohidemode === false) {
          self.autohidedom = false;
          self.rail.css({
            opacity: self.opt.cursoropacitymax
          });
          if (self.railh) self.railh.css({
            opacity: self.opt.cursoropacitymax
          });
        } else if ((self.opt.autohidemode === true) || (self.opt.autohidemode === "leave")) {
          self.autohidedom = $().add(self.rail);
          if (cap.isie8) self.autohidedom = self.autohidedom.add(self.cursor);
          if (self.railh) self.autohidedom = self.autohidedom.add(self.railh);
          if (self.railh && cap.isie8) self.autohidedom = self.autohidedom.add(self.cursorh);
        } else if (self.opt.autohidemode == "scroll") {
          self.autohidedom = $().add(self.rail);
          if (self.railh) self.autohidedom = self.autohidedom.add(self.railh);
        } else if (self.opt.autohidemode == "cursor") {
          self.autohidedom = $().add(self.cursor);
          if (self.railh) self.autohidedom = self.autohidedom.add(self.cursorh);
        } else if (self.opt.autohidemode == "hidden") {
          self.autohidedom = false;
          self.hide();
          self.railslocked = false;
        }

        if (cap.isie9mobile) {

          self.scrollmom = new ScrollMomentumClass2D(self);

          self.onmangotouch = function() {
            var py = self.getScrollTop();
            var px = self.getScrollLeft();

            if ((py == self.scrollmom.lastscrolly) && (px == self.scrollmom.lastscrollx)) return true;

            var dfy = py - self.mangotouch.sy;
            var dfx = px - self.mangotouch.sx;
            var df = Math.round(Math.sqrt(Math.pow(dfx, 2) + Math.pow(dfy, 2)));
            if (df == 0) return;

            var dry = (dfy < 0) ? -1 : 1;
            var drx = (dfx < 0) ? -1 : 1;

            var tm = +new Date();
            if (self.mangotouch.lazy) clearTimeout(self.mangotouch.lazy);

            if (((tm - self.mangotouch.tm) > 80) || (self.mangotouch.dry != dry) || (self.mangotouch.drx != drx)) {
              self.scrollmom.stop();
              self.scrollmom.reset(px, py);
              self.mangotouch.sy = py;
              self.mangotouch.ly = py;
              self.mangotouch.sx = px;
              self.mangotouch.lx = px;
              self.mangotouch.dry = dry;
              self.mangotouch.drx = drx;
              self.mangotouch.tm = tm;
            } else {

              self.scrollmom.stop();
              self.scrollmom.update(self.mangotouch.sx - dfx, self.mangotouch.sy - dfy);
              self.mangotouch.tm = tm;

              var ds = Math.max(Math.abs(self.mangotouch.ly - py), Math.abs(self.mangotouch.lx - px));
              self.mangotouch.ly = py;
              self.mangotouch.lx = px;

              if (ds > 2) {
                self.mangotouch.lazy = setTimeout(function() {
                  self.mangotouch.lazy = false;
                  self.mangotouch.dry = 0;
                  self.mangotouch.drx = 0;
                  self.mangotouch.tm = 0;
                  self.scrollmom.doMomentum(30);
                }, 100);
              }
            }
          };

          var top = self.getScrollTop();
          var lef = self.getScrollLeft();
          self.mangotouch = {
            sy: top,
            ly: top,
            dry: 0,
            sx: lef,
            lx: lef,
            drx: 0,
            lazy: false,
            tm: 0
          };

          self.bind(self.docscroll, "scroll", self.onmangotouch);

        } else {

          if (cap.cantouch || self.istouchcapable || self.opt.touchbehavior || cap.hasmstouch) {

            self.scrollmom = new ScrollMomentumClass2D(self);

            self.ontouchstart = function(e) {
              if (e.pointerType && e.pointerType != 2 && e.pointerType != "touch") return false;

              self.hasmoving = false;

              if (!self.railslocked) {

                var tg;
                if (cap.hasmstouch) {
                  tg = (e.target) ? e.target : false;
                  while (tg) {
                    var nc = $(tg).getNiceScroll();
                    if ((nc.length > 0) && (nc[0].me == self.me)) break;
                    if (nc.length > 0) return false;
                    if ((tg.nodeName == 'DIV') && (tg.id == self.id)) break;
                    tg = (tg.parentNode) ? tg.parentNode : false;
                  }
                }

                self.cancelScroll();

                tg = self.getTarget(e);

                if (tg) {
                  var skp = (/INPUT/i.test(tg.nodeName)) && (/range/i.test(tg.type));
                  if (skp) return self.stopPropagation(e);
                }

                if (!("clientX" in e) && ("changedTouches" in e)) {
                  e.clientX = e.changedTouches[0].clientX;
                  e.clientY = e.changedTouches[0].clientY;
                }

                if (self.forcescreen) {
                  var le = e;
                  e = {
                    "original": (e.original) ? e.original : e
                  };
                  e.clientX = le.screenX;
                  e.clientY = le.screenY;
                }

                self.rail.drag = {
                  x: e.clientX,
                  y: e.clientY,
                  sx: self.scroll.x,
                  sy: self.scroll.y,
                  st: self.getScrollTop(),
                  sl: self.getScrollLeft(),
                  pt: 2,
                  dl: false
                };

                if (self.ispage || !self.opt.directionlockdeadzone) {
                  self.rail.drag.dl = "f";
                } else {

                  var view = {
                    w: $(window).width(),
                    h: $(window).height()
                  };

                  var page = {
                    w: Math.max(document.body.scrollWidth, document.documentElement.scrollWidth),
                    h: Math.max(document.body.scrollHeight, document.documentElement.scrollHeight)
                  };

                  var maxh = Math.max(0, page.h - view.h);
                  var maxw = Math.max(0, page.w - view.w);

                  if (!self.rail.scrollable && self.railh.scrollable) self.rail.drag.ck = (maxh > 0) ? "v" : false;
                  else if (self.rail.scrollable && !self.railh.scrollable) self.rail.drag.ck = (maxw > 0) ? "h" : false;
                  else self.rail.drag.ck = false;
                  if (!self.rail.drag.ck) self.rail.drag.dl = "f";
                }

                if (self.opt.touchbehavior && self.isiframe && cap.isie) {
                  var wp = self.win.position();
                  self.rail.drag.x += wp.left;
                  self.rail.drag.y += wp.top;
                }

                self.hasmoving = false;
                self.lastmouseup = false;
                self.scrollmom.reset(e.clientX, e.clientY);

                if (!cap.cantouch && !this.istouchcapable && !e.pointerType) {

                  var ip = (tg) ? /INPUT|SELECT|TEXTAREA/i.test(tg.nodeName) : false;
                  if (!ip) {
                    if (!self.ispage && cap.hasmousecapture) tg.setCapture();
                    if (self.opt.touchbehavior) {
                      if (tg.onclick && !(tg._onclick || false)) { // intercept DOM0 onclick event
                        tg._onclick = tg.onclick;
                        tg.onclick = function(e) {
                          if (self.hasmoving) return false;
                          tg._onclick.call(this, e);
                        };
                      }
                      return self.cancelEvent(e);
                    }
                    return self.stopPropagation(e);
                  }

                  if (/SUBMIT|CANCEL|BUTTON/i.test($(tg).attr('type'))) {
                    pc = {
                      "tg": tg,
                      "click": false
                    };
                    self.preventclick = pc;
                  }

                }
              }

            };

            self.ontouchend = function(e) {
              if (!self.rail.drag) return true;
              if (self.rail.drag.pt == 2) {
                if (e.pointerType && e.pointerType != 2 && e.pointerType != "touch") return false;
                self.scrollmom.doMomentum();
                self.rail.drag = false;
                if (self.hasmoving) {
                  self.lastmouseup = true;
                  self.hideCursor();
                  if (cap.hasmousecapture) document.releaseCapture();
                  if (!cap.cantouch) return self.cancelEvent(e);
                }
              }
              else if (self.rail.drag.pt == 1) {
                return self.onmouseup(e);
              }

            };

            var moveneedoffset = (self.opt.touchbehavior && self.isiframe && !cap.hasmousecapture);

            self.ontouchmove = function(e, byiframe) {

              if (!self.rail.drag) return false;

              if (e.targetTouches && self.opt.preventmultitouchscrolling) {
                if (e.targetTouches.length > 1) return false; // multitouch
              }

              if (e.pointerType && e.pointerType != 2 && e.pointerType != "touch") return false;

              if (self.rail.drag.pt == 2) {
                if (cap.cantouch && (cap.isios) && (typeof e.original == "undefined")) return true; // prevent ios "ghost" events by clickable elements

                self.hasmoving = true;

                if (self.preventclick && !self.preventclick.click) {
                  self.preventclick.click = self.preventclick.tg.onclick || false;
                  self.preventclick.tg.onclick = self.onpreventclick;
                }

                var ev = $.extend({
                  "original": e
                }, e);
                e = ev;

                if (("changedTouches" in e)) {
                  e.clientX = e.changedTouches[0].clientX;
                  e.clientY = e.changedTouches[0].clientY;
                }

                if (self.forcescreen) {
                  var le = e;
                  e = {
                    "original": (e.original) ? e.original : e
                  };
                  e.clientX = le.screenX;
                  e.clientY = le.screenY;
                }

                var ofy,ofx;
                ofx = ofy = 0;

                if (moveneedoffset && !byiframe) {
                  var wp = self.win.position();
                  ofx = -wp.left;
                  ofy = -wp.top;
                }

                var fy = e.clientY + ofy;
                var my = (fy - self.rail.drag.y);
                var fx = e.clientX + ofx;
                var mx = (fx - self.rail.drag.x);

                var ny = self.rail.drag.st - my;

                if (self.ishwscroll && self.opt.bouncescroll) {
                  if (ny < 0) {
                    ny = Math.round(ny / 2);
                    //                    fy = 0;
                  } else if (ny > self.page.maxh) {
                    ny = self.page.maxh + Math.round((ny - self.page.maxh) / 2);
                    //                    fy = 0;
                  }
                } else {
                  if (ny < 0) {
                    ny = 0;
                    fy = 0;
                  }
                  if (ny > self.page.maxh) {
                    ny = self.page.maxh;
                    fy = 0;
                  }
                }

                var nx;
                if (self.railh && self.railh.scrollable) {
                  nx = (self.isrtlmode) ? mx - self.rail.drag.sl : self.rail.drag.sl - mx;

                  if (self.ishwscroll && self.opt.bouncescroll) {
                    if (nx < 0) {
                      nx = Math.round(nx / 2);
                      //                      fx = 0;
                    } else if (nx > self.page.maxw) {
                      nx = self.page.maxw + Math.round((nx - self.page.maxw) / 2);
                      //                      fx = 0;
                    }
                  } else {
                    if (nx < 0) {
                      nx = 0;
                      fx = 0;
                    }
                    if (nx > self.page.maxw) {
                      nx = self.page.maxw;
                      fx = 0;
                    }
                  }

                }

                var grabbed = false;
                if (self.rail.drag.dl) {
                  grabbed = true;
                  if (self.rail.drag.dl == "v") nx = self.rail.drag.sl;
                  else if (self.rail.drag.dl == "h") ny = self.rail.drag.st;
                } else {
                  var ay = Math.abs(my);
                  var ax = Math.abs(mx);
                  var dz = self.opt.directionlockdeadzone;
                  if (self.rail.drag.ck == "v") {
                    if (ay > dz && (ax <= (ay * 0.3))) {
                      self.rail.drag = false;
                      return true;
                    } else if (ax > dz) {
                      self.rail.drag.dl = "f";
                      $("body").scrollTop($("body").scrollTop()); // stop iOS native scrolling (when active javascript has blocked)
                    }
                  } else if (self.rail.drag.ck == "h") {
                    if (ax > dz && (ay <= (ax * 0.3))) {
                      self.rail.drag = false;
                      return true;
                    } else if (ay > dz) {
                      self.rail.drag.dl = "f";
                      $("body").scrollLeft($("body").scrollLeft()); // stop iOS native scrolling (when active javascript has blocked)
                    }
                  }
                }

                self.synched("touchmove", function() {
                  if (self.rail.drag && (self.rail.drag.pt == 2)) {
                    if (self.prepareTransition) self.prepareTransition(0);
                    if (self.rail.scrollable) self.setScrollTop(ny);
                    self.scrollmom.update(fx, fy);
                    if (self.railh && self.railh.scrollable) {
                      self.setScrollLeft(nx);
                      self.showCursor(ny, nx);
                    } else {
                      self.showCursor(ny);
                    }
                    if (cap.isie10) document.selection.clear();
                  }
                });

                if (cap.ischrome && self.istouchcapable) grabbed = false; //chrome touch emulation doesn't like!
                if (grabbed) return self.cancelEvent(e);
              }
              else if (self.rail.drag.pt == 1) { // drag on cursor
                return self.onmousemove(e);
              }

            };

          }

          self.onmousedown = function(e, hronly) {
            if (self.rail.drag && self.rail.drag.pt != 1) return;
            if (self.railslocked) return self.cancelEvent(e);
            self.cancelScroll();
            self.rail.drag = {
              x: e.clientX,
              y: e.clientY,
              sx: self.scroll.x,
              sy: self.scroll.y,
              pt: 1,
              hr: (!!hronly)
            };
            var tg = self.getTarget(e);
            if (!self.ispage && cap.hasmousecapture) tg.setCapture();
            if (self.isiframe && !cap.hasmousecapture) {
              self.saved.csspointerevents = self.doc.css("pointer-events");
              self.css(self.doc, {
                "pointer-events": "none"
              });
            }
            self.hasmoving = false;
            return self.cancelEvent(e);
          };

          self.onmouseup = function(e) {
            if (self.rail.drag) {
              if (self.rail.drag.pt != 1) return true;
              if (cap.hasmousecapture) document.releaseCapture();
              if (self.isiframe && !cap.hasmousecapture) self.doc.css("pointer-events", self.saved.csspointerevents);
              self.rail.drag = false;
              //if (!self.rail.active) self.hideCursor();
              if (self.hasmoving) self.triggerScrollEnd(); // TODO - check &&!self.scrollrunning
              return self.cancelEvent(e);
            }
          };

          self.onmousemove = function(e) {
            if (self.rail.drag) {
              if (self.rail.drag.pt != 1) return;

              if (cap.ischrome && e.which == 0) return self.onmouseup(e);

              self.cursorfreezed = true;
              self.hasmoving = true;

              if (self.rail.drag.hr) {
                self.scroll.x = self.rail.drag.sx + (e.clientX - self.rail.drag.x);
                if (self.scroll.x < 0) self.scroll.x = 0;
                var mw = self.scrollvaluemaxw;
                if (self.scroll.x > mw) self.scroll.x = mw;
              } else {
                self.scroll.y = self.rail.drag.sy + (e.clientY - self.rail.drag.y);
                if (self.scroll.y < 0) self.scroll.y = 0;
                var my = self.scrollvaluemax;
                if (self.scroll.y > my) self.scroll.y = my;
              }

              self.synched('mousemove', function() {
                if (self.rail.drag && (self.rail.drag.pt == 1)) {
                  self.showCursor();
                  if (self.rail.drag.hr) {
                    if (self.hasreversehr) {
                      self.doScrollLeft(self.scrollvaluemaxw-Math.round(self.scroll.x * self.scrollratio.x), self.opt.cursordragspeed);
                    } else {
                      self.doScrollLeft(Math.round(self.scroll.x * self.scrollratio.x), self.opt.cursordragspeed);
                    }
                  }
                  else self.doScrollTop(Math.round(self.scroll.y * self.scrollratio.y), self.opt.cursordragspeed);
                }
              });

              return self.cancelEvent(e);
            }
            else {
              self.checkarea = 0;
            }
          };

          if (cap.cantouch || self.opt.touchbehavior) {

            self.onpreventclick = function(e) {
              if (self.preventclick) {
                self.preventclick.tg.onclick = self.preventclick.click;
                self.preventclick = false;
                return self.cancelEvent(e);
              }
            }

            self.bind(self.win, "mousedown", self.ontouchstart); // control content dragging

            self.onclick = (cap.isios) ? false : function(e) {
              if (self.lastmouseup) {
                self.lastmouseup = false;
                return self.cancelEvent(e);
              } else {
                return true;
              }
            };

            if (self.opt.grabcursorenabled && cap.cursorgrabvalue) {
              self.css((self.ispage) ? self.doc : self.win, {
                'cursor': cap.cursorgrabvalue
              });
              self.css(self.rail, {
                'cursor': cap.cursorgrabvalue
              });
            }

          } else {

            var checkSelectionScroll = function(e) {
              if (!self.selectiondrag) return;

              if (e) {
                var ww = self.win.outerHeight();
                var df = (e.pageY - self.selectiondrag.top);
                if (df > 0 && df < ww) df = 0;
                if (df >= ww) df -= ww;
                self.selectiondrag.df = df;
              }
              if (self.selectiondrag.df == 0) return;

              var rt = -Math.floor(self.selectiondrag.df / 6) * 2;
              self.doScrollBy(rt);

              self.debounced("doselectionscroll", function() {
                checkSelectionScroll()
              }, 50);
            };

            if ("getSelection" in document) { // A grade - Major browsers
              self.hasTextSelected = function() {
                return (document.getSelection().rangeCount > 0);
              };
            } else if ("selection" in document) { //IE9-
              self.hasTextSelected = function() {
                return (document.selection.type != "None");
              };
            } else {
              self.hasTextSelected = function() { // no support
                return false;
              };
            }

            self.onselectionstart = function(e) {
/*  More testing - severe chrome issues
              if (!self.haswrapper&&(e.which&&e.which==2)) {  // fool browser to manage middle button scrolling
                self.win.css({'overflow':'auto'});
                setTimeout(function(){
                  self.win.css({'overflow':''});
                },10);
                return true;
              }
*/
              if (self.ispage) return;
              self.selectiondrag = self.win.offset();
            };

            self.onselectionend = function(e) {
              self.selectiondrag = false;
            };
            self.onselectiondrag = function(e) {
              if (!self.selectiondrag) return;
              if (self.hasTextSelected()) self.debounced("selectionscroll", function() {
                checkSelectionScroll(e)
              }, 250);
            };


          }

          if (cap.hasw3ctouch) { //IE11+
            self.css(self.rail, {
              'touch-action': 'none'
            });
            self.css(self.cursor, {
              'touch-action': 'none'
            });
            self.bind(self.win, "pointerdown", self.ontouchstart);
            self.bind(document, "pointerup", self.ontouchend);
            self.bind(document, "pointermove", self.ontouchmove);
          } else if (cap.hasmstouch) { //IE10
            self.css(self.rail, {
              '-ms-touch-action': 'none'
            });
            self.css(self.cursor, {
              '-ms-touch-action': 'none'
            });
            self.bind(self.win, "MSPointerDown", self.ontouchstart);
            self.bind(document, "MSPointerUp", self.ontouchend);
            self.bind(document, "MSPointerMove", self.ontouchmove);
            self.bind(self.cursor, "MSGestureHold", function(e) {
              e.preventDefault()
            });
            self.bind(self.cursor, "contextmenu", function(e) {
              e.preventDefault()
            });
          } else if (this.istouchcapable) { //desktop with screen touch enabled
            self.bind(self.win, "touchstart", self.ontouchstart);
            self.bind(document, "touchend", self.ontouchend);
            self.bind(document, "touchcancel", self.ontouchend);
            self.bind(document, "touchmove", self.ontouchmove);
          }


          if (self.opt.cursordragontouch || (!cap.cantouch && !self.opt.touchbehavior)) {

            self.rail.css({
              "cursor": "default"
            });
            self.railh && self.railh.css({
              "cursor": "default"
            });

            self.jqbind(self.rail, "mouseenter", function() {
              if (!self.ispage && !self.win.is(":visible")) return false;
              if (self.canshowonmouseevent) self.showCursor();
              self.rail.active = true;
            });
            self.jqbind(self.rail, "mouseleave", function() {
              self.rail.active = false;
              if (!self.rail.drag) self.hideCursor();
            });

            if (self.opt.sensitiverail) {
              self.bind(self.rail, "click", function(e) {
                self.doRailClick(e, false, false)
              });
              self.bind(self.rail, "dblclick", function(e) {
                self.doRailClick(e, true, false)
              });
              self.bind(self.cursor, "click", function(e) {
                self.cancelEvent(e)
              });
              self.bind(self.cursor, "dblclick", function(e) {
                self.cancelEvent(e)
              });
            }

            if (self.railh) {
              self.jqbind(self.railh, "mouseenter", function() {
                if (!self.ispage && !self.win.is(":visible")) return false;
                if (self.canshowonmouseevent) self.showCursor();
                self.rail.active = true;
              });
              self.jqbind(self.railh, "mouseleave", function() {
                self.rail.active = false;
                if (!self.rail.drag) self.hideCursor();
              });

              if (self.opt.sensitiverail) {
                self.bind(self.railh, "click", function(e) {
                  self.doRailClick(e, false, true)
                });
                self.bind(self.railh, "dblclick", function(e) {
                  self.doRailClick(e, true, true)
                });
                self.bind(self.cursorh, "click", function(e) {
                  self.cancelEvent(e)
                });
                self.bind(self.cursorh, "dblclick", function(e) {
                  self.cancelEvent(e)
                });
              }

            }

          }

          if (!cap.cantouch && !self.opt.touchbehavior) {

            self.bind((cap.hasmousecapture) ? self.win : document, "mouseup", self.onmouseup);
            self.bind(document, "mousemove", self.onmousemove);
            if (self.onclick) self.bind(document, "click", self.onclick);

            self.bind(self.cursor, "mousedown", self.onmousedown);
            self.bind(self.cursor, "mouseup", self.onmouseup);

            if (self.railh) {
              self.bind(self.cursorh, "mousedown", function(e) {
                self.onmousedown(e, true)
              });
              self.bind(self.cursorh, "mouseup", self.onmouseup);
            }

            if (!self.ispage && self.opt.enablescrollonselection) {
              self.bind(self.win[0], "mousedown", self.onselectionstart);
              self.bind(document, "mouseup", self.onselectionend);
              self.bind(self.cursor, "mouseup", self.onselectionend);
              if (self.cursorh) self.bind(self.cursorh, "mouseup", self.onselectionend);
              self.bind(document, "mousemove", self.onselectiondrag);
            }

            if (self.zoom) {
              self.jqbind(self.zoom, "mouseenter", function() {
                if (self.canshowonmouseevent) self.showCursor();
                self.rail.active = true;
              });
              self.jqbind(self.zoom, "mouseleave", function() {
                self.rail.active = false;
                if (!self.rail.drag) self.hideCursor();
              });
            }

          } else {

            self.bind((cap.hasmousecapture) ? self.win : document, "mouseup", self.ontouchend);
            self.bind(document, "mousemove", self.ontouchmove);
            if (self.onclick) self.bind(document, "click", self.onclick);

            if (self.opt.cursordragontouch) {
              self.bind(self.cursor, "mousedown", self.onmousedown);
              self.bind(self.cursor, "mouseup", self.onmouseup);
              //self.bind(self.cursor, "mousemove", self.onmousemove);
              self.cursorh && self.bind(self.cursorh, "mousedown", function(e) {
                self.onmousedown(e, true)
              });
              //self.cursorh && self.bind(self.cursorh, "mousemove", self.onmousemove);
              self.cursorh && self.bind(self.cursorh, "mouseup", self.onmouseup);
            }

          }

          if (self.opt.enablemousewheel) {
            if (!self.isiframe) self.bind((cap.isie && self.ispage) ? document : self.win /*self.docscroll*/ , "mousewheel", self.onmousewheel);
            self.bind(self.rail, "mousewheel", self.onmousewheel);
            if (self.railh) self.bind(self.railh, "mousewheel", self.onmousewheelhr);
          }

          if (!self.ispage && !cap.cantouch && !(/HTML|^BODY/.test(self.win[0].nodeName))) {
            if (!self.win.attr("tabindex")) self.win.attr({
              "tabindex": tabindexcounter++
            });

            self.jqbind(self.win, "focus", function(e) {
              domfocus = (self.getTarget(e)).id || true;
              self.hasfocus = true;
              if (self.canshowonmouseevent) self.noticeCursor();
            });
            self.jqbind(self.win, "blur", function(e) {
              domfocus = false;
              self.hasfocus = false;
            });

            self.jqbind(self.win, "mouseenter", function(e) {
              mousefocus = (self.getTarget(e)).id || true;
              self.hasmousefocus = true;
              if (self.canshowonmouseevent) self.noticeCursor();
            });
            self.jqbind(self.win, "mouseleave", function() {
              mousefocus = false;
              self.hasmousefocus = false;
              if (!self.rail.drag) self.hideCursor();
            });

          }

        } // !ie9mobile

        //Thanks to http://www.quirksmode.org !!
        self.onkeypress = function(e) {
          if (self.railslocked && self.page.maxh == 0) return true;

          e = (e) ? e : window.e;
          var tg = self.getTarget(e);
          if (tg && /INPUT|TEXTAREA|SELECT|OPTION/.test(tg.nodeName)) {
            var tp = tg.getAttribute('type') || tg.type || false;
            if ((!tp) || !(/submit|button|cancel/i.tp)) return true;
          }

          if ($(tg).attr('contenteditable')) return true;

          if (self.hasfocus || (self.hasmousefocus && !domfocus) || (self.ispage && !domfocus && !mousefocus)) {
            var key = e.keyCode;

            if (self.railslocked && key != 27) return self.cancelEvent(e);

            var ctrl = e.ctrlKey || false;
            var shift = e.shiftKey || false;

            var ret = false;
            switch (key) {
              case 38:
              case 63233: //safari
                self.doScrollBy(24 * 3);
                ret = true;
                break;
              case 40:
              case 63235: //safari
                self.doScrollBy(-24 * 3);
                ret = true;
                break;
              case 37:
              case 63232: //safari
                if (self.railh) {
                  (ctrl) ? self.doScrollLeft(0): self.doScrollLeftBy(24 * 3);
                  ret = true;
                }
                break;
              case 39:
              case 63234: //safari
                if (self.railh) {
                  (ctrl) ? self.doScrollLeft(self.page.maxw): self.doScrollLeftBy(-24 * 3);
                  ret = true;
                }
                break;
              case 33:
              case 63276: // safari
                self.doScrollBy(self.view.h);
                ret = true;
                break;
              case 34:
              case 63277: // safari
                self.doScrollBy(-self.view.h);
                ret = true;
                break;
              case 36:
              case 63273: // safari
                (self.railh && ctrl) ? self.doScrollPos(0, 0): self.doScrollTo(0);
                ret = true;
                break;
              case 35:
              case 63275: // safari
                (self.railh && ctrl) ? self.doScrollPos(self.page.maxw, self.page.maxh): self.doScrollTo(self.page.maxh);
                ret = true;
                break;
              case 32:
                if (self.opt.spacebarenabled) {
                  (shift) ? self.doScrollBy(self.view.h): self.doScrollBy(-self.view.h);
                  ret = true;
                }
                break;
              case 27: // ESC
                if (self.zoomactive) {
                  self.doZoom();
                  ret = true;
                }
                break;
            }
            if (ret) return self.cancelEvent(e);
          }
        };

        if (self.opt.enablekeyboard) self.bind(document, (cap.isopera && !cap.isopera12) ? "keypress" : "keydown", self.onkeypress);

        self.bind(document, "keydown", function(e) {
          var ctrl = e.ctrlKey || false;
          if (ctrl) self.wheelprevented = true;
        });
        self.bind(document, "keyup", function(e) {
          var ctrl = e.ctrlKey || false;
          if (!ctrl) self.wheelprevented = false;
        });
        self.bind(window,"blur",function(e){
          self.wheelprevented = false;
        });

        self.bind(window, 'resize', self.lazyResize);
        self.bind(window, 'orientationchange', self.lazyResize);

        self.bind(window, "load", self.lazyResize);

          //此处修复了chrome26的一个bug  chrome26已经是老版本了，不需要支持了 https://github.com/inuyaksa/jquery.nicescroll/issues/106
        //if (cap.ischrome && !self.ispage && !self.haswrapper) { //chrome void scrollbar bug - it persists in version 26
        //  var tmp = self.win.attr("style");
        //  var ww = parseFloat(self.win.css("width")) + 1;
        //  self.win.css('width', ww);
        //  self.synched("chromefix", function() {
        //    self.win.attr("style", tmp)
        //  });
        //}


        // Trying a cross-browser implementation - good luck!

        self.onAttributeChange = function(e) {
          self.lazyResize(self.isieold ? 250 : 30);
        };

        if (ClsMutationObserver !== false) {
          self.observerbody = new ClsMutationObserver(function(mutations) {
            mutations.forEach(function(mut){
              if (mut.type=="attributes") {
                  var $body = $("body");
                return ($body.hasClass("modal-open") && !$body[0].contains($('.ui-dialog')[0])) ? self.hide() : self.show();  // Support for Bootstrap modal; Added check if the nice scroll element is inside a modal
              }
            });
            if (document.body.scrollHeight!=self.page.maxh) return self.lazyResize(30);
          });
          self.observerbody.observe(document.body, {
            childList: true,
            subtree: true,
            characterData: false,
            attributes: true,
            attributeFilter: ['class']
          });
        }

        if (!self.ispage && !self.haswrapper) {
          // redesigned MutationObserver for Chrome18+/Firefox14+/iOS6+ with support for: remove div, add/remove content
          if (ClsMutationObserver !== false) {
            self.observer = new ClsMutationObserver(function(mutations) {
              mutations.forEach(self.onAttributeChange);
            });
            self.observer.observe(self.win[0], {
              childList: true,
              characterData: false,
              attributes: true,
              subtree: false
            });
            self.observerremover = new ClsMutationObserver(function(mutations) {
              mutations.forEach(function(mo) {
                if (mo.removedNodes.length > 0) {
                  for (var dd in mo.removedNodes) {
                    if (!!self && (mo.removedNodes[dd] == self.win[0])) return self.remove();
                  }
                }
              });
            });
            self.observerremover.observe(self.win[0].parentNode, {
              childList: true,
              characterData: false,
              attributes: false,
              subtree: false
            });
          } else {
            self.bind(self.win, (cap.isie && !cap.isie9) ? "propertychange" : "DOMAttrModified", self.onAttributeChange);
            if (cap.isie9) self.win[0].attachEvent("onpropertychange", self.onAttributeChange); //IE9 DOMAttrModified bug
            self.bind(self.win, "DOMNodeRemoved", function(e) {
              if (e.target == self.win[0]) self.remove();
            });
          }
        }

        //

        if (!self.ispage && self.opt.boxzoom) self.bind(window, "resize", self.resizeZoom);
				if (self.istextarea) {
					self.bind(self.win, "keydown", self.lazyResize);
					self.bind(self.win, "mouseup", self.lazyResize);
				}

        //        self.checkrtlmode = true;
        self.lazyResize(30);

      }

      if (this.doc[0].nodeName == 'IFRAME') {
        var oniframeload = function() {
          self.iframexd = false;
          var doc;
          try {
            doc = 'contentDocument' in this ? this.contentDocument : this.contentWindow.document;
            var a = doc.domain;
          } catch (e) {
            self.iframexd = true;
            doc = false
          }

          if (self.iframexd) {
            if ("console" in window) console.log('NiceScroll error: policy restriced iframe');
            return true; //cross-domain - I can't manage this
          }

          self.forcescreen = true;

          if (self.isiframe) {
            self.iframe = {
              "doc": $(doc),
              "html": self.doc.contents().find('html')[0],
              "body": self.doc.contents().find('body')[0]
            };
            self.getContentSize = function() {
              return {
                w: Math.max(self.iframe.html.scrollWidth, self.iframe.body.scrollWidth),
                h: Math.max(self.iframe.html.scrollHeight, self.iframe.body.scrollHeight)
              };
            };
            self.docscroll = $(self.iframe.body); //$(this.contentWindow);
          }

          if (!cap.isios && self.opt.iframeautoresize && !self.isiframe) {
            self.win.scrollTop(0); // reset position
            self.doc.height(""); //reset height to fix browser bug
            var hh = Math.max(doc.getElementsByTagName('html')[0].scrollHeight, doc.body.scrollHeight);
            self.doc.height(hh);
          }
          self.lazyResize(30);

          if (cap.isie7) self.css($(self.iframe.html), {
            'overflow-y': 'hidden'
          });
          self.css($(self.iframe.body), {
            'overflow-y': 'hidden'
          });

          if (cap.isios && self.haswrapper) {
            self.css($(doc.body), {
              '-webkit-transform': 'translate3d(0,0,0)'
            }); // avoid iFrame content clipping - thanks to http://blog.derraab.com/2012/04/02/avoid-iframe-content-clipping-with-css-transform-on-ios/
          }

          if ('contentWindow' in this) {
            self.bind(this.contentWindow, "scroll", self.onscroll); //IE8 & minor
          } else {
            self.bind(doc, "scroll", self.onscroll);
          }

          if (self.opt.enablemousewheel) {
            self.bind(doc, "mousewheel", self.onmousewheel);
          }

          if (self.opt.enablekeyboard) self.bind(doc, (cap.isopera) ? "keypress" : "keydown", self.onkeypress);

          if (cap.cantouch || self.opt.touchbehavior) {
            self.bind(doc, "mousedown", self.ontouchstart);
            self.bind(doc, "mousemove", function(e) {
              return self.ontouchmove(e, true)
            });
            if (self.opt.grabcursorenabled && cap.cursorgrabvalue) self.css($(doc.body), {
              'cursor': cap.cursorgrabvalue
            });
          }

          self.bind(doc, "mouseup", self.ontouchend);

          if (self.zoom) {
            if (self.opt.dblclickzoom) self.bind(doc, 'dblclick', self.doZoom);
            if (self.ongesturezoom) self.bind(doc, "gestureend", self.ongesturezoom);
          }
        };

        if (this.doc[0].readyState && this.doc[0].readyState == "complete") {
          setTimeout(function() {
            oniframeload.call(self.doc[0], false)
          }, 500);
        }
        self.bind(this.doc, "load", oniframeload);

      }

    };

    this.showCursor = function(py, px) {
      if (self.cursortimeout) {
        clearTimeout(self.cursortimeout);
        self.cursortimeout = 0;
      }
      if (!self.rail) return;
      if (self.autohidedom) {
        self.autohidedom.stop().css({
          opacity: self.opt.cursoropacitymax
        });
        self.cursoractive = true;
      }

      if (!self.rail.drag || self.rail.drag.pt != 1) {
        if ((typeof py != "undefined") && (py !== false)) {
          self.scroll.y = Math.round(py * 1 / self.scrollratio.y);
        }
        if (typeof px != "undefined") {
          self.scroll.x = Math.round(px * 1 / self.scrollratio.x);
        }
      }

      self.cursor.css({
        height: self.cursorheight,
        top: self.scroll.y
      });
      if (self.cursorh) {
        var lx = (self.hasreversehr) ? self.scrollvaluemaxw-self.scroll.x : self.scroll.x;
        (!self.rail.align && self.rail.visibility) ? self.cursorh.css({
          width: self.cursorwidth,
          left: lx + self.rail.width
        }): self.cursorh.css({
          width: self.cursorwidth,
          left: lx
        });
        self.cursoractive = true;
      }

      if (self.zoom) self.zoom.stop().css({
        opacity: self.opt.cursoropacitymax
      });
    };

    this.hideCursor = function(tm) {
      if (self.cursortimeout) return;
      if (!self.rail) return;
      if (!self.autohidedom) return;
      if (self.hasmousefocus && self.opt.autohidemode == "leave") return;
      self.cursortimeout = setTimeout(function() {
        if (!self.rail.active || !self.showonmouseevent) {
          self.autohidedom.stop().animate({
            opacity: self.opt.cursoropacitymin
          });
          if (self.zoom) self.zoom.stop().animate({
            opacity: self.opt.cursoropacitymin
          });
          self.cursoractive = false;
        }
        self.cursortimeout = 0;
      }, tm || self.opt.hidecursordelay);
    };

    this.noticeCursor = function(tm, py, px) {
      self.showCursor(py, px);
      if (!self.rail.active) self.hideCursor(tm);
    };

    this.getContentSize =
      (self.ispage) ?
      function() {
        return {
          w: Math.max(document.body.scrollWidth, document.documentElement.scrollWidth),
          h: Math.max(document.body.scrollHeight, document.documentElement.scrollHeight)
        }
      } : (self.haswrapper) ?
      function() {
        return {
          w: self.doc.outerWidth() + parseInt(self.win.css('paddingLeft')) + parseInt(self.win.css('paddingRight')),
          h: self.doc.outerHeight() + parseInt(self.win.css('paddingTop')) + parseInt(self.win.css('paddingBottom'))
        }
      } : function() {
        return {
          w: self.docscroll[0].scrollWidth,
          h: self.docscroll[0].scrollHeight
        }
      };

    this.onResize = function(e, page) {

      if (!self || !self.win) return false;

      if (!self.haswrapper && !self.ispage) {
        if (self.win.css('display') == 'none') {
          if (self.visibility) self.hideRail().hideRailHr();
          return false;
        } else {
          if (!self.hidden && !self.visibility) self.showRail().showRailHr();
        }
      }

      var premaxh = self.page.maxh;
      var premaxw = self.page.maxw;

      var preview = {
        h: self.view.h,
        w: self.view.w
      };

      self.view = {
        w: (self.ispage) ? self.win.width() : parseInt(self.win[0].clientWidth),
        h: (self.ispage) ? self.win.height() : parseInt(self.win[0].clientHeight)
      };

      self.page = (page) ? page : self.getContentSize();

      self.page.maxh = Math.max(0, self.page.h - self.view.h);
      self.page.maxw = Math.max(0, self.page.w - self.view.w);

      if ((self.page.maxh == premaxh) && (self.page.maxw == premaxw) && (self.view.w == preview.w) && (self.view.h == preview.h)) {
        // test position
        if (!self.ispage) {
          var pos = self.win.offset();
          if (self.lastposition) {
            var lst = self.lastposition;
            if ((lst.top == pos.top) && (lst.left == pos.left)) return self; //nothing to do
          }
          self.lastposition = pos;
        } else {
          return self; //nothing to do
        }
      }

      if (self.page.maxh == 0) {
        self.hideRail();
        self.scrollvaluemax = 0;
        self.scroll.y = 0;
        self.scrollratio.y = 0;
        self.cursorheight = 0;
        self.setScrollTop(0);
        if (self.rail) self.rail.scrollable = false;
      } else {
        self.page.maxh -= (self.opt.railpadding.top + self.opt.railpadding.bottom);  //**
        self.rail.scrollable = true;
      }

      if (self.page.maxw == 0) {
        self.hideRailHr();
        self.scrollvaluemaxw = 0;
        self.scroll.x = 0;
        self.scrollratio.x = 0;
        self.cursorwidth = 0;
        self.setScrollLeft(0);
        if (self.railh) {
          self.railh.scrollable = false;
        }
      } else {
          self.page.maxw -= (self.opt.railpadding.left + self.opt.railpadding.right);  //**
          if (self.railh) self.railh.scrollable = (self.opt.horizrailenabled);
      }

      self.railslocked = (self.locked) || ((self.page.maxh == 0) && (self.page.maxw == 0));
      if (self.railslocked) {
        if (!self.ispage) self.updateScrollBar(self.view);
        return false;
      }

      if (!self.hidden && !self.visibility) {
        self.showRail().showRailHr();
      }
      else if (self.railh && (!self.hidden && !self.railh.visibility)) self.showRailHr();

      if (self.istextarea && self.win.css('resize') && self.win.css('resize') != 'none') self.view.h -= 20;

      self.cursorheight = Math.min(self.view.h, Math.round(self.view.h * (self.view.h / self.page.h)));
      self.cursorheight = (self.opt.cursorfixedheight) ? self.opt.cursorfixedheight : Math.max(self.opt.cursorminheight, self.cursorheight);

      self.cursorwidth = Math.min(self.view.w, Math.round(self.view.w * (self.view.w / self.page.w)));
      self.cursorwidth = (self.opt.cursorfixedheight) ? self.opt.cursorfixedheight : Math.max(self.opt.cursorminheight, self.cursorwidth);

      self.scrollvaluemax = self.view.h - self.cursorheight - self.cursor.hborder - (self.opt.railpadding.top + self.opt.railpadding.bottom);  //**

      if (self.railh) {
        self.railh.width = (self.page.maxh > 0) ? (self.view.w - self.rail.width) : self.view.w;
        self.scrollvaluemaxw = self.railh.width - self.cursorwidth - self.cursorh.wborder - (self.opt.railpadding.left + self.opt.railpadding.right);  //**
      }

      /*
      if (self.checkrtlmode&&self.railh) {
        self.checkrtlmode = false;
        if (self.opt.rtlmode&&self.scroll.x==0) self.setScrollLeft(self.page.maxw);
      }
*/

      if (!self.ispage) self.updateScrollBar(self.view);

      self.scrollratio = {
        x: (self.page.maxw / self.scrollvaluemaxw),
        y: (self.page.maxh / self.scrollvaluemax)
      };

      var sy = self.getScrollTop();
      if (sy > self.page.maxh) {
        self.doScrollTop(self.page.maxh);
      } else {
        self.scroll.y = Math.round(self.getScrollTop() * (1 / self.scrollratio.y));
        self.scroll.x = Math.round(self.getScrollLeft() * (1 / self.scrollratio.x));
        if (self.cursoractive) self.noticeCursor();
      }

      if (self.scroll.y && (self.getScrollTop() == 0)) self.doScrollTo(Math.floor(self.scroll.y * self.scrollratio.y));

      return self;
    };

    this.resize = self.onResize;

    this.lazyResize = function(tm) { // event debounce
      tm = (isNaN(tm)) ? 30 : tm;
      self.debounced('resize', self.resize, tm);
      return self;
    };

    // modified by MDN https://developer.mozilla.org/en-US/docs/DOM/Mozilla_event_reference/wheel
    function _modernWheelEvent(dom, name, fn, bubble) {
      self._bind(dom, name, function(e) {
        var e = (e) ? e : window.event;
        var event = {
          original: e,
          target: e.target || e.srcElement,
          type: "wheel",
          deltaMode: e.type == "MozMousePixelScroll" ? 0 : 1,
          deltaX: 0,
          deltaZ: 0,
          preventDefault: function() {
            e.preventDefault ? e.preventDefault() : e.returnValue = false;
            return false;
          },
          stopImmediatePropagation: function() {
            (e.stopImmediatePropagation) ? e.stopImmediatePropagation(): e.cancelBubble = true;
          }
        };

        if (name == "mousewheel") {
          event.deltaY = -1 / 40 * e.wheelDelta;
          e.wheelDeltaX && (event.deltaX = -1 / 40 * e.wheelDeltaX);
        } else {
          event.deltaY = e.detail;
        }

        return fn.call(dom, event);
      }, bubble);
    };



    this.jqbind = function(dom, name, fn) { // use jquery bind for non-native events (mouseenter/mouseleave)
      self.events.push({
        e: dom,
        n: name,
        f: fn,
        q: true
      });
      $(dom).bind(name, fn);
    };

    this.bind = function(dom, name, fn, bubble) { // touch-oriented & fixing jquery bind
      var el = ("jquery" in dom) ? dom[0] : dom;

      if (name == 'mousewheel') {
        if ("onwheel" in self.win) { // modern brosers & IE9 detection fix
          self._bind(el, "wheel", fn, bubble || false);
        } else {
          var wname = (typeof document.onmousewheel != "undefined") ? "mousewheel" : "DOMMouseScroll"; // older IE/Firefox
          _modernWheelEvent(el, wname, fn, bubble || false);
          if (wname == "DOMMouseScroll") _modernWheelEvent(el, "MozMousePixelScroll", fn, bubble || false); // Firefox legacy
        }
      } else if (el.addEventListener) {
        if (cap.cantouch && /mouseup|mousedown|mousemove/.test(name)) { // touch device support
          var tt = (name == 'mousedown') ? 'touchstart' : (name == 'mouseup') ? 'touchend' : 'touchmove';
          self._bind(el, tt, function(e) {
            if (e.touches) {
              if (e.touches.length < 2) {
                var ev = (e.touches.length) ? e.touches[0] : e;
                ev.original = e;
                fn.call(this, ev);
              }
            } else if (e.changedTouches) {
              var ev = e.changedTouches[0];
              ev.original = e;
              fn.call(this, ev);
            } //blackberry
          }, bubble || false);
        }
        self._bind(el, name, fn, bubble || false);
        if (cap.cantouch && name == "mouseup") self._bind(el, "touchcancel", fn, bubble || false);
      } else {
        self._bind(el, name, function(e) {
          e = e || window.event || false;
          if (e) {
            if (e.srcElement) e.target = e.srcElement;
          }
          if (!("pageY" in e)) {
            e.pageX = e.clientX + document.documentElement.scrollLeft;
            e.pageY = e.clientY + document.documentElement.scrollTop;
          }
          return ((fn.call(el, e) === false) || bubble === false) ? self.cancelEvent(e) : true;
        });
      }
    };

    if (cap.haseventlistener) {  // W3C standard model
      this._bind = function(el, name, fn, bubble) { // primitive bind
        self.events.push({
          e: el,
          n: name,
          f: fn,
          b: bubble,
          q: false
        });
        el.addEventListener(name, fn, bubble || false);
      };
      this.cancelEvent = function(e) {
        if (!e) return false;
        var e = (e.original) ? e.original : e;
        e.preventDefault();
        e.stopPropagation();
        if (e.preventManipulation) e.preventManipulation(); //IE10
        return false;
      };
      this.stopPropagation = function(e) {
        if (!e) return false;
        var e = (e.original) ? e.original : e;
        e.stopPropagation();
        return false;
      };
      this._unbind = function(el, name, fn, bub) { // primitive unbind
        el.removeEventListener(name, fn, bub);
      };
    } else {  // old IE model
      this._bind = function(el, name, fn, bubble) { // primitive bind
        self.events.push({
          e: el,
          n: name,
          f: fn,
          b: bubble,
          q: false
        });
        if (el.attachEvent) {
          el.attachEvent("on" + name, fn);
        } else {
          el["on" + name] = fn;
        }
      };
      // Thanks to http://www.switchonthecode.com !!
      this.cancelEvent = function(e) {
        var e = window.event || false;
        if (!e) return false;
        e.cancelBubble = true;
        e.cancel = true;
        e.returnValue = false;
        return false;
      };
      this.stopPropagation = function(e) {
        var e = window.event || false;
        if (!e) return false;
        e.cancelBubble = true;
        return false;
      };
      this._unbind = function(el, name, fn, bub) { // primitive unbind IE old
        if (el.detachEvent) {
          el.detachEvent('on' + name, fn);
        } else {
          el['on' + name] = false;
        }
      };
    }

    this.unbindAll = function() {
      for (var a = 0; a < self.events.length; a++) {
        var r = self.events[a];
        (r.q) ? r.e.unbind(r.n, r.f): self._unbind(r.e, r.n, r.f, r.b);
      }
    };

    this.showRail = function() {
      if ((self.page.maxh != 0) && (self.ispage || self.win.css('display') != 'none')) {
        self.visibility = true;
        self.rail.visibility = true;
        self.rail.css('display', 'block');
      }
      return self;
    };

    this.showRailHr = function() {
      if (!self.railh) return self;
      if ((self.page.maxw != 0) && (self.ispage || self.win.css('display') != 'none')) {
        self.railh.visibility = true;
        self.railh.css('display', 'block');
      }
      return self;
    };

    this.hideRail = function() {
      self.visibility = false;
      self.rail.visibility = false;
      self.rail.css('display', 'none');
      return self;
    };

    this.hideRailHr = function() {
      if (!self.railh) return self;
      self.railh.visibility = false;
      self.railh.css('display', 'none');
      return self;
    };

    this.show = function() {
      self.hidden = false;
      self.railslocked = false;
      return self.showRail().showRailHr();
    };

    this.hide = function() {
      self.hidden = true;
      self.railslocked = true;
      return self.hideRail().hideRailHr();
    };

    this.toggle = function() {
      return (self.hidden) ? self.show() : self.hide();
    };

    this.isHidden = function() {
      return self.hidden;
    }

    this.remove = function() {
      self.stop();
      if (self.cursortimeout) clearTimeout(self.cursortimeout);
      if (self.debouncedelayed) clearTimeout(self.debouncedelayed);
      self.doZoomOut();
      self.unbindAll();

      if (cap.isie9) self.win[0].detachEvent("onpropertychange", self.onAttributeChange); //IE9 DOMAttrModified bug

      if (self.observer !== false) self.observer.disconnect();
      if (self.observerremover !== false) self.observerremover.disconnect();
      if (self.observerbody !== false) self.observerbody.disconnect();

      self.events = null;

      if (self.cursor) {
        self.cursor.remove();
      }
      if (self.cursorh) {
        self.cursorh.remove();
      }
      if (self.rail) {
        self.rail.remove();
      }
      if (self.railh) {
        self.railh.remove();
      }
      if (self.zoom) {
        self.zoom.remove();
      }
      for (var a = 0; a < self.saved.css.length; a++) {
        var d = self.saved.css[a];
        d[0].css(d[1], (typeof d[2] == "undefined") ? '' : d[2]);
      }
      self.saved = false;
      self.me.data('__nicescroll', ''); //erase all traces

      // memory leak fixed by GianlucaGuarini - thanks a lot!
      // remove the current nicescroll from the $.nicescroll array & normalize array
      var lst = $.nicescroll;
      lst.each(function(i) {
        if (!this) return;
        if (this.id === self.id) {
          delete lst[i];
          for (var b = ++i; b < lst.length; b++, i++) lst[i] = lst[b];
          lst.length--;
          if (lst.length) delete lst[lst.length];
        }
      });

      for (var i in self) {
        self[i] = null;
        delete self[i];
      }

      self = null;

    };

    this.scrollstart = function(fn) {
      this.onscrollstart = fn;
      return self;
    };
    this.scrollend = function(fn) {
      this.onscrollend = fn;
      return self;
    };
    this.scrollcancel = function(fn) {
      this.onscrollcancel = fn;
      return self;
    };

    this.zoomin = function(fn) {
      this.onzoomin = fn;
      return self;
    };
    this.zoomout = function(fn) {
      this.onzoomout = fn;
      return self;
    };

    this.isScrollable = function(e) {
      var dom = (e.target) ? e.target : e;
      if (dom.nodeName == 'OPTION') return true;
      while (dom && (dom.nodeType == 1) && !(/^BODY|HTML/.test(dom.nodeName))) {
        var dd = $(dom);
        var ov = dd.css('overflowY') || dd.css('overflowX') || dd.css('overflow') || '';
        if (/scroll|auto/.test(ov)) return (dom.clientHeight != dom.scrollHeight);
        dom = (dom.parentNode) ? dom.parentNode : false;
      }
      return false;
    };

    this.getViewport = function(me) {
      var dom = (me && me.parentNode) ? me.parentNode : false;
      while (dom && (dom.nodeType == 1) && !(/^BODY|HTML/.test(dom.nodeName))) {
        var dd = $(dom);
        if (/fixed|absolute/.test(dd.css("position"))) return dd;
        var ov = dd.css('overflowY') || dd.css('overflowX') || dd.css('overflow') || '';
        if ((/scroll|auto/.test(ov)) && (dom.clientHeight != dom.scrollHeight)) return dd;
        if (dd.getNiceScroll().length > 0) return dd;
        dom = (dom.parentNode) ? dom.parentNode : false;
      }
      return false; //(dom) ? $(dom) : false;
    };

    this.triggerScrollEnd = function() {
      if (!self.onscrollend) return;

      var px = self.getScrollLeft();
      var py = self.getScrollTop();

      var info = {
        "type": "scrollend",
        "current": {
          "x": px,
          "y": py
        },
        "end": {
          "x": px,
          "y": py
        }
      };
      self.onscrollend.call(self, info);
    }

    function execScrollWheel(e, hr, chkscroll) {
      var px, py;

      if (e.deltaMode == 0) { // PIXEL
        px = -Math.floor(e.deltaX * (self.opt.mousescrollstep / (18 * 3)));
        py = -Math.floor(e.deltaY * (self.opt.mousescrollstep / (18 * 3)));
      } else if (e.deltaMode == 1) { // LINE
        px = -Math.floor(e.deltaX * self.opt.mousescrollstep);
        py = -Math.floor(e.deltaY * self.opt.mousescrollstep);
      }

      if (hr && self.opt.oneaxismousemode && (px == 0) && py) { // classic vertical-only mousewheel + browser with x/y support
        px = py;
        py = 0;

        if (chkscroll) {
          var hrend = (px < 0) ? (self.getScrollLeft() >= self.page.maxw) : (self.getScrollLeft() <= 0);
          if (hrend) {  // preserve vertical scrolling
            py = px;
            px = 0;
          }
        }

      }

      if (px) {
        if (self.scrollmom) {
          self.scrollmom.stop()
        }
        self.lastdeltax += px;
        self.debounced("mousewheelx", function() {
          var dt = self.lastdeltax;
          self.lastdeltax = 0;
          if (!self.rail.drag) {
            self.doScrollLeftBy(dt)
          }
        }, 15);
      }
      if (py) {
        if (self.opt.nativeparentscrolling && chkscroll && !self.ispage && !self.zoomactive) {
          if (py < 0) {
            if (self.getScrollTop() >= self.page.maxh) return true;
          } else {
            if (self.getScrollTop() <= 0) return true;
          }
        }
        if (self.scrollmom) {
          self.scrollmom.stop()
        }
        self.lastdeltay += py;
        self.debounced("mousewheely", function() {
          var dt = self.lastdeltay;
          self.lastdeltay = 0;
          if (!self.rail.drag) {
            self.doScrollBy(dt)
          }
        }, 15);
      }

      e.stopImmediatePropagation();
      return e.preventDefault();
    };

    this.onmousewheel = function(e) {
      if (self.wheelprevented) return;
      if (self.railslocked) {
        self.debounced("checkunlock", self.resize, 250);
        return true;
      }
      if (self.rail.drag) return self.cancelEvent(e);

      if (self.opt.oneaxismousemode == "auto" && e.deltaX != 0) self.opt.oneaxismousemode = false; // check two-axis mouse support (not very elegant)

      if (self.opt.oneaxismousemode && e.deltaX == 0) {
        if (!self.rail.scrollable) {
          if (self.railh && self.railh.scrollable) {
            return self.onmousewheelhr(e);
          } else {
            return true;
          }
        }
      }

      var nw = +(new Date());
      var chk = false;
      if (self.opt.preservenativescrolling && ((self.checkarea + 600) < nw)) {
        self.nativescrollingarea = self.isScrollable(e);
        chk = true;
      }
      self.checkarea = nw;
      if (self.nativescrollingarea) return true; // this isn't my business
      var ret = execScrollWheel(e, false, chk);
      if (ret) self.checkarea = 0;
      return ret;
    };

    this.onmousewheelhr = function(e) {
      if (self.wheelprevented) return;
      if (self.railslocked || !self.railh.scrollable) return true;
      if (self.rail.drag) return self.cancelEvent(e);

      var nw = +(new Date());
      var chk = false;
      if (self.opt.preservenativescrolling && ((self.checkarea + 600) < nw)) {
        self.nativescrollingarea = self.isScrollable(e);
        chk = true;
      }
      self.checkarea = nw;
      if (self.nativescrollingarea) return true; // this isn't my business
      if (self.railslocked) return self.cancelEvent(e);

      return execScrollWheel(e, true, chk);
    };

    this.stop = function() {
      self.cancelScroll();
      if (self.scrollmon) self.scrollmon.stop();
      self.cursorfreezed = false;
      self.scroll.y = Math.round(self.getScrollTop() * (1 / self.scrollratio.y));
      self.noticeCursor();
      return self;
    };

    this.getTransitionSpeed = function(dif) {
      var sp = Math.round(self.opt.scrollspeed * 10);
      var ex = Math.min(sp, Math.round((dif / 20) * self.opt.scrollspeed));
      return (ex > 20) ? ex : 0;
    };

    if (!self.opt.smoothscroll) {
      this.doScrollLeft = function(x, spd) { //direct
        var y = self.getScrollTop();
        self.doScrollPos(x, y, spd);
      };
      this.doScrollTop = function(y, spd) { //direct
        var x = self.getScrollLeft();
        self.doScrollPos(x, y, spd);
      };
      this.doScrollPos = function(x, y, spd) { //direct
        var nx = (x > self.page.maxw) ? self.page.maxw : x;
        if (nx < 0) nx = 0;
        var ny = (y > self.page.maxh) ? self.page.maxh : y;
        if (ny < 0) ny = 0;
        self.synched('scroll', function() {
          self.setScrollTop(ny);
          self.setScrollLeft(nx);
        });
      };
      this.cancelScroll = function() {}; // direct
    } else if (self.ishwscroll && cap.hastransition && self.opt.usetransition && !!self.opt.smoothscroll) {
      this.prepareTransition = function(dif, istime) {
        var ex = (istime) ? ((dif > 20) ? dif : 0) : self.getTransitionSpeed(dif);
        var trans = (ex) ? cap.prefixstyle + 'transform ' + ex + 'ms ease-out' : '';
        if (!self.lasttransitionstyle || self.lasttransitionstyle != trans) {
          self.lasttransitionstyle = trans;
          self.doc.css(cap.transitionstyle, trans);
        }
        return ex;
      };

      this.doScrollLeft = function(x, spd) { //trans
        var y = (self.scrollrunning) ? self.newscrolly : self.getScrollTop();
        self.doScrollPos(x, y, spd);
      };

      this.doScrollTop = function(y, spd) { //trans
        var x = (self.scrollrunning) ? self.newscrollx : self.getScrollLeft();
        self.doScrollPos(x, y, spd);
      };

      this.doScrollPos = function(x, y, spd) { //trans

        var py = self.getScrollTop();
        var px = self.getScrollLeft();

        if (((self.newscrolly - py) * (y - py) < 0) || ((self.newscrollx - px) * (x - px) < 0)) self.cancelScroll(); //inverted movement detection

        if (self.opt.bouncescroll == false) {
          if (y < 0) y = 0;
          else if (y > self.page.maxh) y = self.page.maxh;
          if (x < 0) x = 0;
          else if (x > self.page.maxw) x = self.page.maxw;
        }

        if (self.scrollrunning && x == self.newscrollx && y == self.newscrolly) return false;

        self.newscrolly = y;
        self.newscrollx = x;

        self.newscrollspeed = spd || false;

        if (self.timer) return false;

        self.timer = setTimeout(function() {

          var top = self.getScrollTop();
          var lft = self.getScrollLeft();

          var dst = {};
          dst.x = x - lft;
          dst.y = y - top;
          dst.px = lft;
          dst.py = top;

          var dd = Math.round(Math.sqrt(Math.pow(dst.x, 2) + Math.pow(dst.y, 2)));
          var ms = (self.newscrollspeed && self.newscrollspeed > 1) ? self.newscrollspeed : self.getTransitionSpeed(dd);
          if (self.newscrollspeed && self.newscrollspeed <= 1) ms *= self.newscrollspeed;

          self.prepareTransition(ms, true);

          if (self.timerscroll && self.timerscroll.tm) clearInterval(self.timerscroll.tm);

          if (ms > 0) {

            if (!self.scrollrunning && self.onscrollstart) {
              var info = {
                "type": "scrollstart",
                "current": {
                  "x": lft,
                  "y": top
                },
                "request": {
                  "x": x,
                  "y": y
                },
                "end": {
                  "x": self.newscrollx,
                  "y": self.newscrolly
                },
                "speed": ms
              };
              self.onscrollstart.call(self, info);
            }

            if (cap.transitionend) {
              if (!self.scrollendtrapped) {
                self.scrollendtrapped = true;
                self.bind(self.doc, cap.transitionend, self.onScrollTransitionEnd, false); //I have got to do something usefull!!
              }
            } else {
              if (self.scrollendtrapped) clearTimeout(self.scrollendtrapped);
              self.scrollendtrapped = setTimeout(self.onScrollTransitionEnd, ms); // simulate transitionend event
            }

            var py = top;
            var px = lft;
            self.timerscroll = {
              bz: new BezierClass(py, self.newscrolly, ms, 0, 0, 0.58, 1),
              bh: new BezierClass(px, self.newscrollx, ms, 0, 0, 0.58, 1)
            };
            if (!self.cursorfreezed) self.timerscroll.tm = setInterval(function() {
              self.showCursor(self.getScrollTop(), self.getScrollLeft())
            }, 60);

          }

          self.synched("doScroll-set", function() {
            self.timer = 0;
            if (self.scrollendtrapped) self.scrollrunning = true;
            self.setScrollTop(self.newscrolly);
            self.setScrollLeft(self.newscrollx);
            if (!self.scrollendtrapped) self.onScrollTransitionEnd();
          });


        }, 50);

      };

      this.cancelScroll = function() {
        if (!self.scrollendtrapped) return true;
        var py = self.getScrollTop();
        var px = self.getScrollLeft();
        self.scrollrunning = false;
        if (!cap.transitionend) clearTimeout(cap.transitionend);
        self.scrollendtrapped = false;
        self._unbind(self.doc[0], cap.transitionend, self.onScrollTransitionEnd);
        self.prepareTransition(0);
        self.setScrollTop(py); // fire event onscroll
        if (self.railh) self.setScrollLeft(px);
        if (self.timerscroll && self.timerscroll.tm) clearInterval(self.timerscroll.tm);
        self.timerscroll = false;

        self.cursorfreezed = false;

        self.showCursor(py, px);
        return self;
      };
      this.onScrollTransitionEnd = function() {
        if (self.scrollendtrapped) self._unbind(self.doc[0], cap.transitionend, self.onScrollTransitionEnd);
        self.scrollendtrapped = false;
        self.prepareTransition(0);
        if (self.timerscroll && self.timerscroll.tm) clearInterval(self.timerscroll.tm);
        self.timerscroll = false;
        var py = self.getScrollTop();
        var px = self.getScrollLeft();
        self.setScrollTop(py); // fire event onscroll
        if (self.railh) self.setScrollLeft(px); // fire event onscroll left

        self.noticeCursor(false, py, px);

        self.cursorfreezed = false;

        if (py < 0) py = 0
        else if (py > self.page.maxh) py = self.page.maxh;
        if (px < 0) px = 0
        else if (px > self.page.maxw) px = self.page.maxw;
        if ((py != self.newscrolly) || (px != self.newscrollx)) return self.doScrollPos(px, py, self.opt.snapbackspeed);

        if (self.onscrollend && self.scrollrunning) {
          self.triggerScrollEnd();
        }
        self.scrollrunning = false;

      };

    } else {

      this.doScrollLeft = function(x, spd) { //no-trans
        var y = (self.scrollrunning) ? self.newscrolly : self.getScrollTop();
        self.doScrollPos(x, y, spd);
      };

      this.doScrollTop = function(y, spd) { //no-trans
        var x = (self.scrollrunning) ? self.newscrollx : self.getScrollLeft();
        self.doScrollPos(x, y, spd);
      };

      this.doScrollPos = function(x, y, spd) { //no-trans
        var y = ((typeof y == "undefined") || (y === false)) ? self.getScrollTop(true) : y;

        if ((self.timer) && (self.newscrolly == y) && (self.newscrollx == x)) return true;

        if (self.timer) clearAnimationFrame(self.timer);
        self.timer = 0;

        var py = self.getScrollTop();
        var px = self.getScrollLeft();

        if (((self.newscrolly - py) * (y - py) < 0) || ((self.newscrollx - px) * (x - px) < 0)) self.cancelScroll(); //inverted movement detection

        self.newscrolly = y;
        self.newscrollx = x;

        if (!self.bouncescroll || !self.rail.visibility) {
          if (self.newscrolly < 0) {
            self.newscrolly = 0;
          } else if (self.newscrolly > self.page.maxh) {
            self.newscrolly = self.page.maxh;
          }
        }
        if (!self.bouncescroll || !self.railh.visibility) {
          if (self.newscrollx < 0) {
            self.newscrollx = 0;
          } else if (self.newscrollx > self.page.maxw) {
            self.newscrollx = self.page.maxw;
          }
        }

        self.dst = {};
        self.dst.x = x - px;
        self.dst.y = y - py;
        self.dst.px = px;
        self.dst.py = py;

        var dst = Math.round(Math.sqrt(Math.pow(self.dst.x, 2) + Math.pow(self.dst.y, 2)));

        self.dst.ax = self.dst.x / dst;
        self.dst.ay = self.dst.y / dst;

        var pa = 0;
        var pe = dst;

        if (self.dst.x == 0) {
          pa = py;
          pe = y;
          self.dst.ay = 1;
          self.dst.py = 0;
        } else if (self.dst.y == 0) {
          pa = px;
          pe = x;
          self.dst.ax = 1;
          self.dst.px = 0;
        }

        var ms = self.getTransitionSpeed(dst);
        if (spd && spd <= 1) ms *= spd;
        if (ms > 0) {
          self.bzscroll = (self.bzscroll) ? self.bzscroll.update(pe, ms) : new BezierClass(pa, pe, ms, 0, 1, 0, 1);
        } else {
          self.bzscroll = false;
        }

        if (self.timer) return;

        if ((py == self.page.maxh && y >= self.page.maxh) || (px == self.page.maxw && x >= self.page.maxw)) self.checkContentSize();

        var sync = 1;

        function scrolling() {
          if (self.cancelAnimationFrame) return true;

          self.scrollrunning = true;

          sync = 1 - sync;
          if (sync) return (self.timer = setAnimationFrame(scrolling) || 1);

          var done = 0;
          var sx, sy;

          var sc = sy = self.getScrollTop();
          if (self.dst.ay) {
            sc = (self.bzscroll) ? self.dst.py + (self.bzscroll.getNow() * self.dst.ay) : self.newscrolly;
            var dr = sc - sy;
            if ((dr < 0 && sc < self.newscrolly) || (dr > 0 && sc > self.newscrolly)) sc = self.newscrolly;
            self.setScrollTop(sc);
            if (sc == self.newscrolly) done = 1;
          } else {
            done = 1;
          }

          var scx = sx = self.getScrollLeft();
          if (self.dst.ax) {
            scx = (self.bzscroll) ? self.dst.px + (self.bzscroll.getNow() * self.dst.ax) : self.newscrollx;
            var dr = scx - sx;
            if ((dr < 0 && scx < self.newscrollx) || (dr > 0 && scx > self.newscrollx)) scx = self.newscrollx;
            self.setScrollLeft(scx);
            if (scx == self.newscrollx) done += 1;
          } else {
            done += 1;
          }

          if (done == 2) {
            self.timer = 0;
            self.cursorfreezed = false;
            self.bzscroll = false;
            self.scrollrunning = false;
            if (sc < 0) sc = 0;
            else if (sc > self.page.maxh) sc = self.page.maxh;
            if (scx < 0) scx = 0;
            else if (scx > self.page.maxw) scx = self.page.maxw;
            if ((scx != self.newscrollx) || (sc != self.newscrolly)) self.doScrollPos(scx, sc);
            else {
              if (self.onscrollend) {
                self.triggerScrollEnd();
              }
            }
          } else {
            self.timer = setAnimationFrame(scrolling) || 1;
          }
        };
        self.cancelAnimationFrame = false;
        self.timer = 1;

        if (self.onscrollstart && !self.scrollrunning) {
          var info = {
            "type": "scrollstart",
            "current": {
              "x": px,
              "y": py
            },
            "request": {
              "x": x,
              "y": y
            },
            "end": {
              "x": self.newscrollx,
              "y": self.newscrolly
            },
            "speed": ms
          };
          self.onscrollstart.call(self, info);
        }

        scrolling();

        if ((py == self.page.maxh && y >= py) || (px == self.page.maxw && x >= px)) self.checkContentSize();

        self.noticeCursor();
      };

      this.cancelScroll = function() {
        if (self.timer) clearAnimationFrame(self.timer);
        self.timer = 0;
        self.bzscroll = false;
        self.scrollrunning = false;
        return self;
      };

    }

    this.doScrollBy = function(stp, relative) {
      var ny = 0;
      if (relative) {
        ny = Math.floor((self.scroll.y - stp) * self.scrollratio.y)
      } else {
        var sy = (self.timer) ? self.newscrolly : self.getScrollTop(true);
        ny = sy - stp;
      }
      if (self.bouncescroll) {
        var haf = Math.round(self.view.h / 2);
        if (ny < -haf) ny = -haf
        else if (ny > (self.page.maxh + haf)) ny = (self.page.maxh + haf);
      }
      self.cursorfreezed = false;

      var py = self.getScrollTop(true);
      if (ny < 0 && py <= 0) return self.noticeCursor();
      else if (ny > self.page.maxh && py >= self.page.maxh) {
        self.checkContentSize();
        return self.noticeCursor();
      }

      self.doScrollTop(ny);
    };

    this.doScrollLeftBy = function(stp, relative) {
      var nx = 0;
      if (relative) {
        nx = Math.floor((self.scroll.x - stp) * self.scrollratio.x)
      } else {
        var sx = (self.timer) ? self.newscrollx : self.getScrollLeft(true);
        nx = sx - stp;
      }
      if (self.bouncescroll) {
        var haf = Math.round(self.view.w / 2);
        if (nx < -haf) nx = -haf;
        else if (nx > (self.page.maxw + haf)) nx = (self.page.maxw + haf);
      }
      self.cursorfreezed = false;

      var px = self.getScrollLeft(true);
      if (nx < 0 && px <= 0) return self.noticeCursor();
      else if (nx > self.page.maxw && px >= self.page.maxw) return self.noticeCursor();

      self.doScrollLeft(nx);
    };

    this.doScrollTo = function(pos, relative) {
      var ny = (relative) ? Math.round(pos * self.scrollratio.y) : pos;
      if (ny < 0) ny = 0;
      else if (ny > self.page.maxh) ny = self.page.maxh;
      self.cursorfreezed = false;
      self.doScrollTop(pos);
    };

    this.checkContentSize = function() {
      var pg = self.getContentSize();
      if ((pg.h != self.page.h) || (pg.w != self.page.w)) self.resize(false, pg);
    };

    self.onscroll = function(e) {
      if (self.rail.drag) return;
      if (!self.cursorfreezed) {
        self.synched('scroll', function() {
          self.scroll.y = Math.round(self.getScrollTop() * (1 / self.scrollratio.y));
          if (self.railh) self.scroll.x = Math.round(self.getScrollLeft() * (1 / self.scrollratio.x));
          self.noticeCursor();
        });
      }
    };
    self.bind(self.docscroll, "scroll", self.onscroll);

    this.doZoomIn = function(e) {
      if (self.zoomactive) return;
      self.zoomactive = true;

      self.zoomrestore = {
        style: {}
      };
      var lst = ['position', 'top', 'left', 'zIndex', 'backgroundColor', 'marginTop', 'marginBottom', 'marginLeft', 'marginRight'];
      var win = self.win[0].style;
      for (var a in lst) {
        var pp = lst[a];
        self.zoomrestore.style[pp] = (typeof win[pp] != "undefined") ? win[pp] : '';
      }

      self.zoomrestore.style.width = self.win.css('width');
      self.zoomrestore.style.height = self.win.css('height');

      self.zoomrestore.padding = {
        w: self.win.outerWidth() - self.win.width(),
        h: self.win.outerHeight() - self.win.height()
      };

      if (cap.isios4) {
        self.zoomrestore.scrollTop = $(window).scrollTop();
        $(window).scrollTop(0);
      }

      self.win.css({
        "position": (cap.isios4) ? "absolute" : "fixed",
        "top": 0,
        "left": 0,
        "z-index": globalmaxzindex + 100,
        "margin": "0px"
      });
      var bkg = self.win.css("backgroundColor");
      if (bkg == "" || /transparent|rgba\(0, 0, 0, 0\)|rgba\(0,0,0,0\)/.test(bkg)) self.win.css("backgroundColor", "#fff");
      self.rail.css({
        "z-index": globalmaxzindex + 101
      });
      self.zoom.css({
        "z-index": globalmaxzindex + 102
      });
      self.zoom.css('backgroundPosition', '0px -18px');
      self.resizeZoom();

      if (self.onzoomin) self.onzoomin.call(self);

      return self.cancelEvent(e);
    };

    this.doZoomOut = function(e) {
      if (!self.zoomactive) return;
      self.zoomactive = false;

      self.win.css("margin", "");
      self.win.css(self.zoomrestore.style);

      if (cap.isios4) {
        $(window).scrollTop(self.zoomrestore.scrollTop);
      }

      self.rail.css({
        "z-index": self.zindex
      });
      self.zoom.css({
        "z-index": self.zindex
      });
      self.zoomrestore = false;
      self.zoom.css('backgroundPosition', '0px 0px');
      self.onResize();

      if (self.onzoomout) self.onzoomout.call(self);

      return self.cancelEvent(e);
    };

    this.doZoom = function(e) {
      return (self.zoomactive) ? self.doZoomOut(e) : self.doZoomIn(e);
    };

    this.resizeZoom = function() {
      if (!self.zoomactive) return;

      var py = self.getScrollTop(); //preserve scrolling position
      self.win.css({
        width: $(window).width() - self.zoomrestore.padding.w + "px",
        height: $(window).height() - self.zoomrestore.padding.h + "px"
      });
      self.onResize();

      self.setScrollTop(Math.min(self.page.maxh, py));
    };

    this.init();

    $.nicescroll.push(this);

  };

  // Inspired by the work of Kin Blas
  // http://webpro.host.adobe.com/people/jblas/momentum/includes/jquery.momentum.0.7.js


  var ScrollMomentumClass2D = function(nc) {
    var self = this;
    this.nc = nc;

    this.lastx = 0;
    this.lasty = 0;
    this.speedx = 0;
    this.speedy = 0;
    this.lasttime = 0;
    this.steptime = 0;
    this.snapx = false;
    this.snapy = false;
    this.demulx = 0;
    this.demuly = 0;

    this.lastscrollx = -1;
    this.lastscrolly = -1;

    this.chkx = 0;
    this.chky = 0;

    this.timer = 0;

    this.time = function() {
      return +new Date(); //beautifull hack
    };

    this.reset = function(px, py) {
      self.stop();
      var now = self.time();
      self.steptime = 0;
      self.lasttime = now;
      self.speedx = 0;
      self.speedy = 0;
      self.lastx = px;
      self.lasty = py;
      self.lastscrollx = -1;
      self.lastscrolly = -1;
    };

    this.update = function(px, py) {
      var now = self.time();
      self.steptime = now - self.lasttime;
      self.lasttime = now;
      var dy = py - self.lasty;
      var dx = px - self.lastx;
      var sy = self.nc.getScrollTop();
      var sx = self.nc.getScrollLeft();
      var newy = sy + dy;
      var newx = sx + dx;
      self.snapx = (newx < 0) || (newx > self.nc.page.maxw);
      self.snapy = (newy < 0) || (newy > self.nc.page.maxh);
      self.speedx = dx;
      self.speedy = dy;
      self.lastx = px;
      self.lasty = py;
    };

    this.stop = function() {
      self.nc.unsynched("domomentum2d");
      if (self.timer) clearTimeout(self.timer);
      self.timer = 0;
      self.lastscrollx = -1;
      self.lastscrolly = -1;
    };

    this.doSnapy = function(nx, ny) {
      var snap = false;

      if (ny < 0) {
        ny = 0;
        snap = true;
      } else if (ny > self.nc.page.maxh) {
        ny = self.nc.page.maxh;
        snap = true;
      }

      if (nx < 0) {
        nx = 0;
        snap = true;
      } else if (nx > self.nc.page.maxw) {
        nx = self.nc.page.maxw;
        snap = true;
      }

      (snap) ? self.nc.doScrollPos(nx, ny, self.nc.opt.snapbackspeed): self.nc.triggerScrollEnd();
    };

    this.doMomentum = function(gp) {
      var t = self.time();
      var l = (gp) ? t + gp : self.lasttime;

      var sl = self.nc.getScrollLeft();
      var st = self.nc.getScrollTop();

      var pageh = self.nc.page.maxh;
      var pagew = self.nc.page.maxw;

      self.speedx = (pagew > 0) ? Math.min(60, self.speedx) : 0;
      self.speedy = (pageh > 0) ? Math.min(60, self.speedy) : 0;

      var chk = l && (t - l) <= 60;

      if ((st < 0) || (st > pageh) || (sl < 0) || (sl > pagew)) chk = false;

      var sy = (self.speedy && chk) ? self.speedy : false;
      var sx = (self.speedx && chk) ? self.speedx : false;

      if (sy || sx) {
        var tm = Math.max(16, self.steptime); //timeout granularity

        if (tm > 50) { // do smooth
          var xm = tm / 50;
          self.speedx *= xm;
          self.speedy *= xm;
          tm = 50;
        }

        self.demulxy = 0;

        self.lastscrollx = self.nc.getScrollLeft();
        self.chkx = self.lastscrollx;
        self.lastscrolly = self.nc.getScrollTop();
        self.chky = self.lastscrolly;

        var nx = self.lastscrollx;
        var ny = self.lastscrolly;

        var onscroll = function() {
          var df = ((self.time() - t) > 600) ? 0.04 : 0.02;

          if (self.speedx) {
            nx = Math.floor(self.lastscrollx - (self.speedx * (1 - self.demulxy)));
            self.lastscrollx = nx;
            if ((nx < 0) || (nx > pagew)) df = 0.10;
          }

          if (self.speedy) {
            ny = Math.floor(self.lastscrolly - (self.speedy * (1 - self.demulxy)));
            self.lastscrolly = ny;
            if ((ny < 0) || (ny > pageh)) df = 0.10;
          }

          self.demulxy = Math.min(1, self.demulxy + df);

          self.nc.synched("domomentum2d", function() {

            if (self.speedx) {
              var scx = self.nc.getScrollLeft();
              if (scx != self.chkx) self.stop();
              self.chkx = nx;
              self.nc.setScrollLeft(nx);
            }

            if (self.speedy) {
              var scy = self.nc.getScrollTop();
              if (scy != self.chky) self.stop();
              self.chky = ny;
              self.nc.setScrollTop(ny);
            }

            if (!self.timer) {
              self.nc.hideCursor();
              self.doSnapy(nx, ny);
            }

          });

          if (self.demulxy < 1) {
            self.timer = setTimeout(onscroll, tm);
          } else {
            self.stop();
            self.nc.hideCursor();
            self.doSnapy(nx, ny);
          }
        };

        onscroll();

      } else {
        self.doSnapy(self.nc.getScrollLeft(), self.nc.getScrollTop());
      }

    }

  };


  // override jQuery scrollTop

  var _scrollTop = jQuery.fn.scrollTop; // preserve original function

  jQuery.cssHooks["pageYOffset"] = {
    get: function(elem, computed, extra) {
      var nice = $.data(elem, '__nicescroll') || false;
      return (nice && nice.ishwscroll) ? nice.getScrollTop() : _scrollTop.call(elem);
    },
    set: function(elem, value) {
      var nice = $.data(elem, '__nicescroll') || false;
      (nice && nice.ishwscroll) ? nice.setScrollTop(parseInt(value)): _scrollTop.call(elem, value);
      return this;
    }
  };

  /*
  $.fx.step["scrollTop"] = function(fx){
    $.cssHooks["scrollTop"].set( fx.elem, fx.now + fx.unit );
  };
*/

  jQuery.fn.scrollTop = function(value) {
    if (typeof value == "undefined") {
      var nice = (this[0]) ? $.data(this[0], '__nicescroll') || false : false;
      return (nice && nice.ishwscroll) ? nice.getScrollTop() : _scrollTop.call(this);
    } else {
      return this.each(function() {
        var nice = $.data(this, '__nicescroll') || false;
        (nice && nice.ishwscroll) ? nice.setScrollTop(parseInt(value)): _scrollTop.call($(this), value);
      });
    }
  };

  // override jQuery scrollLeft

  var _scrollLeft = jQuery.fn.scrollLeft; // preserve original function

  $.cssHooks.pageXOffset = {
    get: function(elem, computed, extra) {
      var nice = $.data(elem, '__nicescroll') || false;
      return (nice && nice.ishwscroll) ? nice.getScrollLeft() : _scrollLeft.call(elem);
    },
    set: function(elem, value) {
      var nice = $.data(elem, '__nicescroll') || false;
      (nice && nice.ishwscroll) ? nice.setScrollLeft(parseInt(value)): _scrollLeft.call(elem, value);
      return this;
    }
  };

  /*
  $.fx.step["scrollLeft"] = function(fx){
    $.cssHooks["scrollLeft"].set( fx.elem, fx.now + fx.unit );
  };
*/

  jQuery.fn.scrollLeft = function(value) {
    if (typeof value == "undefined") {
      var nice = (this[0]) ? $.data(this[0], '__nicescroll') || false : false;
      return (nice && nice.ishwscroll) ? nice.getScrollLeft() : _scrollLeft.call(this);
    } else {
      return this.each(function() {
        var nice = $.data(this, '__nicescroll') || false;
        (nice && nice.ishwscroll) ? nice.setScrollLeft(parseInt(value)): _scrollLeft.call($(this), value);
      });
    }
  };

  var NiceScrollArray = function(doms) {
    var self = this;
    this.length = 0;
    this.name = "nicescrollarray";

    this.each = function(fn) {
      for (var a = 0, i = 0; a < self.length; a++) fn.call(self[a], i++);
      return self;
    };

    this.push = function(nice) {
      self[self.length] = nice;
      self.length++;
    };

    this.eq = function(idx) {
      return self[idx];
    };

    if (doms) {
      for (var a = 0; a < doms.length; a++) {
        var nice = $.data(doms[a], '__nicescroll') || false;
        if (nice) {
          this[this.length] = nice;
          this.length++;
        }
      };
    }

    return this;
  };

  function mplex(el, lst, fn) {
    for (var a = 0; a < lst.length; a++) fn(el, lst[a]);
  };
  mplex(
    NiceScrollArray.prototype, ['show', 'hide', 'toggle', 'onResize', 'resize', 'remove', 'stop', 'doScrollPos'],
    function(e, n) {
      e[n] = function() {
        var args = arguments;
        return this.each(function() {
          this[n].apply(this, args);
        });
      };
    }
  );

  jQuery.fn.getNiceScroll = function(index) {
    if (typeof index == "undefined") {
      return new NiceScrollArray(this);
    } else {
      var nice = this[index] && $.data(this[index], '__nicescroll') || false;
      return nice;
    }
  };

  jQuery.extend(jQuery.expr[':'], {
    nicescroll: function(a) {
      return ($.data(a, '__nicescroll')) ? true : false;
    }
  });

  $.fn.niceScroll = function(wrapper, opt) {
    if (typeof opt == "undefined") {
      if ((typeof wrapper == "object") && !("jquery" in wrapper)) {
        opt = wrapper;
        wrapper = false;
      }
    }
    opt = $.extend({},opt); // cloning
    var ret = new NiceScrollArray();
    if (typeof opt == "undefined") opt = {};

    if (wrapper || false) {
      opt.doc = $(wrapper);
      opt.win = $(this);
    }
    var docundef = !("doc" in opt);
    if (!docundef && !("win" in opt)) opt.win = $(this);

    this.each(function() {
      var nice = $(this).data('__nicescroll') || false;
      if (nice) {
        $(this).data('__nicescroll').remove();
      }

      opt.doc = (docundef) ? $(this) : opt.doc;
      nice = new NiceScrollClass(opt, $(this));
      $(this).data('__nicescroll', nice);
      ret.push(nice);
    });
    return (ret.length == 1) ? ret[0] : ret;
  };

  window.NiceScroll = {
    getjQuery: function() {
      return jQuery
    }
  };

  if (!$.nicescroll) {
    $.nicescroll = new NiceScrollArray();
    $.nicescroll.options = _globaloptions;
  }

}));

/**
 * Title: fish-zh.js
 * Description: fish-zh.js
 * Author: huang.xinghui
 * Created Date: 14-8-21 下午2:55
 * Copyright: Copyright 2014 ZTESOFT, Inc.
 */
!function ($) {
  fish.locale['en'] = $.extend(fish.locale['en'], {
    alert: {
      ok: 'OK',
      cancel: 'Cancel',
      confirm: 'Confirm',
      information: 'Information',
      success: 'Success',
      warn: 'Warning',
      error: 'Error',
      prompt: 'Prompt'
    }
  });
}(jQuery);
/**
 * Title: blockui.en.js
 * Description: blockui.en.js
 * Author: huang.xinghui
 * Created Date: 14-8-29 上午11:10
 * Copyright: Copyright 2014 ZTESOFT, Inc.
 */
!function () {
    fish.locale['en'] = $.extend(fish.locale['en'], {
        blockUI: {
            loading: 'Loading...'
        }
    });
}();
/**
 * Created by shi.pengyan on 2015-11-05.
 */
!function () {
    fish.locale['en'] = $.extend(fish.locale['en'], {
        cascadeselect: {
            PLZ_SELECT: '---Please Select---'
        }
    });
}();
/**
 * Title: fish-zh.js
 * Description: fish-zh.js
 * Author: huang.xinghui
 * Created Date: 14-8-21 下午2:55
 * Copyright: Copyright 2014 ZTESOFT, Inc.
 */
!function () {
  fish.locale['en'] = $.extend(fish.locale['en'], {
    datetimepicker: {
      'days': ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
      'daysShort': ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
      'daysMin': ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"],
      'months': ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      'monthsShort': ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
      'meridiem': ["am", "pm"],
      'suffix': ["st", "nd", "rd", "th"],
      'today': "Today"
    }
  });
}();
/**
 * Created by shi.pengyan on 2015-11-05.
 */
!function () {
  fish.locale['en'] = $.extend(fish.locale['en'], {
    endlessScroll: {
      loading: 'Loading...'
    }
  });
}();
/**
 * Created by wxh on 2015-11-17.
 */
!function () {
    fish.locale['en'] = $.extend(fish.locale['en'], {
        fileupload: {
            maxNumberOfFiles: 'Maximum number of files exceeded',
            acceptFileTypes: 'File type not allowed',
            maxFileSize: 'File is too large',
            minFileSize: 'File is too small'
        }
    });
}();

! function($) {

  fish.locale['en'] = $.extend(fish.locale['en'], {
    grid: {
      defaults: {
        recordtext: "View {0} - {1} of {2}",
        emptyrecords: "No records to view",
        // loadtext: "Loading...",
        pgtext: "Page {0} of {1}"
      },
      search: {
        caption: "Search...",
        Find: "Find",
        Reset: "Reset",
        odata: [{
          oper: 'eq',
          text: 'equal'
        }, {
          oper: 'ne',
          text: 'not equal'
        }, {
          oper: 'lt',
          text: 'less'
        }, {
          oper: 'le',
          text: 'less or equal'
        }, {
          oper: 'gt',
          text: 'greater'
        }, {
          oper: 'ge',
          text: 'greater or equal'
        }, {
          oper: 'bw',
          text: 'begins with'
        }, {
          oper: 'bn',
          text: 'does not begin with'
        }, {
          oper: 'in',
          text: 'is in'
        }, {
          oper: 'ni',
          text: 'is not in'
        }, {
          oper: 'ew',
          text: 'ends with'
        }, {
          oper: 'en',
          text: 'does not end with'
        }, {
          oper: 'cn',
          text: 'contains'
        }, {
          oper: 'nc',
          text: 'does not contain'
        }],
        groupOps: [{
          op: "AND",
          text: "all"
        }, {
          op: "OR",
          text: "any"
        }]
      },
      edit: {
        addCaption: "Add Record",
        editCaption: "Edit Record",
        bSubmit: "Submit",
        bCancel: "Cancel",
        bClose: "Close",
        saveData: "Data has been changed! Save changes?",
        bYes: "Yes",
        bNo: "No",
        bExit: "Cancel",
        msg: {
          required: "Field is required",
          number: "Please, enter valid number",
          minValue: "value must be greater than or equal to ",
          maxValue: "value must be less than or equal to",
          email: "is not a valid e-mail",
          integer: "Please, enter valid integer value",
          date: "Please, enter valid date value",
          url: "is not a valid URL. Prefix required ('http://' or 'https://')",
          nodefined: " is not defined!",
          novalue: " return value is required!",
          customarray: "Custom function should return array!",
          customfcheck: "Custom function should be present in case of custom checking!"
        },
        editicon: "glyphicon glyphicon-pencil",
        delicon: "glyphicon glyphicon-remove-circle",
        saveicon: "glyphicon glyphicon-floppy-disk",
        cancelicon: "glyphicon glyphicon-ban-circle"
      },
      view: {
        caption: "View Record",
        bClose: "Close"
      },
      del: {
        caption: "Delete",
        msg: "Delete selected record(s)?",
        bSubmit: "Delete",
        bCancel: "Cancel"
      },
      nav: {
        edittext: "",
        edittitle: "Edit selected row",
        addtext: "",
        addtitle: "Add new row",
        deltext: "",
        deltitle: "Delete selected row",
        searchtext: "",
        searchtitle: "Find records",
        refreshtext: "",
        refreshtitle: "Reload Grid",
        alertcap: "Warning",
        alerttext: "Please, select row",
        viewtext: "",
        viewtitle: "View selected row"
      },
      col: {
        caption: "Select columns",
        bSubmit: "Ok",
        bCancel: "Cancel"
      },
      errors: {
        errcap: "Error",
        nourl: "No url is set",
        norecords: "No records to process",
        model: "Length of colNames <> colModel!"
      },
      formatter: {
        integer: {
          thousandsSeparator: ",",
          defaultValue: '0'
        },
        number: {
          decimalSeparator: ".",
          thousandsSeparator: ",",
          decimalPlaces: 2,
          defaultValue: '0.00'
        },
        currency: {
          decimalSeparator: ".",
          thousandsSeparator: ",",
          decimalPlaces: 2,
          prefix: "",
          suffix: "",
          defaultValue: '0.00'
        },
        //date: {
        //  dayNames: [
        //    "Sun", "Mon", "Tue", "Wed", "Thr", "Fri", "Sat",
        //    "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
        //  ],
        //  monthNames: [
        //    "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
        //    "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
        //  ],
        //  AmPm: ["am", "pm", "AM", "PM"],
        //  S: function(j) {
        //    return j < 11 || j > 13 ? ['st', 'nd', 'rd', 'th'][Math.min((j - 1) % 10, 3)] : 'th';
        //  },
        //  parseRe: /[Tt\\\/:_;.,\t\s-]/,
        //  reformatAfterEdit: true
        //},
        baseLinkUrl: '',
        showAction: '',
        target: '',
        checkbox: {
          disabled: true
        },
        idName: 'id'
      },
      columnsFeature: {
        title: 'Columns Feature',
        columnName: 'Column Name',
        columnWidth: 'Column Width',
        invisibleColumns: 'Invisible Columns',
        visibleColumns: 'Visible Columns',
        checkOneVisible: 'At least one column must be visible. Please choose again.'
      },
      exportFeature: {
        title: 'Export'
      }
    }
  });
}(jQuery);
/**
 * Title: fish-zh.js
 * Description: fish-zh.js
 * Author: huang.xinghui
 * Created Date: 14-8-21 下午2:55
 * Copyright: Copyright 2014 ZTESOFT, Inc.
 */
!function ($) {
  fish.locale['en'] = $.extend(fish.locale['en'], {
      pagination: {
        pgtext:'Page {0} of {1}',
        recordtext:'View {0}-{1}/{2}',
        rowtext:'{0}/ Page',
        gotext:'Go {0}'
    }
  });
}(jQuery);
//validator message & validator rule
!function ($) {
    fish.locale['en'] = $.extend(fish.locale['en'], {
        validator: {
            'msg': {
                defaultMsg: "This field is not valid.",
                loadingMsg: "Validating...",
                digits: "Please enter only digits.",
                required: "This field is required.",
                integer: {
                    '*': "Please enter an integer.",
                    '+': "Please enter a positive integer.",
                    '+0': "Please enter a positive integer or 0.",
                    '-': "Please enter a negative integer.",
                    '-0': "Please enter a negative integer or 0."
                },
                'float': {
                    '*': 'Please enter a float number.',
                    '+': 'Please enter a positive float number.',
                    '+0': 'Please enter a positive float number or 0.',
                    '-': 'Please enter a negative float number.',
                    '-0': 'Please enter a negative float number or 0.'
                },
                match: {
                    eq: "{0} must be equal to {1}.",
                    neq: "{0} must be not equal to {1}.",
                    lt: "{0} must be less than {1}.",
                    datelt: "{0} must be earlier than {1}.",
                    datelte: "{0} can not be later than the {1}",
                    gt: "{0} must be greater than {1}.",
                    dategt: "{0} must be later than {1}.",
                    dategte: "{0} can not be earlier than the {1}",
                    lte: "{0} must be less than or equal to {1}.",
                    gte: "{0} must be greater than or equal to {1}."
                },
                range: {
                    rg: "Please enter a number between {1} and {2}.",
                    gte: "Please enter a number greater than or equal to {1}.",
                    lte: "Please enter a number less than or equal to {1}."
                },
                checked: {
                    eq: "Please check {1} items.",
                    rg: "Please check between {1} and {2} items.",
                    gte: "Please check at least {1} items.",
                    lte: "Please check no more than {1} items."
                },
                length: {
                    eq: "Please enter {1} characters.",
                    rg: "Please enter a value between {1} and {2} characters long.",
                    gte: "Please enter at least {1} characters.",
                    lte: "Please enter no more than {1} characters."
                }
            },
            'rules': {
                letters: [/^[a-z]+$/i, "{0} can only enter letters"], //纯字母
                tel: [/^(?:(?:0\d{2,3}[\- ]?[1-9]\d{6,7})|(?:[48]00[\- ]?[1-9]\d{6}))$/, "Telephone format is incorrect"], //办公或家庭电话
                mobile: [/^1[3-9]\d{9}$/, "Phone number format is incorrect"], //移动电话
                email: [/^[\w\+\-]+(\.[\w\+\-]+)*@[a-z\d\-]+(\.[a-z\d\-]+)*\.([a-z]{2,4})$/i, 'E-mail format is incorrect'],
                qq: [/^[1-9]\d{4,}$/, "QQ number format is incorrect"],
                date: [/^\d{4}-\d{1,2}-\d{1,2}$/, "Please enter the correct date[yyyy-mm-dd]"],
                time: [/^([01]\d|2[0-3])(:[0-5]\d){1,2}$/, "Enter the correct time[hh:ii(:ss)]"],
                datetime: [/^\d{4}-\d{1,2}-\d{1,2} ([01]\d|2[0-3])(:[0-5]\d){1,2}$/, "Please enter the correct datetime[yyyy-mm-dd hh:ii(:ss)]"],
                ID_card: [/^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])((\d{4})|\d{3}[A-Z])$/, "Please enter the correct ID number"],
                url: [/^(https?|ftp):\/\/[^\s]+$/i, "URL format is incorrect"],
                postcode: [/^[1-9]\d{5}$/, "ZIP format is incorrect"],
                chinese: [/^[\u0391-\uFFE5]+$/, "Please enter the Chinese"],
                username: [/^\w{3,12}$/, "Please enter 3-12 digits, letters, underscores"], //用户名
                password: [/^[0-9a-zA-Z]{6,16}$/, "Password from 6-16 digits, letters"], //密码
                ip: [/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/, 'IP format is incorrect.'],

                //可接受的后缀名
                accept: function (element, params) {
                    if (!params) return true;
                    var ext = params[0];
                    return (ext === '*') ||
                        (new RegExp(".(?:" + (ext || "png|jpg|jpeg|gif") + ")$", "i")).test(element.value) ||
                        this.renderMsg("{1} suffix only accept", ext.replace('|', ','));
                }
            }
        }
    })
}(jQuery);
/**
 * @class fish.desktop.widget.FormField
 * form组件，用于组件化后，针对form的取值/赋值/清空等需要特殊处理
 */

!function () {
    "use strict";

    $.widget('ui.formfield', {
        _create: function () {
            this._formSupport();
            this.element.data('formfield', this);
        },

        _formSupport: function(){
            var that = this,
                $form = this.element.closest('form');

            if ($form.size() === 0) return;

            this._on(true, $form, {
                'reset': function(e) {
                    setTimeout(function () { //先执行form默认的reset行为
                        that._onFormReset();
                    }, 0);
                },
                'formClear': '_onFormClear',
                'formDisable': 'disable',
                'formEnable': 'enable',
                'afterFormSetValue': '_afterFormSetValue'
            });
        },

        _onFormReset: $.noop,
        _onFormClear: $.noop,
        _formSetValue: $.noop,
        _formGetValue: $.noop,
        _afterFormSetValue: $.noop
    });
}();
/**
 * @class fish.desktop.fish
 */
!(function () {
    "use strict";

    var header = "\n            <div class=\"modal-header\">\n                <h4 class=\"modal-title\">{{title}}</h4>\n            </div>",
        template = fish.compile("\n            <div class=\"ui-dialog {{modalClass}}\">\n                " + header + "\n                <div class=\"modal-body\">\n                    <span class=\"{{iconClass}}\"></span>\n                    <span>{{{message}}}</span>\n                </div>\n                <div class=\"modal-footer\">\n                    <button type=\"button\" class=\"btn {{btnClass}}\" autofocus data-close>{{okLabel}}</button>\n                </div>\n            </div>"),
        confirmTemplate = fish.compile("\n            <div class=\"ui-dialog modal-confirm\">\n                " + header + "\n                <div class=\"modal-body\">\n                    <span>{{{message}}}</span>\n                </div>\n                <div class=\"modal-footer\">\n                    <button type=\"button\" class=\"btn btn-primary\" autofocus data-close>{{okLabel}}</button>\n                    <button type=\"button\" class=\"btn btn-default\" data-dismiss>{{cancelLabel}}</button>\n                </div>\n            </div>"),
        promptTemplate = fish.compile("\n            <div class=\"ui-dialog modal-confirm\">\n                " + header + "\n                <div class=\"modal-body\">\n                    <span>{{{message}}}</span>\n                    <input type=\"text\" class=\"form-control\" autofocus>\n                </div>\n                <div class=\"modal-footer\">\n                    <button type=\"button\" class=\"btn btn-primary\">{{okLabel}}</button>\n                    <button type=\"button\" class=\"btn btn-default\" data-dismiss>{{cancelLabel}}</button>\n                </div>\n            </div>");

    //解析传入的参数类型，兼容老版本代码
    function parseParam(arg, defaults) {
        var modalConfig = fish.config.get("alertModal"),
            result;

        if (fish.isString(arg)) {
            result = { message: arg };
        } else {
            result = arg || {};
        }

        if (modalConfig !== null) {
            return _.defaults(result, { modal: modalConfig }, defaults);
        } else {
            return _.defaults(result, defaults);
        }
    }

    /**
     * @method success
     * 成功提示
     *
     * @param {Object|String} message 如果传入的是一个对象，请使用{title:'标题',message:'内容'}这种格式，或者直接{message:'内容'}。
     * 如果传入的是一个字符串，将会直接作为消息显示出来。
     * @param {Function} [closeFunc] 关闭处理函数
     *
     * @returns {{result: *, close: Function, dismiss: Function}}
     * @returns {Object} return.result 返回结果Promise对象，popup.result.then(function resolve(){}, function reject(){});
     * @returns {Function} return.close 确认关闭窗口函数，popup.close(result)
     * @returns {Function} return.dismiss 取消关闭窗口函数，popup.dismiss(reason)
     */
    fish.success = function (message, closeFunc) {
        var arg = parseParam(message, {
            modal: false,
            autoDismiss: true
        });

        arg.content = $(template({
            title: arg.title || fish.getResource('alert.success'),
            okLabel: fish.getResource('alert.ok'),
            iconClass: 'glyphicon glyphicon-ok-sign',
            btnClass: 'btn-success',
            modalClass: 'modal-success',
            message: arg.message
        }));

        var promise = fish.popup(arg);
        promise.result.always(closeFunc);
        return promise;
    };

    /**
     * @method info
     * 信息提示
     *
     * @param {Object|String} message 如果传入的是一个对象，请使用{title:'标题',message:'内容'}这种格式，或者直接{message:'内容'}。
     * 如果传入的是一个字符串，将会直接作为消息显示出来。
     * @param {Function} [closeFunc] 关闭处理函数
     *
     * @returns {{result: *, close: Function, dismiss: Function}}
     * @returns {Object} return.result 返回结果Promise对象，popup.result.then(function resolve(){}, function reject(){});
     * @returns {Function} return.close 确认关闭窗口函数，popup.close(result)
     * @returns {Function} return.dismiss 取消关闭窗口函数，popup.dismiss(reason)
     */
    fish.info = function (message, closeFunc) {
        var arg = parseParam(message, {
            modal: false,
            autoDismiss: true
        });
        arg.content = $(template({
            title: arg.title || fish.getResource('alert.information'),
            okLabel: fish.getResource('alert.ok'),
            iconClass: 'glyphicon glyphicon-info-sign',
            btnClass: 'btn-info',
            modalClass: 'modal-info',
            message: arg.message
        }));

        var promise = fish.popup(arg);
        promise.result.always(closeFunc);
        return promise;
    };

    /**
     * @method warn
     * 告警提示
     *
     * @param {Object|String} message 如果传入的是一个对象，请使用{title:'标题',message:'内容'}这种格式，或者直接{message:'内容'}。
     * 如果传入的是一个字符串，将会直接作为消息显示出来。
     * @param {Function} [closeFunc] 关闭处理函数
     *
     * @returns {{result: *, close: Function, dismiss: Function}}
     * @returns {Object} return.result 返回结果Promise对象，popup.result.then(function resolve(){}, function reject(){});
     * @returns {Function} return.close 确认关闭窗口函数，popup.close(result)
     * @returns {Function} return.dismiss 取消关闭窗口函数，popup.dismiss(reason)
     */
    fish.warn = function (message, closeFunc) {
        var arg = parseParam(message, {
            modal: true
        });
        arg.content = $(template({
            title: arg.title || fish.getResource('alert.warn'),
            okLabel: fish.getResource('alert.ok'),
            iconClass: 'glyphicon glyphicon-exclamation-sign',
            btnClass: 'btn-warning',
            modalClass: 'modal-warning',
            message: arg.message
        }));

        var promise = fish.popup(arg);
        promise.result.always(closeFunc);
        return promise;
    };

    /**
     * @method error
     * 错误提示
     *
     * @param {Object|String} message 如果传入的是一个对象，请使用{title:'标题',message:'内容'}这种格式，或者直接{message:'内容'}。
     * 如果传入的是一个字符串，将会直接作为消息显示出来。
     * @param {Function} [closeFunc] 关闭处理函数
     *
     * @returns {{result: *, close: Function, dismiss: Function}}
     * @returns {Object} return.result 返回结果Promise对象，popup.result.then(function resolve(){}, function reject(){});
     * @returns {Function} return.close 确认关闭窗口函数，popup.close(result)
     * @returns {Function} return.dismiss 取消关闭窗口函数，popup.dismiss(reason)
     */
    fish.error = function (message, closeFunc) {
        var arg = parseParam(message, {
            modal: true
        });
        arg.content = $(template({
            title: arg.title || fish.getResource('alert.error'),
            okLabel: fish.getResource('alert.ok'),
            iconClass: 'glyphicon glyphicon-remove-sign',
            btnClass: 'btn-danger',
            modalClass: 'modal-danger',
            message: arg.message
        }));

        var promise = fish.popup(arg);
        promise.result.always(closeFunc);
        return promise;
    };

    /**
     * @method confirm
     * 确认提示
     *
     * @param {Object|String} message 如果传入的是一个对象，请使用{title:'标题',message:'内容'}这种格式，或者直接{message:'内容'}。
     * 如果传入的是一个字符串，将会直接作为消息显示出来。
     * @param {Function} [okFunc] 确认处理函数
     * @param {Function} [cancelFunc] 取消处理函数
     *
     * @returns {{result: *, close: Function, dismiss: Function}}
     * @returns {Object} return.result 返回结果Promise对象，popup.result.then(function resolve(){}, function reject(){});
     * @returns {Function} return.close 确认关闭窗口函数，popup.close(result)
     * @returns {Function} return.dismiss 取消关闭窗口函数，popup.dismiss(reason)
     */
    fish.confirm = function (message, okFunc, cancelFunc) {
        var arg = parseParam(message, {
            modal: true
        });
        arg.content = $(confirmTemplate({
            title: arg.title || fish.getResource('alert.confirm'),
            okLabel: fish.getResource('alert.ok'),
            cancelLabel: fish.getResource('alert.cancel'),
            message: arg.message
        }));

        var promise = fish.popup(arg);
        promise.result.then(okFunc, cancelFunc);
        return promise;
    };

    /**
     * @method prompt
     * 输入提示
     *
     * @param {Object|String} arg 如果传入的是一个对象，请使用{title:'标题',message:'内容'}这种格式，或者直接{message:'内容'}。
     * 如果传入的是一个字符串，将会直接作为消息显示出来。
     * @param {String} value 输入框默认内容 可选
     *
     * @returns {{result: *, close: Function, dismiss: Function}}
     * @returns {Object} return.result 返回结果Promise对象，popup.result.then(function resolve(){}, function reject(){});
     * @returns {Function} return.close 确认关闭窗口函数，popup.close(result)
     * @returns {Function} return.dismiss 取消关闭窗口函数，popup.dismiss(reason)
     */
    fish.prompt = function (message, value) {
        var arg = parseParam(message, {
            modal: true
        }),
            $content;

        arg.content = $content = $(promptTemplate({
            title: arg.title || fish.getResource('alert.prompt'),
            okLabel: fish.getResource('alert.ok'),
            cancelLabel: fish.getResource('alert.cancel'),
            message: arg.message
        }));

        var popup = fish.popup(arg);

        if (value) {
            $content.find('input').val(value).select();
        }

        $content.find('.btn-primary').click(function () {
            popup.close($content.find('input').val());
            $content = null;
        });

        return popup;
    };

    /**
     * @method blockedConfirm 阻塞提示（用于书写同步代码），结合事件使用
     * @param {Event} e 事件对象
     * @param {String} message 提示信息
     * @returns {Boolean} 返回是否阻塞，true不阻塞，false阻塞
     */
    fish.blockedConfirm = function (e, message) {
        var me;

        e = e.originalEvent || e;
        e = $.event.fix(e);
        me = e.target;

        if (me.__confirmResult__) {
            //相当于调用了两次
            delete me.__confirmResult__;
            return true;
        }

        fish.confirm(message).result.then(function () {
            me.__confirmResult__ = true;
            $(me).trigger(e);
        });

        return false;
    };

    /**
     * 确认提示
     * @method showConfirm
     * @param {Object} arguments
     * <pre>
     *   fish.showConfirm(options);
     *   fish.showConfirm(message,okFunc,cancelFunc);
     * </pre>
     * @deprecated 请使用更简短的fish.confirm替代
     */
    fish.showConfirm = fish.confirm;
    /**
     * 错误提示
     * @method showError
     * @param {String} message 提示信息,也可以是对象如{content:"...",title:"..."},支持弹出层的所有属性
     * @param {Function} callback 回调函数,支持关闭时执行自定义的回调方法
     * <pre>
     *   fish.showError(message,callback);
     * </pre>
     * @deprecated 请使用更简短的fish.error替代
     */
    fish.showError = fish.error;
    /**
     * 警告提示
     * @method showWarn
     * @param {String} message 提示信息,也可以是对象如{content:"...",title:"..."},支持弹出层的所有属性
     * @param {Function} callback 回调函数,支持关闭时执行自定义的回调方法
     * <pre>
     *   fish.showWarn(message,callback);
     * </pre>
     * @deprecated 请使用更简短的fish.warn替代
     */
    fish.showWarn = fish.warn;
    /**
     * 操作成功
     * @method showSuccess
     * @param {String} message 提示信息,也可以是对象如{content:"...",title:"..."},支持弹出层的所有属性
     * @param {Function} callback 回调函数,支持关闭时执行自定义的回调方法
     * <pre>
     *   fish.showSuccess(message,callback);
     * </pre>
     * @deprecated 请使用更简短的fish.success替代
     */
    fish.showSuccess = fish.success;
    /**
     * 提示信息
     * @method showInfo
     * @param {String} message 提示信息,也可以是对象如{content:"...",title:"..."},支持弹出层的所有属性
     * @param {Function} callback 回调函数,支持关闭时执行自定义的回调方法
     * <pre>
     *   fish.showInfo(message,callback);
     * </pre>
     * @deprecated 请使用更简短的fish.info替代
     */
    fish.showInfo = fish.info;
})();

/**
 * Autocomplete Widget
 * @class fish.desktop.widget.Autocomplete
 * @extends fish.desktop.widget
 * <pre>
 $(element).autocomplete(option);
 * </pre>
 */
!function () {
    'use strict';

    var keyboard = $.ui.keyCode,
        specialKeyCodes = [keyboard.DOWN, keyboard.UP, keyboard.LEFT, keyboard.RIGHT, keyboard.ENTER
        , keyboard.TAB, keyboard.ESCAPE];

    function withModifier(e) {
        return e.altKey || e.ctrlKey || e.metaKey || e.shiftKey;
    }

    $.widget("ui.autocomplete", {
        options: {
            /**
             * 如果设置为true，显示下拉菜单的时候将会自动选中第一个，默认值为false。
             * @cfg {Boolean} autoFocus=false
             */
            autoFocus: false,
            /**
             * 按键之后延迟多久触发搜索操作，单位毫秒。
             * 对于本地数据来说，无延时是有意义的（响应速度更快），但是如果要从远程加载数据，无延时将会触发大量的请求。
             * @cfg {Number} delay=300
             */
            delay: 300,
            /**
             * 如果设置为true将会禁用自动完成功能。
             * @cfg {Boolean} disabled=false
             */
            /**
             * 输入多少个字符时出现自动提示,0表示不用输入就能出现下拉菜单,1表示首字母匹配,2表示匹配前两个字符...
             * @cfg {Number} minLength=1
             */
            minLength: 1,
            /**
             * 下拉菜单的数据源，必须配置。
             * @cfg {*} source Type:Array|String|Function(request,response(Object data))
             * <pre>
             *   $(element).autocomplete({ source: [ "c++", "java", "php", "coldfusion", "javascript", "asp", "ruby" ] });
             * </pre>
             */
            source: null,

            itemRenderer: $.noop,

            /**
             * 可以自定义下拉菜单的高度等样式
             * @cfg {String} customClass
             */
            /**
             * 当输入项失去焦点，并且值已经被改变的时候，触发此事件。
             * @cfg {event} change
             */
            change: null,
            /**
             * 当菜单被隐藏时触发此事件。
             * 并不是每一个close事件都会触发change事件。
             * @cfg {event} close
             */
            close: null,
            /**
             * 当焦点被移动到一个条目上（不是选中）时触发。
             * 默认行为是用获得焦点的条目的value值替换text输入项中的内容，此事件只能通过键盘操作触发。
             * @cfg {event} focus
             */
            focus: null,
            /**
             * 在创建完自动完成组件的实例之后触发此事件。
             * @cfg {event} open
             */
            open: null,
            /**
             * 当下拉菜单打开或者发生更新的时候触发此事件。
             * @cfg {event} create
             */
            /**
             * 在搜索完成之后，下拉菜单显示出来之前触发此事件。
             * 此配置项对于维护本地搜索建议数据来说非常有用，在这种情况下不需要自定义数据源回调函数选项。
             * 在搜索动作完成之后此事件总是会触发，即使没有数据下拉菜单没有显示，或者自动完成组件被禁用，此事件还是会触发。
             * @cfg {event} response
             */
            response: null,
            /**
             * 在搜索动作触发之前，达到minLength和delay配置项的值之后，触发此事件。
             * 如果取消此事件，将不会触发任何请求，也不会启动搜索建议。
             * @cfg {event} search
             */
            search: null,
            /**
             * 在下拉菜单中选中一个项目之后触发。
             * 默认动作是使用选中项目的value值替换text输入项中现有的值。
             * @cfg {event} select
             */
            select: null,
            /**
             * 下拉框数据最大条数
             * @cfg {Number} rowCount=10000
             */
            rowCount: 10000,
            /**
             * 下拉框数据最大高度
             * @cfg {Number} maxHeight=null
             */
            maxHeight: null
        },

        requestIndex: 0,
        pending: 0,

        _create: function () {
            var nodeName = this.element[0].nodeName.toLowerCase(),
                isTextarea = nodeName === "textarea",
                isInput = nodeName === "input";

            this.valueMethod = this.element[isTextarea || isInput ? "val" : "text"];
            this._opened = false;
            this._selectedIndex = -1;

            this.$list = $('<ul class="dropdown-list"></ul>');
            this.$list.css('width', this.element.outerWidth());

            this._initSource();

            this._delegateEvent();
        },


        _delegateEvent: function () {
            var events = {
                'blur': '_onBlur',
                'focus': '_onFocus',
                'keydown': '_onKeydown'
            };

            if (!fish.browser.msie || fish.browser.version > 9) {
                events['input'] = '_onInput';
                this._on(events);
            } else {
                // ie9 Doesn't fire an input event when deleting text (via Backspace, Delete, Cut, etc.).
                // http://caniuse.com/#search=input
                events['keyup'] = events['cut'] = events['paste'] = '_onSpecialInput';
                this._on(events);

                this._on({
                    'keydown': '_onSpecialInput'
                });
            }

            this._on(this.$list, {
                'mousedown li': function(e) {
                    e.preventDefault();
                },
                'click li': '_onClick'
            });
        },

        _setOption: function (key, value) {
            this._super(key, value);
            if (key === "source") {
                this._initSource();
            }
            if (key === "disabled" && value && this.xhr) {
                this.xhr.abort();
            }
        },

        isOpen: function () {
            return this._opened;
        },

        open: function () {
            if (this.isOpen()) return;

            $('body').append(this.$list);
            this.$list.position({
                my: "left top",
                at: "left bottom",
                of: this.element,
                collision: "fit flip"
            });

            this._opened = true;
            this._trigger('open');
        },

        close: function () {
            this.cancelSearch = true;
            this._close();
        },

        _close: function () {
            if (!this.isOpen()) return;

            this.$list.detach();

            this._opened = false;
            this._selectedIndex = -1;
            this._trigger('close');
        },

        previous: function () {
            this.goto(this._selectedIndex - 1);
        },

        next: function () {
            this.goto(this._selectedIndex + 1);
        },

        goto: function (index) {
            this._selectedIndex = this._checkIndex(index);
            this._activeSelectedIndex(this._selectedIndex);
        },

        _onFocus: function(e) {
            this.selectedItem = null;
            this.previousValue = this._value();
        },

        _onBlur: function(e) {
            this.close(e);
            this._change(e);
        },

        _onInput: function(e) {
            this._searchTimeout(e);
        },

        _onSpecialInput: function(e) {
            if (specialKeyCodes.indexOf(e.keyCode) > -1) {
                return;
            }

            _.defer(_.bind(this._onInput, this, e));
        },

        _onKeydown: function (e) {
            var c = e.keyCode;

            // If the dropdown `ul` is in view, then act on keydown for the following keys:
            // Enter / Esc / Up / Down
            if (this.isOpen()) {
                switch (c) {
                    case keyboard.ENTER:
                        e.stopPropagation();
                        this._onEnter();
                        break;
                    case keyboard.ESCAPE:
                        e.stopPropagation();
                        this.close();
                        break;
                    case keyboard.DOWN:
                        if (!withModifier(e)) {
                            e.preventDefault();
                            this.next();
                        }
                        break;
                    case keyboard.UP:
                        if (!withModifier(e)) {
                            e.preventDefault();
                            this.previous();
                        }
                        break;
                }
            }
        },

        _onEnter: function (e) {
            var index = this.$list.find('.active').index();
            this._select(e, index);
            this.close();
        },

        _onClick: function (e) {
            var $li = $(e.target),
                index = this.$list.find('li').index($li);

            this._select(e, index);
            this.close(e);
        },

        _select: function (e, index) {
            var item = this.resultSource[index];

            var result = this._trigger("select", e, {
                item: item
            });

            if (result) this._value(item && item.value);
        },

        _checkIndex: function (index) {
            var length = this.resultSource.length;

            if (index < 0) return length - 1;
            if (index >= length) return 0;

            return index;
        },

        _activeSelectedIndex: function (index) {
            this.$list.find('li.active').removeClass('active');
            this.$list.find('li').eq(index).addClass('active');
        },

        /*
         * 提示的数据源
         * @private
         */
        _initSource: function () {
            var array, url,
                that = this;
            if ($.isArray(this.options.source)) {

                array = this.options.source;
                /*
                 * 数组类型source
                 * @param request
                 * @param response
                 */
                this.source = function (request, response) {
                    response($.ui.autocomplete.filter(array, request.term));
                };

            } else if (typeof this.options.source === "string") {
                url = this.options.source;
                /*
                 * ajax source
                 * @param request
                 * @param response
                 */
                this.source = function (request, response) {
                    if (that.xhr) {
                        that.xhr.abort();
                    }
                    that.xhr = $.ajax({
                        url: url,
                        data: request,
                        dataType: "json",
                        success: function (data) {
                            response(data);
                        },
                        error: function () {
                            response([]);
                        }
                    });
                };

            } else {
                this.source = this.options.source;
            }
        },

        /*
         * 延迟搜索内容
         * @param event
         * @private
         */
        _searchTimeout: function (event) {
            if (!this._delaySearch)
                this._delaySearch = _.debounce(this._evaluate, this.options.delay); //#520,去掉true，在结束边界时调用
            this._delaySearch(event);
        },

        _evaluate: function (event) {
            // Search if the value has changed, or if the user retypes the same value (see #7434)
            var equalValues = this.term === this._value(),
                menuVisible = this.isOpen(),
                modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;

            if (!equalValues || (equalValues && !menuVisible && !modifierKey)) {
                this.selectedItem = null;
                this.search(null, event);
            }
        },


        /*
         * 如果事件没有被取消，触发search事件并调用数据源。
         * 此方法可以用在一个类似下拉选择框的按钮上，当点击此按钮的时候可以打开搜索建议下拉框。
         * 如果调用时不传递参数，将会默认使用当前input的值作为参数。
         * 如果传递一个空字符串，或者传递｛minLength: 0｝将会显示所有条目。
         * @method search
         * @param  {String} value
         */
        search: function (value, event) {
            value = value != null ? value : this._value();

            // always save the actual value, not the one passed as an argument
            this.term = this._value();

            if (value.length < this.options.minLength) {
                return this.close(event);
            }

            if (this._trigger("search", event) === false) {
                return;
            }

            return this._search(value);
        },

        /*
         * 搜索
         * @param value
         * @private
         */
        _search: function (value) {
            this.pending++;
            this.cancelSearch = false;

            this.source({
                term: value
            }, this._response());
        },

        _response: function () {
            var index = ++this.requestIndex;

            return $.proxy(function (content) {
                if (index === this.requestIndex) {
                    this.__response(content);
                }

                this.pending--;
                if (!this.pending) {
                    this.element.removeClass("ui-autocomplete-loading");
                }
            }, this);
        },

        __response: function (content) {
            if (content) {
                content = this._normalize(content);
            }
            this._trigger("response", null, {
                content: content
            });
            if (!this.options.disabled && content && content.length && !this.cancelSearch) {
                this._suggest(content);
            } else {
                // use ._close() instead of .close() so we don't cancel future searches
                this._close();
            }
        },

        _change: function (event) {
            if (this.previousValue !== this._value()) {
                this._trigger("change", event, {
                    item: this.selectedItem
                });
            }
        },

        /*
         * 转换成内部标准的[{label:xx,value:yy}]
         * @param items
         * @returns {*}
         * @private
         */
        _normalize: function (items) {
            // assume all items have the right format when the first item is complete
            if (items.length && items[0].label && items[0].value) {
                return items;
            }
            return $.map(items, function (item) {
                if (typeof item === "string") {
                    return {
                        label: item,
                        value: item
                    };
                }
                return $.extend({}, item, {
                    label: item.label || item.value,
                    value: item.value || item.label
                });
            });
        },

        /*
         * 显示相匹配的内容
         * @param items
         * @private
         */
        _suggest: function (items) {
            var html = '',
                that = this;

            this.resultSource = items;

            if (this.options.autoFocus && items.length > 0) {
                this._selectedIndex = 0;
                html += '<li class="active">' + that._renderItem(items[0]) + '</li>';
                items = items.slice(1);
            }

            _.each(items, function(item, index) {
                html += '<li>' + that._renderItem(item) + '</li>';
            });

            this.$list.html(html);
            this.open();
        },

        _renderItem: function(item) {
            if (this.options.itemRenderer == $.noop) {
                return item.label;
            } else {
                return this.options.itemRenderer.call(this, item);
            }
        },

        /*
         * 取值 | 设值
         * @param newVal
         * @returns {valueMethod|*}
         */
        value: function () {
            return this.valueMethod.apply(this.element, arguments);
        },

        /*
         * 内部使用取值
         * @returns {valueMethod|*}
         * @private
         */
        _value: function () {
            return this.valueMethod.apply(this.element, arguments);
        }
    });

    $.extend($.ui.autocomplete, {
        escapeRegex: function (value) {
            return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
        },
        filter: function (array, term) {
            var matcher = new RegExp($.ui.autocomplete.escapeRegex(term), "i");
            return $.grep(array, function (value) {
                return matcher.test(fish.isObject(value) ? (value.label || value.value) : value);
            });
        }
    })
}();

/**
 * 遮罩<br>
 * @class fish.desktop.widget.BlockUI
 *
 * 用法：
 * <pre>
 *  $.unblockUI();// for whole page
 *  $.blockUI();
 *  $('selector').blockUI(); // for element
 *  $('selector').unblockUI();
 * </pre>
 *
 */
!(function () {
    'use strict';

    $.blockUI = function (opts) {
        create(window, opts);
    };

    $.unblockUI = function () {
        remove(window);
    };

    /**
     * 创建遮罩,用于遮挡元素本身;也可以直接使用jquery全局对象,生成全局遮罩
     * @method blockUI
     * @param {Object} opts
     * @returns {Object} jQuery Object
     */
    $.fn.blockUI = function (opts) {
        if (this[0] === window) {
            //如果是window对象,直接调用
            $.blockUI(opts);
            return this;
        }
        var fullOpts = $.extend({}, $.blockUI.defaults, opts || {});
        this.each(function () {
            var $el = $(this);
            if ($el.data('blockUI.isBlocked')) {
                if (opts.message) {
                    $el.find(".blockUI-content").html(opts.message);
                    return;
                } else if (fullOpts.ignoreIfBlocked) {
                    return; //原来已经存在遮罩,在有ignoreIfBlocked参数为true的情况下直接返回
                }
            }
            $el.unblockUI(); //这一步是不是需要判断下,有遮罩的时候再执行? TODO
            create(this, opts);
        });

        return this.each(function () {
            if ($.css(this, 'position') == 'static') {
                this.style.position = 'relative';
                $(this).data('blockUI.static', true);
            }
            this.style.zoom = 1; // force 'hasLayout' in ie
        });
    };

    /**
     * 取消局部遮罩;也可以直接使用jquery全局对象,取消全局遮罩
     * @method unblockUI
     * @returns {Object} jQuery Object
     */
    $.fn.unblockUI = function () {
        if (this[0] === window) {
            $.unblockUI();
            return this;
        }
        return this.each(function () {
            remove(this);
        });
    };

    var template = Handlebars.compile('\n        <div class="blockUI ui-widget-overlay {{blockMsgClass}}"\n             style="position: {{#if full}}fixed{{else}}absolute{{/if}}; z-index: {{baseZ}}">\n        </div>\n        <div class="blockUI {{blockMsgClass}} {{#if full}}blockPage{{else}}blockElement{{/if}}"\n             style="position: {{#if full}}fixed{{else}}absolute{{/if}}; z-index: {{baseZ2}}">\n             {{{content}}}\n        </div>'),
        defaultBlockTemplate = Handlebars.compile('<span class="loading"></span>\n            <span class="blockUI-content {{#if iconOnly}}blockUI-iconOnly{{/if}}">\n                {{msg}}\n            </span>');

    // override these in your code to change the default behavior and style
    $.blockUI.defaults = {
        /**
         * @cfg {String} [message='Loading...'] 遮罩的显示文字,设置为空则页面只有一个小圈圈在转
         */
        message: fish.getResource('blockUI.loading') || 'Please wait...',
        /**
         * @cfg {String} [template=''] 遮罩模板,可以定制，如果设置了 message 属性就无效了
         * @since V2.0.0
         */
        template: '',
        /**
         * @cfg {Number} [baseZ=100100] 遮罩层的z-index值
         */
        baseZ: 100100,
        /**
         * @cfg {Number} [timeout=0]
         * 多长时间遮罩会自动消失,单位毫秒;默认值0表示不会自动消失
         */
        timeout: 0,
        /**
         * 用于给遮罩提示加上自定义样式
         * @cfg blockMsgClass=''
         */
        blockMsgClass: '',
        /**
         * @cfg ignoreIfBlocked=false
         * 如果已经存在遮罩,再次加上遮罩的话;会将原来的遮罩去掉再加上新的;此参数设置为true则不再覆盖原遮罩
         */
        ignoreIfBlocked: false
    };

    function create(el, opts) {
        var full = el == window,
            $el = $(el),
            msg,
            isBlocked = $el.data('blockUI.isBlocked');
        opts = $.extend({}, $.blockUI.defaults, opts);
        msg = opts.message;

        if (opts.ignoreIfBlocked && isBlocked) {
            //如果已存在遮罩,此条件下直接返回,不覆盖原遮罩
            return;
        }
        // remove the current block (if there is one) 如果已存在全屏遮罩,则remove掉
        if (full && isBlocked) {
            remove(window, {
                fadeOut: 0
            });
        }

        if (!opts.template) {
            opts.template = defaultBlockTemplate({
                iconOnly: msg ? false : true,
                msg: msg
            });
        }

        var handlebarsOpt = {
            full: full,
            baseZ: opts.baseZ,
            baseZ2: opts.baseZ + 10,
            blockMsgClass: opts.blockMsgClass,
            content: opts.template
        };
        var fhtml = template(handlebarsOpt);

        var $par = full ? $('body') : $(el);
        $par.append(fhtml);
        var $loadContent;
        if (full) {
            $loadContent = $par.find(".blockPage");
            $loadContent.css('margin-left', -($loadContent.outerWidth() / 2) + 'px');
        } else {
            $loadContent = $par.find(".blockElement");
            center($loadContent[0]);
        }

        $el.data('blockUI.isBlocked', true);
        //延迟多少时间自动取消遮罩
        if (opts.timeout) {
            var to = setTimeout(function () {
                $el.unblockUI(opts);
            }, opts.timeout);
            $el.data('blockUI.timeout', to);
        }
    }

    // remove the block
    function remove(el) {
        var full = el == window,
            $el = $(el);
        //解除延迟
        var to = $el.data('blockUI.timeout');
        if (to) {
            clearTimeout(to);
            $el.removeData('blockUI.timeout');
        }

        $el.data('blockUI.isBlocked', false);

        var $par = full ? $('body') : $(el);
        var els = $par.find('>.blockUI');

        //还原dom
        els.each(function (i, o) {
            if (this.parentNode) {
                this.parentNode.removeChild(this);
            }
        });
        if ($el.data('blockUI.static')) {
            $el.css('position', 'static'); // #22
        }
    }

    function center(el) {
        var p = el.parentNode,
            s = el.style;
        var l = (p.offsetWidth - el.offsetWidth) / 2 - parseInt($.css(p, 'borderLeftWidth'), 10) || 0;
        var t = (p.offsetHeight - el.offsetHeight) / 2 - parseInt($.css(p, 'borderTopWidth'), 10) || 0;
        s.left = l > 0 ? l + 'px' : '0';
        s.top = t > 0 ? t + 'px' : '0';
    }
})();

/**
 * 按钮<br>
 * @class fish.desktop.widget.Button
 *
 * 用法：
 * <pre>
 *     $(element).button('setSate', 'loading');
 *     $(element).button('setSate', 'reset');
 * </pre>
 *
 */

!function () {
    "use strict";

    $.widget('ui.button', {
        options: {
            /**
             * @cfg {String} [loadingText='loading...'] 加载显示内容
             */
            loadingText: 'loading...'
        },

        _create: function () {
            this.isLoading = false;
        },

        /**
         * @since V2.1.0
         * 设置按钮为loading状态，按钮灰化显示定义的loadingText值
         */
        loading: function() {
            this.setState('loading');
        },

        /**
         * @since V2.1.0
         * 回复按钮状态，按钮去灰化显示原本文字内容
         */
        reset: function() {
            this.setState('reset');
        },


        /**
         * @method setState 设置按钮状态，显示相应信息，取值可以是loading/reset，或者其他自定义状态
         * @param {String} state 按钮状态
         */
        setState: function (state) {
            var d = 'disabled';
            var $el = this.element;
            var val = $el.is('input') ? 'val' : 'html';
            var data = $el.data();

            state = state + 'Text';

            if (data.resetText == null) $el.data('resetText', $el[val]());

            // push to event loop to allow forms to submit
            setTimeout($.proxy(function () {
                $el[val](data[state] == null ? this.options[state] : data[state]);

                if (state == 'loadingText') {
                    this.isLoading = true;
                    $el.addClass(d).attr(d, d);
                } else if (this.isLoading) {
                    this.isLoading = false;
                    $el.removeClass(d).removeAttr(d);
                }
            }, this), 0);
        },

        /**
         * 按钮生效开关，一般用于按钮组中
         */
        toggle: function () {
            var changed = true;
            var $parent = this.element.closest('[data-toggle="buttons"]');

            if ($parent.length) {
                var $input = this.element.find('input');
                if ($input.prop('type') == 'radio') {
                    if ($input.prop('checked') && this.element.hasClass('active')) changed = false;
                    else $parent.find('.active').removeClass('active');
                }
                if (changed) $input.prop('checked', !this.element.hasClass('active')).trigger('change');
            } else {
                this.element.attr('aria-pressed', !this.element.hasClass('active'));
            }

            if (changed) this.element.toggleClass('active');
        }
    });

    // BUTTON DATA-API
    // ===============

    $(document)
        .on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
            var $btn = $(e.target);
            if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn');
            $btn.button('toggle');
            e.preventDefault();
        })
        .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
            $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type));
        });
}();
/**
 * 图片轮播插件
 * @deprecated 请使用{@link fish.desktop.widget.Slick}
 * @class fish.desktop.widget.Carousel
 */
!function () {
    'use strict';

    var TRANSITION_DURATION = 600;

    $.widget("ui.carousel", {
        options: {
            interval: 5000,
            pause: 'hover',
            wrap: true,
            keyboard: true
        },

        _create: function () {
            this.$indicators = this.element.find('.carousel-indicators');
            this.paused = null;
            this.sliding = null;
            this.interval = null;
            this.$active = null;
            this.$items = null;

            this._delegateEvents();
        },

        _delegateEvents: function () {
            this.options.keyboard && this._on({
                'keydown': '_onKeydown'
            });

            this.options.pause && this._on({
                'mouseenter': 'pause',
                'mouseleave': 'cycle'
            });

            this._on({
                'click [data-slide="prev"]': 'prev',
                'click [data-slide="next"]': 'next',
                'click [data-slide-to]': '_onSlideTo'
            });
        },

        _onKeydown: function (e) {
            if (/input|textarea/i.test(e.target.tagName)) return;
            switch (e.which) {
                case 37:
                    this.prev();
                    break;
                case 39:
                    this.next();
                    break;
                default:
                    return;
            }

            e.preventDefault();
        },
        _destroy: function(){
            this.interval && clearInterval(this.interval);
        },

        cycle: function (e) {
            e || (this.paused = false);

            this.interval && clearInterval(this.interval);

            this.options.interval && !this.paused && (this.interval = setInterval($.proxy(this.next, this), this.options.interval));

            return this;
        },

        prev: function () {
            if (this.sliding) return;
            return this.slide('prev');
        },

        next: function () {
            if (this.sliding) return;
            return this.slide('next');
        },

        slide: function (type, next) {
            var $active = this.element.find('.item.active');
            var $next = next || this.getItemForDirection(type, $active);
            var isCycling = this.interval;
            var direction = type == 'next' ? 'left' : 'right';
            var that = this;

            if ($next.hasClass('active')) return (this.sliding = false);

            var relatedTarget = $next[0];

            this.sliding = true;

            isCycling && this.pause();

            if (this.$indicators.length) {
                this.$indicators.find('.active').removeClass('active');
                var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)]);
                $nextIndicator && $nextIndicator.addClass('active');
            }

            if ($.support.transition && this.element.hasClass('slide')) {
                $next.addClass(type);
                $next[0].offsetWidth; // force reflow
                $active.addClass(direction);
                $next.addClass(direction);
                $active
                    .one('bsTransitionEnd', function () {
                        $next.removeClass([type, direction].join(' ')).addClass('active');
                        $active.removeClass(['active', direction].join(' '));
                        that.sliding = false;
                        setTimeout(function () {
                            that._trigger('slide', null, {
                                relatedTarget: relatedTarget,
                                direction: direction
                            });
                        }, 0)
                    })
                    .emulateTransitionEnd(TRANSITION_DURATION)
            } else {
                $active.removeClass('active');
                $next.addClass('active');
                this.sliding = false;
                this._trigger('slide', null, {
                    relatedTarget: relatedTarget,
                    direction: direction
                });
            }

            isCycling && this.cycle();

            return this;
        },

        pause: function (e) {
            e || (this.paused = true);

            if (this.element.find('.next, .prev').length && $.support.transition) {
                this.cycle(true);
            }

            this.interval = clearInterval(this.interval);

            return this;
        },

        to: function (pos) {
            var that = this;
            var activeIndex = this.getItemIndex(this.$active = this.element.find('.item.active'));

            if (pos > (this.$items.length - 1) || pos < 0) return;

            if (this.sliding) return this.element.one('carousel:slide', function () {
                that.to(pos)
            });
            if (activeIndex == pos) return this.pause().cycle();

            return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos));
        },

        getItemIndex: function (item) {
            this.$items = item.parent().children('.item');
            return this.$items.index(item || this.$active);
        },

        getItemForDirection: function (direction, active) {
            var activeIndex = this.getItemIndex(active);
            var willWrap = (direction == 'prev' && activeIndex === 0) || (direction == 'next' && activeIndex == (this.$items.length - 1));
            if (willWrap && !this.options.wrap) return active;
            var delta = direction == 'prev' ? -1 : 1;
            var itemIndex = (activeIndex + delta) % this.$items.length;
            return this.$items.eq(itemIndex);
        },

        _onSlideTo: function (e) {
            var $target = $(e.target);
            var slideIndex = $target.attr('data-slide-to');
            this.to(slideIndex);
        }
    });
}();
/**
 * 轮播插件
 * @class fish.desktop.widget.Slick
 * @extends fish.desktop.widget
 * <pre>
 *  $(element).slick(option);
 * </pre>
 */
!function () {
    'use strict';

    $.widget("ui.slick", {
        options: {
            /**
             * 设置是否可以使用tab键或者箭头来导航，默认是true
             * @cfg {Boolean} accessibility=true
             */
            accessibility: true,
            /**
             * 设置是否支持单张水平幻灯片自适应高度，默认是false
             * @cfg {Boolean} adaptiveHeight=false
             */
            adaptiveHeight: false,
            /**
             * 设置是否显示箭头，默认是true
             * @cfg {Boolean} arrows=true
             */
            arrows: true,
            /**
             * 设置指定滑块（id或者class）为其他滑块的导航
             * @cfg {String} asNavFor=null
             */
            asNavFor: null,
            /**
             * 允许自定义‘前一个’箭头
             * @cfg {String|Object}
             * <button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button"><i class="glyphicon glyphicon-menu-left"></i></button>
             */
            prevArrow: '<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button"><i class="glyphicon glyphicon-menu-left"></i></button>',
            /**
             * 允许自定义‘后一个’箭头
             * @cfg {String|Object}
             * <button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button"><i class="glyphicon glyphicon-menu-right"></i></button>
             */
            nextArrow: '<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button"><i class="glyphicon glyphicon-menu-right"></i></button>',
            /**
             * 设置是否可以自动播放，默认是false
             * @cfg {Boolean} autoplay=false
             */
            autoplay: false,
            /**
             * 自动播放速度，默认值是3000ms，单位为ms
             * @cfg {Number}
             */
            autoplaySpeed: 3000,
            /**
             * 设置是否采用居中模式展示幻灯片，使用奇数slidesToShow项，默认是false
             * @cfg {Boolean} centerMode=false
             */
            centerMode: false,
            /**
             * 居中模式下，幻灯片之间的间距,单位可以是px或者百分比
             * @cfg {String} centerPadding=50px
             */
            centerPadding: '50px',
            /**
             * CSS3动画效果，默认值是ease
             * @cfg {String} cssEase=ease
             */
            cssEase: 'ease',
            customPaging: function(slider, i) {
                return '<button type="button" data-role="none" role="button" aria-required="false" tabindex="0">' + (i + 1) + '</button>';
            },
            /**
             * 设置是否显示圆点导航，默认是false
             * @cfg {Boolean} dots=false
             */
            dots: false,
            dotsClass: 'slick-dots',
            /**
             * 设置是否支持鼠标拖拽
             * @cfg {Boolean} draggabel=true
             */
            draggable: true,
            /**
             * 添加缓动的jQuery动画
             * @cfg {String} easing=linear
             */
            easing: 'linear',
            edgeFriction: 0.35,
            /**
             * 设置是否支持渐隐模式
             * @cfg {Boolean} fade=false
             */
            fade: false,
            /**
             * 设置是否支持聚焦到选中的幻灯片
             * @cfg {Boolean} focusOnSelect=false
             */
            focusOnSelect: false,
            /**
             * 设置是否支持无限循环播放
             * @cfg {Boolean} infinite=true
             */
            infinite: true,
            /**
             * 设置初始化展示的幻灯片
             * @cfg {Number} initialSlide=0
             */
            initialSlide: 0,
            /**
             * 设置延迟加载技术。 接受'ondemand'或'progressive'
             * @cfg {String} lazyLoad=ondemand
             */
            lazyLoad: 'ondemand',
            mobileFirst: false,
            /**
             * 在自动播放模式下，设置鼠标悬停是否暂停播放
             * @cfg {Boolean} pauseOnHover=true
             */
            pauseOnHover: true,
            /**
             * 在自动播放模式下，设置鼠标悬停在圆点上时，是否暂停播放
             * @cfg {Boolean} pauseOnDotsHover=false
             */
            pauseOnDotsHover: false,
            respondTo: 'window',
            /**
             * 响应式模式
             * @cfg {Object} responsive=null
             */
            responsive: null,
            rtl: false,
            slide: '',
            slidesPerRow: 1,
            /**
             * 设置一屏展示的幻灯片数
             * @cfg {Number} slidesToShow=1
             */
            slidesToShow: 1,
            /**
             * 一屏滚动过的幻灯片数
             * @cfg {Number} slidesToScroll=1
             */
            slidesToScroll: 1,
            /**
             * 幻灯片/淡出动画速度，单位ms
             * @cfg {Number} speed=500
             */
            speed: 500,
            /**
             * 设置滑动效果
             * @cfg {Boolean} iswip=true
             */
            iswipe: true,
            /**
             * 设置是否允许用户忽略slidesToScroll设置，拖拽或者滑动幻灯片
             * @cfg {Boolean} swipeToSlide=false
             */
            swipeToSlide: false,
            /**
             * 设置是否通过触摸滑动幻灯片
             * @cfg {Boolean} touchMove=true
             */
            touchMove: true,
            touchThreshold: 5,
            /**
             * 启用或者禁用CSS Transitions
             * @cfg {Boolean} useCSS=true
             */
            useCSS: true,
            /**
             * 设置是否支持可变宽度的幻灯片
             * @cfg {Boolean} variableWidth=false
             */
            variableWidth: false,
            /**
             * 设置垂直幻灯片模式
             * @cfg {Boolean} vertical=false
             */
            vertical: false,
            /**
             * 设置幻灯片垂直滑动
             * @cfg {Boolean} verticalSwiping=false
             */
            verticalSwiping: false,
            waitForAnimate: true,
            zIndex: 1000,

            afterChange:null,
            beforeChange:null,
            edge:null,
            setPosition:null,
            swipe:null
        },

        _create: function () {
            this.animating = false;
            this.dragging = false;
            this.autoPlayTimer = null;
            this.currentDirection = 0;
            this.currentLeft = null;
            this.currentSlide = 0;
            this.direction = 1;
            this.$dots = null;
            this.listWidth = null;
            this.listHeight = null;
            this.loadIndex = 0;
            this.$nextArrow = null;
            this. $prevArrow = null;
            this.slideCount = null;
            this.slideWidth = null;
            this.$slideTrack = null;
            this.$slides = null;
            this.sliding = false;
            this.slideOffset = 0;
            this.swipeLeft = null;
            this.$list = null;
            this.touchObject = {};
            this.transformsEnabled = false;
            this.unslicked = false;
            this.appendArrows = this.element;
            this.appendDots = this.element;
            this.activeBreakpoint = null;
            this.animType = null;
            this.animProp = null;
            this.breakpoints = [];
            this.breakpointSettings = [];
            this.cssTransitions = false;
            this.hidden = 'hidden';
            this.paused = false;
            this.positionProp = null;
            this.respondTo = null;
            this.rowCount = 1;
            this.shouldClick = true;
            this.$slider = this.element;
            this.$slidesCache = null;
            this.transformType = null;
            this.transitionType = null;
            this.visibilityChange = 'visibilitychange';
            this.windowWidth = 0;
            this.windowTimer = null;

            this.currentSlide = this.options.initialSlide;

            this.originalSettings = this.options;

            this._autoPlay = $.proxy(this._autoPlay, this);
            this._autoPlayClear = $.proxy(this._autoPlayClear, this);
            this._changeSlide = $.proxy(this._changeSlide, this);
            this._clickHandler = $.proxy(this._clickHandler, this);
            this._selectHandler = $.proxy(this._selectHandler, this);
            this._setPosition = $.proxy(this._setPosition, this);
            this._swipeHandler = $.proxy(this._swipeHandler, this);
            this._dragHandler = $.proxy(this._dragHandler, this);
            this._keyHandler = $.proxy(this._keyHandler, this);
            this._autoPlayIterator = $.proxy(this._autoPlayIterator, this);

            // A simple way to check for HTML strings
            // Strict HTML recognition (must start with <)
            // Extracted from jQuery v1.11 source
            this.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;


            this._registerBreakpoints();
            
        },
        _init:function(){
            if (!$(this.$slider).hasClass('slick-initialized')) {

                $(this.$slider).addClass('slick-initialized');
                this._buildOut();
                this._setProps();
                this._startLoad();
                this._loadSlider();
                this._initializeEvents();
                this._updateArrows();
                this._updateDots();
            }
            if (this.options.accessibility === true) {
                this._initADA();
            }
            this._checkResponsive(true);
        },
        _registerBreakpoints: function(){
            var _ = this, breakpoint, currentBreakpoint, l,
            responsiveSettings = _.options.responsive || null;

            if ( $.type(responsiveSettings) === "array" && responsiveSettings.length ) {

                _.respondTo = _.options.respondTo || 'window';

                for ( breakpoint in responsiveSettings ) {

                    l = _.breakpoints.length-1;
                    currentBreakpoint = responsiveSettings[breakpoint].breakpoint;

                    if (responsiveSettings.hasOwnProperty(breakpoint)) {

                        // loop through the breakpoints and cut out any existing
                        // ones with the same breakpoint number, we don't want dupes.
                        while( l >= 0 ) {
                            if( _.breakpoints[l] && _.breakpoints[l] === currentBreakpoint ) {
                                _.breakpoints.splice(l,1);
                            }
                            l--;
                        }

                        _.breakpoints.push(currentBreakpoint);
                        _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;

                    }

                }

                _.breakpoints.sort(function(a, b) {
                    return ( _.options.mobileFirst ) ? a-b : b-a;
                });

            }
        },
        _setOption:function(option, value){
            var _ = this, l, item;

            if( option === "responsive" && $.type(value) === "array" ) {
                for ( item in value ) {
                    if( $.type( _.options.responsive ) !== "array" ) {
                        _.options.responsive = [ value[item] ];
                    } else {
                        l = _.options.responsive.length-1;
                        // loop through the responsive object and splice out duplicates.
                        while( l >= 0 ) {
                            if( _.options.responsive[l].breakpoint === value[item].breakpoint ) {
                                _.options.responsive.splice(l,1);
                            }
                            l--;
                        }
                        _.options.responsive.push( value[item] );
                    }
                }
            } else {
                _.options[option] = value;
            }
            this._unload();
            this._reinit();
        },
        _buildOut:function(){
            var _ = this;

            _.$slides =
                _.$slider
                    .children( _.options.slide + ':not(.slick-cloned)')
                    .addClass('slick-slide');

            _.slideCount = _.$slides.length;

            _.$slides.each(function(index, element) {
                $(element)
                    .attr('data-slick-index', index)
                    .data('originalStyling', $(element).attr('style') || '');
            });

            _.$slidesCache = _.$slides;

            _.$slider.addClass('slick-slider');

            _.$slideTrack = (_.slideCount === 0) ?
                $('<div class="slick-track"/>').appendTo(_.$slider) :
                _.$slides.wrapAll('<div class="slick-track"/>').parent();

            _.$list = _.$slideTrack.wrap(
                '<div aria-live="polite" class="slick-list"/>').parent();
            _.$slideTrack.css('opacity', 0);

            if (_.options.centerMode === true || _.options.swipeToSlide === true) {
                _.options.slidesToScroll = 1;
            }

            $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');

            this._setupInfinite();

            this._buildArrows();

            this._buildDots();

            this._updateDots();


            this._setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

            if (_.options.draggable === true) {
                _.$list.addClass('draggable');
            }

        },
        _setupInfinite:function(){
            var _ = this,
            i, slideIndex, infiniteCount;

            if (_.options.fade === true) {
                _.options.centerMode = false;
            }

            if (_.options.infinite === true && _.options.fade === false) {

                slideIndex = null;

                if (_.slideCount > _.options.slidesToShow) {

                    if (_.options.centerMode === true) {
                        infiniteCount = _.options.slidesToShow + 1;
                    } else {
                        infiniteCount = _.options.slidesToShow;
                    }

                    for (i = _.slideCount; i > (_.slideCount -
                            infiniteCount); i -= 1) {
                        slideIndex = i - 1;
                        $(_.$slides[slideIndex]).clone(true).attr('id', '')
                            .attr('data-slick-index', slideIndex - _.slideCount)
                            .prependTo(_.$slideTrack).addClass('slick-cloned');
                    }
                    for (i = 0; i < infiniteCount; i += 1) {
                        slideIndex = i;
                        $(_.$slides[slideIndex]).clone(true).attr('id', '')
                            .attr('data-slick-index', slideIndex + _.slideCount)
                            .appendTo(_.$slideTrack).addClass('slick-cloned');
                    }
                    _.$slideTrack.find('.slick-cloned').find('[id]').each(function() {
                        $(this).attr('id', '');
                    });

                }

            }
        },
        _buildArrows:function(){
    
             var _ = this;

            if (_.options.arrows === true ) {

                _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');
                _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');

                if( _.slideCount > _.options.slidesToShow ) {

                    _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');
                    _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');

                    if (_.htmlExpr.test(_.options.prevArrow)) {
                        _.$prevArrow.prependTo(_.appendArrows);
                    }

                    if (_.htmlExpr.test(_.options.nextArrow)) {
                        _.$nextArrow.appendTo(_.appendArrows);
                    }

                    if (_.options.infinite !== true) {
                        _.$prevArrow
                            .addClass('slick-disabled')
                            .attr('aria-disabled', 'true');
                    }

                } else {

                    _.$prevArrow.add( _.$nextArrow )

                        .addClass('slick-hidden')
                        .attr({
                            'aria-disabled': 'true',
                            'tabindex': '-1'
                        });

                }

            }
        },
        _buildDots:function(){
            var _ = this,
            i, dotString;

            if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

                dotString = '<ul class="' + _.options.dotsClass + '">';

                for (i = 0; i <= this._getDotCount(); i ++) {
                    dotString += '<li>' + _.options.customPaging.call(this, _, i) + '</li>';
                }

                dotString += '</ul>';

                _.$dots = $(dotString).appendTo(
                    _.appendDots);

                _.$dots.find('li').first().addClass('slick-active').attr('aria-hidden', 'false');

            }

        },
        _setProps:function(){
            var _ = this,
            bodyStyle = document.body.style;

            _.positionProp = _.options.vertical === true ? 'top' : 'left';

            if (_.positionProp === 'top') {
                _.$slider.addClass('slick-vertical');
            } else {
                _.$slider.removeClass('slick-vertical');
            }

            if ( _.options.fade ) {
                if ( typeof _.options.zIndex === 'number' ) {
                    if( _.options.zIndex < 3 ) {
                        _.options.zIndex = 3;
                    }
                } else {
                    _.options.zIndex = _.defaults.zIndex;
                }
            }
        },
        _startLoad:function(){
            var _ = this;

            if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

                _.$prevArrow.hide();
                _.$nextArrow.hide();

            }

            if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

                _.$dots.hide();

            }

            _.$slider.addClass('slick-loading');
        },
        _loadSlider:function(){
            var _ = this;

            this._setPosition();

            _.$slideTrack.css({
                opacity: 1
            });

            _.$slider.removeClass('slick-loading');

            this._initUI();

            if (_.options.lazyLoad === 'progressive') {
                this._progressiveLazyLoad();
            }
        },
        _initializeEvents:function(){
            var _ = this;

            this._initArrowEvents();

            this._initDotEvents();

            _.$list.on('touchstart.slick mousedown.slick', {
                action: 'start'
            }, this._swipeHandler);
            _.$list.on('touchmove.slick mousemove.slick', {
                action: 'move'
            }, this._swipeHandler);
            _.$list.on('touchend.slick mouseup.slick', {
                action: 'end'
            }, this._swipeHandler);
            _.$list.on('touchcancel.slick mouseleave.slick', {
                action: 'end'
            }, this._swipeHandler);

            _.$list.on('click.slick', this._clickHandler);

            $(document).on(_.visibilityChange, $.proxy(_.visibility, _));

            _.$list.on('mouseenter.slick', $.proxy(this._setPaused, _, true));
            _.$list.on('mouseleave.slick', $.proxy(this._setPaused, _, false));

            if (_.options.accessibility === true) {
                _.$list.on('keydown.slick', this._keyHandler);
            }

            if (_.options.focusOnSelect === true) {
                $(_.$slideTrack).children().on('click.slick', this._selectHandler);
            }

            $(window).on('resize.slick', $.proxy(this._resize, _));

            $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);
        },
        _initArrowEvents:function(){
            var _ = this;

            if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
                _.$prevArrow.on('click.slick', {
                    message: 'previous'
                }, this._changeSlide);
                _.$nextArrow.on('click.slick', {
                    message: 'next'
                }, this._changeSlide);
            }
        },
        _initDotEvents:function(){
    
            var _ = this;

            if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
                $('li', _.$dots).on('click.slick', {
                    message: 'index'
                }, this._changeSlide);
            }

            if (_.options.dots === true && _.options.pauseOnDotsHover === true && _.options.autoplay === true) {
                $('li', _.$dots)
                    .on('mouseenter.slick', $.proxy(this._setPaused, _, true))
                    .on('mouseleave.slick', $.proxy(this._setPaused, _, false));
            }
        },
        _updateArrows:function(){
            var _ = this,
            centerOffset;

            centerOffset = Math.floor(_.options.slidesToShow / 2);

            if ( _.options.arrows === true &&
                _.slideCount > _.options.slidesToShow &&
                !_.options.infinite ) {

                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
                _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

                if (_.currentSlide === 0) {

                    _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                    _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

                } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {

                    _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                    _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

                } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {

                    _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                    _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

                }

            }
        },
        _updateDots:function(){
            var _ = this;

            if (_.$dots !== null) {

                _.$dots
                    .find('li')
                    .removeClass('slick-active')
                    .attr('aria-hidden', 'true');

                _.$dots
                    .find('li')
                    .eq(Math.floor(_.currentSlide / _.options.slidesToScroll))
                    .addClass('slick-active')
                    .attr('aria-hidden', 'false');

            }
        },
        _initADA:function(){
            var _ = this;
            _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({
                    'aria-hidden': 'true',
                    'tabindex': '-1'
                }).find('a, input, button, select').attr({
                    'tabindex': '-1'
                });

            _.$slideTrack.attr('role', 'listbox');

            _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function(i) {
                $(this).attr({
                    'role': 'option',
                    'aria-describedby': 'slick-slide' + i + ''
                });
            });

            if (_.$dots !== null) {
                _.$dots.attr('role', 'tablist').find('li').each(function(i) {
                    $(this).attr({
                        'role': 'presentation',
                        'aria-selected': 'false',
                        'aria-controls': 'navigation' + i + '',
                        'id': 'slick-slide' + i + ''
                    });
                })
                    .first().attr('aria-selected', 'true').end()
                    .find('button').attr('role', 'button').end()
                    .closest('div').attr('role', 'toolbar');
            }
            this._activateADA();
        },
        _activateADA:function(){
            var _ = this,
            _isSlideOnFocus =_.$slider.find('*').is(':focus');
            _.$slideTrack.find('.slick-active').attr({
                'aria-hidden': 'false',
                'tabindex': '0'
            }).find('a, input, button, select').attr({
                'tabindex': '0'
            });

            (_isSlideOnFocus) &&  _.$slideTrack.find('.slick-active').focus();
        },
        _setSlideClasses:function(index){
            var _ = this,
            centerOffset, allSlides, indexOffset, remainder;

            allSlides = _.$slider
                .find('.slick-slide')
                .removeClass('slick-active slick-center slick-current')
                .attr('aria-hidden', 'true');

            _.$slides
                .eq(index)
                .addClass('slick-current');

            if (_.options.centerMode === true) {

                centerOffset = Math.floor(_.options.slidesToShow / 2);

                if (_.options.infinite === true) {

                    if (index >= centerOffset && index <= (_.slideCount - 1) - centerOffset) {

                        _.$slides
                            .slice(index - centerOffset, index + centerOffset + 1)
                            .addClass('slick-active')
                            .attr('aria-hidden', 'false');

                    } else {

                        indexOffset = _.options.slidesToShow + index;
                        allSlides
                            .slice(indexOffset - centerOffset + 1, indexOffset + centerOffset + 2)
                            .addClass('slick-active')
                            .attr('aria-hidden', 'false');

                    }

                    if (index === 0) {

                        allSlides
                            .eq(allSlides.length - 1 - _.options.slidesToShow)
                            .addClass('slick-center');

                    } else if (index === _.slideCount - 1) {

                        allSlides
                            .eq(_.options.slidesToShow)
                            .addClass('slick-center');

                    }

                }

                _.$slides
                    .eq(index)
                    .addClass('slick-center');

            } else {

                if (index >= 0 && index <= (_.slideCount - _.options.slidesToShow)) {

                    _.$slides
                        .slice(index, index + _.options.slidesToShow)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                } else if (allSlides.length <= _.options.slidesToShow) {

                    allSlides
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                } else {

                    remainder = _.slideCount % _.options.slidesToShow;
                    indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;

                    if (_.options.slidesToShow == _.options.slidesToScroll && (_.slideCount - index) < _.options.slidesToShow) {

                        allSlides
                            .slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder)
                            .addClass('slick-active')
                            .attr('aria-hidden', 'false');

                    } else {

                        allSlides
                            .slice(indexOffset, indexOffset + _.options.slidesToShow)
                            .addClass('slick-active')
                            .attr('aria-hidden', 'false');

                    }

                }

            }

            if (_.options.lazyLoad === 'ondemand') {
                this._lazyLoad();
            }

        },
        _lazyLoad:function(){
            var _ = this,
            loadRange, cloneRange, rangeStart, rangeEnd;

            function loadImages(imagesScope) {
                $('img[data-lazy]', imagesScope).each(function() {

                    var image = $(this),
                        imageSource = $(this).attr('data-lazy'),
                        imageToLoad = document.createElement('img');

                    imageToLoad.onload = function() {
                        image
                            .animate({ opacity: 0 }, 100, function() {
                                image
                                    .attr('src', imageSource)
                                    .animate({ opacity: 1 }, 200, function() {
                                        image
                                            .removeAttr('data-lazy')
                                            .removeClass('slick-loading');
                                    });
                            });
                    };

                    imageToLoad.src = imageSource;

                });
            }

            if (_.options.centerMode === true) {
                if (_.options.infinite === true) {
                    rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
                    rangeEnd = rangeStart + _.options.slidesToShow + 2;
                } else {
                    rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));
                    rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;
                }
            } else {
                rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;
                rangeEnd = rangeStart + _.options.slidesToShow;
                if (_.options.fade === true) {
                    if (rangeStart > 0) rangeStart--;
                    if (rangeEnd <= _.slideCount) rangeEnd++;
                }
            }

            loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);
            loadImages(loadRange);

            if (_.slideCount <= _.options.slidesToShow) {
                cloneRange = _.$slider.find('.slick-slide');
                loadImages(cloneRange);
            } else
            if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
                cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);
                loadImages(cloneRange);
            } else if (_.currentSlide === 0) {
                cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);
                loadImages(cloneRange);
            }

        },   
        _checkResponsive:function(initial, forceUpdate){
    
            var _ = this,
            breakpoint, targetBreakpoint, respondToWidth, triggerBreakpoint = false;
            var sliderWidth = _.$slider.width();
            var windowWidth = window.innerWidth || $(window).width();

            if (_.respondTo === 'window') {
                respondToWidth = windowWidth;
            } else if (_.respondTo === 'slider') {
                respondToWidth = sliderWidth;
            } else if (_.respondTo === 'min') {
                respondToWidth = Math.min(windowWidth, sliderWidth);
            }

            if ( _.options.responsive &&
                _.options.responsive.length &&
                _.options.responsive !== null) {

                targetBreakpoint = null;

                for (breakpoint in _.breakpoints) {
                    if (_.breakpoints.hasOwnProperty(breakpoint)) {
                        if (_.options.mobileFirst === false) {
                            if (respondToWidth < _.breakpoints[breakpoint]) {
                                targetBreakpoint = _.breakpoints[breakpoint];
                            }
                        } else {
                            if (respondToWidth > _.breakpoints[breakpoint]) {
                                targetBreakpoint = _.breakpoints[breakpoint];
                            }
                        }
                    }
                }

                if (targetBreakpoint !== null) {
                    if (_.activeBreakpoint !== null) {
                        if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
                            _.activeBreakpoint =
                                targetBreakpoint;
                            if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                                _.unslick(targetBreakpoint);
                            } else {
                                _.options = $.extend({}, _.originalSettings,
                                    _.breakpointSettings[
                                        targetBreakpoint]);
                                if (initial === true) {
                                    _.currentSlide = _.options.initialSlide;
                                }
                                this._refresh(initial);
                            }
                            triggerBreakpoint = targetBreakpoint;
                        }
                    } else {
                        _.activeBreakpoint = targetBreakpoint;
                        if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                            _.unslick(targetBreakpoint);
                        } else {
                            _.options = $.extend({}, _.originalSettings,
                                _.breakpointSettings[
                                    targetBreakpoint]);
                            if (initial === true) {
                                _.currentSlide = _.options.initialSlide;
                            }
                            this._refresh(initial);
                        }
                        triggerBreakpoint = targetBreakpoint;
                    }
                } else {
                    if (_.activeBreakpoint !== null) {
                        _.activeBreakpoint = null;
                        _.options = _.originalSettings;
                        if (initial === true) {
                            _.currentSlide = _.options.initialSlide;
                        }
                        this._refresh(initial);
                        triggerBreakpoint = targetBreakpoint;
                    }
                }

                // only trigger breakpoints during an actual break. not on initialize.
                if( !initial && triggerBreakpoint !== false ) {
                    this._trigger('breakpoint',null,[_, triggerBreakpoint]);
                }
            }
        },
        _setPosition:function(){
            var _ = this;

            this._setDimensions();

            this._setHeight();

            if (_.options.fade === false) {
                this._setCSS(this._getLeft(_.currentSlide));
            } else {
                this._setFade();
            }
            this._trigger('setPosition',null,[_]);
        },
        _setDimensions:function(){
            var _ = this;

            if (_.options.vertical === false) {
                if (_.options.centerMode === true) {
                    _.$list.css({
                        padding: ('0 ' + _.options.centerPadding)
                    });
                }
            } else {
                _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);
                if (_.options.centerMode === true) {
                    _.$list.css({
                        padding: (_.options.centerPadding + ' 0')
                    });
                }
            }
            _.listWidth = _.$list.width();
            _.listHeight = _.$list.height();


            if (_.options.vertical === false && _.options.variableWidth === false) {
                _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);
                _.$slideTrack.width(Math.ceil((_.slideWidth * _.$slideTrack.children('.slick-slide').length)));

            } else if (_.options.variableWidth === true) {
                _.$slideTrack.width(5000 * _.slideCount);
            } else {
                _.slideWidth = Math.ceil(_.listWidth);
                _.$slideTrack.height(Math.ceil((_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length)));
            }

            var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();
            if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);
        },
        _setHeight:function(){
             var _ = this;

            if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
                var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
                _.$list.css('height', targetHeight);
            }
        },
        _setCSS:function(position){
            var _ = this,
            positionProps = {},
            x, y;

            if (_.options.rtl === true) {
                position = -position;
            }
            x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0';
            y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0';

            positionProps[_.positionProp] = position;

            if (_.transformsEnabled === false) {
                _.$slideTrack.css(positionProps);
            } else {
                positionProps = {};
                if (_.cssTransitions === false) {
                    positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';
                    _.$slideTrack.css(positionProps);
                } else {
                    positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0)';
                    _.$slideTrack.css(positionProps);
                }
            }
        },
        _setFade:function(){
            var _ = this,
            targetLeft;

            _.$slides.each(function(index, element) {
                targetLeft = (_.slideWidth * index) * -1;
                if (_.options.rtl === true) {
                    $(element).css({
                        position: 'relative',
                        right: targetLeft,
                        top: 0,
                        zIndex: _.options.zIndex - 2,
                        opacity: 0
                    });
                } else {
                    $(element).css({
                        position: 'relative',
                        left: targetLeft,
                        top: 0,
                        zIndex: _.options.zIndex - 2,
                        opacity: 0
                    });
                }
            });

            _.$slides.eq(_.currentSlide).css({
                zIndex: _.options.zIndex - 1,
                opacity: 1
            });
        },
        _setPaused:function(paused){
            var _ = this;

            if (_.options.autoplay === true && _.options.pauseOnHover === true) {
                _.paused = paused;
                if (!paused) {
                    this._autoPlay();
                } else {
                    this._autoPlayClear();
                }
            }
        },
        _getLeft:function(slideIndex){
            var _ = this,
            targetLeft,
            verticalHeight,
            verticalOffset = 0,
            targetSlide;

            _.slideOffset = 0;
            verticalHeight = _.$slides.first().outerHeight(true);

            if (_.options.infinite === true) {
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideOffset = (_.slideWidth * _.options.slidesToShow) * -1;
                    verticalOffset = (verticalHeight * _.options.slidesToShow) * -1;
                }
                if (_.slideCount % _.options.slidesToScroll !== 0) {
                    if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {
                        if (slideIndex > _.slideCount) {
                            _.slideOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth) * -1;
                            verticalOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight) * -1;
                        } else {
                            _.slideOffset = ((_.slideCount % _.options.slidesToScroll) * _.slideWidth) * -1;
                            verticalOffset = ((_.slideCount % _.options.slidesToScroll) * verticalHeight) * -1;
                        }
                    }
                }
            } else {
                if (slideIndex + _.options.slidesToShow > _.slideCount) {
                    _.slideOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * _.slideWidth;
                    verticalOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * verticalHeight;
                }
            }

            if (_.slideCount <= _.options.slidesToShow) {
                _.slideOffset = 0;
                verticalOffset = 0;
            }

            if (_.options.centerMode === true && _.options.infinite === true) {
                _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;
            } else if (_.options.centerMode === true) {
                _.slideOffset = 0;
                _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);
            }

            if (_.options.vertical === false) {
                targetLeft = ((slideIndex * _.slideWidth) * -1) + _.slideOffset;
            } else {
                targetLeft = ((slideIndex * verticalHeight) * -1) + verticalOffset;
            }

            if (_.options.variableWidth === true) {

                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
                } else {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);
                }

                targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;

                if (_.options.centerMode === true) {
                    if (_.options.infinite === false) {
                        targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
                    } else {
                        targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);
                    }
                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
                    targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;
                }
            }

            return targetLeft;
        },
        _initUI:function(){
            var _ = this;

            if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

                _.$prevArrow.show();
                _.$nextArrow.show();

            }

            if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

                _.$dots.show();

            }

            if (_.options.autoplay === true) {

                this._autoPlay();

            }
        },
        _autoPlay:function(){
            var _ = this;

            if (_.autoPlayTimer) {
                clearInterval(_.autoPlayTimer);
            }

            if (_.slideCount > _.options.slidesToShow && _.paused !== true) {
                _.autoPlayTimer = setInterval(this._autoPlayIterator,
                    _.options.autoplaySpeed);
            }
        },
        _autoPlayClear:function(){
            var _ = this;
            if (_.autoPlayTimer) {
                clearInterval(_.autoPlayTimer);
            }
        },
        _autoPlayIterator:function(){
            var _ = this;

            if (_.options.infinite === false) {

                if (_.direction === 1) {

                    if ((_.currentSlide + 1) === _.slideCount -
                        1) {
                        _.direction = 0;
                    }

                    this._slideHandler(_.currentSlide + _.options.slidesToScroll);

                } else {

                    if ((_.currentSlide - 1 === 0)) {

                        _.direction = 1;

                    }

                    this._slideHandler(_.currentSlide - _.options.slidesToScroll);

                }

            } else {

                this._slideHandler(_.currentSlide + _.options.slidesToScroll);

            }
        },
        _progressiveLazyLoad:function(){
            var _ = this,
            imgCount, targetImage;

            imgCount = $('img[data-lazy]', _.$slider).length;

            if (imgCount > 0) {
                targetImage = $('img[data-lazy]', _.$slider).first();
                targetImage.attr('src', targetImage.attr('data-lazy')).removeClass('slick-loading').load(function() {
                        targetImage.removeAttr('data-lazy');
                        _.progressiveLazyLoad();

                        if (_.options.adaptiveHeight === true) {
                            _.setPosition();
                        }
                    })
                    .error(function() {
                        targetImage.removeAttr('data-lazy');
                        this._progressiveLazyLoad();
                    });
            }
        },
        _changeSlide:function(event, dontAnimate){
            var _ = this,
            $target = $(event.target),
            indexOffset, slideOffset, unevenOffset;

            // If target is a link, prevent default action.
            if($target.is('a')) {
                event.preventDefault();
            }

            // If target is not the <li> element (ie: a child), find the <li>.
            if(!$target.is('li')) {
                $target = $target.closest('li');
            }

            unevenOffset = (_.slideCount % _.options.slidesToScroll !== 0);
            indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;

            switch (event.data.message) {

                case 'previous':
                    slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;
                    if (_.slideCount > _.options.slidesToShow) {
                        this._slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
                    }
                    break;

                case 'next':
                    slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;
                    if (_.slideCount > _.options.slidesToShow) {
                        this._slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
                    }
                    break;

                case 'index':
                    var index = event.data.index === 0 ? 0 :
                        event.data.index || $target.index() * _.options.slidesToScroll;

                     this._slideHandler(this._checkNavigable(index), false, dontAnimate);
                    $target.children().trigger('focus');
                    break;

                default:
                    return;
            }
        },
        _swipeHandler:function(event){
            var _ = this;

            if ((_.options.iswipe === false) || ('ontouchend' in document && _.options.iswipe === false)) {
                return;
            } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {
                return;
            }

            _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ?
                event.originalEvent.touches.length : 1;

            _.touchObject.minSwipe = _.listWidth / _.options
                .touchThreshold;

            if (_.options.verticalSwiping === true) {
                _.touchObject.minSwipe = _.listHeight / _.options
                    .touchThreshold;
            }

            switch (event.data.action) {

                case 'start':
                    this._swipeStart(event);
                    break;

                case 'move':
                    this._swipeMove(event);
                    break;

                case 'end':
                    this._swipeEnd(event);
                    break;

            }
        },
        _swipeStart:function(event){
            var _ = this,
            touches;

            if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {
                _.touchObject = {};
                return false;
            }

            if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {
                touches = event.originalEvent.touches[0];
            }

            _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;
            _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;

            _.dragging = true;
        },
        _swipeMove:function(event){
            var _ = this,
            edgeWasHit = false,
            curLeft, swipeDirection, swipeLength, positionOffset, touches;

            touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;

            if (!_.dragging || touches && touches.length !== 1) {
                return false;
            }

            curLeft = this._getLeft(_.currentSlide);

            _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
            _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;

            _.touchObject.swipeLength = Math.round(Math.sqrt(
                Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));

            if (_.options.verticalSwiping === true) {
                _.touchObject.swipeLength = Math.round(Math.sqrt(
                    Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));
            }

            swipeDirection = this._swipeDirection();

            if (swipeDirection === 'vertical') {
                return;
            }

            if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
                event.preventDefault();
            }

            positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);
            if (_.options.verticalSwiping === true) {
                positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;
            }


            swipeLength = _.touchObject.swipeLength;

            _.touchObject.edgeHit = false;

            if (_.options.infinite === false) {
                if ((_.currentSlide === 0 && swipeDirection === 'right') || (_.currentSlide >= this._getDotCount() && swipeDirection === 'left')) {
                    swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
                    _.touchObject.edgeHit = true;
                }
            }

            if (_.options.vertical === false) {
                _.swipeLeft = curLeft + swipeLength * positionOffset;
            } else {
                _.swipeLeft = curLeft + (swipeLength * (_.$list.height() / _.listWidth)) * positionOffset;
            }
            if (_.options.verticalSwiping === true) {
                _.swipeLeft = curLeft + swipeLength * positionOffset;
            }

            if (_.options.fade === true || _.options.touchMove === false) {
                return false;
            }

            if (_.animating === true) {
                _.swipeLeft = null;
                return false;
            }

            this._setCSS(_.swipeLeft);
        },
        _swipeEnd:function(event){
            var _ = this,
            slideCount;

            _.dragging = false;

            _.shouldClick = (_.touchObject.swipeLength > 10) ? false : true;

            if (_.touchObject.curX === undefined) {
                return false;
            }

            if (_.touchObject.edgeHit === true) {
                this._trigger('edge',null,[_, this._swipeDirection()]);
            }

            if (_.touchObject.swipeLength >= _.touchObject.minSwipe) {

                switch (this._swipeDirection()) {
                    case 'left':
                        slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide + this._getSlideCount()) : _.currentSlide + this._getSlideCount();
                        this._slideHandler(slideCount);
                        _.currentDirection = 0;
                        _.touchObject = {};
                        this._trigger('swipe',null,[_, 'left']);
                        break;

                    case 'right':
                        slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide - this._getSlideCount()) : _.currentSlide - this._getSlideCount();
                        this._slideHandler(slideCount);
                        _.currentDirection = 1;
                        _.touchObject = {};
                        this._trigger('swipe',null,[_, 'right']);
                        break;
                }
            } else {
                if (_.touchObject.startX !== _.touchObject.curX) {
                    this._slideHandler(_.currentSlide);
                    _.touchObject = {};
                }
            }

        },
        _swipeDirection:function(){
            var xDist, yDist, r, swipeAngle, _ = this;

            xDist = _.touchObject.startX - _.touchObject.curX;
            yDist = _.touchObject.startY - _.touchObject.curY;
            r = Math.atan2(yDist, xDist);

            swipeAngle = Math.round(r * 180 / Math.PI);
            if (swipeAngle < 0) {
                swipeAngle = 360 - Math.abs(swipeAngle);
            }

            if ((swipeAngle <= 45) && (swipeAngle >= 0)) {
                return (_.options.rtl === false ? 'left' : 'right');
            }
            if ((swipeAngle <= 360) && (swipeAngle >= 315)) {
                return (_.options.rtl === false ? 'left' : 'right');
            }
            if ((swipeAngle >= 135) && (swipeAngle <= 225)) {
                return (_.options.rtl === false ? 'right' : 'left');
            }
            if (_.options.verticalSwiping === true) {
                if ((swipeAngle >= 35) && (swipeAngle <= 135)) {
                    return 'left';
                } else {
                    return 'right';
                }
            }

            return 'vertical';
        },
        _clickHandler:function(event){
            var _ = this;

            if (_.shouldClick === false) {
                event.stopImmediatePropagation();
                event.stopPropagation();
                event.preventDefault();
            }
        },
        _keyHandler:function(event){
            var _ = this;
         //Dont slide if the cursor is inside the form fields and arrow keys are pressed
            if(!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {
                if (event.keyCode === 37 && _.options.accessibility === true) {
                    _._changeSlide({
                        data: {
                            message: 'previous'
                        }
                    });
                } else if (event.keyCode === 39 && _.options.accessibility === true) {
                    _._changeSlide({
                        data: {
                            message: 'next'
                        }
                    });
                }
            }
        },
        _selectHandler:function(event){
            var _ = this;

            var targetElement =
                $(event.target).is('.slick-slide') ?
                    $(event.target) :
                    $(event.target).parents('.slick-slide');

            var index = parseInt(targetElement.attr('data-slick-index'));

            if (!index) index = 0;

            if (_.slideCount <= _.options.slidesToShow) {

                this._setSlideClasses(index);
                this._asNavFor(index);
                return;

            }

            this._slideHandler(index);
        },
        _slideHandler:function(index, sync, dontAnimate){
            var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null,
            _ = this;

            sync = sync || false;

            if (_.animating === true && _.options.waitForAnimate === true) {
                return;
            }

            if (_.options.fade === true && _.currentSlide === index) {
                return;
            }

            if (_.slideCount <= _.options.slidesToShow) {
                return;
            }

            if (sync === false) {
                this._asNavFor(index);
            }

            targetSlide = index;
            targetLeft = this._getLeft(targetSlide);
            slideLeft = this._getLeft(_.currentSlide);

            _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;

            if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > this._getDotCount() * _.options.slidesToScroll)) {
                if (_.options.fade === false) {
                    targetSlide = _.currentSlide;
                    if (dontAnimate !== true) {
                        this._animateSlide(slideLeft, function() {
                            _._postSlide(targetSlide);
                        });
                    } else {
                        this._postSlide(targetSlide);
                    }
                }
                return;
            } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > (_.slideCount - _.options.slidesToScroll))) {
                if (_.options.fade === false) {
                    targetSlide = _.currentSlide;
                    if (dontAnimate !== true) {
                        _.animateSlide(slideLeft, function() {
                            _.postSlide(targetSlide);
                        });
                    } else {
                        _.postSlide(targetSlide);
                    }
                }
                return;
            }

            if (_.options.autoplay === true) {
                clearInterval(_.autoPlayTimer);
            }

            if (targetSlide < 0) {
                if (_.slideCount % _.options.slidesToScroll !== 0) {
                    animSlide = _.slideCount - (_.slideCount % _.options.slidesToScroll);
                } else {
                    animSlide = _.slideCount + targetSlide;
                }
            } else if (targetSlide >= _.slideCount) {
                if (_.slideCount % _.options.slidesToScroll !== 0) {
                    animSlide = 0;
                } else {
                    animSlide = targetSlide - _.slideCount;
                }
            } else {
                animSlide = targetSlide;
            }

            _.animating = true;

            this._trigger('beforeChange',null,[_, _.currentSlide, animSlide]);

            oldSlide = _.currentSlide;
            _.currentSlide = animSlide;

            this._setSlideClasses(_.currentSlide);

            this._updateDots();
            this._updateArrows();

            if (_.options.fade === true) {
                if (dontAnimate !== true) {

                    this._fadeSlideOut(oldSlide);

                    this._fadeSlide(animSlide, function() {
                        _._postSlide(animSlide);
                    });

                } else {
                    this._postSlide(animSlide);
                }
                this._animateHeight();
                return;
            }

            if (dontAnimate !== true) {
                this._animateSlide(targetLeft, function() {
                    _._postSlide(animSlide);
                });
            } else {
                this._postSlide(animSlide);
            }

        },
        _focusHandler:function(){
            var _ = this;
            _.$slider.on('focus.slick blur.slick', '*', function(event) {
                event.stopImmediatePropagation();
                var sf = $(this);
                setTimeout(function() {
                    var that = this;
                    if (_.isPlay) {
                        if (sf.is(':focus')) {
                            that._autoPlayClear();
                            _.paused = true;
                        } else {
                            _.paused = false;
                            that._autoPlay();
                        }
                    }
                }, 0);
            });
        },
        _asNavFor:function(index){
            var _ = this,
            asNavFor = _.options.asNavFor;

            if ( asNavFor && asNavFor !== null ) {
                asNavFor = $(asNavFor).not(_.$slider);
            }

            if ( asNavFor !== null && typeof asNavFor === 'object' ) {
                asNavFor.each(function() {
                    var target = $(this).slick('getSlick');
                    if(!target.unslicked) {
                        target.slideHandler(index, true);
                    }
                });
            }
        },
        _animateSlide:function(targetLeft, callback){
            var animProps = {},
            _ = this;

            this._animateHeight();

            if (_.options.rtl === true && _.options.vertical === false) {
                targetLeft = -targetLeft;
            }
            if (_.transformsEnabled === false) {
                if (_.options.vertical === false) {
                    _.$slideTrack.animate({
                        left: targetLeft
                    }, _.options.speed, _.options.easing, callback);
                } else {
                    _.$slideTrack.animate({
                        top: targetLeft
                    }, _.options.speed, _.options.easing, callback);
                }

            } else {

                if (_.cssTransitions === false) {
                    if (_.options.rtl === true) {
                        _.currentLeft = -(_.currentLeft);
                    }
                    $({
                        animStart: _.currentLeft
                    }).animate({
                        animStart: targetLeft
                    }, {
                        duration: _.options.speed,
                        easing: _.options.easing,
                        step: function(now) {
                            now = Math.ceil(now);
                            if (_.options.vertical === false) {
                                animProps[_.animType] = 'translate(' +
                                    now + 'px, 0)';
                                _.$slideTrack.css(animProps);
                            } else {
                                animProps[_.animType] = 'translate(0,' +
                                    now + 'px)';
                                _.$slideTrack.css(animProps);
                            }
                        },
                        complete: function() {
                            if (callback) {
                                callback.call();
                            }
                        }
                    });

                } else {

                    this._applyTransition();
                    targetLeft = Math.ceil(targetLeft);

                    if (_.options.vertical === false) {
                        animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0, 0)';
                    } else {
                        animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0)';
                    }
                    _.$slideTrack.css(animProps);

                    if (callback) {
                        var that = this;
                        setTimeout(function() {

                            that._disableTransition();

                            callback.call();
                        }, _.options.speed);
                    }

                }

            }
        },
        _animateHeight:function(){
            var _ = this;
            if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
                var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
                _.$list.animate({
                    height: targetHeight
                }, _.options.speed);
            }
        },
        _postSlide:function(index){
            var _ = this;

            this._trigger('afterChange',null,[_, index]);

            _.animating = false;

            this._setPosition();

            _.swipeLeft = null;

            if (_.options.autoplay === true && _.paused === false) {
                _._autoPlay();
            }
            if (_.options.accessibility === true) {
                _._initADA();
            }
        },
        _fadeSlideOut:function(slideIndex){
            var _ = this;

            if (_.cssTransitions === false) {

                _.$slides.eq(slideIndex).animate({
                    opacity: 0,
                    zIndex: _.options.zIndex - 2
                }, _.options.speed, _.options.easing);

            } else {

                this._applyTransition(slideIndex);

                _.$slides.eq(slideIndex).css({
                    opacity: 0,
                    zIndex: _.options.zIndex - 2
                });

            }
        },
        _fadeSlide:function(slideIndex, callback){
            var _ = this;

            if (_.cssTransitions === false) {

                _.$slides.eq(slideIndex).css({
                    zIndex: _.options.zIndex
                });

                _.$slides.eq(slideIndex).animate({
                    opacity: 1
                }, _.options.speed, _.options.easing, callback);

            } else {

                this._applyTransition(slideIndex);

                _.$slides.eq(slideIndex).css({
                    opacity: 1,
                    zIndex: _.options.zIndex
                });

                if (callback) {
                    var that = this;
                    setTimeout(function() {

                        that._disableTransition(slideIndex);

                        callback.call();
                    }, _.options.speed);
                }

            }

        },
        _applyTransition:function(slide){
            var _ = this,
            transition = {};

            if (_.options.fade === false) {
                transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;
            } else {
                transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;
            }

            if (_.options.fade === false) {
                _.$slideTrack.css(transition);
            } else {
                _.$slides.eq(slide).css(transition);
            }

        },
        _disableTransition:function(slide){
            var _ = this,
            transition = {};

            transition[_.transitionType] = '';

            if (_.options.fade === false) {
                _.$slideTrack.css(transition);
            } else {
                _.$slides.eq(slide).css(transition);
            }
        },
        _refresh:function(initializing){
            var _ = this,
            currentSlide = _.currentSlide;

            this._destroy();

            $.extend(_, _.initials, { currentSlide: currentSlide });

            this._init();

            if( !initializing ) {

                this._changeSlide({
                    data: {
                        message: 'index',
                        index: currentSlide
                    }
                }, false);
            }
        },
        _destroy:function(){
            var _ = this;

            this._autoPlayClear();

            _.touchObject = {};

            this._cleanUpEvents();

            $('.slick-cloned', _.$slider).detach();

            if (_.$dots) {
                _.$dots.remove();
            }

            if ( _.options.arrows === true ) {

                if ( _.$prevArrow && _.$prevArrow.length ) {

                    _.$prevArrow
                        .removeClass('slick-disabled slick-arrow slick-hidden')
                        .removeAttr('aria-hidden aria-disabled tabindex')
                        .css("display","");

                    if ( _.htmlExpr.test( _.options.prevArrow )) {
                        _.$prevArrow.remove();
                    }
                }

                if ( _.$nextArrow && _.$nextArrow.length ) {

                    _.$nextArrow
                        .removeClass('slick-disabled slick-arrow slick-hidden')
                        .removeAttr('aria-hidden aria-disabled tabindex')
                        .css("display","");

                    if ( _.htmlExpr.test( _.options.nextArrow )) {
                        _.$nextArrow.remove();
                    }
                }

            }

            if (_.$slides) {

                _.$slides
                    .removeClass('slick-slide slick-active slick-center slick-visible slick-current')
                    .removeAttr('aria-hidden')
                    .removeAttr('data-slick-index')
                    .each(function(){
                        $(this).attr('style', $(this).data('originalStyling'));
                    });

                _.$slideTrack.children(this.options.slide).detach();

                _.$slideTrack.detach();

                _.$list.detach();

                _.$slider.append(_.$slides);
            }

            this._cleanUpRows();

            _.$slider.removeClass('slick-slider');
            _.$slider.removeClass('slick-initialized');

            _.unslicked = true;
        },
        _cleanUpEvents:function(){
            var _ = this;

            if (_.options.dots && _.$dots !== null) {

                $('li', _.$dots).off('click.slick', this._changeSlide);

                if (_.options.pauseOnDotsHover === true && _.options.autoplay === true) {

                    $('li', _.$dots)
                        .off('mouseenter.slick', $.proxy(this._setPaused, _, true))
                        .off('mouseleave.slick', $.proxy(this._setPaused, _, false));

                }

            }

            if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
                _.$prevArrow && _.$prevArrow.off('click.slick', this._changeSlide);
                _.$nextArrow && _.$nextArrow.off('click.slick', this._changeSlide);
            }

            _.$list.off('touchstart.slick mousedown.slick', this._swipeHandler);
            _.$list.off('touchmove.slick mousemove.slick', this._swipeHandler);
            _.$list.off('touchend.slick mouseup.slick', this._swipeHandler);
            _.$list.off('touchcancel.slick mouseleave.slick', this._swipeHandler);

            _.$list.off('click.slick', this._clickHandler);

            $(document).off(this._visibilityChange, _.visibility);

            _.$list.off('mouseenter.slick', $.proxy(this._setPaused, _, true));
            _.$list.off('mouseleave.slick', $.proxy(this._setPaused, _, false));

            if (_.options.accessibility === true) {
                _.$list.off('keydown.slick', this._keyHandler);
            }

            if (_.options.focusOnSelect === true) {
                $(_.$slideTrack).children().off('click.slick', this._selectHandler);
            }

            $(window).off('resize.slick', _.resize);

            $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);
        },
        _cleanUpRows:function(){
            var _ = this, originalSlides;

            if(_.options.rows > 1) {
                originalSlides = _.$slides.children().children();
                originalSlides.removeAttr('style');
                _.$slider.html(originalSlides);
            }

        },
        _getDotCount:function(){
            var _ = this;

            var breakPoint = 0;
            var counter = 0;
            var pagerQty = 0;

            if (_.options.infinite === true) {
                while (breakPoint < _.slideCount) {
                    ++pagerQty;
                    breakPoint = counter + _.options.slidesToShow;
                    counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
                }
            } else if (_.options.centerMode === true) {
                pagerQty = _.slideCount;
            } else {
                while (breakPoint < _.slideCount) {
                    ++pagerQty;
                    breakPoint = counter + _.options.slidesToShow;
                    counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
                }
            }

            return pagerQty - 1;
        },
        _checkNavigable:function(index){
            var _ = this,
            navigables, prevNavigable;

            navigables = this._getNavigableIndexes();
            prevNavigable = 0;
            if (index > navigables[navigables.length - 1]) {
                index = navigables[navigables.length - 1];
            } else {
                for (var n in navigables) {
                    if (index < navigables[n]) {
                        index = prevNavigable;
                        break;
                    }
                    prevNavigable = navigables[n];
                }
            }

            return index;
        },
        _getNavigableIndexes:function(){
            var _ = this,
            breakPoint = 0,
            counter = 0,
            indexes = [],
            max;

            if (_.options.infinite === false) {
                max = _.slideCount;
            } else {
                breakPoint = _.options.slidesToScroll * -1;
                counter = _.options.slidesToScroll * -1;
                max = _.slideCount * 2;
            }

            while (breakPoint < max) {
                indexes.push(breakPoint);
                breakPoint = counter + _.options.slidesToScroll;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
            }

            return indexes;
        },
        _getSlideCount:function(){
            var _ = this,
            slidesTraversed, swipedSlide, centerOffset;

            centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;

            if (_.options.swipeToSlide === true) {
                _.$slideTrack.find('.slick-slide').each(function(index, slide) {
                    if (slide.offsetLeft - centerOffset + ($(slide).outerWidth() / 2) > (_.swipeLeft * -1)) {
                        swipedSlide = slide;
                        return false;
                    }
                });

                slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;

                return slidesTraversed;

            } else {
                return _.options.slidesToScroll;
            }
        },
        _resize:function(){
            var _ = this;

            if ($(window).width() !== _.windowWidth) {
                clearTimeout(_.windowDelay);
                var that = this;
                _.windowDelay = window.setTimeout(function() {
                    _.windowWidth = $(window).width();
                    that._checkResponsive();
                    if( !_.unslicked ) { that._setPosition(); }
                }, 50);
            }
        },
        _reinit:function(){
            var _ = this;

            _.$slides =
                _.$slideTrack
                    .children(_.options.slide)
                    .addClass('slick-slide');

            _.slideCount = _.$slides.length;

            if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
                _.currentSlide = _.currentSlide - _.options.slidesToScroll;
            }

            if (_.slideCount <= _.options.slidesToShow) {
                _.currentSlide = 0;
            }

            this._registerBreakpoints();

            this._setProps();
            this._setupInfinite();
            this._buildArrows();
            this._updateArrows();
            this._initArrowEvents();
            this._buildDots();
            this._updateDots();
            this._initDotEvents();

            this._checkResponsive(false, true);

            if (_.options.focusOnSelect === true) {
                $(_.$slideTrack).children().on('click.slick', _.selectHandler);
            }

            this._setSlideClasses(0);

            this._setPosition();

            this._trigger('reInit',null,[_]);

            if (_.options.autoplay === true) {
                this._focusHandler();
            }
        },
        _unload:function(){
            var _ = this;

            $('.slick-cloned', _.$slider).remove();

            if (_.$dots) {
                _.$dots.remove();
            }

            if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
                _.$prevArrow.remove();
            }

            if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
                _.$nextArrow.remove();
            }

            _.$slides
                .removeClass('slick-slide slick-active slick-visible slick-current')
                .attr('aria-hidden', 'true')
                .css('width', '');
        },
        /**
         * 新增幻灯片
         * @param  {Object} markup 新增幻灯片内容
         * @param  {Number} index 新增幻灯片的位置，默认从0开始，可选
         * @param  {Boolean} addBefore 如果设置index，则插入到index的前面，可选
         */
        slickAdd:function(markup, index, addBefore){
            var _ = this;

            if (typeof(index) === 'boolean') {
                addBefore = index;
                index = null;
            } else if (index < 0 || (index >= _.slideCount)) {
                return false;
            }

            this._unload();

            if (typeof(index) === 'number') {
                if (index === 0 && _.$slides.length === 0) {
                    $(markup).appendTo(_.$slideTrack);
                } else if (addBefore) {
                    $(markup).insertBefore(_.$slides.eq(index));
                } else {
                    $(markup).insertAfter(_.$slides.eq(index));
                }
            } else {
                if (addBefore === true) {
                    $(markup).prependTo(_.$slideTrack);
                } else {
                    $(markup).appendTo(_.$slideTrack);
                }
            }

            _.$slides = _.$slideTrack.children(this.options.slide);

            _.$slideTrack.children(this.options.slide).detach();

            _.$slideTrack.append(_.$slides);

            _.$slides.each(function(index, element) {
                $(element).attr('data-slick-index', index);
            });

            _.$slidesCache = _.$slides;

            this._reinit();
        },
        /**
         * 删除指定幻灯片
         * @param  {Number} index 需要删除幻灯片的index值，默认从0开始
         * @param  {Boolean} removeBefore 如果设置为true，则删除index前面的幻灯片，可选。
         */
        slickRemove:function(index, removeBefore, removeAll){
            var _ = this;

            if (typeof(index) === 'boolean') {
                removeBefore = index;
                index = removeBefore === true ? 0 : _.slideCount - 1;
            } else {
                index = removeBefore === true ? --index : index;
            }

            if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
                return false;
            }

            this._unload();

            if (removeAll === true) {
                _.$slideTrack.children().remove();
            } else {
                _.$slideTrack.children(this.options.slide).eq(index).remove();
            }

            _.$slides = _.$slideTrack.children(this.options.slide);

            _.$slideTrack.children(this.options.slide).detach();

            _.$slideTrack.append(_.$slides);

            _.$slidesCache = _.$slides;

            this._reinit();

        },
        /**
         * 幻灯片筛选
         * @param  {Selector/Function} filter 使用jQuery.filter()来筛选幻灯片
         */
        slickFilter:function(filter){
            var _ = this;

            if (filter !== null) {

                this._unload();

                _.$slideTrack.children(this.options.slide).detach();

                _.$slidesCache.filter(filter).appendTo(_.$slideTrack);

                this._reinit();

            }

        },
        /**
         * 取消幻灯片筛选
         */
        slickUnfilter:function(){
            var _ = this;

            if (_.$slidesCache !== null) {

                this._unload();

                _.$slideTrack.children(this.options.slide).detach();

                _.$slidesCache.appendTo(_.$slideTrack);

                this._reinit();

            }
        },
        /**
         * 获取Slick对象
         * @return  {Object} 当前slick对象
         */
        getSlick:function(){
            return this;
        },
        /**
         * 获取当前展示的幻灯片
         * @return  {Number} 当前幻灯片的index值
         */
        slickCurrentSlide:function(){
            var _ = this;
            return _.currentSlide;
        },
        /**
         * 导航到指定的幻灯片
         * @param  {Number}  slide 幻灯片的index值
         * @param  {Boolean} dontAnimate 是否支持动画效果
         */
        slickGoTo:function(slide, dontAnimate){
            var _ = this;

            this._changeSlide({
                data: {
                    message: 'index',
                    index: parseInt(slide)
                }
            }, dontAnimate);
        },
        /**
         * 导航到下一张的幻灯片
         */
        slickNext:function(){
            var _ = this;

            this._changeSlide({
                data: {
                    message: 'next'
                }
            });
        },
        /**
         * 导航到上一张的幻灯片
         */
        slickPrev:function(){
            var _ = this;

            this._changeSlide({
                data: {
                    message: 'previous'
                }
            });
        },
        /**
         * 暂停幻灯片自动播放
         */
        slickPause:function(){
            var _ = this;

            this._autoPlayClear();
            _.paused = true;
        },
        /**
         * 设置幻灯片自动播放
         */
        slickPlay:function(){
            var _ = this;

            _.paused = false;
            this._autoPlay();
        }
    });
}();
/**
 * 幻灯片切换以后触发的事件，可以绑定slick:afterchange事件
 * @event afterchange
 * @param  {Event} e 事件对象
 * @param  {Object} slick slick对象
 * @param  {Number} currentIndex 当前幻灯片的index值
 */
 /**
 * 幻灯片切换之前触发的事件，可以绑定slick:beforechange事件
 * @event beforechange
 * @param  {Event} e 事件对象
 * @param  {Object} slick slick对象
 * @param  {Number} currentIndex 当前幻灯片的index值
 * @param  {Number} nextIndex  下一张幻灯片的index值
 */
 /**
 * 在infinite设置为false时，在幻灯片边界在滚动溢出时触发的事件，可以绑定slick:edge事件
 * @event edge
 * @param  {Event} e 事件对象
 * @param  {String} direction 滚动方向
 */
 /**
 * 在控件resize或者位置发生变化后触发的事件，可以绑定slick:setposition事件
 * @event setposition
 * @param  {Event} e 事件对象
 * @param  {Object} slick对象
 */
 /**
 * 在滑动或者拖拽幻灯片后触发的事件，可以绑定slick:swipe事件
 * @event swipe
 * @param  {Event} e 事件对象
 * @param  {String} direction 滚动方向
 */
/**
 * ClearInput 带清除功能的input框
 * @class fish.desktop.widget.ClearInput
 * @extends fish.desktop.widget
 * <pre>
 *   $('#clearable').clearinput();
 * </pre>
 */

!function() {
    'use strict';

    var template = '<span style="cursor: pointer; display: none; pointer-events: auto;" '
        + 'class="form-control-feedback form-clear-input">&times;</span>';

    $.widget("ui.clearinput", {
        _create: function() {
            this.btn = $(template);
            //创建close按钮（input框内部）
            this.element.after(this.btn);
            this.element.addClass('form-control');
            this._delegateEvent();
        },

        _destroy: function() {
            this.element.parent().find('.clear-input-icon-left').remove();
            this.element.parent().find('.clear-input-icon-right').remove();
            this.btn.remove();
        },

        _delegateEvent: function() {
            this._on({
                'change': '_triggerBtn',
                'focus': '_triggerBtn'
            });

            this._on(this.btn, {
                'click': '_clearField'
            });

            this._on($(document), {
                'mousedown': '_hideBtn'
            });
        },

        _hasText: function() {
            return this.element.val().replace(/^\s+|\s+$/g, '').length > 0;
        },

        _update: function() {
            var position = this.element.position(),
                outerWidth = this.element.outerWidth(),
                buttonOuterWidth = this.btn.outerWidth();

            this.btn.css({
                left: position.left + outerWidth - buttonOuterWidth
            });
        },

        _triggerBtn: function() {
            if (this._hasText()) {
                // 初始化的时候input框就有value值则在初始化的时候，即使blur仍然显示close按钮
                this.btn.show();
                //以防文字过长覆盖close按钮
                this.element.css('padding-right', this.btn.outerWidth());
            } else {
                this.btn.hide();
                this.element.removeAttr('style');
            }
            this._update();
        },
        _hideBtn: function(e) {
            if (!(this.element.is(e.target)
                || this.element.find(e.target).length
                || this.btn.is(e.target)
                || this.btn.find(e.target).length)) {
                this.btn.hide();
                this.element.removeAttr('style');
            }
        },
        _clearField: function() {
            this.element.val('').trigger('change');
            this._triggerBtn();
        },
        _setIcon: function(options) {
            var settings = $.extend({
                'direct': 'left',
                'iconname': 'user'
            }, options);

            var icons = settings.iconname.split(" "),
                $icon = "";

            for (var i = 0; i < icons.length; i++) {
                if (settings.direct === 'left') {
                    $icon += ' <span class="input-group-addon clear-input-icon-left"><span class="glyphicon glyphicon-' + icons[i] + '"></span></span>';
                } else {
                    $icon += ' <span class="input-group-addon clear-input-icon-right"><span class="glyphicon glyphicon-' + icons[i] + '"></span></span>';
                }
            }
            if (settings.direct === 'left') {
                this.element.before($icon);
            } else {
                this.element.parent().append($icon);
            }
            this._update();
            return this;
        },

        /**
         * 设置icon(左右均可,每边可设置多个icon)
         * @method setIcon
         * @param  {Object} [option]    新增行的参数对象
         * option.direct   icon位置，默认left,右侧为right
         * option.iconname icon名称,默认glyphicon-user
         * @chainable
         * @return {Object} jQuery Object
         */
        setIcon: function(options) {
            return this._setIcon(options);
        }
    });
}();

/**
 * @class fish.desktop.widget.Collapse
 * 折叠组件
 * @since v1.4.4
 * @author huang.xinghui
 */

!function () {
    "use strict";

    var TRANSITION_DURATION = 350;

    $.widget('ui.collapse', {
        options: {
            /**
             * @cfg {Boolean} [toggle=true] 是否触发折叠
             */
            toggle: true
            /**
             * @cfg {Function} [show=null] 定义显示事件函数，事件名称collapse:show
             */
            /**
             * @cfg {Function} [hide=null] 定义隐藏事件函数，事件名称collapse:hide
             */
        },

        _create: function () {
            this.$trigger = $('[data-toggle="collapse"][href="#' + this.element[0].id + '"],' +
            '[data-toggle="collapse"][data-target="#' + this.element[0].id + '"]');

            this.transitioning = null;

            if (this.options.parent) {
                this.$parent = this._getParent();
            } else {
                this._addAriaAndCollapsedClass(this.element, this.$trigger)
            }

            if (this.options.toggle) {
                this.toggle();
            }
        },

        /**
         * @method show
         * 显示折叠内容
         */
        show: function () {
            if (this.transitioning || this.element.hasClass('in')) return;

            var activesData;
            var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing');

            if (actives && actives.length) {
                activesData = actives.data('ui-collapse');
                if (activesData && activesData.transitioning) return
            }

            if (actives && actives.length) {
                actives.collapse('hide');
            }

            var dimension = this.dimension();

            this.element
                .removeClass('collapse')
                .addClass('collapsing')[dimension](0)
                .attr('aria-expanded', true);

            this.$trigger
                .removeClass('collapsed')
                .attr('aria-expanded', true);

            this.transitioning = 1;

            var complete = function () {
                this.element
                    .removeClass('collapsing')
                    .addClass('collapse in')[dimension]('');
                this.transitioning = 0;
                this._trigger('show');
            };

            if (!$.support.transition) return complete.call(this);

            var scrollSize = $.camelCase(['scroll', dimension].join('-'));

            this.element
                .one('bsTransitionEnd', $.proxy(complete, this))
                .emulateTransitionEnd(TRANSITION_DURATION)[dimension](this.element[0][scrollSize]);
        },

        /**
         * @method hide
         * 隐藏折叠内容
         */
        hide: function () {
            if (this.transitioning || !this.element.hasClass('in')) return;

            var dimension = this.dimension();

            this.element[dimension](this.element[dimension]())[0].offsetHeight;

            this.element
                .addClass('collapsing')
                .removeClass('collapse in')
                .attr('aria-expanded', false);

            this.$trigger
                .addClass('collapsed')
                .attr('aria-expanded', false);

            this.transitioning = 1;

            var complete = function () {
                this.element
                    .removeClass('collapsing')
                    .addClass('collapse');
                this.transitioning = 0;
                this._trigger('hide');
            };

            if (!$.support.transition) return complete.call(this);

            this.element
                [dimension](0)
                .one('bsTransitionEnd', $.proxy(complete, this))
                .emulateTransitionEnd(TRANSITION_DURATION);
        },

        /**
         * @method toggle
         * 切换折叠内容显示隐藏
         */
        toggle: function () {
            this[this.element.hasClass('in') ? 'hide' : 'show']()
        },

        dimension: function () {
            var hasWidth = this.element.hasClass('width');
            return hasWidth ? 'width' : 'height';
        },

        _getParent: function () {
            return $(this.options.parent)
                .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
                .each($.proxy(function (i, element) {
                    var $element = $(element);
                    this._addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
                }, this))
                .end();
        },

        _addAriaAndCollapsedClass: function ($element, $trigger) {
            var isOpen = $element.hasClass('in');

            $element.attr('aria-expanded', isOpen);
            $trigger
                .toggleClass('collapsed', !isOpen)
                .attr('aria-expanded', isOpen)
        }
    });

    function getTargetFromTrigger($trigger) {
        var href;
        var target = $trigger.attr('data-target')
            || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7

        return $(target);
    }

    $(document).on('click.collapse.data-api', '[data-toggle="collapse"]', function (e) {
        var $this = $(this);

        if (!$this.attr('data-target')) e.preventDefault();

        var $target = getTargetFromTrigger($this);
        var data = $target.data('ui-collapse');
        data ? data.toggle() : $target.collapse($this.data());
    })
}();
/**
 * @class fish.desktop.widget.Combobox
 * 下拉框控件
 * @extends fish.desktop.widget
 * <pre>
 *   $(element).combobox(option);
 * </pre>
 */

/**
 * @event open
 * 显示下拉框选项事件
 *
 * <pre>
 * $(element).on('combobox:open', function(e) {
 *   //do something
 * })
 * </pre>
 */
/**
 * @event close
 * 关闭下拉框选项事件
 *
 * <pre>
 * $(element).on('combobox:close', function(e) {
 *   //do something
 * })
 * </pre>
 */
/**
 * @event change
 * 改变下拉框值
 *
 * <pre>
 * $(element).on('combobox:change', function(e) {
 *   //do something
 * })
 * </pre>
 */
!(function () {
    "use strict";

    var template = '<div class="input-group combobox">\n                        <input type="text" autocomplete="off" class="form-control"/>\n                        <span class="input-group-addon">\n                            <span class="glyphicon glyphicon-triangle-bottom"></span>\n                        </span>\n                    </div>',
        MENU_ITEM = '<li></li>',
        KEY_CODE = $.ui.keyCode;

    $.widget('ui.combobox', $.ui.formfield, {
        options: {
            /**
             * @cfg {String} text 选中文本内容
             */
            text: null,
            /**
             * @cfg {Object} value 选中值
             */
            value: null,
            /**
             * @cfg {String} [dataTextField='name'] 数据源显示字段
             */
            dataTextField: "name",
            /**
             * @cfg {String} [dataValueField='value'] 数据源取值字段
             */
            dataValueField: "value",
            /**
             * @cfg {Array} [dataSource='name'] 数据源，如果元素是`select`则去其`options`节点
             */
            dataSource: [],
            /**
             * @cfg {String} [placeholder=''] 提示信息
             */
            placeholder: "",
            /**
             * @cfg {Number} [rowCount=10000] 显示结果展示条数
             */
            rowCount: 10000,
            /**
             * @cfg {Number} [delay=300] 延迟搜索，避免过多无效搜索，单位毫秒ms，默认是300ms
             */
            delay: 300,
            /**
             * @cfg {Boolean} 此值为true时可以手动输入内容，为false时只能选择不能输入，默认为true。
             */
            editable: true,
            /**
             * @cfg {Boolean} [forceSelection=true] true:只能选择dataSource中的值（默认），false:可以接收用户输入的
             */
            forceSelection: true

            /**
             * @cfg {Function} [close=null] 定义关闭下拉框选项事件函数，事件名称combobox:close
             */

            /**
             * @cfg {Function} [change=null] 定义改变下拉框值事件函数，事件名称combobox:change
             */

            /**
             * @cfg {Function} [open=null] 定义显示下拉框选项事件函数，事件名称combobox:open
             */
        },
        _create: function () {
            this.$container = $(template);
            this.$input = this.$container.find('input');
            this.$button = this.$container.find('.input-group-addon');

            this.element.hide().before(this.$container);

            if (this.element.is('select')) {
                this.options.dataSource = this._parseSelect(); //解析select原始值
            }

            this.$menu = $('<ul class="dropdown-list"></ul>');
            this.setEditable(this.options.editable);
            this.transferAttributes();

            // call formfield _create method
            this._super();

            this._delegateEvent();
        },

        _init: function () {
            this.shown = false;
            this.selected = false;

            // 处理dataTextField的值为非字符串的问题
            if (this.options.dataSource && this.options.dataSource.length) {
                var that = this;
                $.each(this.options.dataSource, function (i, item) {
                    item[that.options.dataTextField] += "";
                });
            }

            // 处理浏览器对select的默认行为
            if (!this.element.is('select') || this.element.find("option:selected").attr("selected")) {
                this.value(this.options.value || this.element.val());
            } else {
                this.value(null);
            }
        },
        _validateHandler: function () {
            var that = this;

            this._on({
                'combobox:blur': function () {
                    if (that._getValidFlag()) {
                        that.element.isValid();
                    }
                }
            });
        },

        _setOption: function (key, value) {
            this._super(key, value);

            if (key === 'disabled') {
                this.$input.prop('disabled', value);
                this.$button.attr('disabled', value);
            }
        },

        /**
         * 是否可以手动输入内容
         * @param {Boolean} editable 此值为true时可以手动输入内容，为false时只能选择不能输入，默认为true。
         */
        setEditable: function (editable) {
            editable = !!editable;
            this.options.editable = editable;
            if (editable) {
                this.$input.removeAttr('readonly');
                this.$input.clearinput();

                this._on(this.$input, {
                    'blur': '_onBlur',
                    'keydown': '_onKeyDown'
                });
            } else {
                this.$input.attr("readonly", true);
                this._off(this.$input);

                if (this.$input.data('ui-clearinput')) {
                    this.$input.clearinput('destroy');
                }
            }
            return this;
        },

        /**
         * @method text 取文本值或者赋文本值
         * @param  {String} [text] 设置文本值,为空则取文本值
         * @return {String} 文本值,赋值操作则没有返回值
         */
        text: function (text) {
            if (text === undefined) {
                return this.$input.val();
            } else {
                this.$input.val(text);
            }
        },

        /**
         * @method value 取值或者赋值
         * @param  {String} [value] 设置值选中,为空则取控件值
         * @return {String} 控件值,赋值操作则没有返回值
         */
        value: function (value) {
            var options = this.options,
                target;
            if (fish.isUndefined(value)) {
                return this.element.val();
            } else {
                target = _.find(options.dataSource, function (item) {
                    if (item[options.dataValueField] === value) {
                        return true;
                    }
                });

                //#551
                if (target || options.forceSelection) {
                    this._select(target);
                } else {
                    this._setElementValue(value);
                    this.$input.val(value);
                }
            }
        },

        /**
         * @method clear 清空选择内容
         */
        clear: function () {
            this._select(null);
        },

        _destroy: function () {
            this.$menu.remove();
            this.element.prev().remove();
            this.element.show();
        },

        _parseSelect: function () {
            var that = this,
                source = [],
                item,
                option;

            this.element.children().each(function () {
                option = $(this);
                item = {};
                item[that.options.dataTextField] = option.text();
                item[that.options.dataValueField] = option.val();
                source.push(item);
            });
            return source;
        },
        transferAttributes: function () {
            this.options.placeholder = this.options.placeholder || this.element.attr('data-placeholder') || this.element.attr('placeholder');
            this.$input.attr('placeholder', this.options.placeholder);
            this.element.removeAttr('tabindex');
            if (this.element.attr('disabled') !== undefined) {
                this.disable();
            }
        },

        _setDataSource: function (dataSource) {
            this.options.dataSource = dataSource;
        },

        show: function () {
            if (!this.shown) {
                this.$menu.css('width', this.$container.outerWidth());
                $('body').append(this.$menu);

                this._on($(document), {
                    'mousedown': $.proxy(function (e) {
                        //#517 排除自己
                        if (this.$menu.is(e.target) || $.contains(this.$menu[0], e.target) || $.contains(this.$container[0], e.target)) {
                            return;
                        }
                        this.hide();
                    }, this)
                });

                // add iframe click resolve
                this._on($(window), {
                    blur: 'hide'
                });

                this.shown = true;
                this._trigger('open');
            }

            this.$menu.position({
                my: "left top",
                at: "left bottom",
                of: this.$container,
                collision: "fit flip"
            });
        },

        hide: function () {
            this._off($(document));
            this._off($(window));

            this.$menu.detach();
            this.shown = false;
            this._trigger('close');
        },

        lookup: function (query) {
            var that = this,
                items = $.grep(this.options.dataSource, function (item) {
                return that.matcher(item, query);
            });

            items = this.sorter(items, query);

            if (!items.length) {
                //没有匹配项
                //#551
                if (!this.options.forceSelection) {
                    this._setSelected(true);
                    this._setElementValue(this.$input.val());
                }
                return this.shown ? this.hide() : this;
            }

            // 有匹配项
            if (!this.options.forceSelection) {
                this._setElementValue(this.$input.val()); //#551,最终被选中项覆盖
            }

            return this.render(items.slice(0, parseInt(this.options.rowCount, 10)), query).show();
        },

        matcher: function (item, query) {
            return ~item[this.options.dataTextField].toLowerCase().indexOf(query.toLowerCase()); //转换成数字0 以及非0
        },

        sorter: function (items, query) {
            var beginswith = [],
                caseSensitive = [],
                caseInsensitive = [],
                that = this;

            _.forEach(items, function (item) {
                if (!item[that.options.dataTextField].toLowerCase().indexOf(query.toLowerCase())) {
                    beginswith.push(item);
                } else if (~item[that.options.dataTextField].indexOf(query)) {
                    caseSensitive.push(item);
                } else {
                    caseInsensitive.push(item);
                }
            });

            return beginswith.concat(caseSensitive, caseInsensitive);
        },

        /*
         * 高亮显示
         * @param item
         */
        highlighter: function (item, query) {
            query = query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
            return item.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {
                return '<strong>' + match + '</strong>';
            });
        },

        render: function (items, query) {
            var that = this;

            items = $(items).map(function (i, item) {
                i = $(MENU_ITEM).data('value', item);
                i.html(that.highlighter(item[that.options.dataTextField], query));
                return i[0];
            });

            items.first().addClass('active');
            this.$menu.html(items);
            return this;
        },

        next: function (event) {
            var active = this.$menu.find('.active').removeClass('active'),
                next = active.next();

            if (!next.length) {
                next = $(this.$menu.find('li')[0]);
            }

            next.addClass('active');
        },

        prev: function (event) {
            var active = this.$menu.find('.active').removeClass('active'),
                prev = active.prev();

            if (!prev.length) {
                prev = this.$menu.find('li').last();
            }

            prev.addClass('active');
        },

        reset: function () {
            if (this.options.disabled) {
                return;
            }

            if (this.selected) {
                this.clearTarget();
                this.clearElement();
                this._triggerChange();
            } else {
                if (this.shown) {
                    this.hide();
                } else {
                    this.clearElement();
                }
            }
        },

        clearElement: function () {
            this.$input.val('').focus();
        },
        clearTarget: function () {
            this.element.val('');
            this._setSelected(false);
        },

        _setSelected: function (selected) {
            this.selected = selected;
        },

        _delegateEvent: function () {
            this._on(this.$container, {
                'click .form-clear-input': 'clear',
                'click .input-group-addon': '_onButtonToggle'
            });

            this._on(this.$menu, {
                'click li': '_onMenuClick',
                'mouseenter li': '_onMenuMouseEnter'
            });
        },

        _onBlur: function (e) {
            // when no selected then clear the input value
            if (this.options.forceSelection === true && !this.selected) {
                this.$input.data('ui-clearinput')._clearField();
            }

            //input离开的时候,触发combobox:blur供检验用
            this._trigger('blur');
        },

        _onKeyDown: function (e) {
            switch (e.keyCode) {
                case KEY_CODE.LEFT:
                case KEY_CODE.RIGHT:
                case KEY_CODE.HOME:
                case KEY_CODE.END:
                    break;

                case KEY_CODE.TAB:
                case KEY_CODE.ENTER:
                    if (this.shown) {
                        e.preventDefault();
                        this._onMenuSelect();
                    }
                    break;

                case KEY_CODE.ESCAPE:
                    if (this.shown) {
                        e.stopPropagation();
                        this.hide();
                    }
                    break;

                //#551
                case KEY_CODE.BACKSPACE:
                case KEY_CODE.DELETE:
                    this.options.forceSelection && this.value() && this.clear();
                    break;

                case KEY_CODE.UP:
                    this.shown && this.prev();
                    break;

                case KEY_CODE.DOWN:
                    this.shown && this.next();
                    break;

                default:
                    this.clearTarget();

                    if (!this._delaySearch) this._delaySearch = _.debounce(this.lookup, this.options.delay);
                    this._delaySearch(this.$input.val());
            }
        },

        _onMenuClick: function (e) {
            e.stopPropagation();
            this._onMenuSelect();
            this.$input.focus();
        },

        _onMenuMouseEnter: function (e) {
            this.$menu.find('.active').removeClass('active');
            $(e.currentTarget).addClass('active');
        },

        _onButtonToggle: function (e) {
            if (this.options.disabled) {
                return;
            }

            if (this.shown) {
                this.hide();
            } else {
                this.$input.focus();
                this.lookup(this.selected ? '' : this.$input.val());
            }
        },

        _onMenuSelect: function () {
            var item = this.$menu.find('.active').data('value');
            this._select(item);
            this.hide();
        },
        //与_select的区别在于old == item.value;form会优先执行reset,clear,setvalue操作
        _onFormReset: function () {
            if (this.element.is('select') && this.element.find("option[selected]").length === 0) {
                this.element[0].selectedIndex = -1;
            }
            this._update();
        },
        _onFormClear: function () {
            this._update();
        },
        _formSetValue: function (value) {
            this._update();
        },
        _update: function () {
            var options = this.options,
                target,
                value = this.element.val();
            if (value) {
                target = _.find(options.dataSource, function (item) {
                    if (item[options.dataValueField] === value) {
                        return true;
                    }
                });
            }
            if (target) {
                this.$input.val(target[options.dataTextField]);
                this._setSelected(true);
            } else {
                this.$input.val('');
                this._setSelected(false);
            }
        },

        _select: function (item) {
            var options = this.options,
                old = this.element.val();

            if (item) {
                this._setSelected(true);
                this.$input.val(item[options.dataTextField]);

                if (item[options.dataValueField] !== old) {
                    this.element.val(item[options.dataValueField]);
                    this._triggerChange();
                }
            } else {
                this._setSelected(false);
                this.$input.val('');

                if (old) {
                    this.element.val('');
                    this._triggerChange();
                }
            }
        },

        _triggerChange: function () {
            this._trigger('change');
        },

        // element赋值和change事件必须在一起
        _setElementValue: function (value) {
            this.element.val(value);
            this._triggerChange();
        }

    });
})();

/**
* 日期时间控件
* @class fish.desktop.widget.DatetimePicker
* @extends fish.desktop.widget
* <pre>
*   $(element).datetimepicker(option);
* </pre>
*/
!(function () {
    'use strict';

    function isDateEquals(date1, date2) {
        return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();
    }

    var dates = fish.getResource('datetimepicker'),
        DateUtil = fish.dateutil,
        DPGlobal = {
        viewType: {
            'time': {
                buttonIcon: 'time',
                startView: 0,
                endView: 0,
                parseFormat: 'hh:ii:ss',
                format: 'hh:ii:ss'
            },
            'datetime': {
                buttonIcon: 'calendar',
                startView: 0,
                endView: 2,
                parseFormat: 'yyyy-mm-dd hh:ii:ss',
                format: 'yyyy-mm-dd hh:ii:ss'
            },
            'date': {
                buttonIcon: 'calendar',
                startView: 0,
                endView: 2,
                parseFormat: 'yyyy-mm-dd',
                format: 'yyyy-mm-dd'
            },
            'month': {
                buttonIcon: 'th',
                startView: 1,
                endView: 2,
                parseFormat: 'yyyy-mm',
                format: 'yyyy-mm'
            },
            'year': {
                buttonIcon: 'th-large',
                startView: 2,
                endView: 2,
                parseFormat: 'yyyy',
                format: 'yyyy'
            }
        },
        modes: [{
            clsName: 'days',
            navFnc: 'Month',
            navStep: 1
        }, {
            clsName: 'months',
            navFnc: 'FullYear',
            navStep: 1
        }, {
            clsName: 'years',
            navFnc: 'FullYear',
            navStep: 10
        }],
        headTemplate: '\n                <thead>\n                    <tr>\n                        <th class="prev"><i class="glyphicon glyphicon-arrow-left"></i></th>\n                        <th colspan="5" class="datetimepicker-switch"></th>\n                        <th class="next"><i class="glyphicon glyphicon-arrow-right"></i></th>\n                    </tr>\n                </thead>',
        timeTemplate: '<span class="label label-hours"></span> : <span class="label label-minutes"></span> : <span class="label label-seconds"></span><a class="btn datetimepicker-now">Now</a><a class="btn">OK</a>',
        todayTemplate: '<tr><th colspan="7" class="today"></th></tr>'
    },
        timePickerTemplate = '\n            <div>\n                <table>\n                    <tfoot>\n                        <tr>\n                            <th colspan="7">\n                                ' + DPGlobal.timeTemplate + '\n                            </th>\n                        </tr>\n                    </tfoot>\n                </table>\n            </div>',
        timeTemplate = fish.compile('\n            <div class="datetimepicker-times">\n                <table>\n                    <thead>\n                        <tr>\n                            <th colspan="7">{{title}}</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td colspan="7">\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>'),
        dayTemplate = '\n            <div class="datetimepicker-days">\n                <table>\n                    ' + DPGlobal.headTemplate + '\n                    <tbody></tbody>\n                    <tfoot></tfoot>\n                </table>\n            </div>',
        monthTemplate = fish.compile('\n            <div class="datetimepicker-months">\n                <table>\n                    ' + DPGlobal.headTemplate + '\n                    <tbody>\n                        <tr>\n                            <td colspan="7">\n                                {{#each monthsShort}}\n                                <span class="month">{{this}}</span>\n                                {{/each}}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>'),
        yearTemplate = '\n            <div class="datetimepicker-years">\n                <table>\n                    ' + DPGlobal.headTemplate + '\n                    <tbody>\n                        <tr>\n                            <td colspan="7">\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>';

    $.widget("ui.datetimepicker", $.ui.formfield, {
        options: {
            /**
             * 提供默认的时间类型:日期格式date与时间格式time;默认值为datetime,此时可以自定义时间控件
             * @cfg {String} viewType='datetime'
             */
            viewType: 'datetime',
            /**
             * @cfg {String} buttonIcon='remove th' 是否显示图标;remove表示显示清空按钮,th表示显示点击弹出日期时间选择层,th可选值calendar、time可表示日历、时间选择器;当然可以使用任意的glyphicon图标
             */
            buttonIcon: 'th',
            /** @cfg {String} format = 'yyyy-mm-dd hh:ii' 时间格式化方式。
             *  日期格式， p, P, h, hh, i, ii, s, ss, d, dd, m, mm, M, MM, yy, yyyy 的任意组合。
             *  <pre>
             p : 上午还是下午，小写字母 ('am' 或 'pm') - 与国际化文件有关
             P : 上午还是下午，大写字母 ('AM' 或 'PM') - 与国际化文件有关
             s : 秒，小于10前面不补0
             ss :秒，2位，小于10时前面补零
             i : 分钟，小于10时前面不补零
             ii : 分钟，2位，小于10时前面补零
             h : 小时，小于10时前面不补零---24小时制
             hh : 小时，2位，小于10时前面补零---24小时制
             H : 小时，小于10时前面不补零---12小时制
             HH : 小时，2位，小于10时前面补零---12小时制
             d : 一个月中的第几天，小于10时前面不补零
             dd : 一个月中的第几天，小于10时前面补零
             m : 月份，小于10时前面不补零
             mm : 月份，2位，小于10时前面补零
             M :月份缩写（英文），3个字母
             MM : 月份全拼（英文），例如:January、March
             yy : 2位数年份
             yyyy : 4位数年份
             *  </pre>
             */
            format: '',
            /**
             *  @cfg {String} 初始化的时间值
             */
            initialDate: null,
            /**
             * @cfg {Boolean} autoClose=false 当选择一个日期之后是否立即关闭此日期时间选择器
             */
            autoClose: true,
            /**
             * @cfg {Boolean} todayBtn=false 在日期时间选择器组件的底部显示一个 "Today" 按钮用以选择当前日期。可选值true表示能出现按钮，可选值"linked"，则当天日期将会被选中。
             */
            todayBtn: false,
            /**
             * @cfg {Boolean} todayHighlight=true 高亮当前日期。
             */
            todayHighlight: true,
            /**
             * @cfg {Number} [weekStart=0] 一周从哪一天开始。0（星期日）到6（星期六）。
             */
            weekStart: 0,
            /**
             * @cfg {String} [startDate=''] 能选择的开始时间，之前的时间全部失效;默认是无穷小
             *
             */
            startDate: '',
            /**
             * @cfg {String} [endDate=''] 能选择的结束时间，之后的时间全部失效;默认是无穷大
             */
            endDate: '',
            /**
             * @cfg {Array} [daysOfWeekDisabled=[]] 一周的哪几天不能选择，譬如‘0,6’表示周日和周六禁止选择
             */
            daysOfWeekDisabled: [],
            /**
             * @cfg {Array} [daysOfWeekHighlighted=[]] 一周的哪几天高亮，譬如‘0,6’表示周日和周六高亮
             * @since V1.5.0
             */
            daysOfWeekHighlighted: [],
            /**
             * @cfg {Array|String} [datesDisabled=[]] 哪几天不能选择，可以是数组或者字符串
             * @since V1.5.0
             */
            datesDisabled: [],
            /**
             * @cfg {Boolean} [showOnFocus=true] 聚焦显示日期选择，默认是true
             * @since V1.5.0
             */
            showOnFocus: true,
            /**
             * @cfg {Boolean} [immediateUpdates=false] 选择时间立即更新值，默认是false
             * @since V1.5.0
             */
            immediateUpdates: false,
            /**
             * @cfg {String} [orientation='auto'] 日期展示位置，默认是auto
             * @since V1.5.0
             */
            orientation: 'auto',
            /**
             * @cfg {Boolean} [rtl=false] 日期展示方式，默认是从左到右
             * @since V1.5.0
             */
            rtl: false,
            /**
             * @cfg {Boolean} [inline=false] 日期内联展示，默认是false
             * @since V1.5.0
             */
            inline: false,
            /**
             * @cfg {String} [container='body'] 日期插入位置，默认是'body'
             */
            container: 'body',

            /**
             * @cfg {Number} [zIndexOffset='10'] 日期插入z-index偏移值
             */
            zIndexOffset: 10
        },
        //初始化参数
        _create: function () {
            this.picker = $('<div class="datetimepicker"></div>');

            var plc = String(this.options.orientation).toLowerCase().split(/\s+/g),
                _plc = this.options.orientation.toLowerCase();

            if (!_plc || _plc === 'auto') this.options.orientation = { x: 'auto', y: 'auto' };else {
                this.options.orientation.x = plc[0] || 'auto';
                this.options.orientation.y = plc[0] || 'auto';
            }

            var viewType = DPGlobal.viewType[this.options.viewType];

            if (!this.options.format) {
                this.options.format = fish.config.get('dateDisplayFormat.' + this.options.viewType) || viewType.format;
            }

            this.isInline = this.options.inline;

            this.isInput = this.element.is('input');

            if (!this.isInline && this.isInput) {
                if (this.options.buttonIcon) {
                    this.clearInput = this.element.clearinput();
                    this.options.buttonIcon = viewType.buttonIcon;
                    this._createIcon();
                    this.component = this.element.nextAll('.input-group-addon');
                }
            }

            this.startView = viewType.startView;
            this.endView = viewType.endView;
            this.viewMode = this.startView;

            this.options.weekStart %= 7;
            this.options.weekEnd = (this.options.weekStart + 6) % 7;

            if (this.isInline) {
                this.picker.addClass('datetimepicker-inline').appendTo(this.element);
            } else {
                this.picker.addClass('datetimepicker-dropdown dropdown-menu');
            }

            if (this.options.rtl) {
                this.picker.addClass('datetimepicker-rtl');
            }

            this._allow_update = false;

            this._buildView();
            this._bindEvent();

            this._allow_update = true;

            this.update();

            if (this.isInline) {
                this.show();
            }

            // call formfield _create method
            this._super();
        },

        _buildView: function () {
            this.parseFormat = fish.config.get('dateParseFormat.' + this.options.viewType) || DPGlobal.viewType[this.options.viewType].parseFormat;

            this.setStartDate(this.options.startDate);
            this.setEndDate(this.options.endDate);
            this.setDaysOfWeekDisabled(this.options.daysOfWeekDisabled);
            this.setDaysOfWeekHighlighted(this.options.daysOfWeekHighlighted);
            this.setDatesDisabled(this.options.datesDisabled);

            if (this.options.viewType !== 'time') {
                this.picker.append(yearTemplate);
                this.picker.append(monthTemplate({
                    monthsShort: dates.monthsShort
                }));

                if (this.options.viewType === 'date' || this.options.viewType === 'datetime') {
                    this.picker.append(dayTemplate);

                    this.fillDow();
                }
            } else {
                this.picker.append(timePickerTemplate);
            }
        },

        _bindEvent: function () {
            var events;

            if (this.isInput) {
                // single input
                events = {
                    'change': _.bind(function (e) {
                        if (_.indexOf([27, 37, 39, 38, 40, 32, 13, 9], e.keyCode) === -1) this.update();
                    }, this),
                    'keydown': 'keydown',
                    'blur': _.bind(function (e) {
                        this._focused_from = e.target;
                    }, this)
                };
            } else {
                events = {
                    'click': 'show'
                };
            }

            if (this.component) {
                // component: input + button
                this._on(this.component, {
                    'click': 'show'
                });
            }

            if (this.options.showOnFocus === true) {
                events.focus = 'show';
            }

            if (this.options.immediateUpdates) {
                _.extend(events, {
                    'datetimepicke:changeYear': '_changeDate',
                    'datetimepicke:changeMonth': '_changeDate',
                    'datetimepicke:changeHour': '_changeDate',
                    'datetimepicke:changeMinute': '_changeDate',
                    'datetimepicke:changeSecond': '_changeDate'
                });
            }

            this._on(events);

            this._secondaryEvents = [[this.picker, {
                click: _.bind(this.click, this)
            }], [$(document), {
                mousedown: _.bind(function (e) {
                    // Clicked outside the datetimepicker, hide it
                    if (!(this.element.is(e.target) || this.element.find(e.target).length || this.picker.is(e.target) || this.picker.find(e.target).length || this.picker.hasClass('datetimepicker-inline'))) {
                        this.viewDate = this.date || new Date();
                        this.hide();
                    }
                }, this)
            }]];
        },

        _applyEvents: function (evs) {
            for (var i = 0, el, ch, ev; i < evs.length; i++) {
                el = evs[i][0];
                if (evs[i].length === 2) {
                    ch = undefined;
                    ev = evs[i][1];
                } else if (evs[i].length === 3) {
                    ch = evs[i][1];
                    ev = evs[i][2];
                }
                el.on(ev, ch);
            }
        },
        _unapplyEvents: function (evs) {
            for (var i = 0, el, ev, ch; i < evs.length; i++) {
                el = evs[i][0];
                if (evs[i].length === 2) {
                    ch = undefined;
                    ev = evs[i][1];
                } else if (evs[i].length === 3) {
                    ch = evs[i][1];
                    ev = evs[i][2];
                }
                el.off(ev, ch);
            }
        },

        _attachSecondaryEvents: function () {
            this._detachSecondaryEvents();
            this._applyEvents(this._secondaryEvents);
        },

        _detachSecondaryEvents: function () {
            this._unapplyEvents(this._secondaryEvents);
        },

        _changeDate: function (e, value) {
            this.update(value.date);
        },

        update: function (date) {
            if (!this._allow_update) return this;

            var oldDates = this.date instanceof Date ? new Date(this.date) : undefined,
                fromArgs = false;
            if (!fish.isUndefined(date)) {
                fromArgs = true;
            } else {
                date = this.options.initialDate || DateUtil.parse(this.element.val(), this.options.format);
            }

            this.date = DateUtil.parse(date, this.parseFormat);

            if (this.date) this.viewDate = new Date(this.date);else if (this.viewDate < this.options.startDate) this.viewDate = new Date(this.options.startDate);else if (this.viewDate > this.options.endDate) this.viewDate = new Date(this.options.endDate);else this.viewDate = new Date();

            if (fromArgs) {
                // setting date by clicking
                this.setValue();
                this._trigger('changeDate', null, { date: this.date });
            } else if (date) {
                // setting date by typing
                if (String(oldDates) !== String(this.date)) this._trigger('changeDate');
            }

            if (!this.date && oldDates) {
                this._trigger('clearDate');
            }

            this.showMode();
            return this;
        },

        showMode: function (dir) {
            if (this.options.viewType === 'time') {
                var d = new Date(this.viewDate),
                    hour,
                    minute,
                    second;

                hour = d.getHours();
                if (hour < 10) hour = '0' + hour;

                minute = d.getMinutes();
                if (minute < 10) minute = '0' + minute;

                second = d.getSeconds();
                if (second < 10) second = '0' + second;

                this.picker.find('.label-hours').text(hour);
                this.picker.find('.label-minutes').text(minute);
                this.picker.find('.label-seconds').text(second);

                this.picker.children('div').show();
            } else {
                if (dir) {
                    this.viewMode = Math.max(this.startView, Math.min(this.endView, this.viewMode + dir));
                }

                this.picker.children('div').hide().filter('.datetimepicker-' + DPGlobal.modes[this.viewMode].clsName).show();

                switch (this.viewMode) {
                    case 0:
                        this.updateDays();
                        break;
                    case 1:
                        this.updateMonths();
                        break;
                    case 2:
                        this.updateYears();
                        break;
                }

                this.updateNavArrows();
            }
        },

        fillDow: function () {
            var dowCnt = this.options.weekStart,
                html = '<tr>';
            if (this.options.calendarWeeks) {
                this.picker.find('.datetimepicker-days .datetimepicker-switch').attr('colspan', function (i, val) {
                    return parseInt(val) + 1;
                });
                html += '<th class="cw">&#160;</th>';
            }
            while (dowCnt < this.options.weekStart + 7) {
                html += '<th class="dow">' + dates.daysMin[dowCnt++ % 7] + '</th>';
            }
            html += '</tr>';
            this.picker.find('.datetimepicker-days thead').append(html);

            if (this.options.viewType === 'datetime') {
                this.picker.find('.datetimepicker-days tfoot').append('<tr><th colspan="7">' + DPGlobal.timeTemplate + '</th></tr>');
            } else {
                this.picker.find('.datetimepicker-days tfoot').append(DPGlobal.todayTemplate);
            }
        },

        getClassNames: function (date) {
            var cls = [],
                year = this.viewDate.getFullYear(),
                month = this.viewDate.getMonth(),
                today = new Date();

            if (date.getFullYear() < year || date.getFullYear() === year && date.getMonth() < month) {
                cls.push('old');
            } else if (date.getFullYear() > year || date.getFullYear() === year && date.getMonth() > month) {
                cls.push('new');
            }

            // Compare internal  date with local today, not  today
            if (this.options.todayHighlight && date.getFullYear() === today.getFullYear() && date.getMonth() === today.getMonth() && date.getDate() === today.getDate()) {
                cls.push('today');
            }
            if (this.date && isDateEquals(this.date, date)) cls.push('active');
            if (date.valueOf() < this.options.startDate || date.valueOf() > this.options.endDate || _.indexOf(this.options.daysOfWeekDisabled, date.getDay()) !== -1) {
                cls.push('disabled');
            }
            if (_.indexOf(this.options.daysOfWeekHighlighted, date.getDay()) !== -1) {
                cls.push('highlighted');
            }
            if (this.options.datesDisabled.length > 0 && _.find(this.options.datesDisabled, function (d) {
                return isDateEquals(date, d);
            })) {
                cls.push('disabled', 'disabled-date');
            }

            if (this.range) {
                if (date > this.range[0] && date < this.range[this.range.length - 1]) {
                    cls.push('range');
                }
                if (_.indexOf(this.range, date.valueOf()) !== -1) {
                    cls.push('selected');
                }
            }
            return cls;
        },

        updateYears: function () {
            var d = new Date(this.viewDate),
                year = d.getFullYear(),
                startYear = this.options.startDate !== -Infinity ? this.options.startDate.getFullYear() : -Infinity,
                endYear = this.options.endDate !== Infinity ? this.options.endDate.getFullYear() : Infinity,
                html = '';

            year = parseInt(year / 10, 10) * 10;
            var yearCont = this.picker.find('.datetimepicker-years').find('.datetimepicker-switch').text(year + '-' + (year + 9)).end().find('td');
            year -= 1;
            var dateY = this.date && this.date.getFullYear(),
                classes;
            for (var i = -1; i < 11; i++) {
                classes = ['year'];

                if (i === -1) classes.push('old');else if (i === 10) classes.push('new');
                if (year === dateY) classes.push('active');
                if (year < startYear || year > endYear) classes.push('disabled');

                html += '<span class="' + classes.join(' ') + '">' + year + '</span>';
                year += 1;
            }
            yearCont.html(html);
        },

        updateMonths: function () {
            var d = new Date(this.viewDate),
                year = d.getFullYear(),
                startYear = this.options.startDate !== -Infinity ? this.options.startDate.getFullYear() : -Infinity,
                startMonth = this.options.startDate !== -Infinity ? this.options.startDate.getMonth() : -Infinity,
                endYear = this.options.endDate !== Infinity ? this.options.endDate.getFullYear() : Infinity,
                endMonth = this.options.endDate !== Infinity ? this.options.endDate.getMonth() : Infinity;

            var months = this.picker.find('.datetimepicker-months').find('.datetimepicker-switch').text(year).end().find('span').removeClass('active');

            if (this.date) {
                if (this.date.getFullYear() === year) months.eq(this.date.getMonth()).addClass('active');
            }

            if (year < startYear || year > endYear) {
                months.addClass('disabled');
            }
            if (year === startYear) {
                months.slice(0, startMonth).addClass('disabled');
            }
            if (year === endYear) {
                months.slice(endMonth + 1).addClass('disabled');
            }
        },

        updateDays: function () {
            var d = new Date(this.viewDate),
                year = d.getFullYear(),
                month = d.getMonth(),
                todaytxt = dates.today,
                hour,
                minute,
                second;

            if (isNaN(year) || isNaN(month)) return;

            this.picker.find('.datetimepicker-days thead .datetimepicker-switch').text(DateUtil.format(new Date(year, month), 'yyyy-mm'));
            this.picker.find('tfoot .today').text(todaytxt).toggle(this.options.todayBtn !== false);

            var prevMonth = new Date(year, month - 1, 28),
                day = DateUtil.getDaysInMonth(prevMonth.getFullYear(), prevMonth.getMonth());
            prevMonth.setDate(day);
            prevMonth.setDate(day - (prevMonth.getDay() - this.options.weekStart + 7) % 7);

            var nextMonth = new Date(prevMonth);
            nextMonth.setDate(nextMonth.getDate() + 42);
            nextMonth = nextMonth.valueOf();
            var html = [];
            var clsName;
            while (prevMonth.valueOf() < nextMonth) {
                if (prevMonth.getDay() === this.options.weekStart) {
                    html.push('<tr>');
                    if (this.options.calendarWeeks) {
                        // ISO 8601: First week contains first thursday.
                        // ISO also states week starts on Monday, but we can be more abstract here.
                        var
                        // Start of current week: based on weekstart/current date
                        ws = new Date(+prevMonth + (this.options.weekStart - prevMonth.getDay() - 7) % 7 * 864e5),

                        // Thursday of this week
                        th = new Date(Number(ws) + (7 + 4 - ws.getDay()) % 7 * 864e5),

                        // First Thursday of year, year from thursday
                        yth = new Date(Number(yth = new Date(th.getFullYear(), 0, 1)) + (7 + 4 - yth.getDay()) % 7 * 864e5),

                        // Calendar week: ms between thursdays, div ms per day, div 7 days
                        calWeek = (th - yth) / 864e5 / 7 + 1;
                        html.push('<td class="cw">' + calWeek + '</td>');
                    }
                }
                clsName = this.getClassNames(prevMonth);
                clsName.push('day');

                clsName = _.unique(clsName);
                html.push('<td class="' + clsName.join(' ') + '">' + prevMonth.getDate() + '</td>');
                if (prevMonth.getDay() === this.options.weekEnd) {
                    html.push('</tr>');
                }
                prevMonth.setDate(prevMonth.getDate() + 1);
            }
            this.picker.find('.datetimepicker-days tbody').empty().append(html.join(''));

            if (this.options.viewType === 'datetime') {
                hour = d.getHours();
                if (hour < 10) hour = '0' + hour;

                minute = d.getMinutes();
                if (minute < 10) minute = '0' + minute;

                second = d.getSeconds();
                if (second < 10) second = '0' + second;

                this.picker.find('.datetimepicker-days .label-hours').text(hour);
                this.picker.find('.datetimepicker-days .label-minutes').text(minute);
                this.picker.find('.datetimepicker-days .label-seconds').text(second);
            }
        },

        updateHours: function () {
            var d = new Date(this.viewDate),
                hour = d.getHours(),
                html = '',
                i = 0,
                clsName,
                $template;

            $template = $(timeTemplate({
                title: 'Choose Hour'
            }));

            for (; i < 24; i++) {
                clsName = ['hour'];
                if (i === hour) {
                    clsName.push('active');
                }
                html += '<span class="' + clsName.join(' ') + '">' + i + '</span>';
            }
            $template.find('td').append(html);

            this.picker.append($template);
            this.picker.children('div').hide().filter('.datetimepicker-times').show();
        },

        updateMinutes: function () {
            var d = new Date(this.viewDate),
                minute = d.getMinutes(),
                html = '',
                i = 0,
                j,
                v,
                clsName,
                $template;

            $template = $(timeTemplate({
                title: 'Choose Minute'
            }));

            for (; i < 6; i++) {
                for (j = 0; j < 10; j++) {
                    clsName = ['minute'];
                    v = j + i * 10;
                    if (v === minute) {
                        clsName.push('active');
                    }
                    html += '<span class="' + clsName.join(' ') + '">' + v + '</span>';
                }
            }
            $template.find('td').append(html);

            this.picker.append($template);
            this.picker.children('div').hide().filter('.datetimepicker-times').show();
        },

        updateSeconds: function () {
            var d = new Date(this.viewDate),
                second = d.getSeconds(),
                html = '',
                i = 0,
                j,
                v,
                clsName,
                $template;

            $template = $(timeTemplate({
                title: 'Choose Second'
            }));

            for (; i < 6; i++) {
                for (j = 0; j < 10; j++) {
                    clsName = ['second'];
                    v = j + i * 10;
                    if (v === second) {
                        clsName.push('active');
                    }
                    html += '<span class="' + clsName.join(' ') + '">' + v + '</span>';
                }
            }
            $template.find('td').append(html);

            this.picker.append($template);
            this.picker.children('div').hide().filter('.datetimepicker-times').show();
        },

        /**
         * @method show 显示日期
         */
        show: function () {
            if (!this.isInline) this.picker.appendTo(this.options.container);
            this.place();
            this.picker.show();
            this._attachSecondaryEvents();
            this._trigger('show');
            return this;
        },

        /**
         * @method hide 隐藏日期
         */
        hide: function () {
            if (this.isInline) return this;
            if (!this.picker.is(':visible')) return this;
            this.picker.hide().detach();
            this._detachSecondaryEvents();
            this.viewMode = this.startView;
            this.showMode();

            if (this.isInput && this.element.val()) this.setValue();

            this._trigger('hide');
            return this;
        },

        setValue: function () {
            var formatted = this.getFormattedDate();
            this.element.val(formatted);
            return this;
        },

        getFormattedDate: function (format) {
            if (format === undefined) format = this.options.format;

            return DateUtil.format(this.date, format);
        },

        clearDate: function () {
            this.value('');
        },

        /**
         * @since V1.5.0
         * @method setDate 设置日期
         * @param {Date|String} date
         */
        setDate: function (date) {
            this.update(date);
            return this;
        },

        /**
         * @since V1.5.0
         * @method setStartDate 设置开始日期
         * @param {String} startDate
         */
        setStartDate: function (startDate) {
            this.options.startDate = DateUtil.parse(startDate, this.parseFormat);
            this.options.startDate = this.options.startDate || -Infinity;
            this.update();
            this.updateNavArrows();
            return this;
        },

        /**
         * @since V1.5.0
         * @method setEndDate 设置结束日期
         * @param {String} startDate
         */
        setEndDate: function (endDate) {
            this.options.endDate = DateUtil.parse(endDate, this.parseFormat);
            this.options.endDate = this.options.endDate || Infinity;
            this.update();
            this.updateNavArrows();
            return this;
        },

        /**
         * @since V1.5.0
         * @method setDaysOfWeekDisabled 一周的哪几天不能选择
         * @param {Array|String} daysOfWeekDisabled
         */
        setDaysOfWeekDisabled: function (daysOfWeekDisabled) {
            if (!_.isArray(daysOfWeekDisabled)) daysOfWeekDisabled = daysOfWeekDisabled.split(/[,\s]*/);
            daysOfWeekDisabled = _.map(daysOfWeekDisabled, function (d) {
                return parseInt(d, 10);
            });

            this.options.daysOfWeekDisabled = daysOfWeekDisabled;
            this.update();
            this.updateNavArrows();
            return this;
        },

        /**
         * @since V1.5.0
         * @method setDaysOfWeekHighlighted 一周的哪几天高亮
         * @param {Array|String} daysOfWeekHighlighted
         */
        setDaysOfWeekHighlighted: function (daysOfWeekHighlighted) {
            if (!_.isArray(daysOfWeekHighlighted)) daysOfWeekHighlighted = daysOfWeekHighlighted.split(/[,\s]*/);
            daysOfWeekHighlighted = _.map(daysOfWeekHighlighted, function (d) {
                return parseInt(d, 10);
            });

            this.options.daysOfWeekHighlighted = daysOfWeekHighlighted;
            this.update();
            return this;
        },

        /**
         * @since V1.5.0
         * @method setDatesDisabled 设置哪几天不能选择
         * @param {Array|String} datesDisabled
         */
        setDatesDisabled: function (datesDisabled) {
            if (_.isArray(datesDisabled)) {
                this.options.datesDisabled = _.map(datesDisabled, function (d) {
                    return DateUtil.parse(d, this.parseFormat);
                });
            } else {
                this.options.datesDisabled.push(DateUtil.parse(datesDisabled, this.parseFormat));
            }

            this.update();
            this.updateNavArrows();
        },

        place: function () {
            if (this.isInline) return this;
            var calendarWidth = this.picker.outerWidth(),
                calendarHeight = this.picker.outerHeight(),
                visualPadding = 10,
                container = $(this.options.container),
                windowWidth = container.width(),
                windowHeight = container.height(),
                scrollTop = container.scrollTop(),
                appendOffset = container.offset();

            var parentsZindex = [];
            this.element.parents().each(function () {
                var itemZIndex = $(this).css('z-index');
                if (itemZIndex !== 'auto' && itemZIndex !== 0) parentsZindex.push(parseInt(itemZIndex));
            });
            var zIndex = Math.max.apply(Math, parentsZindex) + this.options.zIndexOffset;
            var offset = this.component ? this.component.parent().offset() : this.element.offset();
            var height = this.component ? this.component.outerHeight(true) : this.element.outerHeight(false);
            var width = this.component ? this.component.parent().outerWidth(true) : this.element.outerWidth(false);
            var left = offset.left - appendOffset.left,
                top = offset.top - appendOffset.top;

            this.picker.removeClass('datetimepicker-orient-top datetimepicker-orient-bottom ' + 'datetimepicker-orient-right datetimepicker-orient-left');

            if (this.options.orientation.x !== 'auto') {
                this.picker.addClass('datetimepicker-orient-' + this.options.orientation.x);
                if (this.options.orientation.x === 'right') left -= calendarWidth - width;
            }
            // auto x orientation is best-placement: if it crosses a window
            // edge, fudge it sideways
            else {
                    if (offset.left < 0) {
                        // component is outside the window on the left side. Move it into visible range
                        this.picker.addClass('datetimepicker-orient-left');
                        left -= offset.left - visualPadding;
                    } else if (left + calendarWidth > windowWidth) {
                        // the calendar passes the widow right edge. Align it to component right side
                        this.picker.addClass('datetimepicker-orient-right');
                        left = offset.left + width - calendarWidth;
                    } else {
                        // Default to left
                        this.picker.addClass('datetimepicker-orient-left');
                    }
                }

            // auto y orientation is best-situation: top or bottom, no fudging,
            // decision based on which shows more of the calendar
            var yorient = this.options.orientation.y,
                top_overflow,
                bottom_overflow;
            if (yorient === 'auto') {
                top_overflow = -scrollTop + top - calendarHeight;
                bottom_overflow = scrollTop + windowHeight - (top + height + calendarHeight);
                if (Math.max(top_overflow, bottom_overflow) === bottom_overflow) yorient = 'bottom';else yorient = 'top';
            }
            this.picker.addClass('datetimepicker-orient-' + yorient);
            if (yorient === 'top') top -= calendarHeight + parseInt(this.picker.css('padding-top'));else top += height;

            if (this.options.rtl) {
                var right = windowWidth - (left + width);
                this.picker.css({
                    top: top,
                    right: right,
                    zIndex: zIndex
                });
            } else {
                this.picker.css({
                    top: top,
                    left: left,
                    zIndex: zIndex
                });
            }
            return this;
        },

        updateNavArrows: function () {
            if (!this._allow_update) return;

            var d = new Date(this.viewDate),
                year = d.getFullYear(),
                month = d.getMonth();
            switch (this.viewMode) {
                case 0:
                    if (this.options.startDate !== -Infinity && year <= this.options.startDate.getFullYear() && month <= this.options.startDate.getMonth()) {
                        this.picker.find('.prev').css({ visibility: 'hidden' });
                    } else {
                        this.picker.find('.prev').css({ visibility: 'visible' });
                    }
                    if (this.options.endDate !== Infinity && year >= this.options.endDate.getFullYear() && month >= this.options.endDate.getMonth()) {
                        this.picker.find('.next').css({ visibility: 'hidden' });
                    } else {
                        this.picker.find('.next').css({ visibility: 'visible' });
                    }
                    break;
                case 1:
                case 2:
                    if (this.options.startDate !== -Infinity && year <= this.options.startDate.getFullYear()) {
                        this.picker.find('.prev').css({ visibility: 'hidden' });
                    } else {
                        this.picker.find('.prev').css({ visibility: 'visible' });
                    }
                    if (this.options.endDate !== Infinity && year >= this.options.endDate.getFullYear()) {
                        this.picker.find('.next').css({ visibility: 'hidden' });
                    } else {
                        this.picker.find('.next').css({ visibility: 'visible' });
                    }
                    break;
            }
        },

        click: function (e) {
            e.preventDefault();
            e.stopPropagation();
            var target = $(e.target).closest('span, td, th, a');
            if (target.length === 1) {
                switch (target[0].nodeName.toLowerCase()) {
                    case 'th':
                        this._thClick(target);
                        break;
                    case 'span':
                        this._spanClick(target);
                        break;
                    case 'td':
                        this._tdClick(target);
                        break;
                    case 'a':
                        if (target.hasClass('datetimepicker-now')) {
                            this.viewDate = new Date();
                            this.showMode();
                        } else {
                            this._setDate(this.viewDate);
                        }
                }
            }
            if (this.picker.is(':visible') && this._focused_from) {
                $(this._focused_from).focus();
            }
            delete this._focused_from;
        },

        _thClick: function (target) {
            switch (target[0].className) {
                case 'datetimepicker-switch':
                    this.showMode(1);
                    break;
                case 'prev':
                case 'next':
                    var dir = DPGlobal.modes[this.viewMode].navStep * (target[0].className === 'prev' ? -1 : 1);
                    switch (this.viewMode) {
                        case 0:
                            this.viewDate = DateUtil.addMonths(this.viewDate, dir);
                            this.showMode();
                            this._trigger('changeMonth', null, { date: this.viewDate });
                            break;
                        case 1:
                        case 2:
                            this.viewDate = DateUtil.addYears(this.viewDate, dir);
                            this.showMode();
                            if (this.viewMode === 1) this._trigger('changeYear', null, { date: this.viewDate });
                            break;
                    }
                    break;
                case 'today':
                    var date = DateUtil.getStartOfDay(new Date());
                    var which = this.options.todayBtn ? null : 'view';
                    this._setDate(date, which);
                    break;
            }
        },

        _spanClick: function (target) {
            var year, month, hour, minute, second;

            if (!target.hasClass('disabled')) {
                if (target.hasClass('month')) {
                    month = target.parent().find('span').index(target);
                    this.viewDate.setMonth(month);
                    this.options.viewType === 'month' ? this._setDate(new Date(this.viewDate.getFullYear(), month)) : this.showMode(-1);
                    this._trigger('changeMonth', null, { date: this.viewDate });
                } else if (target.hasClass('year')) {
                    year = parseInt(target.text(), 10) || 0;
                    this.viewDate.setFullYear(year);
                    this.options.viewType === 'year' ? this._setDate(this.viewDate) : this.showMode(-1);
                    this._trigger('changeYear', null, { date: this.viewDate });
                } else if (target.hasClass('label')) {
                    if (target.hasClass('label-hours')) {
                        this.updateHours();
                    } else if (target.hasClass('label-minutes')) {
                        this.updateMinutes();
                    } else {
                        this.updateSeconds();
                    }
                } else {
                    if (target.hasClass('hour')) {
                        hour = parseInt(target.text(), 10) || 0;
                        this.viewDate.setHours(hour);
                        this._trigger('changeHour', null, { date: this.viewDate });
                        this.picker.find('.datetimepicker-times').remove();
                        this.viewMode = 0;
                    } else if (target.hasClass('minute')) {
                        minute = parseInt(target.text(), 10) || 0;
                        this.viewDate.setMinutes(minute);
                        this._trigger('changeMinute', null, { date: this.viewDate });
                        this.picker.find('.datetimepicker-times').remove();
                        this.viewMode = 0;
                    } else if (target.hasClass('second')) {
                        second = parseInt(target.text(), 10) || 0;
                        this.viewDate.setSeconds(second);
                        this._trigger('changeSecond', null, { date: this.viewDate });
                        this.picker.find('.datetimepicker-times').remove();
                        this.viewMode = 0;
                    }

                    this.showMode();
                }
            }
        },

        _tdClick: function (target) {
            var year, month, day, hour, minute, second;

            if (target.hasClass('day') && !target.hasClass('disabled')) {
                day = parseInt(target.text(), 10) || 1;
                year = this.viewDate.getFullYear();
                month = this.viewDate.getMonth();

                if (target.hasClass('old')) {
                    if (month === 0) {
                        month = 11;
                        year -= 1;
                    } else {
                        month -= 1;
                    }
                } else if (target.hasClass('new')) {
                    if (month === 11) {
                        month = 0;
                        year += 1;
                    } else {
                        month += 1;
                    }
                }

                if (this.options.viewType === 'datetime') {
                    hour = parseInt(this.picker.find('.datetimepicker-days .label-hours').text(), 10);
                    minute = parseInt(this.picker.find('.datetimepicker-days .label-minutes').text(), 10);
                    second = parseInt(this.picker.find('.datetimepicker-days .label-seconds').text(), 10);

                    this._setDate(new Date(year, month, day, hour, minute, second));
                } else this._setDate(new Date(year, month, day));
            }
        },

        _setDate: function (date, which) {
            if (!which || which === 'date') this.date = new Date(date);
            if (!which || which === 'view') this.viewDate = date && new Date(date);

            this.showMode();
            this.setValue();
            if (!which || which !== 'view') {
                this._trigger('changeDate', null, { date: this.date });
            }
            if (this.options.autoClose && (!which || which === 'date')) {
                this.hide();
            }
        },

        keydown: function (e) {
            if (!this.picker.is(':visible')) {
                if (e.keyCode === 40 || e.keyCode === 27) // allow down to re-show picker
                    this.show();
            }
        },

        //根据图标属性的配置创建图标
        _createIcon: function () {
            var settings = {
                'direct': 'right',
                'iconname': this.options.buttonIcon
            };

            this.clearInput.clearinput('setIcon', settings);
        },

        //form内置方法,根据HTML原值同步界面
        _onFormReset: function () {
            this.update();
        },
        _onFormClear: function () {
            if (this.isInput) {
                this.element.val('');
            }
            this.date = null;
            this.viewDate = new Date();
            this.showMode();
        },
        _formSetValue: function (value) {
            this.setDate(value);
        },
        _formGetValue: function () {
            return this.value();
        },

        _validateHandler: function () {
            var that = this;

            this._on({
                'datetimepicker:changedate': function () {
                    if (that._getValidFlag()) {
                        that.element.isValid();
                    }
                }
            });
        },

        _setOption: function (key, value) {
            this._super(key, value);

            if (key === 'disabled') {
                this.element.attr("disabled", value);
            }
        },

        /**
         * @method value 赋值或者取值，取值返回规定格式的字符串，赋值传递相同规定格式字符串或者日期对象
         */
        value: function (value) {
            if (value === undefined) {
                return this.getFormattedDate(this.parseFormat);
            } else {
                this.setDate(value);
            }
        },

        _destroy: function () {
            if (this.element.data('ui-clearinput')) {
                this.element.clearinput('destroy');
            }
            this.picker.remove();
            delete this.picker;
        },

        /**
         * 返回时间对象
         * @method getDate
         * @return {Date} date
         */
        getDate: function () {
            return this.date;
        },

        reset: function (e) {
            if (this.options.disabled) {
                return false;
            }
            this.clearDate();
        }
    });

    $(document).on("languageChanged.fish", function () {
        dates = fish.getResource('datetimepicker');
    });

    /**
     * 当选择器显示时被触发。
     * @event show
     * @param {event} [e] 事件对象
     * @param {Object} [value] 回调参数,value.date为当前值
     */
    /**
     * 当选择器隐藏时被触发。
     * @event hide
     * @param {event} [e] 事件对象
     * @param {Object} [value] 回调参数,value.date为当前值
     */
    /**
     * 当日期被改变时被触发。
     * @event changeDate
     * @param {event} [e] 事件对象
     * @param {Object} [value] 回调参数,value.date为当前值
     */
    /**
     * 当十年视图上的年视图view被改变时触发。
     * @event changeYear
     * @param {event} [e] 事件对象
     * @param {Object} [value] 回调参数,value.date为当前值
     */
    /**
     * 当年视图上的月视图view被改变时触发。
     * @event changeMonth
     * @param {event} [e] 事件对象
     * @param {Object} [value] 回调参数,value.date为当前值
     */
    /**
     * 当月视图上的日视图view被改变时触发。
     * @event changeDay
     * @param {event} [e] 事件对象
     * @param {Object} [value] 回调参数,value.date为当前值
     */
    /**
     * 当日视图上的小时视图view被改变时触发。
     * @event changeHour
     * @param {event} [e] 事件对象
     * @param {Object} [value] 回调参数,value.date为当前值
     */
    /**
     * 当小时视图上的值被改变时触发。
     * @event changeMinute
     * @param {event} [e] 事件对象
     * @param {Object} [value] 回调参数,value.date为当前值
     */
})();

/**
 * 弹出框<br/>
 *
 * @deprecated 请使用{@link fish.desktop.fish#popup fish.popup}方法
 * @class fish.desktop.widget.Dialog
 * @extends fish.desktop.widget
 */
(function(factory) {
    if (typeof define === 'function' && define.amd) {
        define('fish.dialog', factory);
    } else {
        factory();
    }
})(function() {

    $.widget("ui.dialog", {
        options: {
            /**
             * @cfg {Boolean} [autoOpen=true] 是否自动打开
             */
            autoOpen: true,
            /**
             * @cfg {Boolean} [closeOnEscape=true] ESC键是否退出
             */
            closeOnEscape: true,

            /**
             * @cfg {Boolean} [canClose=true]
             * dialog是否出现关闭按钮
             */
            canClose: true,
            /**
             * @cfg {Boolean} [closeOnClickOverlay=false] 点击遮罩层是否退出
             */
            closeOnClickOverlay: false,
            /**
             * @cfg {String} [draggable=true] 是否可以拖动
             */
            draggable: true,
            /**
             * @cfg {*} [hide=null] type:Boolean,Number,String,Object
             *
             * 此配置项用来指定是否需要隐藏对话框，以及如何隐藏对话框。<br/>
             * 此配置项支持多种参数类型：<br/>
             * <b>Boolean</b>:当设置为false的时候，不会使用如何动画效果，立即隐藏对话框。
             * 当设置为true的时候，将会使用淡出效果，淡出效果的持续时间和淡出方式使用默认值。<br/>
             * <b>Number</b>:对话框使用指定的时间淡出，淡出方式采用默认方式。<br/>
             * <b>String</b>:使用指定的特效隐藏对话框。该配置项可以是jQuery内置的动画特效名称，例如"slideUp"；
             * 也可以是jQuery UI提供的动画特效名称，例如"fold"。无论配置成哪种，对话框淡出的时间间隔和缓动方式都会采用默认值。<br/>
             * <b>Object</b>:如果此配置项是一个Object，可以提供effect, delay, duration,以及easing这4个属性。如果effect属性
             * 是一个jQuery方法名称，则此方法会被用来作为特效。否则，effect属性会被当成jQuery UI的特效名称处理。如果所使用的
             * jQuery UI特效包含额外的配置参数，这些参数可以直接放在对象上，它们会在内部传递给特效。如果省略duration和easing属性，
             * 则会使用默认值。如果省略effect配置项，则默认使用"fadeOut"。如果省略delay属性，则不会有延迟效果。<br/>
             */
            hide: null,
            /**
             * @cfg {*} [height='auto'] type:Number,String
             * 对话框的高度。<br/>
             * 此配置项支持多种类型 ：<br/>
             * Number:高度，单位为像素。<br/>
             * String: 唯一可选的值是"auto"，允许对话框根据内容的高度自动调整自身的高度。
             */
            height: "auto",
            /**
             * @cfg {String} [maxHeight=null]
             * 对话框的最大高度，单位为像素。
             */
            maxHeight: null,
            /**
             * @cfg {String} [maxWidth=null]
             * 对话框的最大宽度，单位为像素。
             */
            maxWidth: null,
            /**
             * @cfg {String} [minHeight=150]
             * 对话框的最小高度，单位为像素。
             */
            minHeight: 150,
            /**
             * @cfg {String} [minWidth=150]
             * 对话框的最小宽度，单位为像素。
             */
            minWidth: 150,
            /**
             * @cfg {*} [width='auto'] type:Number,String
             * 对话框的宽度。<br/>
             * 此配置项支持多种类型的值：<br/>
             * Number:宽度值，单位为像素。<br/>
             * String:唯一可选的值是"auto"，允许对话框根据内容的高度自动调整自身的宽度。
             */
            width: 'auto',
            /**
             * @cfg {String} [modal=false]
             * 如果设置为true，对话框将会采用模态行为；页面上的所有其它元素都会被禁用，例如，无法进行交互。
             * 模态对话框将会创建一个遮罩层，此遮罩层位于对话框下面，但是处于页面所有其它元素之上。
             */
            modal: false,
            /**
             * @cfg {Object} [position={ my: "center", at: "center", of: window, collision:"fit" }]
             * 指定对话框在哪个位置打开。对话框自己会处理重叠的情况，从而尽可能让所有对话框都可见。<br/>
             * 此配置项的默认值是window，但是你可以指定其它元素，对话框将会定位到你指定的元素上。
             * 对于可选的配置值，你可以参考jQuery UI的Position属性。<br/>
             */
            position: {
                my: "center",
                at: "center",
                of: window,
                collision: "fit",
                // ensure that the titlebar is never outside the document
                using: function(pos) {
                    var topOffset = $(this).css(pos).offset().top;
                    if (topOffset < 0) {
                        $(this).css("top", pos.top - topOffset);
                    }
                }
            },
            /**
             * @cfg {String} [resizable=false]
             * 如果设置为true，对话框的大小可以改变。
             */
            resizable: false, //默认值修改成false

            /**
             * @cfg {*} [show=null] type:Boolean,Number,String,Object
             * 此配置项用来指定是否显示对话框，以及采用何种方式显示对话框。
             * <b>Boolean</b>:当设置为false的时候，不会使用如何动画效果，立即显示对话框。
             * 当设置为true的时候，将会使用淡出效果，淡出效果的持续时间和淡出方式使用默认值。<br/>
             * <b>Number</b>:对话框使用指定的时间淡出，淡出方式采用默认方式。<br/>
             * <b>String</b>:使用指定的特效显示对话框。该配置项可以是jQuery内置的动画特效名称，例如"slideDown"；
             * 也可以是jQuery UI提供的动画特效名称，例如"fold"。无论配置成哪种，对话框淡入的时间间隔和缓动方式都会采用默认值。<br/>
             * <b>Object</b>:如果此配置项是一个Object，可以提供effect, delay, duration,以及easing这4个属性。如果effect属性
             * 是一个jQuery方法名称，则此方法会被用来作为特效。否则，effect属性会被当成jQuery UI的特效名称处理。如果所使用的
             * jQuery UI特效包含额外的配置参数，这些参数可以直接放在对象上，它们会在内部传递给特效。如果省略duration和easing属性，
             * 则会使用默认值。如果省略effect配置项，则默认使用"fadeIn"。如果省略delay属性，则不会有延迟效果。<br/>
             */
            show: null,

            // callbacks
            // 如果想配置成cfg级别可以使用 //@cfg {Function} xxx
            /**
             * @event beforeClose
             * 在对话框关闭之前触发此事件。如果取消此事件（在事件回调函数中返回false），对话框将不会关闭。
             * @param {Event} event Event对象
             * @param {Object} ui 此对象为空，保留在这里是为了和其它事件保持参数一致。
             *
             *     @example
             *     在初始化对话框的时候指定beforeClose回调函数：
             *        $(".selector").dialog({
             *          beforeClose: function(event, ui) {}
             *        });
             *     为dialogbeforeclose事件绑定一个监听函数：
             *        $(".selector").on("dialogbeforeclose", function(event, ui) {});
             */
            beforeClose: null,
            /**
             * @event close
             * 在对话框关闭之后触发。
             * @param {Event} event Event对象
             * @param {Object} ui 此对象为空，保留在这里是为了和其它事件保持参数一致。
             *     @example
             *     在初始化对话框的时候指定close回调函数：
             *        $(".selector").dialog({
             *          close: function(event, ui) {}
             *        });
             *        为dialogclose事件绑定一个监听函数：
             *        $(".selector").on("dialogclose", function(event, ui) {});
             */
            close: null,
            /**
             * @event drag
             * 当对话框被拖动的时候触发。
             * @param {Event} event Event对象
             * @param {Object} ui 此对象为空，保留在这里是为了和其它事件保持参数一致。
             *
             *     @example
             *     在初始化对话框的时候指定drag回调函数：
             *        $(".selector").dialog({
             *          drag: function(event, ui) {}
             *        });
             *        为dialogdrag事件绑定一个监听函数：
             *        $(".selector").on("dialogdrag", function(event, ui) {});
             */
            drag: null,
            /**
             * @event dragStart
             * 当用户开始拖动对话框的时候触发。
             * @param {Event} event Event对象
             * @param {Object} ui
             * @param {Object} ui.position 对话框当前的CSS位置。
             * @param {Object} ui.offset 对话框当前的位置偏移量。
             *
             *     @example
             *     在初始化对话框的时候指定dragStart回调函数：
             *        $(".selector").dialog({
             *          dragStart: function(event, ui) {}
             *        });
             *
             *     为dialogdragstart事件绑定一个监听函数：
             *        $(".selector").on("dialogdragstart", function(event, ui) {});
             */
            dragStart: null,
            /**
             * @event dragStop
             * 在拖拽停止之后触发此事件。
             * @param {Event} event Event对象
             * @param {Object} ui
             * @param {Object} ui.position 对话框当前的CSS位置。
             * @param {Object} ui.offset 对话框当前的位置偏移量。
             *
             *     @example
             *     在初始化对话框的时候指定dragStop回调函数：
             *        $(".selector").dialog({
             *          dragStop: function(event, ui) {}
             *        });
             *     为dialogdragstop事件绑定一个监听函数：
             *        $(".selector").on("dialogdragstop", function(event, ui) {});
             */
            dragStop: null,
            /**
             * @event focus
             * 当对话框获得焦点的时候触发。
             * @param {Event} event Event对象
             * @param {Object} ui 此对象为空，保留在这里是为了和其它事件保持参数一致。
             *
             *     @example
             *     在初始化对话框的时候指定focus回调函数：
             *        $(".selector").dialog({
             *          focus: function(event, ui) {}
             *        });
             *     为dialogfocus事件绑定一个监听函数：
             *        $(".selector").on("dialogfocus", function(event, ui) {});
             */
            focus: null,
            /**
             * @event open
             * 在对话框打开之后触发。
             * @param {Event} event Event对象
             * @param {Object} ui 此对象为空，保留在这里是为了和其它事件保持参数一致。
             *
             *     @example
             *     在初始化对话框的时候指定open回调函数：
             *        $(".selector").dialog({
             *          open: function(event, ui) {}
             *        });
             *     为dialogopen事件绑定一个监听函数：
             *        $(".selector").on("dialogopen", function(event, ui) {});
             */
            open: null,
            /**
             * @event resize
             * 在对话框的大小被调整之后触发。
             * @param {Event} event Event对象
             * @param {Object} ui
             * @param {Object} ui.originalPosition 对话框在被调整大小之前的CSS位置。
             * @param {Object} ui.position 对话框当前的CSS位置。
             * @param {Object} ui.originalSize 对话框在被调整大小之前的尺寸。
             * @param {Object} ui.size 对话框当前的尺寸。
             *
             *     @example
             *     在初始化对话框的时候指定resize回调函数：
             *        $(".selector").dialog({
             *          resize: function(event, ui) {}
             *        });
             *     为dialogresize事件绑定一个监听函数：
             *        $(".selector").on("dialogresize", function(event, ui) {});
             */
            resize: null,
            /**
             * @event resizeStart
             * 当用户开始调整对话框大小的时候触发此事件。
             * @param {Event} event Event对象
             * @param {Object} ui
             * @param {Object} ui.originalPosition 对话框在被调整大小之前的CSS位置。
             * @param {Object} ui.position 对话框当前的CSS位置。
             * @param {Object} ui.originalSize 对话框在被调整大小之前的尺寸。
             * @param {Object} ui.size 对话框当前的尺寸。
             *
             *     @example
             *     在初始化对话框的时候指定resizeStart回调函数：
             *        $(".selector").dialog({
             *          resizeStart: function(event, ui) {}
             *        });
             *     为dialogresizestart事件绑定一个监听函数：
             *        $(".selector").on("dialogresizestart", function(event, ui) {});
             */
            resizeStart: null,
            /**
             * @event resizeStop
             * 在对话框的大小被调整之后触发。
             * @param {Event} event Event对象
             * @param {Object} ui
             * @param {Object} ui.originalPosition 对话框在被调整大小之前的CSS位置。
             * @param {Object} ui.position 对话框当前的CSS位置。
             * @param {Object} ui.originalSize 对话框在被调整大小之前的尺寸。
             * @param {Object} ui.size 对话框当前的尺寸。
             *
             *     @example
             *     在初始化对话框的时候指定resizeStop回调函数：
             *        $(".selector").dialog({
             *          resizeStop: function(event, ui) {}
             *        });
             *     为dialogresizestop事件绑定一个监听函数：
             *        $(".selector").on("dialogresizestop", function(event, ui) {});
             */
            resizeStop: null,
            /**
             * @cfg {String} [dialogClass] 弹出层自定义样式,alert控件内部使用
             */
            dialogClass: "",
            /**
             *
             * @cfg {Object} [initValue] 初始化参数,由外界传入,在dialog内容可以获取使用;popedit使用到
             */
            initValue: null,

            /**
             * 在窗口发生变化的时候，宽度能否根据外层容器的大小自适应
             * @cfg {Boolean} autoResizable=false
             */
            autoResizable: false
        },

        sizeRelatedOptions: {
            buttons: true,
            height: true,
            maxHeight: true,
            maxWidth: true,
            minHeight: true,
            minWidth: true,
            width: true
        },

        resizableRelatedOptions: {
            maxHeight: true,
            maxWidth: true,
            minHeight: true,
            minWidth: true
        },

        _create: function() {
            // this.element 不在document内,默认将其加到body节点下面
            if( this.element.parent().length === 0 ){
                this.element.appendTo("body");
            }

            var options = this.options;

            this.originalCss = {
                display: this.element[0].style.display,
                width: this.element[0].style.width,
                minHeight: this.element[0].style.minHeight,
                maxHeight: this.element[0].style.maxHeight,
                height: this.element[0].style.height
            };
            this.originalTitle = this.element.attr("title");

            this.element.addClass(options.dialogClass);
            this.element.attr({
                tabIndex: -1,
                role: "dialog"
            });

            // We assume that any existing aria-describedby attribute means
            // that the dialog content is marked up properly
            // otherwise we brute force the content as the description
            if (!this.element.find("[aria-describedby]").length) {
                this.element.attr({
                    "aria-describedby": this.element.uniqueId().attr("id")
                });
            }

            this.$header = this.element.find('.modal-header');
            this.$body = this.element.find('.modal-body');
            this.$footer = this.element.find('.modal-footer');
            if(options.canClose){
                this.$close = $("<button type='button' class='close' tabindex='-1' role='button'><span aria-hidden='true'>&times;</span></button>");
                this.$header.prepend(this.$close);
            }

            if (this.options.draggable && $.fn.draggable) {
                this._makeDraggable();
            }
            if (this.options.resizable && $.fn.resizable) {
                this._makeResizable();
            }

            this._isOpen = false;
            this._delegateEvent();
        },

        _init: function() {
            if (this.options.autoOpen) {
                this.open();
            }
        },

        _destroy: function() {
            this.element
                .removeUniqueId()
                .removeClass()
                .addClass("ui-dialog")
                // .removeClass("ui-dialog-content ui-widget-content")
                .css(this.originalCss)
                // Without detaching first, the following becomes really slow
                // .detach();
                .removeAttr("aria-describedby");
            this.options.canClose && this.$close.remove();

            // this.element.stop(true, true)//.remove();

            if (this.originalTitle) {
                this.element.attr("title", this.originalTitle);
            }

            // next = originalPosition.parent.children().eq( originalPosition.index );
            // // Don't try to place the dialog next to itself (#8613)
            // if ( next.length && next[0] !== this.element[0] ) {
            //    next.before( this.element );
            // } else {
            //    originalPosition.parent.append( this.element );
            // }
        },

        _delegateEvent: function() {
            this._on(this.element, {
                keydown: function(event) {
                    if (this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode &&
                        event.keyCode === $.ui.keyCode.ESCAPE) {
                        event.preventDefault();
                        this.close(event);
                        return;
                    }

                    // prevent tabbing out of dialogs
                    if (event.keyCode !== $.ui.keyCode.TAB || event.isDefaultPrevented()) {
                        return;
                    }
                    var tabbables = this.element.find(":tabbable"),
                        first = tabbables.filter(":first"),
                        last = tabbables.filter(":last");

                    if ((event.target === last[0] || event.target === this.element[0]) && !event.shiftKey) {
                        this._delay(function() {
                            first.focus();
                        });
                        event.preventDefault();
                    } else if ((event.target === first[0] || event.target === this.element[0]) && event.shiftKey) {
                        this._delay(function() {
                            last.focus();
                        });
                        event.preventDefault();
                    }
                }
            });
            this._on(this.$header, {
                mousedown: function(event) {
                    // Don't prevent click on close button (#8838)
                    // Focusing a dialog that is partially scrolled out of view
                    // causes the browser to scroll it into view, preventing the click event
                    if (!$(event.target).closest(".close")) {
                        // Dialog isn't getting focus when dragging (#8063)
                        this.element.focus();
                    }
                }
            });
            if(this.options.canClose){
                this._on(this.$close, {
                    click: function(event) {
                        event.preventDefault();
                        this.close(event);
                    }
                });
            }

            var that = this;
            if (this.options.autoResizable) {
                this._on($(window), {
                    debouncedresize: function () {
                        that._size();
                        that._position();
                    }
                });
            }

        },

        disable: $.noop,
        enable: $.noop,

        /**
         * 关闭对话框。
         * @method close
         */
        close: function(event) {
            var activeElement,
                that = this;

            if (!this._isOpen || this._trigger("beforeClose", event) === false) {
                return;
            }

            this._isOpen = false;
            this._focusedElement = null;

            fish.modalStack.openedWindows.remove(this.element);
            fish.modalStack.removeBackdrop();

            if (!this.opener.filter(":focusable").focus().length) {

                // support: IE9
                // IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
                try {
                    activeElement = this.document[0].activeElement;

                    // Support: IE9, IE10
                    // If the <body> is blurred, IE will switch windows, see #4520
                    if (activeElement && activeElement.nodeName.toLowerCase() !== "body") {

                        // Hiding a focused element doesn't trigger blur in WebKit
                        // so in case we have nothing to focus on, explicitly blur the active element
                        // https://bugs.webkit.org/show_bug.cgi?id=47182
                        $(activeElement).blur();
                    }
                } catch (error) {}
            }

            this._hide(this.element, this.options.hide, function() {
                that._trigger("close", event);
            });
        },

        /**
         * 判断对话框当前是否处于打开状态。此方法没有参数。
         * @method
         * @returns {Boolean}
         */
        isOpen: function() {
            return this._isOpen;
        },

        /**
         * 移动到最顶层。
         * @method
         */
        moveToTop: function() {
            this._moveToTop();
        },

        _moveToTop: function(event, silent) {
            fish.modalStack.bringToFront(this.element);

            return true;
        },

        /**
         * 打开对话框。
         * @method
         */
        open: function() {
            var that = this;
            if (this._isOpen) {
                if (this._moveToTop()) {
                    this._focusTabbable();
                }
                return;
            }

            this._isOpen = true;
            this.opener = $(this.document[0].activeElement);

            this._size();
            this._position();

            fish.modalStack.openedWindows.add(this.element, {
                modal: this.options.modal
            });

            fish.modalStack.addBackdrop();
            fish.modalStack.openedWindows.top().value.$modalElement = this.element;

            this._moveToTop(null, true);

            this._show(this.element, this.options.show, function() {
                that._focusTabbable();
                that._trigger("focus");
            });

            this._trigger("open");
        },

        _focusTabbable: function() {
            // Set focus to the first match:
            // 1. An element that was focused previously
            // 2. First element inside the dialog matching [autofocus]
            // 3. Tabbable element inside the content element
            // 4. Tabbable element inside the buttonpane
            // 5. The close button
            // 6. The dialog itself
            var hasFocus = this._focusedElement;
            if (!hasFocus) {
                hasFocus = this.element.find("[autofocus]");
            }
            if (!hasFocus.length) {
                hasFocus = this.$body.find(":tabbable");
            }
            if (!hasFocus.length) {
                hasFocus = this.$footer.find(":tabbable");
            }
            if (!hasFocus.length && this.options.canClose) {
                hasFocus = this.$close.filter(":tabbable");
            }
            if (!hasFocus.length) {
                hasFocus = this.element;
            }
            hasFocus.eq(0).focus();
        },

        _makeDraggable: function() {
            var that = this,
                options = this.options;

            function filteredUi(ui) {
                return {
                    position: ui.position,
                    offset: ui.offset
                };
            }

            this.element.draggable({
                cancel: ".modal-body, .close",
                handle: ".modal-header",
                containment: "document",
                start: function(event, ui) {
                    $(this).addClass("ui-dialog-dragging");
                    that._blockFrames();
                    that._trigger("dragStart", event, filteredUi(ui));
                },
                drag: function(event, ui) {
                    that._trigger("drag", event, filteredUi(ui));
                },
                stop: function(event, ui) {
                    var left = ui.offset.left - that.document.scrollLeft(),
                        top = ui.offset.top - that.document.scrollTop();

                    options.position = {
                        my: "left top",
                        at: "left" + (left >= 0 ? "+" : "") + left + " " +
                            "top" + (top >= 0 ? "+" : "") + top,
                        of: that.window
                    };
                    $(this).removeClass("ui-dialog-dragging");
                    that._unblockFrames();
                    that._trigger("dragStop", event, filteredUi(ui));
                }
            });
        },

        _makeResizable: function() {
            var that = this,
                options = this.options,
                handles = options.resizable,
                // .ui-resizable has position: relative defined in the stylesheet
                // but dialogs have to use absolute or fixed positioning
                position = this.element.css("position"),
                resizeHandles = typeof handles === "string" ?
                handles :
                "n,e,s,w,se,sw,ne,nw";

            function filteredUi(ui) {
                return {
                    originalPosition: ui.originalPosition,
                    originalSize: ui.originalSize,
                    position: ui.position,
                    size: ui.size
                };
            }

            this.element.resizable({
                    cancel: ".modal-body",
                    containment: "document",
                    alsoResize: this.element.find(".modal-body"),
                    maxWidth: options.maxWidth,
                    maxHeight: options.maxHeight,
                    minWidth: options.minWidth,
                    minHeight: this._minHeight(),
                    handles: resizeHandles,
                    start: function(event, ui) {
                        $(this).addClass("ui-dialog-resizing");
                        that._blockFrames();
                        that._trigger("resizeStart", event, filteredUi(ui));
                    },
                    resize: function(event, ui) {
                        that._trigger("resize", event, filteredUi(ui));
                    },
                    stop: function(event, ui) {
                        var offset = that.element.offset(),
                            left = offset.left - that.document.scrollLeft(),
                            top = offset.top - that.document.scrollTop();

                        options.height = that.element.height();
                        options.width = that.element.width();
                        options.position = {
                            my: "left top",
                            at: "left" + (left >= 0 ? "+" : "") + left + " " +
                                "top" + (top >= 0 ? "+" : "") + top,
                            of: that.window
                        };
                        $(this).removeClass("ui-dialog-resizing");
                        that._unblockFrames();
                        that._trigger("resizeStop", event, filteredUi(ui));
                    }
                })
                .css("position", position);
        },

        _minHeight: function() {
            var options = this.options;

            return options.height === "auto" ?
                options.minHeight :
                Math.min(options.minHeight, options.height);
        },

        _position: function(position) {
            // Need to show the dialog to get the actual offset in the position plugin
            var isVisible = this.element.is(":visible");
            if (!isVisible) {
                this.element.show();
            }
            this.element.position(position ? position : this.options.position);
            if (!isVisible) {
                this.element.hide();
            }
        },

        _setOptions: function(options) {
            var that = this,
                resize = false,
                resizableOptions = {};

            $.each(options, function(key, value) {
                that._setOption(key, value);

                if (key in that.sizeRelatedOptions) {
                    resize = true;
                }
                if (key in that.resizableRelatedOptions) {
                    resizableOptions[key] = value;
                }
            });

            if (resize) {
                this._size();
                this._position();
            }
            if (this.element.is(":data(ui-resizable)")) {
                this.element.resizable("option", resizableOptions);
            }
        },

        _setOption: function(key, value) {
            var isDraggable, isResizable,
                uiDialog = this.element;

            switch (key) {
                case "disabled":
                    return;
                case "draggable":
                    isDraggable = uiDialog.is(":data(ui-draggable)");
                    if (isDraggable && !value) {
                        uiDialog.draggable("destroy");
                    }

                    if (!isDraggable && value) {
                        this._makeDraggable();
                    }
                    break;
                case "position":
                    this._position(value);
                    break;
                case "resizable":
                    // currently resizable, becoming non-resizable
                    isResizable = uiDialog.is(":data(ui-resizable)");
                    if (isResizable && !value) {
                        uiDialog.resizable("destroy");
                    }

                    // currently resizable, changing handles
                    if (isResizable && typeof value === "string") {
                        uiDialog.resizable("option", "handles", value);
                    }

                    // currently non-resizable, becoming resizable
                    if (!isResizable && value !== false) {
                        this._makeResizable();
                    }
                    break;
            }

            this._super(key, value);
        },

        _size: function() {
            /* If the user has resized the dialog, the .ui-dialog and .ui-dialog-content
             * divs will both have width and height set, so we need to reset them
             */
            var autoHeight,
                options = this.options,
                isVisible = this.element.is(":visible");

            this.element.show();
            if(options.width !== "auto"){
                if (options.minWidth > options.width) {
                    options.width = options.minWidth;
                }
                this.element.width(options.width);
            }
            this.$body.outerWidth(this.element.innerWidth());
            if (options.height === "auto") {
                autoHeight = this.$body.css("height", "auto").height();
                this.$body.height(Math.max(autoHeight, options.minHeight));
            } else {
                var height = Math.max(options.height, options.minHeight);
                this.element.height(height);
                this.$body.outerHeight(height - this.$header.outerHeight() - this.$footer.outerHeight());
            }

            if (!isVisible) {
                this.element.hide();
            }

            if (this.element.is(":data(ui-resizable)")) {
                this.element.resizable("option", "minHeight", this._minHeight());
            }
        },

        _blockFrames: function() {
            this.iframeBlocks = this.document.find("iframe").map(function() {
                var iframe = $(this);

                return $("<div>")
                    .css({
                        position: "absolute",
                        width: iframe.outerWidth(),
                        height: iframe.outerHeight()
                    })
                    .appendTo(iframe.parent())
                    .offset(iframe.offset())[0];
            });
        },

        _unblockFrames: function() {
            if (this.iframeBlocks) {
                this.iframeBlocks.remove();
                delete this.iframeBlocks;
            }
        },

        _allowInteraction: function(event) {
            if ($(event.target).closest(".ui-dialog").length) {
                return true;
            }

            // TODO: Remove hack when datepicker implements
            // the .ui-front logic (#8989)
            return !!$(event.target).closest(".ui-datepicker").length;
        },

        /**
         * 设置返回值,会触发change事件,一般用于popedit回调
         * @method setReturnValue
         * @param {Object} value 参数值,如果用于popedit,需要与popedit的值属性对应起来
         */
        setReturnValue: function(value) {
            this._trigger('change', null, value);
        },
        /**
         * 设置标题,一般用于弹出框复用
         * @method setTitle
         * @param {String} title 新标题名称
         */
        setTitle: function(title) {
            this.$header.find('.modal-title').text(title);
        }
    });
});

/**
 * @class fish.desktop.widget.Dropdown
 * 下拉组件
 * @since v1.4.4
 * @author huang.xinghui
 */

/**
 * @event open
 * 打开事件
 *
 * <pre>
 * $(element).on('dropdown:open', function(e) {
 *   //do something
 * })
 * </pre>
 */
/**
 * @event close
 * 关闭事件
 *
 * <pre>
 * $(element).on('dropdown:close', function(e) {
 *   //do something
 * })
 * </pre>
 */
!function () {
    'use strict';

    var toggle = '[data-toggle="dropdown"]';

    $.widget('ui.dropdown', {
        options: {
            /**
             * @cfg {String} [trigger='click'] 触发事件，默认是click，可选值为click/hover
             */
            trigger: 'click',
            /**
             * @cfg {Object} [target=null] 触发目标（用于添加open样式），默认是该元素的父亲
             */
            target: null
            /**
             * @cfg {Function} [open=null] open 定义打开事件函数，事件名称dropdown:open
             */
            /**
             * @cfg {Function} [close=null] close 定义关闭事件函数，事件名称dropdown:close
             */
        },

        _create: function () {
            var events;

            this.$parent = this.getParent();

            if (this.options.trigger === 'hover') {
                events = {
                    'mouseover': '_onMouseOver',
                    'mouseout': '_onMouseOut'
                };
                this._on(this.$parent.find('.dropdown-menu'), events);
            } else {
                events = {'click': 'toggle'};
            }
            this._on(events);
        },

        /**
         * @method open
         * 打开下拉内容
         */
        open: function () {
            this.$parent.addClass('open');
            this._trigger('open');
        },

        /**
         * @method close
         * 关闭下拉内容
         */
        close: function () {
            this.$parent.removeClass('open');
            this._trigger('close');
        },

        /**
         * @method toggle
         * 切换打开或关闭下拉内容
         * @param e 事件对象
         */
        toggle: function (e) {
            var isActive = this.$parent.hasClass('open');

            clearMenus(e);

            if (!isActive) {
                this.open();
            }
            return false;
        },

        getParent: function () {
            if (this.options.target) {
                return (this.options.target instanceof $ ? this.options.target : $(this.options.target)).parent();
            } else {
                return this.element.parent();
            }
        },

        _onMouseOver: function (e) {
            clearTimeout(this.timer);
            this.open();
        },

        _onMouseOut: function (e) {
            var that = this;
            this.timer = setTimeout(function () {
                that.close();
            }, 100);
        }
    });

    function clearMenus (e) {
        if (e && e.which === 3) {
            return;
        }

        var toggles = $.makeArray($(toggle)),
            i = 0,
            n = toggles.length,
            $parent, $toggle;

        for (; i < n; i++) {
            $toggle = $(toggles[i]);
            $parent = $toggle.dropdown('getParent');

            if (!$parent.hasClass('open')) {
                continue;
            }

            if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) {
                return
            }

            $toggle.dropdown('close');
        }
    }

    $(document)
        .on('click.dropdown.data-api', clearMenus)
        .on('click.dropdown.data-api', toggle, function (e) {
            return $(this).dropdown('toggle');
        });
}();
/**
 * 表单<br>
 * @class fish.desktop.widget.Form
 * 如果你想让插件帮你管理所有事件绑定，请使用此Form组件。例如：
 *  $(document).ready(function() {
 *    $('#myForm').form();
 *  });
 *  当使用此Form插件时，在适当的时候为你调用ajaxSubmit方法。
 */
!function () {
    "use strict";

    //Feature detection
    var feature = {};
    feature.fileapi = $("<input type='file'/>").get(0).files !== undefined;
    feature.formdata = window.FormData !== undefined;


    $.widget("ui.form", {
        options: {
            /**
             * form提交是否自动加上遮罩
             * @cfg {Boolean} showMask=false
             */
            showMask: true,
            /**
             * form是否自动检验及何时检验，需要校验控件支持; 0:不校验;1:初始化form的时候检验;2:提交的时候再检验
             * @cfg {Number} validate=2
             */
            validate: 2, //0:never;1:init;2:submit
            /*
             * @cfg {String} delegation true to enable support for event delegation requires
             */
            //delegation
            /**
             * @cfg {String} type form method
             */
            type: "post",
            //type
            /**
             * @cfg {String}  将要提交form数据URL，默认值：form动作属性
             */
            url: '',
            /**
             * @cfg {String}  默认返回json格式
             */
            dataType: 'json',
            /**
             * @cfg {Boolean}  [traditional = true]  也可以用$.ajaxSettings.traditional
             */
            traditional: true,
            /**
             * @cfg {String}  更新到服务器响应的元素标识符，这个值可以指定为一个JQUERY选择器字符串，一个JQUERY对象，或一个DOM元素。
             */
            target: '',
            /**
             * @cfg {Boolean}  [clearForm = true] 提交成功后清除表单所有字段
             */
            clearForm: false,
            /**
             * @cfg {Boolean}  [resetForm = false] 提交成功后重置表单.
             */
            resetForm: false,
            /**
             * @cfg {Function}  beforeSubmit 提交前的callback
             */
            beforeSubmit: $.noop,
            /**
             * @cfg {Function}  success 提交成功后的callback $.ajaxSettings.success
             */
            success: $.noop,
            /**
             * @cfg {Boolean} [enterKey=false] 是否允许通过enter键来响应form的submit
             */
            enterKey: false
        },
        _create: function () {
            // this._unbindEvent();
            this.options.initData = this.options.data; //保存初始值,post或get时会覆盖data属性

            var that = this;
            this._on({
                'submit': '_doAjaxSubmit',
                'keydown': function (e) { //捕获form的keydown事件,屏蔽回车功能
                    if(e.keyCode === $.ui.keyCode.ENTER){
                        if($(e.target).is('textarea')){
                            return;
                        }
                        if(!that.options.enterKey){
                            e.preventDefault();
                        }
                    }
                }
            });

            if (!$.fn.validator) this.options.validate = 0; //validator需控件支持
            if (this.options.validate === 1) this.element.validator();
        },
        _getCreateOptions: function () {
            var options = {};
            var type = this.element.attr('method');
            type ? options.type = type : "";
            var url = this.element.attr('action');
            url ? options.url = url : "";
            return options;
        },
        _destroy: function () {
            if (this.options.validate !== 0) this.element.validator('destroy');
            this._unbindEvent();
        },
        _unbindEvent: function () {
            this.element.unbind('submit.fish-form click.fish-form');
        },
        _doAjaxSubmit: function (e) {
            if (!e.isDefaultPrevented()) { // if event has been canceled, don't proceed
                e.preventDefault();
                if (!this.submitting) {
                    //响应没回来的时候,不再往后台提交数据
                    this.submitting = true;
                    this.ajaxSubmit(e); // #365
                }
            }
        },
        /**
         * 用ajax的方式提交表单
         * @method  ajaxSubmit
         */
        ajaxSubmit: function (e) {
            var options = this.options,
                that = this;
            // fast fail if nothing selected (http://dev.jquery.com/ticket/2752)

            var action, url, $form = this.element;

            if (typeof options == 'function') {
                options = {
                    success: options
                };
            } else if (options === undefined) {
                options = {};
            }

            action = options.url;

            url = (typeof action === 'string') ? $.trim(action) : '';
            url = url || window.location.href || '';
            if (url) {
                // clean url (don't include hash vaue)
                url = (url.match(/^([^#]+)/) || [])[1];
            }

            // provide opportunity to alter form data before it is serialized
            if (this._trigger("beforeSerialize") === false) {
                return;
            }

            var traditional = options.traditional || $.ajaxSettings.traditional;

            var elements = [];
            var qx, a = this.formToArray(elements);
            for (var i = 0; i < a.length; i++) {
                this._addWidgetValue(a[i]);
            }
            if (options.initData) {
                options.extraData = options.data; //干嘛的?与initData作用一样?
                qx = $.param(options.initData, traditional);
            }

            // give pre-submit callback an opportunity to abort the submit
            if (this._trigger("beforeSubmit", e, [a]) === false) {
                return;
            }
            if (this.options.validate === 2) this.element.validator();
            if (this.options.validate && !this.element.isValid()) return;

            //先起遮罩,由于单线程特性,在ajax与后台交互的时候才会显示出来
            if (options.showMask && fish._active++ === 0) {
                $.blockUI && $.blockUI();
            }

            var q = $.param(a, traditional);
            if (qx) {
                q = (q ? (q + '&' + qx) : qx);
            }
            if (options.type.toUpperCase() == 'GET') {
                options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q;
                options.data = null; // data is null for 'get'
            } else {
                options.data = q; // data is the query string for 'post'
            }

            var callbacks = [];
            if (options.resetForm) {
                callbacks.push(function () {
                    $form.resetForm();
                });
            }
            if (options.clearForm) {
                callbacks.push(function () {
                    $form.clearForm(options.includeHidden);
                });
            }

            if (options.success) {
                callbacks.push(options.success);
            }

            var ajaxOption = $.extend(true, {}, options);

            ajaxOption.success = function (data, status, xhr) { // jQuery 1.4+ passes xhr as 3rd arg
                var context = options.context || this; // jQuery 1.4+ supports scope context
                for (var i = 0, max = callbacks.length; i < max; i++) {
                    callbacks[i].apply(context, [data, status, xhr || $form, $form]);
                }
            };

            // if (options.error) {
            var oldError = options.error;
            ajaxOption.error = function (xhr, status, error) {
                var context = options.context || this;
                oldError && oldError.apply(context, [xhr, status, error, $form]);
            };
            // }

            // if (options.complete) {
            var oldComplete = options.complete;
            ajaxOption.complete = function (xhr, status) {
                var context = options.context || this;
                oldComplete && oldComplete.apply(context, [xhr, status, $form]);
                if (options.showMask && (--fish._active === 0)) {
                    $.unblockUI && $.unblockUI();
                }
                that.submitting = false;

            };
            // }

            var jqxhr = $.ajax(ajaxOption);

            $form.removeData('jqxhr').data('jqxhr', jqxhr);

            // clear element array
            for (var k = 0; k < elements.length; k++) {
                elements[k] = null;
            }
        },
        /*
         * 返回form的参数值,数组形式，
         * @method formToArray
         * @param  {[type]} elements [description]
         * @return {[type]}          [description]
         */
        formToArray: function (elements) {
            var a = [];
            if (this.length === 0) {
                return a;
            }

            var form = this.element[0];
            var els = form.elements;

            if (!els || !els.length) {
                return a;
            }

            var i, j, n, v, el, max, jmax;
            for (i = 0, max = els.length; i < max; i++) {
                el = els[i];
                n = el.name;
                //      if (!n || el.disabled) {
                //        continue;
                //      }
                if (!n) {
                    continue;
                }

                v = $.fieldValue(el, true);
                if (v && v.constructor == Array) {
                    if (elements) {
                        elements.push(el);
                    }
                    for (j = 0, jmax = v.length; j < jmax; j++) {
                        a.push({
                            name: n,
                            value: v[j]
                        });
                    }
                } else if (feature.fileapi && el.type == 'file') {
                    if (elements) {
                        elements.push(el);
                    }
                    var files = el.files;
                    if (files.length) {
                        for (j = 0; j < files.length; j++) {
                            a.push({
                                name: n,
                                value: files[j],
                                type: el.type
                            });
                        }
                    } else {
                        // #180
                        a.push({
                            name: n,
                            value: '',
                            type: el.type
                        });
                    }
                } else if (v !== null && typeof v != 'undefined') {
                    if (elements) {
                        elements.push(el);
                    }
                    a.push({
                        name: n,
                        value: v,
                        type: el.type,
                        required: el.required
                    });
                }
            }

            if (form.clk) {
                // input type=='image' are not found in elements array! handle it here
                var $input = $(form.clk),
                    input = $input[0];
                n = input.name;
                if (n && input.type == 'image') { //&& !input.disabled
                    a.push({
                        name: n,
                        value: $input.val()
                    });
                    a.push({
                        name: n + '.x',
                        value: form.clk_x
                    }, {
                        name: n + '.y',
                        value: form.clk_y
                    });
                }
            }
            return a;
        },
        /*
         * @method serialize
         * 获取form参数序列化后的值,参数间通过&分开,如userName=tanyl&userCode=13770793735&password=123456
         * @return {String} 参数序列化之后的值
         * @deprecated 基本用不到
         */
        serialize: function () {
            return $.param(this.formToArray());
        },
        /**
         * @method value
         * 如果存在参数对象,进行form的设值操作;否则返回form的参数值,对象形式，如Object {userName: "tanyl", userCode: "13770793735", password: "123456"…}
         * @param {Object} [newVal]
         * @return {Object} 参数对象
         */
        value: function (newVal) {
            if (newVal) {
                this._setValue(newVal);
            } else {
                return this._getValue();
            }
        },
        _addWidgetValue: function (obj) {
            var key = obj.name,
                $element = this.element,
                widget, value;
            //有控件需要覆盖objArr[i].value值--
            var $el = $element.find("[name='" + key + "']");
            if (!$el[0]) return;
            widget = $.data($el[0], "formfield"); //目前没有处理控件组(如icheck控件)的概念
            if (widget) {
                value = widget._formGetValue(); //需要有返回值
                if (value) {
                    obj.value = value;
                }
            }
        },
        _getValue: function () {
            var objArr = this.formToArray(),
                re = {},
                key;
            for (var i = 0; i < objArr.length; i++) {
                key = objArr[i].name;
                this._addWidgetValue(objArr[i]);
                if (re[key] === undefined) {
                    re[key] = objArr[i].value;
                } else if (!$.isArray(re[key])) { //已经存在了
                    var temp = [re[key]];
                    temp.push(objArr[i].value);
                    re[key] = temp;
                } else {
                    re[key].push(objArr[i].value)
                }
            }
            return re;
        },
        _setValue: function (newVal) {
            if ($.type(newVal) !== 'object') return;

            var $element = this.element,
                widget;
            for (var key in newVal) {
                var $el = $element.find('[name=' + key + ']');
                if (!$el[0]) continue;

                //普通元素
                try {
                    $element.find('[name=' + key + ']:not(._formIngoreValue)').val(newVal[key]);
                } catch (e) {
                    $.error('copy value to form field error,please check');
                }
                //控件增加,覆盖方式;先处理普通元素,spinner控件可以不需要监听setValue事件
                for (var i = 0; i < $el.length; i++) { //checkbox存在多个
                    widget = $.data($el[i], "formfield");
                    if (widget) {
                        widget._formSetValue(newVal[key]);
                    }
                }
            }
            this.element.triggerHandler('afterFormSetValue', {formData: newVal});
        },
        /**
         * 清空表单值
         * @method clear
         * @param {Boolean} [includeHidden] [是否清除隐藏列]
         */
        clear: function (includeHidden) {
            this.element.each(function () {
                $('input[name],select[name],textarea[name]', this).clearFields(true);
            });
            this.element.triggerHandler('formClear');
        },
        /**
         * 禁用表单
         * @method disable
         */
        disable: function () {
            var $element = this.element,
                $els = $('input[name],select[name],textarea[name]', $element);

            for (var i = 0; i < $els.length; i++) {
                $($els[i]).attr('disabled', true);
            }
            $element.triggerHandler("formDisable");
        },
        /**
         * 启用表单
         * @method enable
         */
        enable: function () {
            var $element = this.element,
                $els = $('input[name],select[name],textarea[name]', $element);

            for (var i = 0; i < $els.length; i++) {
                $($els[i]).attr('disabled', false);
            }

            $element.triggerHandler("formEnable");
        }
    });

    /*
     * Returns the value of the field element.
     */
    $.fieldValue = function (el, successful) {
        var n = el.name,
            t = el.type,
            tag = el.tagName.toLowerCase();
        if (successful === undefined) {
            successful = true;
        }
        // || el.disabled 也取出来
        if (successful && (!n || t == 'reset' || t == 'button' ||
            (t == 'checkbox' || t == 'radio') && !el.checked ||
            (t == 'submit' || t == 'image') && el.form && el.form.clk != el ||
            tag == 'select' && el.selectedIndex == -1)) {
            return null;
        }

        if (tag == 'select') {
            var index = el.selectedIndex;
            if (index < 0) {
                return null;
            }
            var a = [];
            var ops = el.options;
            var one = (t == 'select-one');
            var max = (one ? index + 1 : ops.length);
            for (var i = (one ? index : 0); i < max; i++) {
                var op = ops[i];
                if (op.selected) {
                    var v = op.value;
                    if (!v) { // extra pain for IE...
                        v = (op.attributes && op.attributes.value && !(op.attributes.value.specified)) ? op.text : op.value;
                    }
                    if (one) {
                        return v;
                    }
                    a.push(v);
                }
            }
            return a;
        }
        return $(el).val();
    };
    // Clears the selected form elements.
    $.fn.clearFields = function () {
        var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week|hidden)$/i;
        return this.each(function () {
            var t = this.type,
                tag = this.tagName.toLowerCase();

            if (!this.name) {
                return true;
            }

            if (re.test(t) || tag == 'textarea') {
                this.value = '';
            } else if (t == 'checkbox' || t == 'radio') {
                this.checked = false;
            } else if (tag == 'select') {
                this.selectedIndex = -1;
            } else if (t == "file") {
                if (/MSIE/.test(navigator.userAgent)) {
                    $(this).replaceWith($(this).clone(true));
                } else {
                    $(this).val('');
                }
            }
        });
    };
}();

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('fish.label', factory);
    } else {
        factory();
    }
})(function () {
    var template = '<li class="label-item"><span title="{{title}}" class="label-title">{{title}}</span>\n                        <button class="label-item-close" type="button"><span class="glyphicon glyphicon-remove"></span></button>\n                    </li>';
    var tplFn = fish.compile(template);

    $.widget("ui.label", {
        options: {
            closeable: false,
            maxWidth: 300,
            minWdith: 100,
            appendTo: 'body',
            title: 'label',
            close: $.noop
        },
        _create: function () {
            var options = this.options;
            var $el = $(tplFn(options));
            $(options.appendTo).append($el);
            this._contentElement = $el;
            this._delegateEvent();
        },
        _init: function () {},
        _delegateEvent: function () {
            var me = this;
            var options = me.options;
            this._on(this._contentElement.find("button"), {
                click: function (event) {
                    me.close(event);
                }
            });
            this._on(this._contentElement, {
                click: function (event) {
                    me._trigger('click');
                }
            });
        },
        _setOption: function () {},
        _destroy: function () {
            this._contentElement.remove();
        },
        /**
         * 关闭Label
         * @param  {[type]} event [description]
         */
        close: function (event) {
            //销毁控件
            this.destroy();
            //派发close事件
            this._trigger('close');
        },
        /**
         * 设置新的标签文本
         * @param {[String]} text [新的标签文本]
         */
        setText: function (text) {
            var $el = this._contentElement;
            $el.find(".label-title").text(text);
        }
    });
});

/*!
 * jQuery UI Menu 1.11.4
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/menu/
 */

/**
 * @class fish.desktop.widget.Menu
 * @extends fish.desktop.widget
 * menu组件
 */
! function(factory) {
    if (typeof define === 'function' && define.amd) {
        define('fish.menu', factory);
    } else {
        factory();
    }
}(function() {

    $.widget("ui.menu", {
        defaultElement: "<ul>",
        delay: 300,
        options: {
            /**
             * @cfg {Object} icons 子菜单使用的图标，请使用fish预定义的CSS样式类。
             * @cfg {String} icons.submenu  
             * @cfg {String} icons.firstmenu 
             */
            icons: {
                submenu: "glyphicon glyphicon-triangle-right",
                firstmenu: "glyphicon glyphicon-triangle-bottom",
                top:"glyphicon glyphicon-triangle-top",
                bottom:"glyphicon glyphicon-triangle-bottom"
            },
            /**
             * @cfg {String} menus 菜单容器元素的选择器，包括子菜单，默认为"ul"。
             */
            menus: "ul",
            position: {
                my: "left top-1",
                at: "right top",
                collision: "flipfit"
            },
            firstposition: {
                my: "left-1 top",
                at: "left bottom",
                collision: "flipfit"
            },
            role: "menu",
            /**
             * @cfg {Boolean} disabled 
             * 如果设置为true将会禁用菜单。
             */
            disabled: false,

            // callbacks
            blur: null,
            focus: null,
            select: null
        },

        _create: function() {
            this.activeMenu = this.element;

            // Flag used to prevent firing of the click handler
            // as the event bubbles up through nested menus
            this.mouseHandled = false;
            this.element
                .uniqueId()
                .addClass("ui-menu ")
                .toggleClass("ui-menu-icons", !!this.element.find(".ui-icon").length)
                .attr({
                    role: this.options.role,
                    tabIndex: 0
                });

            if (this.options.disabled) {
                this.element
                    .addClass("ui-state-disabled")
                    .attr("aria-disabled", "true");
            }
            
            this._on({
                // Prevent focus from sticking to links inside menu after clicking
                // them (focus should always stay on UL during navigation).
                "mousedown .ui-menu-item > a": function(event) {
                    event.preventDefault();
                },
                "click .ui-state-disabled > a": function(event) {
                    event.preventDefault();
                },
                "click .ui-menu-item:has(a)": function(event) {
                    var target = $(event.target).closest(".ui-menu-item");
                    if (!this.mouseHandled && target.not(".ui-state-disabled").length) {
                        this.select(event);

                        // Only set the mouseHandled flag if the event will bubble, see #9469.
                        if (!event.isPropagationStopped()) {
                            this.mouseHandled = true;
                        }

                        // Open submenu on click
                        if (target.has(".ui-menu").length) {
                            this.expand(event);
                        } else if (!this.element.is(":focus") && $(this.document[0].activeElement).closest(".ui-menu").length) {

                            // Redirect focus to the menu
                            this.element.trigger("focus", [true]);

                            // If the active item is on the top level, let it stay active.
                            // Otherwise, blur the active item since it is no longer visible.
                            if (this.active && this.active.parents(".ui-menu").length === 1) {
                                clearTimeout(this.timer);
                            }
                        }
                    }
                },
                "mouseenter .ui-menu-item": function(event) {
                    // Ignore mouse events while typeahead is active, see #10458.
                    // Prevents focusing the wrong item when typeahead causes a scroll while the mouse
                    // is over an item in the menu
                    if (this.previousFilter) {
                        return;
                    }
                    var target = $(event.currentTarget);
                    // Remove ui-state-active class from siblings of the newly focused menu item
                    // to avoid a jump caused by adjacent elements both having a class with a border
                    target.siblings().children(".ui-state-active").removeClass("ui-state-active");
                    this.focus(event, target);
                },
                mouseleave: "collapseAll",
                "mouseleave .ui-menu": "collapseAll",
                focus: function(event, keepActiveItem) {
                    // If there's already an active item, keep it active
                    // If not, activate the first item
                    var item = this.active || this.element.children(".ui-menu-item").eq(0);

                    if (!keepActiveItem) {
                        this.focus(event, item);
                    }
                },
                blur: function(event) {
                    this._delay(function() {
                        if (!$.contains(this.element[0], this.document[0].activeElement)) {
                            this.collapseAll(event);
                        }
                    });
                },
                keydown: "_keydown"
            });

            this.refresh();

            // Clicks outside of a menu collapse any open menus
            this._on(this.document, {
                click: function(event) {
                    if (this._closeOnDocumentClick(event)) {
                        this.collapseAll(event);
                    }

                    // Reset the mouseHandled flag
                    this.mouseHandled = false;
                }
            });

            if(this.element.is(":visible")){
                this._on($(window), {
                    debouncedresize: "setScrollMenu"
                });
            }

            var top = this.element.offset().top;
            if(this.element.outerHeight(true) > ($(window).outerHeight() - top)){
                this.setScrollMenu();
            }

        },

        _destroy: function() {
            // Destroy (sub)menus
            this.element
                .removeAttr("aria-activedescendant")
                .find(".ui-menu").addBack()
                .removeClass("ui-menu ui-menu-icons") // ui-widget ui-widget-content ui-corner-all
                .removeAttr("role")
                .removeAttr("tabIndex")
                .removeAttr("aria-labelledby")
                .removeAttr("aria-expanded")
                .removeAttr("aria-hidden")
                .removeAttr("aria-disabled")
                .removeUniqueId()
                .show();

            // Destroy menu items
            this.element.find(".ui-menu-item")
                .removeClass("ui-menu-item")
                .removeAttr("role")
                .removeAttr("aria-disabled")
                .children("a")
                .removeUniqueId()
                .removeClass("ui-state-hover")
                .removeAttr("tabIndex")
                .removeAttr("role")
                .removeAttr("aria-haspopup")
                .children().each(function() {
                    var elem = $(this);
                    if (elem.data("ui-menu-submenu-carat")) {
                        elem.remove();
                    }
                });
            this.element.find('.prev').remove();
            this.element.find('.next').remove();
            // Destroy menu dividers
            this.element.find(".ui-menu-divider").removeClass("ui-menu-divider"); // ui-widget-content
        },

        _keydown: function(event) {
            var match, prev, character, skip,
                preventDefault = true;

            switch (event.keyCode) {
                case $.ui.keyCode.PAGE_UP:
                    this.previousPage(event);
                    break;
                case $.ui.keyCode.PAGE_DOWN:
                    this.nextPage(event);
                    break;
                case $.ui.keyCode.HOME:
                    this._move("first", "first", event);
                    break;
                case $.ui.keyCode.END:
                    this._move("last", "last", event);
                    break;
                case $.ui.keyCode.UP:
                    this.previous(event);
                    break;
                case $.ui.keyCode.DOWN:
                    this.next(event);
                    break;
                case $.ui.keyCode.LEFT:
                    this.collapse(event);
                    break;
                case $.ui.keyCode.RIGHT:
                    if (this.active && !this.active.is(".ui-state-disabled")) {
                        this.expand(event);
                    }
                    break;
                case $.ui.keyCode.ENTER:
                case $.ui.keyCode.SPACE:
                    this._activate(event);
                    break;
                case $.ui.keyCode.ESCAPE:
                    this.collapse(event);
                    break;
                default:
                    preventDefault = false;
                    prev = this.previousFilter || "";
                    character = String.fromCharCode(event.keyCode);
                    skip = false;

                    clearTimeout(this.filterTimer);

                    if (character === prev) {
                        skip = true;
                    } else {
                        character = prev + character;
                    }

                    match = this._filterMenuItems(character);
                    match = skip && match.index(this.active.next()) !== -1 ?
                        this.active.nextAll(".ui-menu-item") :
                        match;

                    // If no matches on the current filter, reset to the last character pressed
                    // to move down the menu to the first item that starts with that character
                    if (!match.length) {
                        character = String.fromCharCode(event.keyCode);
                        match = this._filterMenuItems(character);
                    }

                    if (match.length) {
                        this.focus(event, match);
                        this.previousFilter = character;
                        this.filterTimer = this._delay(function() {
                            delete this.previousFilter;
                        }, 1000);
                    } else {
                        delete this.previousFilter;
                    }
            }

            if (preventDefault) {
                event.preventDefault();
            }
        },

        _activate: function(event) {
            if (!this.active.is(".ui-state-disabled")) {
                if (this.active.children("a[aria-haspopup='true']").length) {
                    this.expand(event);
                } else {
                    this.select(event);
                }
            }
        },

        /**
         * @method refresh
         * 初始化那些尚未初始化的子菜单和菜单项。
         * 可以在菜单中增加菜单项和子菜单，也可以把当前菜单中的内容全部替换掉，然后调用refresh()方法进行初始化。
         */
        refresh: function() {
            var menus,
                that = this,
                icons = this.options.icons,
                submenus = this.element.find(this.options.menus);



            // Initialize nested menus
            submenus/*.filter(":not(.ui-menu)")*/
                .addClass("ui-menu") // ui-widget ui-widget-content ui-corner-all
                .hide()
                .attr({
                    role: this.options.role,
                    "aria-hidden": "true",
                    "aria-expanded": "false"
                })
                .each(function() {
                    var menu = $(this),
                        item = menu.prev("a"),
                        isFirst = that.element.hasClass('ui-menu-horizontal') && (that.element[0] == menu.parent().parent()[0]),
                        submenuCarat = $("<span>")
                        .addClass("ui-menu-icon " + (isFirst ? icons.firstmenu : icons.submenu))
                        .data("ui-menu-submenu-carat", true);

                    item
                        .attr("aria-haspopup", "true")
                        .prepend(submenuCarat);
                    menu.attr("aria-labelledby", item.attr("id"));
                });

            menus = submenus.add(this.element);




            // Don't refresh list items that are already adapted
            menus.children(":not(.ui-menu-item):has(a)")
                .addClass("ui-menu-item")
                .attr("role", "presentation")
                .children("a")
                .uniqueId()
                // .addClass( "ui-corner-all" )
                .attr({
                    tabIndex: -1,
                    role: this._itemRole()
                });
            // Initialize menu-items containing spaces and/or dashes only as dividers
            menus.children(":not(.ui-menu-item)").each(function() {
                var item = $(this);
                if (that._isDivider(item)) {
                    item.addClass("ui-menu-divider");
                }
            });
            // Add aria-disabled attribute to any disabled menu item
            menus.children(".ui-state-disabled").attr("aria-disabled", "true");

            // If the active item has been removed, blur the menu
            if (this.active && !$.contains(this.element[0], this.active[0])) {
                this.blur();
            }
        },

        _itemRole: function() {
            return {
                menu: "menuitem",
                listbox: "option"
            }[this.options.role];
        },

        _setOption: function(key, value) {
            if (key === "icons") {
                this.element.find(".ui-menu-icon")
                    .removeClass(this.options.icons.submenu)
                    .addClass(value.submenu);
            }
            if (key === "disabled") {
                this.element
                    .toggleClass("ui-state-disabled", !!value)
                    .attr("aria-disabled", value);
            }
            this._super(key, value);
        },

        /**
         * @method focus
         * 将指定的菜单项设置为活动状态，如果有子菜单则打开这些子菜单，同时触发按钮的focus事件。
         * @param  {Event} event 当菜单项获得焦点的时候触发。
         * @param  {jQuery} item 需要focus/activate的菜单项。
         * @chainable
         */
        focus: function(event, item) {
            var nested, focused;
            this.blur(event, event && event.type === "focus");

            this._scrollIntoView(item);

            this.active = item.first();
            focused = this.active.children("a").addClass("ui-state-focus");
            // Only update aria-activedescendant if there's a role
            // otherwise we assume focus is managed elsewhere
            if (this.options.role) {
                this.element.attr("aria-activedescendant", focused.attr("id"));
            }

            // Highlight active parent menu item, if any
            this.active
                .parent()
                .closest(".ui-menu-item")
                .children("a:first")
                .addClass("ui-state-active");

            if (event && event.type === "keydown") {
                this._close();
            } else {
                this.timer = this._delay(function() {
                    this._close();
                }, this.delay);
            }

            nested = item.children(".ui-menu");
            if (nested.length && event && (/^mouse/.test(event.type))) {
                this._startOpening(nested);
            }
            this.activeMenu = item.parent();

            this._trigger("focus", event, {
                item: item
            });
        },

        _scrollIntoView: function(item) {
            var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
            if (this._hasScroll()) {
                borderTop = parseFloat($.css(this.activeMenu[0], "borderTopWidth")) || 0;
                paddingTop = parseFloat($.css(this.activeMenu[0], "paddingTop")) || 0;
                offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
                scroll = this.activeMenu.scrollTop();
                elementHeight = this.activeMenu.height();
                itemHeight = item.outerHeight();

                if (offset < 0) {
                    this.activeMenu.scrollTop(scroll + offset);
                } else if (offset + itemHeight > elementHeight) {
                    this.activeMenu.scrollTop(scroll + offset - elementHeight + itemHeight);
                }
            }
        },

        /**
         * @method blur 
         * 让指定的菜单失去焦点，删除元素上的活动样式，并触发菜单的blur事件。
         * @param  {Event} [event]
         * @chainable
         */
        blur: function(event, fromFocus) {
            if (!fromFocus) {
                clearTimeout(this.timer);
            }

            if (!this.active) {
                return;
            }

            this.active.children("a").removeClass("ui-state-focus");
            this.active = null;

            this._trigger("blur", event, {
                item: this.active
            });
        },

        _startOpening: function(submenu) {
            clearTimeout(this.timer);

            // Don't open if already open fixes a Firefox bug that caused a .5 pixel
            // shift in the submenu position when mousing over the carat icon
            if (submenu.attr("aria-hidden") !== "true") {
                return;
            }

            this.timer = this._delay(function() {
                this._close();
                this._open(submenu);
            }, this.delay);
        },

        _open: function(submenu) {

            var isFirst = this.element.hasClass('ui-menu-horizontal') && (this.element[0] == submenu.parent().parent()[0]);

            var position = $.extend({
                of: this.active
            }, isFirst ? this.options.firstposition : this.options.position);

            clearTimeout(this.timer);
            this.element.find(".ui-menu").not(submenu.parents(".ui-menu"))
                .hide()
                .attr("aria-hidden", "true");

            submenu
                .show()
                .removeAttr("aria-hidden")
                .attr("aria-expanded", "true")
                .position(position);
        },
        /**
         * @method collapseAll
         * 关闭所有打开的子菜单
         * @param  {Event} [event]
         * @param  {Boolean} [all]
         * 用来指定是否需要关闭所有子菜单，还是只关闭触发事件或包含触发事件元素的菜单。
         * @chainable
         */
        collapseAll: function(event, all) {
            clearTimeout(this.timer);
            this.timer = this._delay(function() {
                // If we were passed an event, look for the submenu that contains the event
                var currentMenu = all ? this.element :
                    $(event && event.target).closest(this.element.find(".ui-menu"));

                // If we found no valid submenu ancestor, use the main menu to close all sub menus anyway
                if (!currentMenu.length) {
                    currentMenu = this.element;
                }

                this._close(currentMenu);

                this.blur(event);
                this.activeMenu = currentMenu;
            }, this.delay);
        },

        // With no arguments, closes the currently active menu - if nothing is active
        // it closes all menus.  If passed an argument, it will search for menus BELOW
        _close: function(startMenu) {
            if (!startMenu) {
                startMenu = this.active ? this.active.parent() : this.element;
            }

            startMenu
                .find(".ui-menu")
                .hide()
                .attr("aria-hidden", "true")
                .attr("aria-expanded", "false")
                .end()
                .find(".ui-state-active").not(".ui-state-focus")
                .removeClass("ui-state-active");
        },

        _closeOnDocumentClick: function(event) {
            return !$(event.target).closest(".ui-menu").length;
        },

        _isDivider: function(item) {

            // Match hyphen, em dash, en dash
            return !/[^\-\u2014\u2013\s]/.test(item.text());
        },

        /**
         * @method collapse
         * 关闭当前活动的子菜单。
         * @param  {Event} [event]
         * @chainable
         */
        collapse: function(event) {
            var newItem = this.active &&
                this.active.parent().closest(".ui-menu-item", this.element);
            if (newItem && newItem.length) {
                this._close();
                this.focus(event, newItem);
            }
        },

        /**
         * @method expand
         * 展开当前活动项目下的子菜单。
         * @param  {Event} event
         * @chainable
         */
        expand: function(event) {
            var newItem = this.active &&
                this.active
                .children(".ui-menu ")
                .children(".ui-menu-item")
                .first();

            if (newItem && newItem.length) {
                this._open(newItem.parent());

                // Delay so Firefox will not hide activedescendant change in expanding submenu from AT
                this._delay(function() {
                    this.focus(event, newItem);
                });
            }
        },

        /**
         * @method next
         * 将下一个菜单项设置为活动状态。
         * @param  {Event}   event
         * @chainable
         */
        next: function(event) {
            this._move("next", "first", event);
        },
        /**
         * @method previous
         * 将上一个菜单项设置为活动状态。
         * @param  {Event} event
         * @chainable
         */
        previous: function(event) {
            this._move("prev", "last", event);
        },
        /**
         * @method isFirstItem
         * 判断当前活动的项目是否是菜单中的第一个项目，返回布尔型。
         * @return {Boolean} 
         */
        isFirstItem: function() {
            return this.active && !this.active.prevAll(".ui-menu-item").length;
        },
        /**
         * @method isLastItem
         * 判断当前活动的项目是否是菜单中的最后一个项目，返回布尔型。
         * @return {Boolean}
         */
        isLastItem: function() {
            return this.active && !this.active.nextAll(".ui-menu-item").length;
        },

        _move: function(direction, filter, event) {
            var next;
            if (this.active) {
                if (direction === "first" || direction === "last") {
                    next = this.active[direction === "first" ? "prevAll" : "nextAll"](".ui-menu-item")
                        .eq(-1);
                } else {
                    next = this.active[direction + "All"](".ui-menu-item")
                        .eq(0);
                }
            }
            if (!next || !next.length || !this.active) {
                next = this.activeMenu.children(".ui-menu-item")[filter]();
            }

            this.focus(event, next);
        },
        /**
         * @method nextPage
         * 把激活状态移动到可滚动按钮底部的第一个菜单上，如果不可滚动则移动到最后一个项目上。
         * @param  {Event} event
         * @chainable
         */
        nextPage: function(event) {
            var item, base, height;

            if (!this.active) {
                this.next(event);
                return;
            }
            if (this.isLastItem()) {
                return;
            }
            if (this._hasScroll()) {
                base = this.active.offset().top;
                height = this.element.height();
                this.active.nextAll(".ui-menu-item").each(function() {
                    item = $(this);
                    return item.offset().top - base - height < 0;
                });

                this.focus(event, item);
            } else {
                this.focus(event, this.activeMenu.children(".ui-menu-item")[!this.active ? "first" : "last"]());
            }
        },
        /**
         * @method previousPage
         * 把激活状态移动到可滚动按钮顶部的第一个菜单上，如果不可滚动则移动到第一个项目上。
         * @param  {Event} event
         * @chainable
         */
        previousPage: function(event) {
            var item, base, height;
            if (!this.active) {
                this.next(event);
                return;
            }
            if (this.isFirstItem()) {
                return;
            }
            if (this._hasScroll()) {
                base = this.active.offset().top;
                height = this.element.height();
                this.active.prevAll(".ui-menu-item").each(function() {
                    item = $(this);
                    return item.offset().top - base + height > 0;
                });

                this.focus(event, item);
            } else {
                this.focus(event, this.activeMenu.children(".ui-menu-item").first());
            }
        },

        _hasScroll: function() {
            return this.element.outerHeight() < this.element.prop("scrollHeight");
        },

        /**
         * @method select
         * 选中当前活动的菜单项，收起所有子菜单并触发菜单的select事件。
         * @param  {Event} event
         * @chainable
         */
        select: function(event) {
            // TODO: It should never be possible to not have an active item at this
            // point, but the tests don't trigger mouseenter before click.
            this.active = this.active || $(event.target).closest(".ui-menu-item");
            var ui = {
                item: this.active
            };
            if (!this.active.has(".ui-menu").length) {
                this.collapseAll(event, true);
            }
            this._trigger("select", event, ui);
        },

        _filterMenuItems: function(character) {
            var escapedCharacter = character.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&"),
                regex = new RegExp("^" + escapedCharacter, "i");

            return this.activeMenu
                .find(this.options.items)

            // Only match on items, not dividers or other content (#10571)
            .filter(".ui-menu-item")
                .filter(function() {
                    return regex.test($.trim($(this).children("a").text()));
                });
        },
        setScrollMenu:function(){
            var wHeight = $(window).outerHeight(),
                top = this.element.offset().top,
                menuHeight = wHeight - top;

            var $prev = this.element.children(".prev");
                $next = this.element.children(".next");

            if(this.element.outerHeight(true) <= (wHeight - top)){
                if($prev.length == 0 && $next.length == 0){
                    return;
                }
            }
            
            var contentHeight = menuHeight;
            var liList = this.element.children('.ui-menu-item').not(".prev,.next"),
                itemHeight = liList.filter(":visible").first().outerHeight(true);
                count = Math.floor(contentHeight / itemHeight);
            var movetotop,movetobottom;

            liList.each(function(index, item) {
               $(item).removeClass("hidden");
            });

            if(count >= liList.length){
                this._off(this.element.children('.prev'),"mouseenter mouseleave");
                this._off(this.element.children('.next'),"mouseenter mouseleave");
                $prev.remove();
                $next.remove();
                clearInterval(movetotop);
                clearInterval(movetobottom);
                return;
            }else{
                if($prev.length == 0){
                    $prev = $("<li class='ui-menu-item prev'><span class='glyphicon glyphicon-triangle-top'></li>");
                    $prev.addClass('ui-state-disabled');
                    this.element.prepend($prev);
                }
                if($next.length == 0){
                    $next = $("<li class='ui-menu-item next'><span class='glyphicon glyphicon-triangle-bottom'></li>");
                    this.element.append($next);
                }
                contentHeight = menuHeight - $prev.outerHeight(true) - $next.outerHeight(true);
                count = Math.floor(contentHeight / itemHeight);
                liList.each(function(index, item) {
                    if(index > count - 1){
                        $(item).addClass("hidden");
                     }
                });
                this._on({
                    "mouseenter .ui-menu-item.next":function(event){
                        clearInterval(movetobottom);
                        movetotop = setInterval(function(){
                            var first = liList.filter(":visible").first();
                            var last = liList.filter(":visible").last();
                            if(first.index() != 1){
                                $prev.removeClass('ui-state-disabled');
                            }
                            if(last.index() == liList.length){
                                $next.addClass('ui-state-disabled');
                            }else{
                                $next.removeClass('ui-state-disabled');
                                first.addClass('hidden');
                                last.next().removeClass('hidden');
                            }
                            
                        },400);
                    },
                    "mouseleave .ui-menu-item.next":function(event){
                        clearInterval(movetotop);
                    },
                    "mouseenter .ui-menu-item.prev":function(event){
                        clearInterval(movetotop);
                        movetobottom = setInterval(function(){
                            var first = liList.filter(":visible").first();
                            var last = liList.filter(":visible").last();
                            if(last.index() != liList.length){
                                $next.removeClass('ui-state-disabled');
                            } 
                            if(first.index() == 1){
                                $prev.addClass('ui-state-disabled');
                            }else{
                                $prev.removeClass('ui-state-disabled');
                                last.addClass('hidden');
                                first.prev().removeClass('hidden');
                            }
                        },400);
                    },
                    "mouseleave .ui-menu-item.prev":function(event){
                        clearInterval(movetobottom);
                    }

                });
            }
        }
    });

});

/**
 * @event blur
 * 当菜单失去焦点的时候触发。
 * @param {Event} event
 * @param {Object} ui ui.item--当前活动的菜单项
 * 
 *     @example
 *     $( ".selector" ).menu({
 *       blur: function( event, ui ) {}
 *     });
 */
/**
 * @event focus
 * 当菜单获得焦点或者当菜单项被激活时触发。
 * @param {Event} event
 * @param {Object} ui ui.item--当前活动的菜单项
 * 
 *     @example
 *     $( ".selector" ).menu({
 *       focus: function( event, ui ) {}
 *     });
 *     或者
 *     $( ".selector" ).on( "menufocus", function( event, ui ) {} );
 */
/**
 * @event select
 * 当一个菜单项被选中的时候触发。
 * @param {Event} event
 * @param {Object} ui ui.item--当前活动的菜单项
 * 
 *     @example
 *     $(".selector").menu({
 *       select: function( event, ui ) {}
 *     });
 *     或者
 *     $(".selector").on( "menuselect", function( event, ui ) {} );
 */

/**
 * @class fish.desktop.widget.MultiSelect
 * @extends fish.desktop.widget
 * 多选下拉
 */
!(function () {
    "use strict";

    //Select 解析器
    var SelectParser = (function () {
        function SelectParser() {
            this.options_index = 0;
            this.parsed = [];
        }

        //添加节点,分两类<optgroup>、<option>
        SelectParser.prototype.add_node = function (child) {
            if (child.nodeName.toUpperCase() === "OPTGROUP") {
                return this.add_group(child);
            } else {
                return this.add_option(child);
            }
        };

        SelectParser.prototype.add_group = function (group) {
            var group_position, option, _i, _len, _ref, _results;
            group_position = this.parsed.length;
            this.parsed.push({
                array_index: group_position,
                group: true,
                label: _.escape(group.label),
                children: 0,
                disabled: group.disabled
            });
            _ref = group.childNodes;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                option = _ref[_i];
                _results.push(this.add_option(option, group_position, group.disabled));
            }
            return _results;
        };

        SelectParser.prototype.add_option = function (option, group_position, group_disabled) {
            if (option.nodeName.toUpperCase() === "OPTION") {
                if (option.text !== "") {
                    if (group_position != null) {
                        this.parsed[group_position].children += 1;
                    }
                    this.parsed.push({
                        array_index: this.parsed.length,
                        options_index: this.options_index,
                        value: option.value,
                        text: option.text,
                        html: option.innerHTML,
                        selected: option.selected,
                        disabled: group_disabled === true ? group_disabled : option.disabled,
                        group_array_index: group_position,
                        classes: option.className,
                        style: option.style.cssText
                    });
                } else {
                    this.parsed.push({
                        array_index: this.parsed.length,
                        options_index: this.options_index,
                        empty: true
                    });
                }
                return this.options_index += 1;
            }
        };

        return SelectParser;
    })();

    SelectParser.selectToArray = function (select) {
        var child, parser, _i, _len, _ref;
        parser = new SelectParser();
        _ref = select.childNodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            parser.add_node(child);
        }
        return parser.parsed;
    };

    var template = "\n          <div>\n              <ul class=\"ui-multiselect-choices\">\n                  <li class=\"search-field\">\n                      <input type=\"text\" autocomplete=\"off\"/>\n                  </li>\n              </ul>\n          </div>",
        KEY_CODE = $.ui.keyCode;

    $.widget("ui.multiselect", $.ui.formfield, {
        options: {
            /**
             * @cfg {String} [dataTextField='name'] 数据源显示字段
             */
            dataTextField: "name",
            /**
             * @cfg {String} [dataValueField='value'] 数据源取值字段
             */
            dataValueField: "value",
            /**
             * @cfg {Array} [dataSource='name'] 数据源，如果没有设置从`select`元素去其`options`节点
             */
            dataSource: [],
            /**
             * 取初始化参数placeholder值作为默认显示,没有则从html标签中取属性值data-placeholder
             * @cfg {String}  [placeholder=""]
             */
            placeholder: "",
            /**
             * @cfg {Boolean} [completeSearch=false]
             * 默认情况下，会从单词的首字母开始搜索；设置为true的时候，完全匹配
             */
            completeSearch: false,
            /**
             * @cfg {Boolean} [containsSearch=false]
             * 默认情况下，会从单词的首字母开始搜索；设置为true的时候，从任意位置匹配
             */
            containsSearch: false,
            /**
             * @cfg {Boolean} [tabKey=true]
             * 支持tab新增不存在的元素
             */
            tabKey: true,
            /**
             * @cfg {Boolean} [deleteKey=true]
             * 支持backspace键删除记录
             */
            deleteKey: true, //支持delete和backspace键
            /**
             * @cfg {Number}  [maxLength=Infinity]
             * 限制使用者可以最多选择几个option，当到达限额的时候，multiselectmaxselected事件会被触发
             */
            maxLength: Infinity, //最大可以选择多少项
            /**
             * @cfg {Boolean}  [inheritClasses=false]
             * 设置为true的时候，会获取原dom元素上的class加到multiselect的div上
             */
            inheritClasses: false, //是否将multiselect的样式加到div容器上
            /**
             * 是否在列表中显示已选中的选项
             * @cfg {Boolean} [displaySelectedOptions=true]
             */
            displaySelectedOptions: true,
            /**
             * 是否在列表中显示失效的选项
             * @cfg {Boolean} [displayDisabledOptions=true]
             */
            displayDisabledOptions: true,
            groupSearch: true,
            rowCount: 10000
        },
        _create: function () {
            this._setDefaultValues();
            this._setUpHtml();
            this._delegateEvent();

            // call formfield _create method
            this._super();
        },
        _setDefaultValues: function () {
            this.options.placeholder = this.options.placeholder || this.element.attr('data-placeholder');
            //this.currentSelectedIndex = this.element[0].selectedIndex;
            this._active = false; //是否为激活状态
            this._mouseOn = false; //鼠标是否在上面
            this.results_showing = false;
            //this.result_highlighted = null;
        },
        //移除原生select，构建div容器
        _setUpHtml: function () {
            var _classes,
                _props,
                options = this.options;
            _classes = ["ui-multiselect-container"];
            if (options.inheritClasses && this.element[0].className) {
                _classes.push(this.element[0].className);
            }
            _props = {
                'class': _classes.join(' '),
                'title': this.element[0].title
            };
            if (this.element[0].id) {
                _props.id = this.element[0].id.replace(/[^\w]/g, '_') + "_multi";
            }
            this.container = $(template).attr(_props);
            this.element.hide().after(this.container);
            this.$ul = this.container.find('.ui-multiselect-choices').first();
            this.$li = this.container.find('li.search-field').first();
            this.$input = this.container.find('input').first().val(options.placeholder);
            this.$menu = $('<ul class="dropdown-list ui-multiselect-results"></ul>');

            options.dataSource && options.dataSource.length && this._setDataSource(options.dataSource); //支持初始化dataSource属性

            this._menuBuild();
            this._setTabIndex();
            this._setLabelBehavior();
        },
        _setOption: function (key, value) {
            this._super(key, value);

            if (key === "dataSource") {
                this._setDataSource(value);
            }

            if (key === 'disabled') {
                this.element.prop("disabled", value);
                this.search_field_disabled();
                this.container.find('.search-choice-close').prop('disabled', value);
            }
        },
        _delegateEvent: function () {
            var that = this;
            //div 容器
            this._on(this.container, {
                'click': '_open',
                'mouseenter': function (evt) {
                    that._mouseOn = true;
                },
                'mouseleave': function (evt) {
                    that._mouseOn = false;
                }
            });

            // 下拉选项框
            this._on(this.$menu, {
                'mouseup': 'menuMouseup', //IMPORTANTCE!!!,通过mouseup事件，检测选中li
                'mouseenter': function (evt) {
                    that._mouseOn = true;
                },
                'mouseleave': function (evt) {
                    that._mouseOn = false;
                }
                //'mouseover': 'menuMouseover',
                //'mouseout': 'menuMouseout',
                //'mousewheel': 'menuMousewheel'
            });

            //搜索框事件
            this._on(this.$input, {
                'blur': '_blur',
                'keydown': '_keydown',
                'focus': '_focus',
                'cut': '_clipboard',
                'paste': '_clipboard'
            });

            this._on(this.$ul, {
                'click .search-choice-close': function (evt) {
                    evt.preventDefault();
                    evt.stopPropagation();
                    if (!that.is_disabled) {
                        return that._deleteMenu($(evt.currentTarget));
                    }
                }
            });
        },

        _validateHandler: function () {
            var $element = this.element,
                that = this;

            this._on(this.$input, {
                'blur': function () {
                    if (that._getValidFlag()) {
                        $element.isValid();
                    }
                }
            });
            // 下拉菜单隐藏的时候校验----TODO why add this?
            // $element.on('multiselecthidingdropdown.valid', function() {
            //   try {$element.isValid();}catch(e){}
            // });
        },

        _focus: function (evt) {
            var that = this;
            if (!this._active) {
                return _.delay(function () {
                    return that._open();
                }, 50);
            }
        },

        _blur: function (evt) {
            var that = this;
            if (!this._mouseOn) {
                this._active = false;
                return _.delay(function () {
                    that.close();
                }, 100);
            }
        },

        _tabHandler: function (evt) {
            var _inputValue = this.$input.val();
            if (_inputValue && this.options.tabKey) {
                //响应tab键
                evt.preventDefault();
                this.element.append('<option value="' + _inputValue + '" selected="selected">' + _inputValue + '</option>');
                this._update();
                this._close();
            }
        },

        //下拉框构建option字符串内容
        _buildMenuOption: function (data, first) {
            var content, _i, _len, _ref;
            content = '';
            _ref = data ? data : this.results_data;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                data = _ref[_i];
                if (data.group) {
                    content += this.result_add_group(data);
                } else {
                    content += this.result_add_option(data);
                }
                if (first === true) {
                    if (data.selected) {
                        this._choiceBuild(data);
                    }
                }
            }
            return content;
        },

        //生成<option>节点
        result_add_option: function (option) {
            var classes, option_el;
            if (!option.search_match) {
                return '';
            }
            if (!this._isSelectOrDisabledMenu(option)) {
                return '';
            }
            classes = [];
            if (!option.disabled && !option.selected) {
                classes.push("active-result");
            }
            if (option.disabled && !option.selected) {
                classes.push("disabled-result");
            }
            if (option.selected) {
                classes.push("result-selected");
            }
            if (option.group_array_index != null) {
                classes.push("group-option");
            }
            if (option.classes !== "") {
                classes.push(option.classes);
            }
            option_el = document.createElement("li");
            option_el.className = classes.join(" ");
            option_el.style.cssText = option.style;
            option_el.setAttribute("data-option-array-index", option.array_index);
            option_el.innerHTML = option.search_text;
            return this.outerHTML(option_el);
        },

        //生成group节点
        result_add_group: function (group) {
            var group_el;
            if (!(group.search_match || group.group_match)) {
                return '';
            }
            if (!(group.active_options > 0)) {
                return '';
            }
            group_el = document.createElement("li");
            group_el.className = "group-result";
            group_el.innerHTML = group.search_text;
            return this.outerHTML(group_el);
        },

        //form内置方法,根据HTML原值同步界面
        _onFormReset: function () {
            this._update();
        },
        _onFormClear: function () {
            this._update();
        },
        _formSetValue: function (value) {
            this._update();
        },

        _update: function () {
            this._clearHighlightMenu();
            this._menuBuild();
            if (this.results_showing) {
                return this.winnow_results();
            }
        },

        //在下拉数据中进行搜索
        _search: function (evt) {
            var result;
            if (this.results_showing) {
                result = this.winnow_results();
                if (!result) this.results_hide();
            } else {
                this.results_show();
            }
        },

        //显示最终的效果（包括在输入框中进行的搜索）
        winnow_results: function () {
            var escapedSearchText, option, regex, regexAnchor, results, results_group, searchText, startpos, text, zregex, _i, _len, _ref, arr;
            results = 0;
            searchText = this._inputValue();
            escapedSearchText = searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
            regexAnchor = this.options.containsSearch ? "" : "^";
            regex = new RegExp(regexAnchor + escapedSearchText, 'i');
            zregex = new RegExp(escapedSearchText, 'i');
            _ref = this.results_data;
            arr = [];

            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                option = _ref[_i];
                option.search_match = false;
                results_group = null;
                if (this._isSelectOrDisabledMenu(option)) {
                    if (option.group) {
                        option.group_match = false;
                        option.active_options = 0;
                    }
                    if (option.group_array_index != null && this.results_data[option.group_array_index]) {
                        results_group = this.results_data[option.group_array_index];
                        if (results_group.active_options === 0 && results_group.search_match) {
                            results += 1;
                        }
                        results_group.active_options += 1;
                    }
                    if (!(option.group && !this.options.groupSearch)) {
                        option.search_text = option.group ? option.label : option.html;
                        option.search_match = this._searchMatch(option.search_text, regex);
                        if (option.search_match && !option.group) {
                            results += 1;
                            arr.push(option);
                        }
                        if (option.search_match) {
                            if (searchText.length) {
                                startpos = option.search_text.search(zregex);
                                text = option.search_text.substr(0, startpos + searchText.length) + '</em>' + option.search_text.substr(startpos + searchText.length);
                                option.search_text = text.substr(0, startpos) + '<em>' + text.substr(startpos);
                            }
                            if (results_group != null) {
                                results_group.group_match = true;
                            }
                        } else if (option.group_array_index != null && this.results_data[option.group_array_index].search_match) {
                            option.search_match = true;
                        }
                    }
                }
                if (results >= this.options.rowCount) break;
            }
            this._clearHighlightMenu();
            if (results < 1 && searchText.length) {
                this._updateMenu("");
                this._trigger("noresult");
                return false;
            } else {
                this._updateMenu(this._buildMenuOption(arr));
                this._highlightMenu();
                return true;
            }
        },

        //搜索是否还有匹配项
        _searchMatch: function (search_string, regex) {
            var part, parts, _i, _len;
            if (regex.test(search_string)) {
                return true;
            } else if (!this.options.completeSearch && (search_string.indexOf(" ") >= 0 || search_string.indexOf("[") === 0)) {
                parts = search_string.replace(/\[|\]/g, "").split(" ");
                if (parts.length) {
                    for (_i = 0, _len = parts.length; _i < _len; _i++) {
                        part = parts[_i];
                        if (regex.test(part)) {
                            return true;
                        }
                    }
                }
            }
        },

        _choicesCount: function () {
            var option, _i, _len, _ref;
            if (this.selected_option_count != null) {
                return this.selected_option_count;
            }
            this.selected_option_count = 0;
            _ref = this.element[0].options;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                option = _ref[_i];
                if (option.selected) {
                    this.selected_option_count += 1;
                }
            }
            return this.selected_option_count;
        },

        // _click: function(evt) {
        //     evt.preventDefault();
        //     if (!(this.results_showing || this.is_disabled)) {
        //         return this.results_show();
        //     }
        // },

        _keydown: function (evt) {
            var stroke, _ref1;
            stroke = (_ref1 = evt.which) != null ? _ref1 : evt.keyCode;
            this._searchFieldScale();
            if (stroke !== 8 && this.pending_backstroke) {
                this.clear_backstroke();
            }
            switch (stroke) {
                case KEY_CODE.BACKSPACE:
                    //BACKSPACE
                    if (!this.$input.val() && this._choicesCount() > 0) {
                        return this.keydown_backstroke();
                    } else if (!this.pending_backstroke) {
                        this._clearHighlightMenu();
                        return this._search();
                    }
                    break;
                case KEY_CODE.TAB:
                    //TAB
                    this._tabHandler(evt);
                    break;
                case KEY_CODE.ENTER:
                    //ENTER
                    evt.preventDefault();
                    if (this.results_showing) {
                        return this._selectMenu(evt);
                    }
                    break;
                case KEY_CODE.ESCAPE:
                    //ESCAPE
                    if (this.results_showing) {
                        this.results_hide();
                    }
                    return true;
                case KEY_CODE.UP:
                    //UP
                    evt.preventDefault();
                    this.keyup_arrow();
                    break;
                case KEY_CODE.DOWN:
                    //DOWN
                    evt.preventDefault();
                    this.keydown_arrow();
                    break;
                default:
                    return this._search();
            }
        },

        //粘贴|剪切 时间处理 这类时间需要延迟处理，当事件触发时，搜索框内容还未发生改变
        _clipboard: function (evt) {
            var that = this;
            return _.delay(function () {
                return that._search();
            }, 50);
        },

        _isSelectOrDisabledMenu: function (option) {
            if (!this.options.displaySelectedOptions && option.selected) {
                return false;
            }
            if (!this.options.displayDisabledOptions && option.disabled) {
                return false;
            }
            if (option.empty) {
                return false;
            }
            return true;
        },

        outerHTML: function (element) {
            var tmp;
            if (element.outerHTML) {
                return element.outerHTML;
            }
            tmp = document.createElement("div");
            tmp.appendChild(element);
            return tmp.innerHTML;
        },

        _destroy: function () {
            $(this.container[0].ownerDocument).off("click.multiselect", $.proxy(this.isActive, this));
            if (this.$input[0].tabIndex) {
                this.element[0].tabIndex = this.$input[0].tabIndex;
            }
            this.container.remove();
            this.element.show();
        },

        search_field_disabled: function () {
            this.is_disabled = this.element[0].disabled;
            if (this.is_disabled) {
                this.container.addClass('ui-multiselect-disabled');
                this.$input[0].disabled = true;
                return this.close();
            } else {
                this.container.removeClass('ui-multiselect-disabled');
                this.$input[0].disabled = false;
            }
        },

        _open: function (evt) {
            if (!this.is_disabled) {
                if (evt && evt.type === "mousedown" && !this.results_showing) {
                    evt.preventDefault();
                }
                if (!(evt != null && $(evt.target).hasClass("search-choice-close"))) {
                    if (!this._active) {
                        this.$input.val("");

                        this._on($(document), {
                            'mousedown': 'isActive'
                        });

                        this.results_show();
                    }
                    return this.open();
                }
            }
        },

        _mouseup: function (evt) {
            if (evt.target.nodeName === "ABBR" && !this.is_disabled) {
                return this._resetMenu(evt);
            }
        },

        //menuMousewheel: function (evt) {
        //    var delta;
        //    if (evt.originalEvent) {
        //        delta = -evt.originalEvent.wheelDelta || evt.originalEvent.detail;
        //    }
        //    if (delta != null) {
        //        evt.preventDefault();
        //        if (evt.type === 'DOMMouseScroll') {
        //            delta = delta * 40;
        //        }
        //        return this.$menu.scrollTop(delta + this.$menu.scrollTop());
        //    }
        //},

        _close: function (evt) {
            this._off($(document));

            this.results_hide();
            this.clear_backstroke();
            this._setDefaultInput();
            return this._searchFieldScale();
        },

        /**
         * @method close
         * 关闭下拉框
         */
        close: function () {
            this._active = false;
            this.container.removeClass("ui-multiselect-container-active");
            return this._close();
        },

        /**
         * @method open
         * 打开下拉框
         */
        open: function () {
            this.container.addClass("ui-multiselect-container-active");
            this._active = true;
            this.$input.val(this.$input.val());
            return this.$input.focus();
        },

        //检测激活的点击是否是当前容器，如果不是则关闭显示的下拉框
        isActive: function (evt) {
            if (this.$menu.is(evt.target) || $.contains(this.$menu[0], evt.target) || $.contains(this.container[0], evt.target)) {
                return this._active = true;
            } else {
                return this.close();
            }
        },
        //构建下拉列表
        _menuBuild: function () {
            this.parsing = true;
            this.selected_option_count = null;
            this.results_data = SelectParser.selectToArray(this.element[0]); //

            this.$ul.find("li.search-choice").remove();

            this._updateMenu(this._buildMenuOption(null, true));
            this.search_field_disabled();
            this._setDefaultInput();
            this._searchFieldScale();
            return this.parsing = false;
        },

        _doHighlightMenu: function (el) {
            var high_bottom, high_top, maxHeight, visible_bottom, visible_top;

            if (el.length) {
                this._clearHighlightMenu();
                this.result_highlight = el;
                this.result_highlight.addClass("active");
                maxHeight = parseInt(this.$menu.css("maxHeight"), 10);
                visible_top = this.$menu.scrollTop();
                visible_bottom = maxHeight + visible_top;
                high_top = this.result_highlight.position().top + this.$menu.scrollTop();
                high_bottom = high_top + this.result_highlight.outerHeight();

                //滚动到可见的第一个
                if (high_bottom >= visible_bottom) {
                    return this.$menu.scrollTop(high_bottom - maxHeight > 0 ? high_bottom - maxHeight : 0);
                } else if (high_top < visible_top) {
                    return this.$menu.scrollTop(high_top);
                }
            }
        },

        _clearHighlightMenu: function () {
            if (this.result_highlight) {
                this.result_highlight.removeClass("active");
            }
            return this.result_highlight = null;
        },

        results_show: function () {
            var result;

            if (this.options.maxLength <= this._choicesCount()) {
                this._trigger("maxselected");
                return false;
            }

            result = this.winnow_results();

            if (result) {
                this.$menu.css('width', this.container.outerWidth());
                $('body').append(this.$menu);

                this.$menu.position({
                    my: "left top",
                    at: "left bottom",
                    of: this.container,
                    collision: "fit flip"
                });

                this.results_showing = true;
                this.$input.focus();
                this._trigger("showingdropdown");
            }
        },

        _updateMenu: function (content) {
            return this.$menu.html(content);
        },

        results_hide: function () {
            if (this.results_showing) {
                this._clearHighlightMenu();
                this.$menu.detach();
                this._trigger("hidingdropdown");
            }
            return this.results_showing = false;
        },

        //改变TAB键聚焦的方式，使原先的<select>无法使用TAB键，新的搜索框<input>可以聚焦
        _setTabIndex: function (el) {
            var ti;
            if (this.element[0].tabIndex) {
                ti = this.element[0].tabIndex;
                this.element[0].tabIndex = -1;
                return this.$input[0].tabIndex = ti;
            }
        },

        //查找父元素的Label标签，当点击父Label时触发下拉事件
        _setLabelBehavior: function () {
            var that = this;
            this.fieldLabel = this.element.parents("label");
            if (!this.fieldLabel.length && this.element[0].id.length) {
                this.fieldLabel = $("label[for='" + this.element[0].id + "']");
            }
            if (this.fieldLabel.length > 0) {
                return this.fieldLabel.on('click.multiselect', function (evt) {
                    return that._open(evt);
                });
            }
        },

        _setDefaultInput: function () {
            if (this._choicesCount() < 1 && !this._active) {
                this.$input.val(this.options.placeholder);
            } else {
                this.$input.val("");
            }
        },

        menuMouseup: function (evt) {
            var target;
            target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
            if (target.length) {
                this.result_highlight = target;
                this._selectMenu(evt);
                return this.$input.focus();
            }
        },

        //menuMouseover: function (evt) {
        //    var target;
        //    target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
        //    if (target) {
        //        return this._doHighlightMenu(target);
        //    }
        //},
        //
        //menuMouseout: function (evt) {
        //    if ($(evt.target).hasClass("active-result" || $(evt.target).parents('.active-result').first())) {
        //        return this._clearHighlightMenu();
        //    }
        //},

        _choiceBuild: function (item) {
            var choice, closeBtn;

            choice = $('<li />', {
                "class": "search-choice"
            }).html("<span>" + item.html + "</span>");
            choice.find('span').attr('title', item.html);
            if (item.disabled) {
                choice.addClass('search-choice-disabled');
            } else {
                closeBtn = $('<button class="search-choice-close" type="button"><span class="glyphicon glyphicon-remove"></span></button>');
                closeBtn.data('option-array-index', item.array_index);
                choice.append(closeBtn);
            }
            this.$li.before(choice);
        },

        _deleteMenu: function (link) {
            if (this._deselectMenu(link.data("option-array-index"))) {
                this._setDefaultInput();
                if (this._choicesCount() > 0 && this.$input.val().length < 1) {
                    this.results_hide();
                }
                link.parents('li').first().remove();
                this._searchFieldScale();
            }
        },

        _resetMenu: function () {
            this.element[0].options[0].selected = true;
            this._setDefaultInput();
            this._cleanupMenu();
            this._trigger("change");
            // this.element.trigger("multiselectchange");
            if (this._active) {
                return this.results_hide();
            }
        },

        _cleanupMenu: function () {
            //this.currentSelectedIndex = this.element[0].selectedIndex;
            return this.selected_item.find("abbr").remove();
        },

        //选中当前选中项,同时对<select>进行赋值
        _selectMenu: function (evt) {
            var high, item;
            if (this.result_highlight) {
                high = this.result_highlight;
                this._clearHighlightMenu();
                if (this.options.maxLength <= this._choicesCount()) {
                    this._trigger("maxselected");
                    return false;
                }
                high.removeClass("active-result");

                item = this.results_data[high[0].getAttribute("data-option-array-index")];
                item.selected = true;
                this.element[0].options[item.options_index].selected = true; //对<select>进行赋值
                this.selected_option_count = null;
                this._choiceBuild(item);
                //重新生成result数据
                this.winnow_results();
                this.$input.val("");
                this._trigger("change", evt, {
                    'selected': this.element[0].options[item.options_index].value
                });
                //this.currentSelectedIndex = this.element[0].selectedIndex;
                this._searchFieldScale();
            }
        },

        _deselectMenu: function (pos) {
            var result_data;
            result_data = this.results_data[pos];
            if (!this.element[0].options[result_data.options_index].disabled) {
                result_data.selected = false;
                this.element[0].options[result_data.options_index].selected = false;
                this.selected_option_count = null;
                this._clearHighlightMenu();
                if (this.results_showing) {
                    this.winnow_results();
                }
                this._trigger("change", null, {
                    deselected: this.element[0].options[result_data.options_index].value
                });
                this._searchFieldScale();
                return true;
            } else {
                return false;
            }
        },

        _inputValue: function () {
            if (this.$input.val() === this.options.placeholder) {
                return "";
            } else {
                return $('<div/>').text($.trim(this.$input.val())).html();
            }
        },

        _highlightMenu: function () {
            var do_high, selected_results;
            selected_results = [];
            do_high = selected_results.length ? selected_results.first() : this.$menu.find(".active-result").first();
            if (do_high != null) {
                return this._doHighlightMenu(do_high);
            }
        },

        keydown_arrow: function () {
            var next_sib;
            if (this.results_showing && this.result_highlight) {
                next_sib = this.result_highlight.nextAll("li.active-result").first();
                if (next_sib) {
                    return this._doHighlightMenu(next_sib);
                }
            } else {
                return this.results_show();
            }
        },

        keyup_arrow: function () {
            var prev_sibs;
            if (this.result_highlight) {
                prev_sibs = this.result_highlight.prevAll("li.active-result");
                if (prev_sibs.length) {
                    return this._doHighlightMenu(prev_sibs.first());
                } else {
                    if (this._choicesCount() > 0) {
                        this.results_hide();
                    }
                    return this._clearHighlightMenu();
                }
            }
        },

        keydown_backstroke: function () {
            var next_available_destroy;
            if (this.pending_backstroke) {
                this._deleteMenu(this.pending_backstroke.find("button"));
                return this.clear_backstroke();
            } else {
                next_available_destroy = this.$li.siblings("li.search-choice").last();
                if (next_available_destroy.length && !next_available_destroy.hasClass("search-choice-disabled")) {
                    this.pending_backstroke = next_available_destroy;
                    if (this.options.deleteKey) {
                        return this.keydown_backstroke();
                    } else {
                        return this.pending_backstroke.addClass("search-choice-focus");
                    }
                }
            }
        },

        clear_backstroke: function () {
            if (this.pending_backstroke) {
                this.pending_backstroke.removeClass("search-choice-focus");
            }
            return this.pending_backstroke = null;
        },

        //根据input的情况计算出input的宽度?
        _searchFieldScale: function () {
            var style_block = "position:absolute; left: -1000px; top: -1000px; display:none;",
                styles = ['font-size', 'font-style', 'font-weight', 'font-family', 'line-height', 'text-transform', 'letter-spacing'],
                w = 0,
                style,
                _i,
                div,
                f_width,
                _len;

            for (_i = 0, _len = styles.length; _i < _len; _i++) {
                style = styles[_i];
                style_block += style + ":" + this.$input.css(style) + ";";
            }
            div = $('<div />', {
                'style': style_block
            });
            div.text(this.$input.val());
            $('body').append(div);
            w = div.width() + 25;
            div.remove();
            f_width = this.container.outerWidth();
            if (w > f_width - 10) {
                w = f_width - 10;
            }
            return this.$input.css({
                'width': w + 'px'
            });
        },

        /**
         * @method refresh
         * 刷新控件,常用于select控件数据发生改变时，重新构建multiselect
         */
        refresh: function () {
            this._update();
        },

        /**
         * @method value
         * 取值与设置选中值
         */
        value: function (newVal) {
            switch ($.type(newVal)) {
                case 'undefined':
                    return this.element.val();
                case 'array':
                    this.element.val(newVal);
                    this._update();
                    break;
                default:
                    newVal = newVal == null || newVal.length === 0 ? [] : [newVal];
            }
        },

        /**
         * @method data
         * 设置下拉数据
         * @param data[{id:1,name:'xx'}]
         */
        _setDataSource: function (data, value, name) {
            value = value || this.options.dataValueField;
            name = name || this.options.dataTextField;
            if ($.type(data) === 'array') {
                var opts = '';
                $.each(data, function (index, obj) {
                    opts += '<option value="' + obj[value] + '"' + (obj.disabled ? ' disabled="true" ' : '') + '>' + obj[name] + '</option>';
                });
                this.element.empty().html(opts);
                this._update();
            }
        }
    });
})();

/**
 * @event change
 * 当选中项发生改变的时候触发
 * @param {Event} [evt] jquery的事件对象
 * @param {Object} [params] selected--这次选中项的值；deselected--这次取消选中项的值
 *
 *     @example
 *     $('.my_select_box').on('multiselect:change', function(evt, params) {
 *         do_something(evt, params);
 *     });
 */
/**
 * @event maxselected
 * 设置了max_selected_options，并且超过了限额的时候触发
 */
/**
 * @event showingdropdown
 * 下拉显示的时候触发
 */
/**
 * @event hidingdropdown
 * 下拉隐藏的时候触发
 */
/**
 * @event noresult
 * 没有匹配到任何结果的时候触发
 */

/**
 * 分页组件
 * @class fish.desktop.widget.Pagination
 * @extends fish.desktop.widget
 * <pre>
 *   $('#pagination-demo').pagination({
     *      total:'总计{0}页',
     *      records:100,
     *      displayNum: 5,
     *      rowList:[10,20,30],
     *      rowNum: 10,
     *      onPageClick: function (event, eventData) {
     *          $('#page-content').text('Page ' + eventData.page);
     *      }
     *   });
 * </pre>
 */

!(function () {
    'use strict';

    var template = '\n        {{#if pages}}\n            {{#if pgButton}}\n                <li class="first" data-page=1 data-page-type="first">\n                    <a href="javascript:;">{{{first}}}</a>\n                </li>\n                <li class="prev" data-page={{pages.prevPage}} data-page-type="prev">\n                    <a href="javascript:;">{{{prev}}}</a>\n                </li>\n                {{#if pgNumber}}\n                {{#each pages.numeric}}\n                    <li class="page hidden-xs hidden-sm" data-page={{this}} data-page-type="page">\n                        <a href="javascript:;">{{this}}</a>\n                    </li>\n                {{/each}}\n                {{/if}}\n                <li class="next" data-page={{pages.nextPage}} data-page-type="next">\n                    <a href="javascript:;">{{{next}}}</a>\n                </li>\n                <li class="last" data-page={{pages.totalPages}} data-page-type="last">\n                    <a href="javascript:;">{{{last}}}</a>\n                </li>\n            {{/if}}\n            {{#if pgTotal}}\n                {{#totalpage}}\n                {{/totalpage}}\n            {{/if}}\n            {{#if pgRecText}}\n                {{#recordtextpage}}\n                {{/recordtextpage}}\n            {{/if}}\n        {{/if}}';
    var templateNone = '\n        {{#if pages}}\n            {{#if pgTotal}}\n                {{#totalpage}}\n                {{/totalpage}}\n            {{/if}}\n            {{#if pgRecText}}\n                {{#recordtextpage}}\n                {{/recordtextpage}}\n            {{/if}}\n        {{/if}}';
    var templateAdd = '\n        {{#rowtextpage}}\n        {{/rowtextpage}}\n        {{#if pgInput}}\n            {{#gopage}}\n            {{/gopage}}\n        {{/if}}';
    $.widget("ui.pagination", {
        options: {
            /**
             * 查询到数据的总个数
             * @cfg {Number} records
             */
            records: 0,
            /**
             * 总页数，非必传
             * @cfg {Number} total
             */
            total: '',
            /**
             * 起始页数
             * @cfg {Number} start
             */
            start: 1,
            /**
             * 显示最大有效页数
             * @cfg {Number} displayNum=5
             */
            displayNum: 5,
            /**
             * first标签内容
             * @cfg {String} first
             */
            first: '<i class="glyphicon glyphicon-step-backward"></i>',
            /**
             * previous标签内容
             * @cfg {String} prev
             */
            prev: '<i class="glyphicon glyphicon-triangle-left"></i>',
            /**
             * next标签内容
             * @cfg {String} next
             */
            next: '<i class="glyphicon glyphicon-triangle-right"></i>',
            /**
             * last标签内容
             * @cfg {String} last
             */
            last: '<i class="glyphicon glyphicon-step-forward"></i>',
            /**
             * pgtext标签内容,总计页数
             * @cfg {String} pgtext='Page {0} of {1}'
             */
            pgtext: null,
            /**
             * recordtext标签内容,元素显示区间
             * @cfg {String} recordtext='View {0} - {1} / {2}'
             */
            recordtext: null,
            /**
             * rowtext标签内容,每页显示条数
             * @cfg {String} rowtext='{0}/page'
             */
            rowtext: '',
            /**
             * 每页显示条数select选项
             * @cfg {Array} rowList=[10,20,30]
             */
            rowList: [10, 20, 30],
            /**
             * 每页显示条数
             * @cfg {Number} rowNum=10
             */
            rowNum: 10,
            /**
             * gotext input输入框元素
             * @cfg {String} gotext='Go {0}'
             */
            gotext: null,
            /**
             * 触发页面change事件
             * @cfg {Function} onPageClick
             */
            onPageClick: null,
            /**
             * 如果为false，隐藏记录标签---'1-20/100'
             * @cfg {Boolean} pgRecText
             */
            pgRecText: true,
            /**
             * 如果为false，隐藏所有页码操作按钮
             * @cfg {Boolean} pgButton
             */
            pgButton: true,
            /**
             * 在pgButton为true的情况下，如果为false，只隐藏页码按钮
             * @cfg {Boolean} pgNumber
             */
            pgNumber: true,
            /**
             * 如果为false，隐藏input直接跳转
             * @cfg {Boolean} pgInput
             */
            pgInput: true,
            /**
             * 如果为false，隐藏总计元素
             * @cfg {Boolean} pgTotal
             */
            pgTotal: true

        },
        _create: function () {
            $.extend(this.options, {
                'paginationClass': 'pagination',
                'pgtextClass': 'pgtext',
                'pgrectextClass': 'pgtext', //pgrectext
                'rowtextClass': 'rowtext',
                'gotextClass': 'gotext',
                'activeClass': 'active',
                'disabledClass': 'disabled'
            });

            if (!$.isArray(this.options.rowList) || this.options.rowList.length === 0) {
                this.options.rowtext = null;
            }

            if (this.options.start < 1 || this.options.start > this.options.totalPages) {
                throw new Error('Start page option is incorrect');
            }

            if (!fish.isNaN(parseInt(this.options.total)) && parseInt(this.options.total) > 0) {
                this.options.totalPages = parseInt(this.options.total);
            } else {
                this.options.totalPages = Math.ceil(parseInt(this.options.records) / parseInt(this.options.rowNum));
            }

            if (fish.isNaN(this.options.totalPages) || this.options.totalPages < 0) {
                throw new Error('Total pages option is not correct!');
            }

            this.options.displayNum = parseInt(this.options.displayNum);
            if (fish.isNaN(this.options.displayNum)) {
                throw new Error('Visible pages option is not correct!');
            }
            //first、previous、next、last、page
            this.$listContainer = $('<ul></ul>');
            this.$listContainer.addClass(this.options.paginationClass);
            this.element.append(this.$listContainer);
            this._render(this._getPages(this.options.start));
            this._setupEvents();

            this.$addContainer = $('<ul></ul>');
            this.$addContainer.addClass(this.options.paginationClass);
            this.element.append(this.$addContainer);
            this._addrender();
            this._setupAddEvents();
        },

        _destroy: function () {
            this.element.children().remove();
        },

        _format: function (format) {
            //jqgformat
            var args = $.makeArray(arguments).slice(1);
            if (format == null) {
                format = "";
            }
            return format.replace(/{(\d+)}/g, function (m, i) {
                return args[i];
            });
        },

        /**
         * 专供click事件刷新处理
         * @param page
         * @returns pagination对象
         * @private
         */
        _show: function (page) {
            if (!fish.isNaN(parseInt(this.options.total)) && parseInt(this.options.total) > 0) {
                this.options.totalPages = parseInt(this.options.total);
            } else {
                this.options.totalPages = Math.ceil(parseInt(this.options.records) / parseInt(this.options.rowNum));
            }
            this.$listContainer.children().remove();
            this._render(this._getPages(page));
            return this;
        },

        _getPages: function (currentPage) {
            var displayNum;
            if (this.options.totalPages < this.options.displayNum) {
                displayNum = this.options.totalPages;
            } else {
                displayNum = this.options.displayNum;
            }
            var pages = [];
            var half = Math.floor(displayNum / 2);
            var start = currentPage - half + 1 - displayNum % 2;
            var end = currentPage + half;

            // handle boundary case
            if (start <= 0) {
                start = 1;
                end = displayNum;
            }
            if (end > this.options.totalPages) {
                if (this.options.totalPages - displayNum + 1 <= 0) {
                    start = 1;
                } else {
                    start = this.options.totalPages - displayNum + 1;
                }
                end = this.options.totalPages;
            }

            var itPage = start;
            while (itPage <= end) {
                pages.push(itPage);
                itPage++;
            }

            var prevPage;
            if (currentPage > 1) {
                prevPage = parseInt(currentPage, 10) - 1;
            } else {
                prevPage = 1;
            }

            var nextPage;
            if (currentPage < this.options.totalPages) {
                nextPage = parseInt(currentPage, 10) + 1;
            } else {
                nextPage = this.options.totalPages;
            }

            return {
                "currentPage": currentPage,
                "prevPage": prevPage,
                "nextPage": nextPage,
                "numeric": pages,
                "totalPages": this.options.totalPages,
                "records": this.options.records
            };
        },

        _render: function (pages) {
            var base = this;

            base.$listContainer.children().remove();

            var recordsStart = 1;
            recordsStart = (parseInt(pages.currentPage) - 1) * parseInt(base.options.rowNum) + 1;
            var recordsEnd = base.options.rowNum;
            if (pages.currentPage === pages.totalPages) {
                recordsEnd = parseInt(base.options.records);
            } else {
                recordsEnd = recordsStart + parseInt(base.options.rowNum) - 1;
            }

            Handlebars.registerHelper('totalpage', function () {
                var pgText = base._format(base.options.pgtext || fish.getResource('pagination.pgtext'), pages.currentPage, pages.totalPages);
                return '<li class="' + base.options.pgtextClass + '"><span>' + pgText + '</span></li>';
            });

            Handlebars.registerHelper('recordtextpage', function () {
                var recordText = base._format(base.options.recordtext || fish.getResource('pagination.recordtext'), recordsStart, recordsEnd, pages.records);
                return '<li class="' + base.options.pgrectextClass + '"><span>' + recordText + '</span></li>';
            });

            if (this.options.totalPages === 0) {
                this.$listContainer.append(fish.compile(templateNone)({
                    pages: pages,
                    pgTotal: this.options.pgTotal,
                    pgRecText: this.options.pgRecText
                }));
            } else {
                this.$listContainer.append(fish.compile(template)({
                    pages: pages,
                    pgButton: this.options.pgButton,
                    pgNumber: this.options.pgNumber,
                    pgTotal: this.options.pgTotal,
                    pgRecText: this.options.pgRecText,
                    first: this.options.first,
                    prev: this.options.prev,
                    next: this.options.next,
                    last: this.options.last
                }));
            }

            if (!fish.isNaN(parseInt(this.options.total)) && parseInt(this.options.total) > 0) {
                this.options.totalPages = parseInt(this.options.total);
            } else {
                this.options.totalPages = Math.ceil(parseInt(this.options.records) / parseInt(this.options.rowNum));
            }

            this.element.find('li').each(function () {
                var $this = $(this);
                $this.filter(function () {
                    return $this.data('page') === pages.currentPage && $this.data('page-type') === 'page';
                }).addClass('active');

                $this.filter(function () {
                    return $this.data('page-type') === 'first';
                }).toggleClass(base.options.disabledClass, pages.currentPage === 1);

                $this.filter(function () {
                    return $this.data('page-type') === 'prev';
                }).toggleClass(base.options.disabledClass, pages.currentPage === 1);

                $this.filter(function () {
                    return $this.data('page-type') === 'next';
                }).toggleClass(base.options.disabledClass, pages.currentPage === base.options.totalPages);

                $this.filter(function () {
                    return $this.data('page-type') === 'last';
                }).toggleClass(base.options.disabledClass, pages.currentPage === base.options.totalPages);
            });
        },
        /**
         * 加载select和input
         * @private
         */
        _addrender: function () {
            var base = this;
            this.$addContainer.children().remove();
            Handlebars.registerHelper('rowtextpage', function () {
                if (base.options.rowtext === null) return;
                var optionStr = '<select class="ui-pagination" role="listbox">';
                for (var i = 0; i < base.options.rowList.length; i++) {
                    optionStr += "<option role=\"option\" value=\"" + base.options.rowList[i] + "\"" + (base.options.rowNum === base.options.rowList[i] ? " selected=\"selected\"" : "") + ">" + base.options.rowList[i] + "</option>";
                }
                optionStr += '</select>';
                var itemText = base._format(base.options.rowtext || fish.getResource('pagination.rowtext'), optionStr);
                return '<li class="' + base.options.rowtextClass + '"><span>' + itemText + '</span></li>';
            });
            Handlebars.registerHelper('gopage', function () {
                var str = '<input class="ui-pagination-input"/>';
                var itemText = base._format(base.options.gotext || fish.getResource('pagination.gotext'), str);
                return '<li class="' + base.options.gotextClass + '"><span>' + itemText + '</span></li>';
            });
            this.$addContainer.append(fish.compile(templateAdd)({
                pgInput: this.options.pgInput
            }));
        },

        _setupEvents: function () {
            var base = this;
            this._on(this.$listContainer, {
                'click li': function (e) {
                    e.preventDefault();

                    var $this = $(e.currentTarget),
                        eventData;

                    if ($this.hasClass(base.options.disabledClass) || $this.hasClass(base.options.activeClass) || $this.hasClass(base.options.pgtextClass) || $this.hasClass(base.options.pgrectextClass)) {
                        return;
                    }

                    eventData = {
                        eventType: 'page',
                        rowNum: base.options.rowNum,
                        page: $this.data('page')
                    };
                    if (base._trigger('onPageClick', e, eventData)) {
                        base._show(parseInt($this.data('page'), 10));
                    }
                }
            });
        },

        _setupAddEvents: function () {
            var base = this;
            this._on({
                'change .ui-pagination': function (e) {
                    base.options.rowNum = parseInt($(e.currentTarget).val(), 10);
                    var eventData = {
                        eventType: 'select',
                        rowNum: base.options.rowNum,
                        page: 1
                    };
                    if (base._trigger('onPageClick', e, eventData)) {
                        base._show(1);
                    }
                },
                'keydown .ui-pagination-input': function (e) {
                    var key = e.which; //按键的值
                    var $this = $(e.currentTarget),
                        value;
                    if (key == 13) {
                        value = base._intNum($this.val(), 1);
                        value = Math.max(1, Math.min(base.options.totalPages, value));
                        $this.val(value);

                        var eventData = {
                            eventType: 'input',
                            rowNum: base.options.rowNum,
                            page: $this.val()
                        };
                        if (base._trigger('onPageClick', e, eventData)) {
                            base._show(parseInt($this.val(), 10));
                        }
                    }
                }
            });
        },

        _intNum: function (val, defval) {
            val = parseInt(val, 10);
            if (fish.isNaN(val)) {
                return defval || 0;
            }
            return val;
        },

        /**
         * 更新分页组件
         * @method update
         * @param  {Object} [option]
         * option.records   更新过后的数据总数<br/>
         * option.start 更新时分页组件的页数
         * @chainable
         * @return {Object} jQuery Object
         */
        update: function (options) {
            $.extend(this.options, options);
            this._show(parseInt(this.options.start, 10));
        }
    });
})();

;(function(window, document, $) {

	$.fn.placeholder = function () {
		var i = document.createElement('input'),
			placeholdersupport = 'placeholder' in i;
		if(!placeholdersupport){

			this.each(function (index) {
				var input = $(this);
				
				var inputParent = input.parent();
				if(inputParent.css('position') === 'static'){
					inputParent.css('position', 'relative');
				}

				var inputId = input.attr('id');
				if (!inputId) {
					inputId = 'placeholder' + index;
					input.attr('id', inputId);
				}

				var label = $('<label class="placeholder"></label>');
				label.attr('for', inputId);
				label.text(input.attr('placeholder'));
				
				labelClass = input.data('class');
				if(labelClass){
					label.addClass(labelClass);
				}

				var position = input.position();
				label.css({
					'position': 'absolute',
					'top': position.top+1,
					'left': position.left+6,
					'cursor':'text',
					'z-index':3,
					'height':input.innerHeight()

				});
				
				if (this.value.length) {
					label.hide();
				}
				
				input.after(label);

				input.on({
					focus: function () {
						label.hide();
					},
					blur: function () {
						if (this.value == '') {
							label.show();
						}
					}
				});
				
				this.attachEvent('onpropertychange', function(){
					input.val() ? label.hide() : label.show();
				});
			})
		}
		return this;
	}
}(this, document, jQuery));

/**
 * @class fish.desktop.widget.Tooltip
 * 提示组件
 * <pre>
 *   $(element).tooltip(option);
 * </pre>
 *
 * @extends fish.desktop.widget
 */

!function () {
    "use strict";

    var TRANSITION_DURATION = 150;

    $.widget("ui.tooltip", {
        options: {
            /**
             * @cfg {Boolean} [animation=true] 是否有动画效果，默认是有
             */
            animation: true,
            /**
             * @cfg {String} [placement='top'] 提示展示位置，默认在上面,可选值为top/left/right/bottom/top-left/top-right/bottom-left/bottom-right
             */
            placement: 'top',
            template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
            /**
             * @cfg {String} [trigger='hover'] 触发事件，默认是hover
             */
            trigger: 'hover',
            /**
             * @cfg {String} [title=''] 提示内容，先获取元素上data-original-title属性值
             */
            title: '',
            /**
             * @cfg {Boolean} [html=false] 提示内容是否以html字符串插入，默认是false
             */
            html: false,
            container: 'body'
        },

        _create: function () {
            this.enabled = true;

            var triggers = this.options.trigger.split(' ');

            if (_.indexOf(triggers, 'click') >= 0) {
                this._on({
                    'click': 'openHandler'
                });

                this._on($(document), {
                    'click': 'closeHandler'
                });
            }

            if (_.indexOf(triggers, 'hover') >= 0) {
                this.onUs = false;
                this.outTimeout = null;

                this._on({
                    'mouseenter': 'enter',
                    'mouseleave': 'leave'
                });

                this._on(this.tip(), {
                    'mouseenter': 'enter',
                    'mouseleave': 'leave'
                });
            }

            this.fixTitle();
        },

        openHandler: function (e) {
            this.toggle(e);
            e.preventDefault();
        },

        closeHandler: function (e) {
            if (!this.isOpened()) {
                return;
            }

            // Clicking inside tips
            var tips = this.tip()[0];
            if (e.target === tips || tips.contains(e.target)) {
                return;
            }

            var element = this.element[0];
            // Clicking target
            if (e.target === element || element.contains(e.target)) {
                return;
            }

            this.hide();
        },

        enter: function (e) {
            this.onUs = true;
            this.show();
        },

        leave: function (e) {
            var that = this;
            this.onUs = false;

            if (typeof this.outTimeout !== 'undefined') {
                clearTimeout(this.outTimeout);
            }

            this.outTimeout = setTimeout(function () {
                if (!that.onUs)
                    that.hide();
                that.outTimeout = null;
            }, 50);
        },

        /**
         * @method show 显示提示
         */
        show: function () {
            if (this.isOpened()) return;

            if (this.hasContent() && this.enabled) {
                var that = this;

                var $tip = this.tip();

                var tipId = _.uniqueId(this.widgetName);

                this.setContent();
                $tip.attr('id', tipId);
                this.element.attr('aria-describedby', tipId);

                if (this.options.animation) $tip.addClass('fade');

                var placement = typeof this.options.placement == 'function' ?
                    this.options.placement.call(this, $tip[0], this.element[0]) :
                    this.options.placement;

                var autoToken = /\s?auto?\s?/i;
                var autoPlace = autoToken.test(placement);
                if (autoPlace) placement = placement.replace(autoToken, '') || 'top';

                $tip
                    .detach()
                    .css({top: 0, left: 0, display: 'block'})
                    .addClass(placement);

                this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.element);

                var pos = this.getPosition();
                var actualWidth = $tip[0].offsetWidth;
                var actualHeight = $tip[0].offsetHeight;

                if (autoPlace) {
                    var orgPlacement = placement;
                    var $container = this.options.container ? $(this.options.container) : this.element.parent();
                    var containerDim = this.getPosition($container);

                    placement = placement == 'bottom' && pos.bottom + actualHeight > containerDim.bottom ? 'top' :
                        placement == 'top' && pos.top - actualHeight < containerDim.top ? 'bottom' :
                            placement == 'right' && pos.right + actualWidth > containerDim.width ? 'left' :
                                placement == 'left' && pos.left - actualWidth < containerDim.left ? 'right' :
                                    placement;

                    $tip
                        .removeClass(orgPlacement)
                        .addClass(placement);
                }

                var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);

                this.applyPlacement(calculatedOffset, placement);

                var complete = function () {
                    that._trigger('show');
                };

                $.support.transition && this.$tip.hasClass('fade') ?
                    $tip
                        .one('bsTransitionEnd', complete)
                        .emulateTransitionEnd(TRANSITION_DURATION) :
                    complete();
            }
        },

        applyPlacement: function (offset, placement) {
            var $tip = this.tip();
            var height = $tip[0].offsetHeight;

            // manually read margins because getBoundingClientRect includes difference
            var marginTop = parseInt($tip.css('margin-top'), 10);
            var marginLeft = parseInt($tip.css('margin-left'), 10);

            // we must check for NaN for ie 8/9
            if (isNaN(marginTop)) marginTop = 0;
            if (isNaN(marginLeft)) marginLeft = 0;

            offset.top = offset.top + marginTop;
            offset.left = offset.left + marginLeft;

            // $.fn.offset doesn't round pixel values
            // so we use setOffset directly with our own function B-0
            $.offset.setOffset($tip[0], $.extend({
                using: function (props) {
                    $tip.css({
                        top: Math.round(props.top),
                        left: Math.round(props.left)
                    });
                }
            }, offset), 0);

            $tip.addClass('in');

            // check to see if placing tip in new offset caused the tip to resize itself
            var actualHeight = $tip[0].offsetHeight;

            if (/top/.test(placement) && actualHeight != height) {
                offset.top = offset.top + height - actualHeight;
            }

            $tip.offset(offset);
        },

        setContent: function () {
            var $tip = this.tip();
            var title = this.getTitle();

            $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title);
            $tip.removeClass('fade in ' + this.options.placement);
        },

        /**
         * @method hide 隐藏提示信息
         * @param callback 隐藏结束回调函数，可空
         * @chainable
         */
        hide: function (callback) {
            if (!this.isOpened()) return this;

            var that = this;
            var $tip = this.tip();

            function complete() {
                $tip.detach();
                that.element
                    .removeAttr('aria-describedby');
                that._trigger('hide');
                callback && callback();
            }

            if (!this._trigger('beforeHide')) return this;

            $tip.removeClass('in');

            $.support.transition && this.$tip.hasClass('fade') ?
                $tip
                    .one('bsTransitionEnd', complete)
                    .emulateTransitionEnd(TRANSITION_DURATION) :
                complete();

            return this;
        },

        fixTitle: function () {
            var $e = this.element;
            if ($e.attr('title') || typeof ($e.attr('data-original-title')) != 'string') {
                $e.attr('data-original-title', $e.attr('title') || '').attr('title', '');
            }
        },

        hasContent: function () {
            return this.getTitle();
        },

        getPosition: function ($element) {
            $element = $element || this.element;

            var el = $element[0];
            var isBody = el.tagName == 'BODY';

            var elRect = el.getBoundingClientRect();
            if (elRect.width == null) {
                // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
                elRect = $.extend({}, elRect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});
            }
            var elOffset = isBody ? {top: 0, left: 0} : $element.offset();
            var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop()};
            var outerDims = isBody ? {width: $(window).width(), height: $(window).height()} : null;

            return $.extend({}, elRect, scroll, outerDims, elOffset);
        },

        getCalculatedOffset: function (placement, pos, actualWidth, actualHeight) {
            var offset;
            switch (placement) {
                case 'bottom':
                    offset = {
                        top: pos.top + pos.height,
                        left: pos.left + pos.width / 2 - actualWidth / 2
                    };
                    break;
                case 'top':
                    offset = {
                        top: pos.top - actualHeight,
                        left: pos.left + pos.width / 2 - actualWidth / 2
                    };
                    break;
                case 'left':
                    offset = {
                        top: pos.top + pos.height / 2 - actualHeight / 2,
                        left: pos.left - actualWidth
                    };
                    break;
                case 'right':
                    offset = {
                        top: pos.top + pos.height / 2 - actualHeight / 2,
                        left: pos.left + pos.width
                    };
                    break;
                case 'bottom-right':
                    offset = {
                        top: pos.top + pos.height,
                        left: pos.left + pos.width - actualWidth
                    };
                    break;
                case 'bottom-left':
                    offset = {
                        top: pos.top + pos.height,
                        left: pos.left
                    };
                    break;
                case 'top-right':
                    offset = {
                        top: pos.top - actualHeight,
                        left: pos.left + pos.width - actualWidth
                    };
                    break;
                case 'top-left':
                    offset = {
                        top: pos.top - actualHeight,
                        left: pos.left
                    };
                    break;
            }

            return offset;
        },

        getTitle: function () {
            var title;
            var $e = this.element;
            var o = this.options;

            title = $e.attr('data-original-title')
            || (typeof o.title == 'function' ? o.title.call($e[0]) : o.title);

            return title;
        },

        tip: function () {
            if (!this.$tip) {
                this.$tip = $(this.options.template);
            }
            return this.$tip;
        },

        arrow: function () {
            return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'));
        },

        enable: function () {
            this.enabled = true;
        },

        disable: function () {
            this.enabled = false;
        },

        /**
         * @method toggle
         * @param e
         */
        toggle: function (e) {
            this.isOpened() ? this.hide() : this.show();
        },

        isOpened: function () {
            return this.tip().hasClass('in');
        }
    });
}();
/**
 * 文本弹出框控件
 * @deprecated
 * @class fish.desktop.widget.PopEdit
 * @extends fish.desktop.widget
 * <pre>
 *   $(element).popedit(option);
 * </pre>
 */
!function () {
    'use strict';

    $.widget("ui.popedit", $.ui.formfield, {
        options: {
            /** @cfg {String} url  popedit弹出层的内容,可以是远程页面内容;如果以#开头,则表示的是当前dom的id,会取这个元素的内容
             */
            url: '',
            /** @cfg {String} buttonIcon='remove new-window' 默认图标;remove表示清除按钮,弹出层可以使用任意的glyphicon图标
             */
            buttonIcon: 'new-window',
            /** @cfg {Object} dialogInstance popedit弹出层实例
             */
            dialogInstance: null,
            /** @cfg {Object} dialogOption popedit弹出层的参数,popedit采用了dialog控件展示弹出层,可配置dialog的所有参数
             */
            dialogOption: null,
            //内部用,
            value: null,
            /** @cfg {String} dataTextField='name' dialog返回数据对象的属性,用于文本框显示
             */
            dataTextField: "name",
            /** @cfg {String} dataValueField='value' dialog返回数据对象的属性,用于提交到后台
             */
            dataValueField: "value",
            /** @cfg {Object} initialData popedit初始化参数
             */
            initialData: null,
            /**
             *@cfg {Boolean} showClearIcon=true 聚焦时是否显示x图标,默认显示
             */
            showClearIcon: true
        },
        //根据图标属性的配置创建图标
        _createIcon: function () {
            var options = this.options,
                $element = $(this.element);

            if (options.showClearIcon) {
                var clearInput = $element.clearinput();
                var settings = {
                    'direct': 'right',
                    'iconname': options.buttonIcon
                };
                clearInput.clearinput('setIcon', settings);
            } else {
                var icons = options.buttonIcon.split(' '), html = '';
                for (var i = 0; i < icons.length; i++) {
                    html += '<span class="input-group-addon"><span class="glyphicon glyphicon-' + icons[i] + '"></span></span>';
                }
                $element.after(html);
            }

            this.component = $element.nextAll('.input-group-addon').filter(function (index) {
                return !$(this).children('.glyphicon').hasClass('glyphicon-remove');
            });
            this.componentReset = $element.nextAll('.input-group-addon').filter(function (index) {
                return $(this).children('.glyphicon').hasClass('glyphicon-remove');
            });
            this.component = this.component.length ? this.component : false;
            this.componentReset = this.componentReset.length ? this.componentReset : false;
        },
        //初始化参数
        _getCreateOptions: function () {
            var $element = $(this.element);
            return {
                url: $element.data('url')
            };
        },
        _create: function () {
            var options = this.options;
            // add readonly attr
            this.element.attr('readonly', true);
            if (options.buttonIcon) {
                this._createIcon();
            }
            this._attachEvents();
            if (options.initialData) {
                this.setValue(options.initialData);
            }

            this.dialog = null;
            if (options.dialogInstance) {
                this.dialogInstance(options.dialogInstance);
            }

            // call formfield _create method
            this._super();
        },
        //popedit提交数据的时候,界面值不是实际值,需要重写getValue方法
        _onFormReset: function () {
            this.setValue(this.options.initialData);
        },
        _onFormClear: function () {
            this.value = null;
        },
        _formSetValue: function (value) {
            var options = this.options;
            if (typeof value === 'string') {
                var _temp = value;
                value = {};
                value[options.dataTextField] = $.trim(_temp);
                value[options.dataValueField] = $.trim(_temp);
            }
            this.value = value;
            this.element.val(value ? value[options.dataTextField] : "");
        },
        _formGetValue: function () {
            var value = this.getValue();
            return value ? value[this.options.dataValueField] : "";
        },
        _validateHandler: function () {
            var that = this;
            this._on({
                'popedit:change': function () {
                    if (that._getValidFlag()) {
                        that.element.isValid();
                    }
                }
            });
        },
        _attachEvents: function () {
            this._on({
                'change': '_clear'
            });
            this._on(this.component, {
                click: '_openDialog'
            });

            if (this.componentReset) {
                this._on(this.componentReset, {
                    click: '_clear'
                });
            }
        },

        _openDialog: function (e) {
            var dialog = this.dialog;
            if (dialog) { //已经存在就直接打开;如果改变url,则重新生成~
                dialog.dialog("open");
                this._trigger('open');
            } else {
                var that = this, url = this.options.url;

                if (!url) {
                    this._trigger('open');
                }
                else if (url.indexOf("#") === 0) {//以#开头
                    this._initDialog($(url));
                } else {
                    $.ajax({
                        url: url,
                        type: 'get',
                        dataType: 'html'
                    }).done(function (responseText) {
                        var $html = $(responseText);
                        $("body").append($html);
                        if (!$html.attr("id")) {
                            $html.uniqueId();
                        }
                        that._initDialog($("#" + $html.attr("id")));
                    });
                }
            }
        },
        _initDialog: function ($el) {
            var that = this;
            $el.dialog(this.options.dialogOption).on({
                "dialog:change": function (e, value) {
                    that.setValue(value);
                }
            });
            this._trigger('open');
            this.dialog = $el;
        },
        _setOption: function (key, value) {

            if (key === "url") {
                if (this.dialog && this.options.url !== value) {
                    this.dialog.dialog("destroy");
                    this.dialog = null;
                }
            }
            this._super(key, value);

            if (key === "dialogOption") {
                if (this.dialog) {
                    this.dialog.dialog("option", value);
                }
            }
            if (key === 'disabled') {
                this.element.prop("disabled", value);
            }
        },

        _clear: function (e) {
            this.setValue("");
        },

        /**
         * @method dialogInstance 弹出框实例
         */
        dialogInstance: function (value) {
            var changeHandler;

            if (arguments.length === 0) {
                return this.dialog;
            } else {
                this.dialog = value;

                if (this.dialog) {
                    changeHandler = _.bind(this._onDialogChange, this);
                    this.dialog.on('dialogchange', changeHandler);
                }
            }
        },

        _onDialogChange: function (e, value) {
            this.setValue(value);
        },

        /**
         * @method setValue 给popedit赋值
         * @param {Object} value 如果值是字符串,则显示与实际值都是字符串本身;如果是对象,界面会显示dataTextField的属性值
         */
        setValue: function (value) {//通过filed等属性进行操作//form使用时要进行值覆盖
            var options = this.options, _temp;
            if (typeof value === 'string') {
                _temp = value;
                value = {};
                value[options.dataTextField] = $.trim(_temp);
                value[options.dataValueField] = $.trim(_temp);
            }
            this.value = value;
            this.element.val(value ? value[options.dataTextField] : "");//显示label值，form中覆盖value
            this._trigger('change', null, value);
        },
        /**
         * @method getValue 取popedit值
         * @return {Object} 返回设置进去的值,可以是dialog回调setReturnValue设置进去的值,也可以是popedit调用setValue设置进去的值
         */
        getValue: function () {
            var options = this.options, _temp, value = this.value;
            if (typeof value === 'string') { //这种场景应该不存在
                _temp = value;
                value = {};
                value[options.dataTextField] = $.trim(_temp);
                value[options.dataValueField] = $.trim(_temp);
            }
            return value;
        }
        /**
         * 当值发生改变后触发
         * @event change
         * @param {Event} event event
         * @param {Object} value 改变后的值
         */
    });
}();

/**
 * @class  fish.desktop.widget.Popover
 * 弹出层组件
 *
 * @extends fish.desktop.widget.Tooltip
 */
!(function () {
    $.widget("ui.popover", $.ui.tooltip, {
        options: {
            /**
             * @cfg {String} [placement='top'] 提示展示位置，默认在上面,可选值为top/left/right/bottom
             */
            placement: 'bottom',
            /**
             * @cfg {String} [trigger='click'] 触发事件，默认是click
             */
            trigger: 'click',
            /**
             * @cfg {Boolean} [html=true] 内容是否以html字符串插入，默认是false
             */
            html: true,
            /**
             * @cfg {String} [content=''] 弹出内容，先获取元素上data-content属性值
             */
            content: '',
            template: '<div class="popover" role="tooltip">\n                           <div class="arrow"></div>\n                           <h3 class="popover-title"></h3>\n                           <div class="popover-content"></div>\n                        </div>'
        },

        setContent: function () {
            var $tip = this.tip();
            var title = this.getTitle();
            var content = this.getContent();

            $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title);
            $tip.find('.popover-content').children().detach().end()[// we use append for html objects to maintain js events
            this.options.html ? typeof content == 'string' ? 'html' : 'append' : 'text'](content);

            $tip.removeClass('fade in' + this.options.placement);

            // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
            // this manually by checking the contents.
            if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide();
        },

        hasContent: function () {
            return this.getTitle() || this.getContent();
        },

        getContent: function () {
            var $e = this.element;
            var o = this.options;

            return $e.attr('data-content') || (typeof o.content == 'function' ? o.content.call($e[0]) : o.content);
        },

        arrow: function () {
            return this.$arrow = this.$arrow || this.tip().find('.arrow');
        }
    });
})();

/**
 * @class fish.desktop.fish
 */
!(function () {
    var OPENED_MODAL_CLASS = 'modal-open',
        openedWindows = fish.modalStack.openedWindows,
        DEFAULTS = {
        content: '',
        modal: true,
        keyboard: true,
        draggable: true,
        resizable: false,
        autoDismiss: false,
        canClose: true,
        destroyOnClose: true,
        autoResizable: true,
        width: 'auto',
        height: "auto",
        position: {
            my: "center",
            at: "center",
            of: window,
            collision: "fit",
            // ensure that the titlebar is never outside the document
            using: function (pos) {
                var topOffset = $(this).css(pos).offset().top;
                if (topOffset < 0) {
                    $(this).css("top", pos.top - topOffset);
                }
            }
        }
    },
        KEYCODE = $.ui.keyCode;

    function removeModalWindow(modalInstance) {
        var modalWindow = openedWindows.get(modalInstance).value,
            $body = $(document.body);

        openedWindows.remove(modalInstance);

        $(window).off('resize.' + modalWindow.popupId);

        //remove window DOM element
        modalWindow.$modalElement.off('.data-api');
        modalWindow.$modalElement.remove();

        var hasModalWin = false,
            opened = openedWindows.keys();
        for (var i = 0; i < opened.length; i++) {
            var win = openedWindows.get(opened[i]);
            if (win.value.$modalElement.is(':visible') && win.value.modal) {
                hasModalWin = true;
                break;
            }
        }
        $body.toggleClass(OPENED_MODAL_CLASS, hasModalWin);

        fish.modalStack.removeBackdrop();
    }

    // #553
    //判断是否需要修改遮罩层逻辑
    //①非模态窗口不修改
    //②模态窗口则修改
    function changeBackdrop(modalInstance) {
        var modalWin = openedWindows.get(modalInstance);
        if (!modalWin.value.modal) {
            return;
        }

        var topModalInstance,
            opened = openedWindows.keys();
        for (var i = opened.length - 1; i >= 0; i--) {
            var win = openedWindows.get(opened[i]);
            if (win.value.$modalElement.is(':visible') && win.value.modal) {
                topModalInstance = opened[i]; // 最上面的的模态窗口
                break;
            }
        }

        fish.modalStack.changeBackdrop(topModalInstance);

        $('body').toggleClass('modal-open', topModalInstance != null);
    }

    var modalStack = {
        open: function (modalInstance, options) {
            var modalOpener = document.activeElement,
                $body = $(document.body),
                $modalElement,
                cssOptions,
                $modalBody;

            var popupId = fish.uniqueId('ui-popup-');
            openedWindows.add(modalInstance, {
                popupId: popupId,
                deferred: options.deferred,
                modal: options.modal,
                keyboard: options.keyboard
            });

            fish.modalStack.addBackdrop();

            if (options.modal) {
                $body.addClass(OPENED_MODAL_CLASS);
            }

            $modalElement = $(options.content);
            $modalBody = $modalElement.find('.modal-body');

            //#577
            if (options.canClose === true) {
                $modalElement.find('.modal-header').prepend('<button type="button" class="close" ' + (options.destroyOnClose ? "data-dismiss" : "data-hide") + ' aria-label="Close"> ' + '<span aria-hidden="true">&times;</span>' + '</button>');
            }

            $modalElement.on('click.dismiss.data-api', '[data-dismiss]', function (e) {
                modalStack.dismiss(modalInstance, 'dismiss click');
            }).on('click.close.data-api', '[data-close]', function (e) {
                modalStack.close(modalInstance, 'close click');
            }).on('click.hide.data-api', '[data-hide]', function (e) {
                modalStack.hide(modalInstance);
            });

            cssOptions = {
                'z-index': 1050 + (openedWindows.length() - 1) * 10,
                'display': 'block'
            };

            if (options.width !== 'auto') {
                cssOptions.width = options.width;
            }

            if (options.height !== 'auto') {
                cssOptions.height = options.height;
            }

            $modalElement.css(cssOptions);
            $body.append($modalElement);

            if (!isNaN(options.height)) {
                $modalBody.css('overflow', 'auto');
                $modalBody.outerHeight(options.height - $modalElement.find('.modal-header').outerHeight() - $modalElement.find('.modal-footer').outerHeight());
            }

            $modalElement.position(options.position).data('position', options.position); // store position
            $modalElement.find('[autofocus]').focus();

            if (options.draggable) {
                $modalElement.draggable({
                    handle: ".modal-header",
                    containment: "document",
                    //#578, 如果被拖动了，则不需要进行居中
                    stop: function (event, ui) {
                        $(this).data('new-position', true);
                    }
                });
            }

            if (options.resizable) {
                $modalElement.css('position', 'absolute');
                $modalElement.resizable({
                    alsoResize: $modalBody
                });
            }
            //#578
            if (options.autoResizable) {
                $(window).on('resize.' + popupId, fish.debounce(function () {
                    if (!$modalElement.data('new-position')) {
                        $modalElement.is(':visible') && $modalElement.position($modalElement.data('position'));
                    }
                }, 300));
            }

            openedWindows.top().value.$modalElement = $modalElement;
            openedWindows.top().value.modalOpener = modalOpener;
        },

        close: function (modalInstance, result) {
            var modalWindow = openedWindows.get(modalInstance);
            if (modalWindow) {
                removeModalWindow(modalInstance);
                modalWindow.value.modalOpener.focus();
                modalWindow.value.deferred.resolve(result);
                return true;
            }
            return !modalWindow;
        },

        dismiss: function (modalInstance, reason) {
            var modalWindow = openedWindows.get(modalInstance);
            if (modalWindow) {
                removeModalWindow(modalInstance);
                modalWindow.value.modalOpener.focus();
                modalWindow.value.deferred.reject(reason);
                return true;
            }
            return !modalWindow;
        },

        show: function (modalInstance) {
            var modalWin = openedWindows.get(modalInstance);
            if (modalWin) {
                modalWin.value.$modalElement.show();
                changeBackdrop(modalInstance);
            }
        },

        hide: function (modalInstance) {
            var modalWin = openedWindows.get(modalInstance);
            if (modalWin) {
                modalWin.value.$modalElement.hide();
                changeBackdrop(modalInstance);
            }
        },

        isOpen: function (modalInstance) {
            var modalWin = openedWindows.get(modalInstance);
            if (modalWin) {
                return modalWin.value.$modalElement.is(':visible');
            }
            return false;
        },

        isDestroy: function (modalInstance) {
            return !openedWindows.get(modalInstance);
        },

        center: function (modalInstance) {
            var modalWin = openedWindows.get(modalInstance);
            if (modalWin) {
                modalWin.value.$modalElement.position({
                    my: "center",
                    at: "center",
                    of: window,
                    collision: "fit"
                });
            }
        }
    };

    $(document).on('keydown', function (evt) {
        var modal;

        if (evt.keyCode === KEYCODE.ESCAPE) {
            modal = openedWindows.top();
            if (modal && modal.value.keyboard) {
                evt.preventDefault();
                modalStack.dismiss(modal.key, 'escape key press');
            }
        }
    });

    /**
     * @since V1.4.4
     * @method popup
     * 弹出窗口
     * @param options 弹出参数
     * @param {String|jQuery} [options.content=''] 弹出内容
     * @param {Boolean} [options.modal=true] 是否遮罩，默认是
     * @param {Boolean} [options.keyboard=true] 是否支持esc键关闭窗口，默认是
     * @param {Boolean} [options.draggable=false] 是否可拖动，默认否
     * @param {Boolean} [options.resizable=false] 是否可调整大小，默认否
     * @param {Boolean} [options.autoDismiss=false] V2.1.0提供是否支持点击窗口外面区域自动关闭窗口
     * @param {Boolean} [options.canClose=true] 是否显示右上角x图标，默认显示
     * @param {Boolean} [options.destroyOnClose=true] 关闭窗口时是否销毁DOM结构，默认是
     * @param {Boolean} [options.autoResizable=true] Window尺寸变化时是否自动调整窗口位置，默认是
     * @param {Number|String} [options.width='auto'] 弹出框宽度，默认据内容的宽度自动调整自身的宽度。
     * Number: 宽度，单位为像素。<br/>
     * String: 唯一可选的值是"auto"，允许对话框根据内容的宽度自动调整自身的宽度
     * @param {Number|String} [options.height='auto'] 弹出框高度，默认据内容的高度自动调整自身的高度。
     * Number:高度，单位为像素。<br/>
     * String: 唯一可选的值是"auto"，允许对话框根据内容的高度自动调整自身的高度
     * @param {Object} [options.position={ my: "center", at: "center", of: window, collision:"fit" }]
     * 指定对话框在哪个位置打开。对话框自己会处理重叠的情况，从而尽可能让所有对话框都可见。<br/>
     * 此配置项的默认值是window，但是你可以指定其它元素，对话框将会定位到你指定的元素上。
     * 对于可选的配置值，你可以参考jQuery UI的Position属性。<br/>
     *
     * @returns {{result: *, close: Function, dismiss: Function}}
     * @returns {Object} return.result 返回结果Promise对象，popup.result.then(function resolve(){}, function reject(){});
     * @returns {Function} return.close 确认关闭窗口函数，popup.close(result)
     * @returns {Function} return.dismiss 取消关闭窗口函数，popup.dismiss(reason)
     * @returns {Function} return.show 显示窗口
     * @returns {Function} return.hide 隐藏窗口，如果在View中使用此方法，当View销毁时最好调用dismiss方法移除DOM
     * @returns {Function} return.isOpen 判断窗口是否已经打开，返回Boolean值
     * @returns {Function} return.isDestroy 判断窗口是否已经销毁，返回Boolean值
     * @returns {Function} return.center 将popup居中（适用于popup中有动态加载导致大小变化的场景）
     */
    fish.popup = function (options) {
        var modalResultDeferred = $.Deferred();

        var modalInstance = {
            result: modalResultDeferred.promise(),
            close: function (result) {
                return modalStack.close(modalInstance, result);
            },
            dismiss: function (reason) {
                return modalStack.dismiss(modalInstance, reason);
            },
            //#553
            show: function () {
                modalStack.show(modalInstance);
            },
            hide: function () {
                modalStack.hide(modalInstance);
            },
            isOpen: function () {
                return modalStack.isOpen(modalInstance);
            },
            isDestroy: function () {
                return modalStack.isDestroy(modalInstance);
            },
            center: function () {
                modalStack.center(modalInstance);
            }
        };

        modalStack.open(modalInstance, $.extend({
            deferred: modalResultDeferred
        }, DEFAULTS, options));

        if (options.autoDismiss) {
            function dismiss(e) {
                if (!$.contains(openedWindows.get(modalInstance).value.$modalElement[0], e.target)) {
                    modalInstance.dismiss('click outside');
                }
            }

            fish.defer(function () {
                $(document).on('click', dismiss);
            });
            modalInstance.result.always(function () {
                $(document).off('click', dismiss);
            });
        }

        return modalInstance;
    };
})();

/**
 * @class  fish.desktop.widget.ProgressBar
 * 进度条组件
 */

/**
 * @event change
 * 当进度条的值发生改变的时候触发。
 *
 *     @example
 *     $(".selector").progressbar({
 *       change: function( event, ui ) {}
 *     });
 *
 *     $( ".selector" ).on("progressbar:change", function( event, ui ) {} );
 */
/**
 * @event complete
 * 当进度条到达最大值时触发。
 *
 *     @example
 *     $( ".selector" ).progressbar({
 *       complete: function( event, ui ) {}
 *     });
 *
 *     $( ".selector" ).on( "progressbar:complete", function( event, ui ) {} );
 */

!function() {
    "use strict";

    $.widget("ui.progressbar", {
        options: {
            /**
             * @cfg {Number} [max=100] 进度条的最大值。
             */
            max: 100,
            /**
             * @cfg {Number} [value=0] 进度条的当前值。
             */
            value: 0,
            /**
             * @cfg {String} [progressbarClass=''] 进度条的自定义样式。
             */
            progressbarClass: '',
            /**
             * @cfg {String} [label=''] 文字标签。
             */
            label: '',

            /**
             * @cfg {Function} [change=null] 定义改变进度条值事件函数，事件名称progressbar:change
             */
            change: null,
            /**
             * @cfg {Function} [complete=null] 定义进度条完成事件函数，事件名称progressbar:complete
             */
            complete: null
        },

        min: 0, //不属于可配置项

        /*
         * create创建完成后的时间UI
         * @returns {element|*|Function}
         * @private
         */
        _getCreateEventData: function() {
            return {
                progressbar: this.element
            };
        },

        _create: function() {
            // Constrain initial value
            this.oldValue = this.options.value = this._constrainedValue();

            this.element
                .addClass("ui-progressbar" + this.options.progressbarClass)
                .attr({
                    // Only set static values, aria-valuenow and aria-valuemax are
                    // set inside _refreshValue()
                    role: "progressbar",
                    "aria-valuemin": this.min
                });

            this.valueDiv = $("<div class='ui-progressbar-value'></div>") // ui-widget-header ui-corner-left
                .appendTo(this.element);

            this.labelDiv = $('<div class="progress-label"></div>').html(this.options.label).prependTo(this.element);

            this._refreshValue();
        },

        _destroy: function() {
            this.element
                .removeClass("ui-progressbar")
                .removeAttr("role")
                .removeAttr("aria-valuemin")
                .removeAttr("aria-valuemax")
                .removeAttr("aria-valuenow");
            this.labelDiv.remove();
            this.valueDiv.remove();
        },
        /**
         * @method value
         * 获取进度条的值或者设置新值
         * @param  {Number} [newValue] 传入这个参数的时候，就是设置新的值，否则返回当前值
         * @return {Number} 当调用方法取值的时候，返回进度条当前值；否则没有返回
         */
        value: function(newValue) {
            if (newValue === undefined) {
                return this.options.value;
            }

            this.options.value = this._constrainedValue(newValue);
            this._refreshValue();
        },
        /**
         * @method label
         * 设置文字内容
         * @param  {String} newLabel 新的内容
         */
        label: function(newLabel) {
            this.labelDiv.html(newLabel);
        },

        _constrainedValue: function(newValue) {
            if (newValue === undefined) {
                newValue = this.options.value;
            }

            this.indeterminate = newValue === false;

            // sanitize value
            if (typeof newValue !== "number") {
                newValue = 0;
            }

            return this.indeterminate ? false :
                Math.min(this.options.max, Math.max(this.min, newValue));
        },

        _setOptions: function(options) {
            // Ensure "value" option is set after other values (like max)
            var value = options.value;
            delete options.value;

            this._super(options);

            this.options.value = this._constrainedValue(value);
            this._refreshValue();
        },

        _setOption: function(key, value) {
            if (key === "max") {
                // Don't allow a max less than min
                value = Math.max(this.min, value);
            }
            if (key === "disabled") {
                this.element
                    .toggleClass("ui-state-disabled", !!value)
                    .attr("aria-disabled", value);
            }
            this._super(key, value);
        },

        /**
         * 获取百分比
         * @returns {number}
         * @private
         */
        _percentage: function() {
            return this.indeterminate ? 100 : 100 * (this.options.value - this.min) / (this.options.max - this.min);
        },

        /**
         * 刷新值
         * @private
         */
        _refreshValue: function() {

            var value = this.options.value,
                percentage = this._percentage();

            this.valueDiv
                .toggle(this.indeterminate || value > this.min)
                // .toggleClass("ui-corner-right", value === this.options.max)
                .css('width', percentage.toFixed(0) + "%");
            //      .width(percentage.toFixed(0) + "%"); //fix error in bs

            this.element.toggleClass("ui-progressbar-indeterminate", this.indeterminate);

            if (this.indeterminate) {
                this.element.removeAttr("aria-valuenow");
                if (!this.overlayDiv) {
                    this.overlayDiv = $("<div class='ui-progressbar-overlay'></div>").appendTo(this.valueDiv);
                }
            } else {
                this.element.attr({
                    "aria-valuemax": this.options.max,
                    "aria-valuenow": value
                });
                if (this.overlayDiv) {
                    this.overlayDiv.remove();
                    this.overlayDiv = null;
                }
            }


            if (this.oldValue !== value) {
                this.oldValue = value;
                this._trigger("change", null, {
                    progressbar: this.element
                });
            }
            if (value === this.options.max) {
                this._trigger("complete", null, {
                    progressbar: this.element
                });
            }
        }
    });
}();

/**
 * Slider滑动条组件，可以用来滑动取值，支持横向和纵向2种方式。
 * @class  fish.desktop.widget.Slider
 * @extends fish.desktop.widget
 *
 * Depends:
 *  jquery.ui.core.js
 *  jquery.ui.mouse.js
 *  jquery.ui.widget.js
 */
!function () {

    $.widget("ui.slider", $.ui.mouse, {

        /** @cfg {Boolean/String/Number} animate 滑动滑块时的动画速度,false:无动画特效
         */
        /** @cfg {Number} min 设置滑块最小值
         */
        /** @cfg {Number} max 设置滑块最大值
         */
        /** @cfg {String} orientation 设置水平滑动还是垂直滑动  horizontal/vertical
         */
        /** @cfg {Boolean/String} range 设置两个滑块的区域
         */
        /** @cfg {Number} step 设置每滑动一块的步长
         */
        /** @cfg {Number} value 设置初始滑块数值
         */
        /** @cfg {Number} values 设置两个滑块初始值
         */
        options: {
            sliderClass: '', //自定义样式
            animate: false,
            distance: 0,
            max: 100,
            min: 0,
            orientation: "horizontal",
            range: false,
            step: 1,
            value: 0,
            values: null,
            // callbacks
            /**
             * 滑块值改变触发的事件
             * @event change
             */
            change: null, //改变事件
            /**
             * 滑块滑动时触发的事件,返回false的话,滑动操作不生效
             * @event slide
             */
            slide: null, //滑动事件
            /**
             * 滑块开始滑动时触发的事件
             * @event start
             */
            start: null,
            /**
             * 滑块滑动停止后触发的事件
             * @event stop
             */
            stop: null
        },

        // number of pages in a slider
        // (how many times can you page up/down to go through the whole range)
        numPages: 5,

        _create: function () {

            this._keySliding = false;
            this._mouseSliding = false;
            this._animateOff = true;
            this._handleIndex = null;
            this._detectOrientation();
            this._mouseInit();
            this._calculateNewMax();

            this.element.addClass("ui-slider ui-slider-" + this.orientation + " " + this.options.sliderClass);

            this._refresh();
            this._setOption("disabled", this.options.disabled);

            this._animateOff = false;
        },

        _refresh: function () {
            this._createRange();
            this._createHandles();
            this._setupEvents();
            this._refreshValue();
        },

        _createHandles: function () {
            var i, handleCount,
                options = this.options,
                existingHandles = this.element.find(".ui-slider-handle"), //.addClass("ui-state-default ui-corner-all"),
                handle = "<span class='ui-slider-handle' tabindex='0'></span>",
                handles = [];

            handleCount = (options.values && options.values.length) || 1;

            if (existingHandles.length > handleCount) {
                existingHandles.slice(handleCount).remove();
                existingHandles = existingHandles.slice(0, handleCount);
            }

            for (i = existingHandles.length; i < handleCount; i++) {
                handles.push(handle);
            }

            this.handles = existingHandles.add($(handles.join("")).appendTo(this.element));

            this.handle = this.handles.eq(0);

            this.handles.each(function (i) {
                $(this).data("ui-slider-handle-index", i);
            });
        },

        _createRange: function () {
            var options = this.options,
                classes = "";

            if (options.range) {
                if (options.range === true) {
                    if (!options.values) {
                        options.values = [this._valueMin(), this._valueMin()];
                    } else if (options.values.length && options.values.length !== 2) {
                        options.values = [options.values[0], options.values[0]];
                    } else if ($.isArray(options.values)) {
                        options.values = options.values.slice(0);
                    }
                }

                if (!this.range || !this.range.length) {
                    this.range = $("<div></div>").appendTo(this.element);

                    classes = "ui-slider-range"; // +
                    // note: this isn't the most fittingly semantic framework class for this element,
                    // but worked best visually with a variety of themes
                    // " ui-widget-header ui-corner-all";
                } else {
                    this.range.removeClass("ui-slider-range-min ui-slider-range-max")
                        // Handle range switching from true to min/max
                        .css({
                            "left": "",
                            "bottom": ""
                        });
                }

                this.range.addClass(classes + ((options.range === "min" || options.range === "max") ? " ui-slider-range-" + options.range : ""));
            } else {
                if (this.range) {
                    this.range.remove();
                }
                this.range = null;
            }
        },

        _setupEvents: function () {
            this._off(this.handles);
            this._on(this.handles, this._handleEvents);
            this._hoverable(this.handles);
            this._focusable(this.handles);
        },

        _destroy: function () {
            this.handles.remove();
            if (this.range) {
                this.range.remove();
            }

            this.element.removeClass("ui-slider ui-slider-horizontal ui-slider-vertical"); // ui-widget ui-widget-content ui-corner-all

            this._mouseDestroy();
        },

        _mouseCapture: function (event) {
            var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle,
                that = this,
                o = this.options;

            if (o.disabled) {
                return false;
            }

            this.elementSize = {
                width: this.element.outerWidth(),
                height: this.element.outerHeight()
            };
            this.elementOffset = this.element.offset();

            position = {
                x: event.pageX,
                y: event.pageY
            };
            normValue = this._normValueFromMouse(position);
            distance = this._valueMax() - this._valueMin() + 1;
            this.handles.each(function (i) {
                var thisDistance = Math.abs(normValue - that.values(i));
                if ((distance > thisDistance) || (distance === thisDistance && (i === that._lastChangedValue || that.values(i) === o.min))) {
                    distance = thisDistance;
                    closestHandle = $(this);
                    index = i;
                }
            });

            allowed = this._start(event, index);
            if (allowed === false) {
                return false;
            }
            this._mouseSliding = true;

            this._handleIndex = index;

            closestHandle.addClass("ui-state-active").focus();

            offset = closestHandle.offset();
            mouseOverHandle = !$(event.target).parents().addBack().is(".ui-slider-handle");
            this._clickOffset = mouseOverHandle ? {
                left: 0,
                top: 0
            } : {
                left: event.pageX - offset.left - (closestHandle.width() / 2),
                top: event.pageY - offset.top - (closestHandle.height() / 2) - (parseInt(closestHandle.css("borderTopWidth"), 10) || 0) - (parseInt(closestHandle.css("borderBottomWidth"), 10) || 0) + (parseInt(closestHandle.css("marginTop"), 10) || 0)
            };

            if (!this.handles.hasClass("ui-state-hover")) {
                this._slide(event, index, normValue);
            }
            this._animateOff = true;
            return true;
        },

        _mouseStart: function () {
            return true;
        },

        _mouseDrag: function (event) {
            var position = {
                    x: event.pageX,
                    y: event.pageY
                },
                normValue = this._normValueFromMouse(position);

            this._slide(event, this._handleIndex, normValue);

            return false;
        },

        _mouseStop: function (event) {
            this.handles.removeClass("ui-state-active");
            this._mouseSliding = false;

            this._stop(event, this._handleIndex);
            this._change(event, this._handleIndex);

            this._handleIndex = null;
            this._clickOffset = null;
            this._animateOff = false;

            return false;
        },

        _detectOrientation: function () {
            this.orientation = (this.options.orientation === "vertical") ? "vertical" : "horizontal";
        },

        _normValueFromMouse: function (position) {
            var pixelTotal,
                pixelMouse,
                percentMouse,
                valueTotal,
                valueMouse;

            if (this.orientation === "horizontal") {
                pixelTotal = this.elementSize.width;
                pixelMouse = position.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0);
            } else {
                pixelTotal = this.elementSize.height;
                pixelMouse = position.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0);
            }

            percentMouse = (pixelMouse / pixelTotal);
            if (percentMouse > 1) {
                percentMouse = 1;
            }
            if (percentMouse < 0) {
                percentMouse = 0;
            }
            if (this.orientation === "vertical") {
                percentMouse = 1 - percentMouse;
            }

            valueTotal = this._valueMax() - this._valueMin();
            valueMouse = this._valueMin() + percentMouse * valueTotal;

            return this._trimAlignValue(valueMouse);
        },

        _start: function (event, index) {
            var uiHash = {
                handle: this.handles[index],
                value: this.value()
            };
            if (this.options.values && this.options.values.length) {
                uiHash.value = this.values(index);
                uiHash.values = this.values();
            }
            return this._trigger("start", event, uiHash);
        },

        _slide: function (event, index, newVal) {
            var otherVal,
                newValues,
                allowed;

            if (this.options.values && this.options.values.length) {
                otherVal = this.values(index ? 0 : 1);

                if ((this.options.values.length === 2 && this.options.range === true) && ((index === 0 && newVal > otherVal) || (index === 1 && newVal < otherVal))) {
                    newVal = otherVal;
                }

                if (newVal !== this.values(index)) {
                    newValues = this.values();
                    newValues[index] = newVal;
                    // A slide can be canceled by returning false from the slide callback
                    allowed = this._trigger("slide", event, {
                        handle: this.handles[index],
                        value: newVal,
                        values: newValues
                    });
                    otherVal = this.values(index ? 0 : 1);
                    if (allowed !== false) {
                        this.values(index, newVal);
                    }
                }
            } else {
                if (newVal !== this.value()) {
                    // A slide can be canceled by returning false from the slide callback
                    allowed = this._trigger("slide", event, {
                        handle: this.handles[index],
                        value: newVal
                    });
                    if (allowed !== false) {
                        this.value(newVal);
                    }
                }
            }
        },

        _stop: function (event, index) {
            var uiHash = {
                handle: this.handles[index],
                value: this.value()
            };
            if (this.options.values && this.options.values.length) {
                uiHash.value = this.values(index);
                uiHash.values = this.values();
            }

            this._trigger("stop", event, uiHash);
        },

        _change: function (event, index) {
            if (!this._keySliding && !this._mouseSliding) {
                var uiHash = {
                    handle: this.handles[index],
                    value: this.value()
                };
                if (this.options.values && this.options.values.length) {
                    uiHash.value = this.values(index);
                    uiHash.values = this.values();
                }

                //store the last changed value index for reference when handles overlap
                this._lastChangedValue = index;

                this._trigger("change", event, uiHash);
            }
        },

        /**
         * 单个滑块取值
         * @param newValue
         * @returns {*}
         */
        value: function (newValue) {
            if (arguments.length) {
                this.options.value = this._trimAlignValue(newValue);
                this._refreshValue();
                this._change(null, 0);
                return;
            }

            return this._value();
        },
        /**
         * 两个滑块的取值方式
         * @param index 下标索引
         * @param newValue 对应下标值
         * @returns {*}
         */
        values: function (index, newValue) {
            var vals,
                newValues,
                i;

            if (arguments.length > 1) {
                this.options.values[index] = this._trimAlignValue(newValue);
                this._refreshValue();
                this._change(null, index);
                return;
            }

            if (arguments.length) {
                if ($.isArray(arguments[0])) {
                    vals = this.options.values;
                    newValues = arguments[0];
                    for (i = 0; i < vals.length; i += 1) {
                        vals[i] = this._trimAlignValue(newValues[i]);
                        this._change(null, i);
                    }
                    this._refreshValue();
                } else {
                    if (this.options.values && this.options.values.length) {
                        return this._values(index);
                    } else {
                        return this.value();
                    }
                }
            } else {
                return this._values();
            }
        },

        _setOption: function (key, value) {
            var i,
                valsLength = 0;

            if (key === "range" && this.options.range === true) {
                if (value === "min") {
                    this.options.value = this._values(0);
                    this.options.values = null;
                } else if (value === "max") {
                    this.options.value = this._values(this.options.values.length - 1);
                    this.options.values = null;
                }
            }

            if ($.isArray(this.options.values)) {
                valsLength = this.options.values.length;
            }

            if (key === "disabled") {
                this.element.toggleClass("ui-state-disabled", !!value);
            }

            this._super(key, value);

            switch (key) {
                case "orientation":
                    this._detectOrientation();
                    this.element.removeClass("ui-slider-horizontal ui-slider-vertical")
                        .addClass("ui-slider-" + this.orientation);
                    this._refreshValue();

                    // Reset positioning from previous orientation
                    this.handles.css(value === "horizontal" ? "bottom" : "left", "");
                    break;
                case "value":
                    this._animateOff = true;
                    this._refreshValue();
                    this._change(null, 0);
                    this._animateOff = false;
                    break;
                case "values":
                    this._animateOff = true;
                    this._refreshValue();
                    for (i = 0; i < valsLength; i += 1) {
                        this._change(null, i);
                    }
                    this._animateOff = false;
                    break;
                case "step":
                case "min":
                case "max":
                    this._animateOff = true;
                    this._calculateNewMax();
                    this._refreshValue();
                    this._animateOff = false;
                    break;
                case "range":
                    this._animateOff = true;
                    this._refresh();
                    this._animateOff = false;
                    break;
            }
        },

        //internal value getter
        // _value() returns value trimmed by min and max, aligned by step
        _value: function () {
            var val = this.options.value;
            val = this._trimAlignValue(val);

            return val;
        },

        //internal values getter
        // _values() returns array of values trimmed by min and max, aligned by step
        // _values( index ) returns single value trimmed by min and max, aligned by step
        _values: function (index) {
            var val,
                vals,
                i;

            if (arguments.length) {
                val = this.options.values[index];
                val = this._trimAlignValue(val);

                return val;
            } else if (this.options.values && this.options.values.length) {
                // .slice() creates a copy of the array
                // this copy gets trimmed by min and max and then returned
                vals = this.options.values.slice();
                for (i = 0; i < vals.length; i += 1) {
                    vals[i] = this._trimAlignValue(vals[i]);
                }

                return vals;
            } else {
                return [];
            }
        },

        // returns the step-aligned value that val is closest to, between (inclusive) min and max
        _trimAlignValue: function (val) {
            if (val <= this._valueMin()) {
                return this._valueMin();
            }
            if (val >= this._valueMax()) {
                return this._valueMax();
            }
            var step = (this.options.step > 0) ? this.options.step : 1,
                valModStep = (val - this._valueMin()) % step,
                alignValue = val - valModStep;

            if (Math.abs(valModStep) * 2 >= step) { //如果不小于步长的一半，则加上一个步长
                alignValue += (valModStep > 0) ? step : (-step);
            }

            // Since JavaScript has problems with large floats, round
            // the final value to 5 digits after the decimal point (see #4124)
            return parseFloat(alignValue.toFixed(5));
        },

        _calculateNewMax: function () {
            var max = this.options.max,
                min = this._valueMin(),
                step = this.options.step,
                aboveMin = Math.floor((+(max - min).toFixed(this._precision())) / step) * step;
            max = aboveMin + min;
            this.max = parseFloat(max.toFixed(this._precision()));
        },

        _precision: function () {
            var precision = this._precisionOf(this.options.step);
            if (this.options.min !== null) {
                precision = Math.max(precision, this._precisionOf(this.options.min));
            }
            return precision;
        },

        _precisionOf: function (num) {
            var str = num.toString(),
                decimal = str.indexOf(".");
            return decimal === -1 ? 0 : str.length - decimal - 1;
        },
        _valueMin: function () {
            return this.options.min;
        },

        _valueMax: function () {
            return this.options.max;
        },

        _refreshTick: function () {
            this._createTicks();
        },

        _refreshValue: function () {

            var lastValPercent, valPercent, value, valueMin, valueMax,
                oRange = this.options.range,
                o = this.options,
                that = this,
                animate = (!this._animateOff) ? o.animate : false,
                _set = {};

            if (this.options.values && this.options.values.length) {
                this.handles.each(function (i) {
                    valPercent = (that.values(i) - that._valueMin()) / (that._valueMax() - that._valueMin()) * 100;
                    _set[that.orientation === "horizontal" ? "left" : "bottom"] = valPercent + "%";
                    $(this).stop(1, 1)[animate ? "animate" : "css"](_set, o.animate);
                    if (that.options.range === true) {
                        if (that.orientation === "horizontal") {
                            if (i === 0) {
                                that.range.stop(1, 1)[animate ? "animate" : "css"]({
                                    left: valPercent + "%"
                                }, o.animate);
                            }
                            if (i === 1) {
                                that.range[animate ? "animate" : "css"]({
                                    width: (valPercent - lastValPercent) + "%"
                                }, {
                                    queue: false,
                                    duration: o.animate
                                });
                            }
                        } else {
                            if (i === 0) {
                                that.range.stop(1, 1)[animate ? "animate" : "css"]({
                                    bottom: (valPercent) + "%"
                                }, o.animate);
                            }
                            if (i === 1) {
                                that.range[animate ? "animate" : "css"]({
                                    height: (valPercent - lastValPercent) + "%"
                                }, {
                                    queue: false,
                                    duration: o.animate
                                });
                            }
                        }
                    }
                    lastValPercent = valPercent;
                });
            } else { //end if
                value = this.value();
                valueMin = this._valueMin();
                valueMax = this._valueMax();
                valPercent = (valueMax !== valueMin) ? (value - valueMin) / (valueMax - valueMin) * 100 : 0;

                _set[this.orientation === "horizontal" ? "left" : "bottom"] = valPercent + "%";
                this.handle.stop(1, 1)[animate ? "animate" : "css"](_set, o.animate);

                if (oRange === "min" && this.orientation === "horizontal") {
                    this.range.stop(1, 1)[animate ? "animate" : "css"]({
                        width: valPercent + "%"
                    }, o.animate);
                }
                if (oRange === "max" && this.orientation === "horizontal") {
                    this.range[animate ? "animate" : "css"]({
                        width: (100 - valPercent) + "%"
                    }, {
                        queue: false,
                        duration: o.animate
                    });
                }
                if (oRange === "min" && this.orientation === "vertical") {
                    this.range.stop(1, 1)[animate ? "animate" : "css"]({
                        height: valPercent + "%"
                    }, o.animate);
                }
                if (oRange === "max" && this.orientation === "vertical") {
                    this.range[animate ? "animate" : "css"]({
                        height: (100 - valPercent) + "%"
                    }, {
                        queue: false,
                        duration: o.animate
                    });
                }
            } //end else
        },

        _handleEvents: {
            /***
             * 键盘按键
             * @param event
             */
            keydown: function (event) {
                var allowed, curVal, newVal, step,
                    index = $(event.target).data("ui-slider-handle-index");

                switch (event.keyCode) {
                    case $.ui.keyCode.HOME:
                    case $.ui.keyCode.END:
                    case $.ui.keyCode.PAGE_UP:
                    case $.ui.keyCode.PAGE_DOWN:
                    case $.ui.keyCode.UP:
                    case $.ui.keyCode.RIGHT:
                    case $.ui.keyCode.DOWN:
                    case $.ui.keyCode.LEFT:
                        event.preventDefault();
                        if (!this._keySliding) {
                            this._keySliding = true;
                            $(event.target).addClass("ui-state-active");
                            allowed = this._start(event, index);
                            if (allowed === false) {
                                return;
                            }
                        }
                        break;
                }

                step = this.options.step;
                if (this.options.values && this.options.values.length) {
                    curVal = newVal = this.values(index);
                } else {
                    curVal = newVal = this.value();
                }

                switch (event.keyCode) {
                    case $.ui.keyCode.HOME:
                        newVal = this._valueMin();
                        break;
                    case $.ui.keyCode.END:
                        newVal = this._valueMax();
                        break;
                    case $.ui.keyCode.PAGE_UP:
                        newVal = this._trimAlignValue(curVal + ((this._valueMax() - this._valueMin()) / numPages));
                        break;
                    case $.ui.keyCode.PAGE_DOWN:
                        newVal = this._trimAlignValue(curVal - ((this._valueMax() - this._valueMin()) / numPages));
                        break;
                    case $.ui.keyCode.UP:
                    case $.ui.keyCode.RIGHT:
                        if (curVal === this._valueMax()) {
                            return;
                        }
                        newVal = this._trimAlignValue(curVal + step);
                        break;
                    case $.ui.keyCode.DOWN:
                    case $.ui.keyCode.LEFT:
                        if (curVal === this._valueMin()) {
                            return;
                        }
                        newVal = this._trimAlignValue(curVal - step);
                        break;
                }

                this._slide(event, index, newVal);
            }, //end keydown

            click: function (event) {
                event.preventDefault();
            },

            keyup: function (event) {
                var index = $(event.target).data("ui-slider-handle-index");

                if (this._keySliding) {
                    this._keySliding = false;
                    this._stop(event, index);
                    this._change(event, index);
                    $(event.target).removeClass("ui-state-active");
                }
            } //end keyup

        } // end _handleEvents Object

    });
}();

/*!
 * jQuery UI Spinner 1.11.4
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/spinner/
 */

/**
 * Spinner组件，可以通过鼠标滚轮上下滑动来增大和减小数值。
 * @class  fish.desktop.widget.Spinner
 * @extends fish.desktop.widget
 * Depends:
 *  jquery.ui.core.js
 *  jquery.ui.mouse.js
 *  jquery.ui.widget.js
 */

!(function () {

    function spinner_modifier(fn) {
        return function () {
            var previous = this.element.val();
            fn.apply(this, arguments);
            this._refresh();
            if (previous !== this.element.val()) {
                this._trigger("change");
            }
        };
    }

    $.widget("ui.spinner", {
        defaultElement: "<input>",

        SPIN_TEMPLATE: '<div class="input-group"></div>',
        BUTTON_TEMPLATE: "\n            <span class=\"input-group-addon btn-group-vertical btn-group-stepper\">\n                <button type=\"button\" class=\"btn btn-stepper js-increase\" tabindex=\"-1\">\n                    <span class=\"glyphicon glyphicon-triangle-top\"></span>\n                    <span class=\"sr-only\">Increase</span>\n                </button>\n                <button type=\"button\" class=\"btn btn-stepper\" tabindex=\"-1\">\n                    <span class=\"glyphicon glyphicon-triangle-bottom\"></span>\n                    <span class=\"sr-only\">Decrease</span>\n                </button>\n            </span>",

        options: {
            /**
             * @cfg {Boolean} incremental 控制当按钮持续按下时的行为,也可以是Function
             */
            incremental: true,
            /**
             * @cfg {Number} max 可选的最大数值
             */
            max: null,
            /**
             * @cfg {Number} min 可选的最小数值
             */
            min: null,
            /**
             * 当使用pageUp/pageDown方法上下换页时的步数
             * @type {Number} page
             */
            page: 10,
            /**
             * @cfg {Number} step 每次点击上下箭头时数值变化步长
             */
            step: 1,
            /**
             * 当spinner中的值发生改变，并且input失去焦点的时候触发。
             * @event change
             */
            change: null,
            /**
             * 在数值增大或者减小的过程中不断触发（如果需要判断数值在增大还是减小，可以使用当前的值和ui.value进行比较）。
             * 此事件可以取消，从而阻止数值发生变化。
             * 等事件名跟前缀名一致的时候,是不需要再加上前缀名的
             * <pre>
             *   $(this.element).on("spin",function(){});
             * </pre>
             * @event spin
             */
            spin: null,
            /**
             * 发生滚动时触发，可以取消，从而阻止数值发生变化。
             * @event start
             */
            start: null,
            /**
             * 在数值发生变化之后触发。
             * @event stop
             */
            stop: null
        },

        _create: function () {
            // handle string values that need to be parsed
            this._setOption("max", this.options.max);
            this._setOption("min", this.options.min);
            this._setOption("step", this.options.step);

            // Only format if there is a value, prevents the field from being marked
            // as invalid in Firefox, see #9573.
            if (this.value() !== "") {
                // Format the value, but don't constrain.
                this._value(this.element.val(), true);
            }

            this._draw();
            this._on(this._events);
            this._refresh();

            // turning off autocomplete prevents the browser from remembering the
            // value when navigating through history, so we re-enable autocomplete
            // if the page is unloaded before the widget is destroyed. #7790
            this._on(this.window, {
                beforeunload: function () {
                    this.element.removeAttr("autocomplete");
                }
            });

            // call formfield _create method
            this._super();
        },

        _getCreateOptions: function () {
            var options = {},
                element = this.element;

            $.each(["min", "max", "step"], function (i, option) {
                var value = element.attr(option);
                if (value !== undefined && value.length) {
                    options[option] = value;
                }
            });

            return options;
        },
        _validateHandler: function () {
            var $element = this.element,
                that = this,
                $warp;
            $element.on('spinstop.valid', function () {
                if (that._getValidFlag()) {
                    $element.isValid();
                }
            });
        },
        _events: {
            keydown: function (event) {
                if (this._start(event) && this._keydown(event)) {
                    event.preventDefault();
                }
            },
            keyup: "_stop",
            focus: function () {
                this.previous = this.element.val();
            },
            blur: function (event) {
                if (this.cancelBlur) {
                    delete this.cancelBlur;
                    return;
                }

                this._stop();
                this._refresh();
                if (this.previous !== this.element.val()) {
                    this._trigger("change", event);
                }
            },

            "mousewheel .form-control:focus": function (event, delta) {
                //#25
                if (!delta) {
                    return;
                }
                if (!this.spinning && !this._start(event)) {
                    return false;
                }

                this._spin((delta > 0 ? 1 : -1) * this.options.step, event);
                clearTimeout(this.mousewheelTimer);
                this.mousewheelTimer = this._delay(function () {
                    if (this.spinning) {
                        this._stop(event);
                    }
                }, 100);
                event.preventDefault();
            },

            "mousedown .btn-stepper": function (event) {
                if (this._start(event) === false) {
                    return;
                }

                this._repeat(null, $(event.currentTarget).hasClass("js-increase") ? 1 : -1, event);
            },

            "mouseup .btn-stepper": "_stop",

            "mouseenter .btn-stepper": function (event) {
                // button will add ui-state-active if mouse was down while mouseleave and kept down
                if (!$(event.currentTarget).hasClass("ui-state-active")) {
                    return;
                }

                if (this._start(event) === false) {
                    return false;
                }
                this._repeat(null, $(event.currentTarget).hasClass("js-increase") ? 1 : -1, event);
            },
            // TODO: do we really want to consider this a stop?
            // shouldn't we just stop the repeater and wait until mouseup before
            // we trigger the stop event?
            "mouseleave .btn-stepper": "_stop"
        },

        _draw: function () {
            var options = this.options,
                that = this;
            var uiSpinner = this.uiSpinner = this.element.attr("autocomplete", "off").wrap(that.SPIN_TEMPLATE).parent().append(that.BUTTON_TEMPLATE);

            this.element.attr("role", "spinbutton");

            this.buttons = uiSpinner.find(".btn-stepper");

            // disable spinner if element was already disabled
            if (this.options.disabled) {
                this.disable();
            }
        },

        _keydown: function (event) {
            var options = this.options,
                keyCode = $.ui.keyCode;

            switch (event.keyCode) {
                case keyCode.UP:
                    this._repeat(null, 1, event);
                    return true;
                case keyCode.DOWN:
                    this._repeat(null, -1, event);
                    return true;
                case keyCode.PAGE_UP:
                    this._repeat(null, options.page, event);
                    return true;
                case keyCode.PAGE_DOWN:
                    this._repeat(null, -options.page, event);
                    return true;
            }

            return false;
        },

        _start: function (event) {
            if (!this.spinning && this._trigger("start", event) === false) {
                return false;
            }

            if (!this.counter) {
                this.counter = 1;
            }
            this.spinning = true;
            return true;
        },

        _repeat: function (i, steps, event) {
            i = i || 500;

            clearTimeout(this.timer);
            this.timer = this._delay(function () {
                this._repeat(40, steps, event);
            }, i);

            this._spin(steps * this.options.step, event);
        },

        _spin: function (step, event) {
            var value = this.value() || 0;

            if (!this.counter) {
                this.counter = 1;
            }

            value = this._adjustValue(value + step * this._increment(this.counter));

            if (!this.spinning || this._trigger("spin", event, {
                value: value
            }) !== false) {
                this._value(value);
                this.counter++;
            }
        },

        _increment: function (i) {
            var incremental = this.options.incremental;

            if (incremental) {
                return $.isFunction(incremental) ? incremental(i) : Math.floor(i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1);
            }

            return 1;
        },

        _precision: function () {
            var precision = this._precisionOf(this.options.step);
            if (this.options.min !== null) {
                precision = Math.max(precision, this._precisionOf(this.options.min));
            }
            return precision;
        },

        _precisionOf: function (num) {
            var str = num.toString(),
                decimal = str.indexOf(".");
            return decimal === -1 ? 0 : str.length - decimal - 1;
        },

        _adjustValue: function (value) {
            var base,
                aboveMin,
                options = this.options;

            // make sure we're at a valid step
            // - find out where we are relative to the base (min or 0)
            base = options.min !== null ? options.min : 0;
            aboveMin = value - base;
            // - round to the nearest step
            aboveMin = Math.round(aboveMin / options.step) * options.step;
            // - rounding is based on 0, so adjust back to our base
            value = base + aboveMin;

            // fix precision from bad JS floating point math
            value = parseFloat(value.toFixed(this._precision()));

            // clamp the value
            if (options.max !== null && value > options.max) {
                return options.max;
            }
            if (options.min !== null && value < options.min) {
                return options.min;
            }

            return value;
        },

        _stop: function (event) {
            if (!this.spinning) {
                return;
            }

            clearTimeout(this.timer);
            clearTimeout(this.mousewheelTimer);
            this.counter = 0;
            this.spinning = false;
            this._trigger("stop", event);
        },

        _setOption: function (key, value) {
            if (key === "max" || key === "min" || key === "step") {
                if (typeof value === "string") {
                    value = this._parse(value);
                }
            }

            this._super(key, value);

            if (key === "disabled") {
                if (value) {
                    this.element.prop("disabled", true);
                    this.buttons.prop("disabled", true);
                } else {
                    this.element.prop("disabled", false);
                    this.buttons.prop("disabled", false);
                }
            }
        },

        _setOptions: spinner_modifier(function (options) {
            this._super(options);
            this._value(this.element.val());
        }),

        _parse: function (val) {
            if (typeof val === "string" && val !== "") {
                val = +val;
            }
            return val === "" || isNaN(val) ? null : val;
        },

        _refresh: function () {
            this.element.attr({
                "aria-valuemin": this.options.min,
                "aria-valuemax": this.options.max,
                // TODO: what should we do with values that can't be parsed?
                "aria-valuenow": this._parse(this.element.val())
            });
        },

        // update the value without triggering change
        _value: function (value, allowAny) {
            var parsed;
            if (value !== "") {
                parsed = this._parse(value);
                if (parsed !== null) {
                    if (!allowAny) {
                        parsed = this._adjustValue(parsed);
                    }
                }
            }
            this.element.val(parsed);
            this._refresh();
        },

        _destroy: function () {
            this.element.prop("disabled", false).removeAttr("autocomplete").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow");
            this.uiSpinner.replaceWith(this.element);
        },

        stepUp: spinner_modifier(function (steps) {
            this._stepUp(steps);
        }),
        _stepUp: function (steps) {
            if (this._start()) {
                this._spin((steps || 1) * this.options.step);
                this._stop();
            }
        },

        stepDown: spinner_modifier(function (steps) {
            this._stepDown(steps);
        }),
        _stepDown: function (steps) {
            if (this._start()) {
                this._spin((steps || 1) * -this.options.step);
                this._stop();
            }
        },

        pageUp: spinner_modifier(function (pages) {
            this._stepUp((pages || 1) * this.options.page);
        }),

        pageDown: spinner_modifier(function (pages) {
            this._stepDown((pages || 1) * this.options.page);
        }),

        /**
         * 取(设)值
         * @method value
         * @param newValue
         * @returns {*}
         */
        value: function (newVal) {
            if (!arguments.length) {
                return this._parse(this.element.val());
            }
            spinner_modifier(this._value).call(this, newVal);
        },

        widget: function () {
            return this.uiSpinner;
        }
    });
})();

/**
 * 可切换状态的按钮，从Bootstrap switch 3.0.2改造而来。
 * @class fish.desktop.widget.SwitchButton
 * @extends fish.desktop.widget
 * <pre>
 //初始化控件
 $(element).switchBtn(option);
 //调用控件上的方法
 $(element).switchBtn(method);
 * </pre>
 */
!function () {
    "use strict";

    var baseClass = "ui-switch"; //需要样式支持,此属性不允许修改

    $.widget("ui.switchbutton", $.ui.formfield, {
        options: {
            /**
             * 默认选中
             * @cfg {Boolean} state=true
             */
            state: true,
            /**
             * 控件大小,可选large,small,mini
             * @cfg {Number} size=null
             */
            size: null,
            /**
             * 状态改变时是否有动画效果
             * @cfg {Boolean} animate=true
             */
            animate: true,
            /**
             * 是否失效
             * @cfg {Boolean} disabled=false
             */
            disabled: false,
            /**
             * 是否只读
             * @cfg {Boolean} readonly=false
             */
            readonly: false,
            /**
             * true状态的颜色
             * @cfg {String} onColor=primary
             */
            onColor: "primary",
            /**
             * false状态的颜色
             * @cfg {String} offColor=default
             */
            offColor: "default",
            /**
             * true状态的文本显示
             * @cfg {String} onText=ON
             */
            onText: "ON",
            /**
             * false状态的文本显示
             * @cfg {String} offText=OFF
             */
            offText: "OFF",
            /**
             * 空白文本显示
             * @cfg {String} labelText=""
             */
            labelText: "&nbsp;",
            /**
             * 自定义样式
             * @cfg {String} customClass
             */
            customClass: '',
            /**
             * @cfg {Boolean} radioAllOff
             */
            radioAllOff: false,
            /**
             * 状态改变时触发的事件
             * @event change
             * @param {Object} e event对象
             * @param {boolean} state 是不是选中状态
             */
            change: $.noop
        },
        /*
         * 采用html的data属性,覆盖默认值;优先级仅次于初始化控件的options属性
         */
        _getCreateOptions: function () {
            return {
                state: this.element.is(":checked"),
                disabled: this.element.is(":disabled"),
                readonly: this.element.is("[readonly]")
            };
        },
        _create: function () {
            //最外层容器（第一层）
            this.$wrapper = $("<div>", {
                "class": (function (_this) { //采用自执行函数计算出wrapper需要的class
                    return function () {
                        var classes = [baseClass];
                        classes.push(baseClass + (_this.options.state ? "-on" : "-off"));
                        _this.options.size ? classes.push(baseClass + "-" + _this.options.size) : "";
                        _this.options.animate ? classes.push(baseClass + "-animate") : "";
                        _this.options.disabled ? classes.push(baseClass + "-disabled") : "";
                        _this.options.readonly ? classes.push(baseClass + "-readonly") : "";
                        classes.push(_this.options.customClass);
                        return classes.join(" ");
                    };
                })(this)()
            });

            //内部容器（第二层）
            this.$container = $("<div>", {
                "class": baseClass + "-container"
            });

            //三种状态
            this.$on = $("<span>", {
                html: this.options.onText,
                "class": baseClass + "-handle-on " + baseClass + "-" + this.options.onColor
            });
            this.$off = $("<span>", {
                html: this.options.offText,
                "class": baseClass + "-handle-off " + baseClass + "-" + this.options.offColor
            });
            this.$label = $("<label>", {
                html: this.options.labelText,
                "class": baseClass + "-label"
            });

            this.$container = this.element.wrap(this.$container).parent(); //wrap: 用... 包裹住
            this.$wrapper = this.$container.wrap(this.$wrapper).parent();
            this.element.before(this.$on).before(this.$label).before(this.$off).addClass('_formIngoreValue'); // ON &nbsp; OFF
            this._elementHandlers();
            this._handleHandlers();
            this._labelHandlers();

            // call formfield _create method
            this._super();
        },
        //属性取值设值全部通过父类option方法
        _setOption: function (key, value) {
            this["_" + key](value);
            this._super(key, value);
        },
        //form内置方法,根据HTML原值同步界面
        _formSetValue: function (value) {
            if(value === true) {
                this.element.prop("checked",true);
            } else if (value === false){
                this.element.prop("checked",false);
            } else {
                this.element.val(value);
            }
            this.element.trigger('change', true);
        },
        _onFormReset: function () {
            this.element.trigger('change', true);
        },
        /**
         * 设置选中与否
         * @method state
         * @param {boolean} value true or false 是否选中
         * @param {boolean} skip 是否跳过不触发事件
         * @returns {*}
         */
        state: function (value, skip) {
            if (this.options.disabled || this.options.readonly) {
                return;
            }
            if (this.options.state && !this.options.radioAllOff && this.element.is(':radio')) {
                return;
            }
            value = !!value;
            this.element.prop("checked", value).trigger('change', skip);
        },

        /**
         * 切换状态
         * @method toggle
         * @param {boolean} skip 是否跳过不触发事件
         * @returns {*}
         */
        toggle: function (skip) {
            if (this.options.disabled || this.options.readonly) {
                return;
            }
            this.element.prop("checked", !this.options.state).trigger('change', skip);
        },
        _state: function (value) {
            return this.state(value);
        },
        //这里的value与checkbox是否打勾没有必然关系;打勾时元素的value会提交到后台,不打勾时不会提交;
        //此控件在界面操作不会影响value值;
        //正常情况下checkbox赋值,会遍历元素, 如果元素的value在参数中出现,则此checkbox打勾;
        //TODO 待验证
        value: function (value) {
            if (value === undefined) {
                return this.element.val();
            } else {
                this.element.val(value);
            }
        },
        /*
         * 设置控件尺寸
         * @method size
         * @param value
         * @returns {*}
         */
        _size: function (value) {
            if (this.options.size != null) {
                this.$wrapper.removeClass(baseClass + "-" + this.options.size);
            }
            if (value) {
                this.$wrapper.addClass(baseClass + "-" + value);
            }
        },

        /*
         * 设置动画效果
         * @method animate
         * @param value
         * @returns {*}
         */
        _animate: function (value) {
            value = !!value;
            this.$wrapper[value ? "addClass" : "removeClass"](baseClass + "-animate");
        },

        /*
         * 设置disabled配置项
         * @method disabled
         * @param value
         * @returns {*}
         */
        _disabled: function (value) {
            value = !!value;
            this.$wrapper[value ? "addClass" : "removeClass"](baseClass + "-disabled");
            this.element.prop("disabled", value);
        },

        /*
         * 设置readonly配置项
         * @method readonly
         * @param value
         * @returns {*}
         */
        _readonly: function (value) {
            value = !!value;
            this.$wrapper[value ? "addClass" : "removeClass"](baseClass + "-readonly");
            this.element.prop("readonly", value);
        },

        /*
         * 设置onColor配置项
         * @method onColor
         * @param value
         * @returns {*}
         */
        _onColor: function (value) {
            var color;
            color = this.options.onColor;
            if (color != null) {
                this.$on.removeClass(baseClass + "-" + color);
            }
            this.$on.addClass(baseClass + "-" + value);
        },

        /*
         * 设置offColor配置项
         * @method offColor
         * @param value
         * @returns {*}
         */
        _offColor: function (value) {
            var color;
            color = this.options.offColor;
            if (color != null) {
                this.$off.removeClass(baseClass + "-" + color);
            }
            this.$off.addClass(baseClass + "-" + value);
        },

        /*
         * 设置onText配置项
         * @method onText
         * @param value
         * @returns {*}
         */
        _onText: function (value) {
            this.$on.html(value);
        },

        /*
         * 设置offText配置项
         * @method offText
         * @param value
         * @returns {*}
         */
        _offText: function (value) {
            this.$off.html(value);
        },

        /*
         * 设置labelText配置项
         * @method labelText
         * @param value
         * @returns {*}
         */
        _labelText: function (value) {
            this.$label.html(value);
        },

        /*
         * 销毁
         * @method  destroy
         * @returns {*}
         */
        _destroy: function () {
            // var $form;
            // $form = this.element.closest("form");
            // if ($form.length) {
            //     $form.off(".switchBtn").removeData("ui-switch");
            // }
            this.$container.children().not(this.element).remove();
            this.element.unwrap().unwrap(); //.removeData("ui-switch");//.off(".bootstrapSwitch")
            this.element.off(); //绑定在此对象上事件必须要删除
        },

        _elementHandlers: function () {
            var _this = this;
            this._on({
                "change": function (e, skip) {
                    var checked;
                    e.preventDefault();
                    e.stopImmediatePropagation();
                    checked = _this.element.is(":checked");
                    if (checked === _this.options.state) {
                        return;
                    }
                    _this.options.state = checked;
                    _this.$wrapper.removeClass(checked ? baseClass + "-off" : baseClass + "-on").addClass(checked ? baseClass + "-on" : baseClass + "-off");
                    if (!skip) {
                        if (_this.element.is(":radio")) {
                            $("[name='" + (_this.element.attr('name')) + "']").not(_this.element).prop("checked", false).trigger("change", true);
                        }
                        _this._trigger("change", e, [checked]);
                    }
                },

                /**
                 * 聚焦事件
                 * @event focus
                 */
                "focus": function (e) {
                    if (_this.options.disabled) return; //fix bug //如果灰化了则不能添加样式
                    // e.preventDefault();
                    return _this.$wrapper.addClass(baseClass + "-focused");
                },

                /**
                 * 失去焦点事件
                 * @event blur
                 */
                "blur": function (e) {
                    if (_this.options.disabled) return; //fix bug //如果灰化了则不能添加样式
                    // e.preventDefault();
                    return _this.$wrapper.removeClass(baseClass + "-focused");
                },
                /**
                 *左右键
                 *@event keydown
                 */
                "keydown": function (e) {
                    if (!e.which || _this.options.disabled || _this.options.readonly) {
                        return;
                    }
                    switch (e.which) {
                        case 37: //left
                            e.preventDefault();
                            e.stopImmediatePropagation();
                            return _this.state(false);
                        case 39: //right
                            e.preventDefault();
                            e.stopImmediatePropagation();
                            return _this.state(true);
                    }
                }
            });
        },

        _handleHandlers: function () {
            var _this = this;
            this.$on.on("click", function (e) {
                e.preventDefault();
                e.stopPropagation();
                _this.state(false); //2015/3/31 IE8 由于该控件目前不可见、未启用或其类型不允许 因此无法将焦点移向它
                return _this.options.disabled ? "" : _this.element.focus();
            });
            this.$off.on("click", function (e) {
                e.preventDefault();
                e.stopPropagation();
                _this.state(true);
                return _this.options.disabled ? "" : _this.element.focus();
            });
        },

        _labelHandlers: function () {
            var _this = this;

            this._on(this.$label, {
                /**
                 * 拖拽事件
                 * @event mousemove
                 */
                "mousemove": function (e) {
                    var left, pageX, percent, right;
                    if (!_this.isLabelDragging) {
                        return;
                    }
                    e.preventDefault();
                    _this.isLabelDragged = true;
                    pageX = e.pageX || e.originalEvent.touches[0].pageX;
                    percent = ((pageX - _this.$wrapper.offset().left) / _this.$wrapper.width()) * 100;
                    left = 25;
                    right = 75;
                    if (_this.options.animate) {
                        _this.$wrapper.removeClass(baseClass + "-animate");
                    }
                    if (percent < left) {
                        percent = left;
                    } else if (percent > right) {
                        percent = right;
                    }
                    _this.$container.css("margin-left", "" + (percent - right) + "%");
                },

                /**
                 * 鼠标点下
                 * @event mousedown
                 */
                "mousedown": function (e) {
                    if (_this.isLabelDragging || _this.options.disabled || _this.options.readonly) {
                        return;
                    }
                    e.preventDefault();
                    _this.isLabelDragging = true;
                    return _this.element.focus();
                },

                /**
                 * mouseup时进行动画切换
                 * @event mouseup
                 */
                "mouseup": function (e) {
                    if (!_this.isLabelDragging) {
                        return;
                    }
                    e.preventDefault();
                    if (_this.isLabelDragged) { //如果是拖动
                        _this.isLabelDragged = false;
                        _this.state(parseInt(_this.$container.css("margin-left"), 10) > -(_this.$container.width() / 6));
                        if (_this.options.animate) {
                            _this.$wrapper.addClass(baseClass + "-animate");
                        }
                        _this.$container.css("margin-left", "");

                    } else {
                        _this.state(!_this.options.state); //切换状态
                    }
                    return _this.isLabelDragging = false;
                },

                /**
                 * 鼠标离开事件
                 * @event mouseleave
                 */
                "mouseleave": function (e) {
                    return _this.$label.trigger("mouseup");
                }
            });
        }
    });
}();

/**
 * 标签页控件
 * @class fish.desktop.widget.Tabs
 * @extends fish.desktop.widget
 */

/*!
 * jQuery UI Tabs 1.11.4
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/tabs/
 */

!function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('fish.tabs', factory);
    } else {
        factory();
    }
}(function () {

    $.widget("ui.tabs", {
        delay: 300,
        options: {
            /**
             * 设置页签高度是否固定，默认是false；设置为true时，需要指定ui-tabs的高度
             * @cfg {Boolean} fixedHeight=false
             */
            fixedHeight: false,
            /**
             * 设置第几个tab为当前活动项。通过option方法改变选中的页签时,active参数可以是panel的id
             * @cfg {Number} active
             */
            active: null,
            /**
             * 是否可以折叠。
             * @cfg {Boolean} collapsible=false
             */
            collapsible: false,
            /**
             * 页签切换的事件,默认是点击;可以配置成mouseover
             * @cfg {String} event="click"
             */
            event: "click",
            /**
             * 页签panel的高度设置
             * "auto": All panels will be set to the height of the tallest panel.
             * "fill": Expand to the available height based on the tabs' parent height.
             * "content": Each panel will be only as tall as its content.
             * @cfg {String} heightStyle="content"
             */
            heightStyle: "content",
            /**
             * 标签页被激活时的回调函数。
             * @cfg {Function} activate
             */
            activate: null,
            /**
             * 配合activate回调函数使用,如果配置为true,则每个页签被active时只触发一次
             * @cfg {Boolean} activateOnce
             */
            activateOnce: false,
            /**
             * 标签页在激活之前的回调函数。
             * @cfg {Function} beforeActivate
             */
            beforeActivate: null,
            /**
             * 标签页在被删除之前的回调函数。
             * @cfg {Function} beforeRemove
             */
            beforeRemove: null,
            /**
             * 标签页在被删除后的回调函数。
             * @cfg {Function} remove
             */
            remove: null,
            /**
             * 标签页在被添加之后的回调函数。
             * @cfg {Function} add
             */
            add: null,
            /**
             * 分页设置,当页签数量过多时,超过一行需要设置paging属性
             * @cfg {Object} paging=false
             */
            paging: false,
            hide: null,
            show: null,
            /**
             * 在窗口发生变化的时候，是不是派发事件通知内部成员进行autoResizable操作
             * @cfg {Boolean} autoResizable=true
             */
            autoResizable: false,
            /**
             * 设置tab页签的导航栏位置，可以设置成top，bottom，left，right，默认值是top
             * @cfg {String} placement=top
             */
            placement: "top"
        },

        _isLocal: (function () {
            var rhash = /#.*$/;

            return function (anchor) {
                var anchorUrl, locationUrl;

                // support: IE7
                // IE7 doesn't normalize the href property when set via script (#9317)
                anchor = anchor.cloneNode(false);

                anchorUrl = anchor.href.replace(rhash, "");
                locationUrl = location.href.replace(rhash, "");

                // decoding may throw an error if the URL isn't UTF-8 (#9518)
                try {
                    anchorUrl = decodeURIComponent(anchorUrl);
                } catch (error) {
                }
                try {
                    locationUrl = decodeURIComponent(locationUrl);
                } catch (error) {
                }

                return anchor.hash.length > 1 && anchorUrl === locationUrl;
            };
        })(),

        _create: function () {
            var that = this,
                options = this.options;

            this.running = false;

            this._tabsId = fish.uniqueId('tabs-');

            this.element.addClass("ui-tabs")
                .toggleClass("ui-tabs-collapsible", options.collapsible);
            if (options.placement === 'bottom') {
                var $ul = this.element.children('ul');
                this.element.append($ul.clone(true));
                $ul.remove();
            }
            if (options.placement === 'left') {
                this.element.addClass('ui-tabs-left');
            }
            if (options.placement === 'right') {
                this.element.addClass('ui-tabs-right');
            }
            this._processTabs();


            options.active = this._initialActive();
            // Take disabling tabs via class attribute from HTML
            // into account and update option properly.
            if ($.isArray(options.disabled)) {
                options.disabled = $.unique(options.disabled.concat(
                    $.map(this.tabs.filter(".ui-tabs-disabled"), function (li) {
                        return that.tabs.index(li);
                    })
                )).sort();
            }

            this.active = $();
            this._refresh();
            this._activate(options.active, false);

            if (options.canClose) {
                this._bindCloseEvent(true);
            }
        },

        _initialActive: function () {
            var active = this.options.active,
                collapsible = this.options.collapsible,
                locationHash = location.hash.substring(1);

            if (active === null) {
                // check the fragment identifier in the URL
                if (locationHash) {
                    this.tabs.each(function (i, tab) {
                        if ($(tab).attr("aria-controls") === locationHash) {
                            active = i;
                            return false;
                        }
                    });
                }

                // check for a tab marked active via a class
                if (active === null) {
                    active = this.tabs.index(this.tabs.filter(".ui-tabs-active"));
                }

                // no active tab, set to false
                if (active === null || active === -1) {
                    active = this.tabs.length ? 0 : false;
                }
            }

            // handle numbers: negative, out of range
            if (active !== false) {
                active = this.tabs.index(this.tabs.eq(active));
                if (active === -1) {
                    active = collapsible ? false : 0;
                }
            }

            // don't allow collapsible: false and active: false
            if (!collapsible && active === false && this.anchors.length) {
                active = 0;
            }

            return active;
        },

        _getCreateEventData: function () {
            return {
                tab: this.active,
                panel: !this.active.length ? $() : this._getPanelForTab(this.active)
            };
        },

        _tabKeydown: function (event) {
            var focusedTab = $(this.document[0].activeElement).closest("li"),
                selectedIndex = this.tabs.index(focusedTab),
                goingForward = true;

            if (this._handlePageNav(event)) {
                return;
            }

            switch (event.keyCode) {
                case $.ui.keyCode.RIGHT:
                case $.ui.keyCode.DOWN:
                    selectedIndex++;
                    break;
                case $.ui.keyCode.UP:
                case $.ui.keyCode.LEFT:
                    goingForward = false;
                    selectedIndex--;
                    break;
                case $.ui.keyCode.END:
                    selectedIndex = this.anchors.length - 1;
                    break;
                case $.ui.keyCode.HOME:
                    selectedIndex = 0;
                    break;
                case $.ui.keyCode.SPACE:
                    // Activate only, no collapsing
                    event.preventDefault();
                    clearTimeout(this.activating);
                    this._activate(selectedIndex);
                    return;
                case $.ui.keyCode.ENTER:
                    // Toggle (cancel delayed activation, allow collapsing)
                    event.preventDefault();
                    clearTimeout(this.activating);
                    // Determine if we should collapse or activate
                    this._activate(selectedIndex === this.options.active ? false : selectedIndex);
                    return;
                default:
                    return;
            }

            // Focus the appropriate tab, based on which key was pressed
            event.preventDefault();
            clearTimeout(this.activating);
            selectedIndex = this._focusNextTab(selectedIndex, goingForward);

            // Navigating with control/command key will prevent automatic activation
            if (!event.ctrlKey && !event.metaKey) {

                // Update aria-selected immediately so that AT think the tab is already selected.
                // Otherwise AT may confuse the user by stating that they need to activate the tab,
                // but the tab will already be activated by the time the announcement finishes.
                focusedTab.attr("aria-selected", "false");
                this.tabs.eq(selectedIndex).attr("aria-selected", "true");

                this.activating = this._delay(function () {
                    this.option("active", selectedIndex);
                }, this.delay);
            }
        },

        _panelKeydown: function (event) {
            if (this._handlePageNav(event)) {
                return;
            }

            // Ctrl+up moves focus to the current tab
            if (event.ctrlKey && event.keyCode === $.ui.keyCode.UP) {
                event.preventDefault();
                this.active.focus();
            }
        },

        // Alt+page up/down moves focus to the previous/next tab (and activates)
        _handlePageNav: function (event) {
            if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP) {
                this._activate(this._focusNextTab(this.options.active - 1, false));
                return true;
            }
            if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN) {
                this._activate(this._focusNextTab(this.options.active + 1, true));
                return true;
            }
        },

        _findNextTab: function (index, goingForward) {
            var lastTabIndex = this.tabs.length - 1;

            function constrain() {
                if (index > lastTabIndex) {
                    index = 0;
                }
                if (index < 0) {
                    index = lastTabIndex;
                }
                return index;
            }

            while ($.inArray(constrain(), this.options.disabled) !== -1) {
                index = goingForward ? index + 1 : index - 1;
            }

            return index;
        },

        _focusNextTab: function (index, goingForward) {
            index = this._findNextTab(index, goingForward);
            this.tabs.eq(index).focus();
            return index;
        },

        _setOption: function (key, value) {
            if (key === "active") {
                value = this._getIndex(value); // 支持id
                if (value === false) return this;
                // _activate() will handle invalid values and update this.options
                this._activate(value, false);
                return;
            }

            if (key === "canClose") {
                this._bindCloseEvent(value);
            }

            if (key === "disabled") {
                // don't use the widget factory's disabled handling
                this._setupDisabled(value);
                return;
            }

            this._super(key, value);

            if (key === "collapsible") {
                this.element.toggleClass("ui-tabs-collapsible", value);
                // Setting collapsible: false while collapsed; open first panel
                if (!value && this.options.active === false) {
                    this._activate(0);
                }
            }

            if (key === "event") {
                this._setupEvents(value);
            }

            if (key === "heightStyle") {
                this._setupHeightStyle(value);
            }
        },

        _sanitizeSelector: function (hash) {
            return hash ? hash.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&") : "";
        },

        /**
         * 刷新tab页，在手动添加tab页之后可以调用此方法刷新。
         * @method refresh
         */
        refresh: function () {
            var options = this.options,
                lis = this.tablist.children(":has(a[href])");

            // get disabled tabs from class attribute from HTML
            // this will get converted to a boolean if needed in _refresh()
            options.disabled = $.map(lis.filter(".ui-tabs-disabled"), function (tab) {
                return lis.index(tab);
            });

            this._processTabs();

            // was collapsed or no tabs
            if (options.active === false || !this.anchors.length) {
                options.active = false;
                this.active = $();
                // was active, but active tab is gone
            } else if (this.active.length && !$.contains(this.tablist[0], this.active[0])) {
                // all remaining tabs are disabled
                if (this.tabs.length === options.disabled.length) {
                    options.active = false;
                    this.active = $();
                    // activate previous tab
                } else {
                    this._activate(this._findNextTab(Math.max(0, options.active - 1), false));
                }
                // was active, active tab still exists
            } else {
                // make sure active index is correct
                options.active = this.tabs.index(this.active);
            }

            this._refresh();
        },

        _refresh: function () {

            this._setupDisabled(this.options.disabled);
            this._setupEvents(this.options.event);
            this._setupHeightStyle(this.options.heightStyle);

            this.tabs.not(this.active).attr({
                "aria-selected": "false",
                "aria-expanded": "false",
                tabIndex: -1
            });
            this.panels.not(this._getPanelForTab(this.active))
                .hide()
                .attr({
                    "aria-expanded": "false",
                    "aria-hidden": "true"
                });

            // Make sure one tab is in the tab order
            if (!this.active.length) {
                this.tabs.eq(0).attr("tabIndex", 0);
            } else {
                this.active
                    .addClass("ui-tabs-active")
                    .attr({
                        "aria-selected": "true",
                        "aria-expanded": "true",
                        tabIndex: 0
                    });
                this._getPanelForTab(this.active)
                    .show()
                    .attr({
                        "aria-hidden": "false"
                    });
            }
            if (this.options.paging) this._paging();

            if (this.options.autoResizable && this.options.paging) {
                var eventName = 'debouncedresize.' + this._tabsId;
                $(window).off(eventName).on(eventName, $.proxy(function () {

                    //优化只有在宽度发生变化时才修改
                    if (this.lastTablistWidth != this.tablist.width()) {
                        this.lastTablistWidth = this.tablist.width();
                        this._paging();
                    }

                }, this));
            }
        },

        _processTabs: function () {
            var that = this,
                prevTabs = this.tabs,
                prevAnchors = this.anchors,
                prevPanels = this.panels;

            this.tablist = this._getList()
                .addClass("ui-tabs-nav")
                .attr("role", "tablist")

                // Prevent users from focusing disabled tabs via click
                .delegate("> li", "mousedown" + this.eventNamespace, function (event) {
                    if ($(this).is(".ui-state-disabled")) {
                        event.preventDefault();
                    }
                })

                // support: IE <9
                // Preventing the default action in mousedown doesn't prevent IE
                // from focusing the element, so if the anchor gets focused, blur.
                // We don't have to worry about focusing the previously focused
                // element since clicking on a non-focusable element should focus
                // the body anyway.
                .delegate(".ui-tabs-anchor", "focus" + this.eventNamespace, function () {
                    if ($(this).closest("li").is(".ui-state-disabled")) {
                        this.blur();
                    }
                });

            this.lastTablistWidth = this.tablist.width();

            this.tabs = this.tablist.find("> li:has(a)").not('.ui-tabs-paging-prev,.ui-tabs-paging-next') //:has(a[href])
                .addClass("ui-state-default")
                .attr({
                    role: "tab",
                    tabIndex: -1
                });

            this.anchors = this.tabs.map(function () {
                    return $("a", this)[0];
                })
                .addClass("ui-tabs-anchor")
                .attr({
                    role: "presentation",
                    tabIndex: -1
                });

            this.panels = $();

            this.anchors.each(function (i, anchor) {
                var selector, panel, panelId,
                    anchorId = $(anchor).uniqueId().attr("id"),
                    tab = $(anchor).closest("li"),
                    originalAriaControls = tab.attr("aria-controls");

                // inline tab
                if (that._isLocal(anchor)) {
                    selector = anchor.hash;
                    panelId = selector.substring(1);
                    panel = that.element.find(that._sanitizeSelector(selector));
                } else { //没有hash的时候,
                    panel = that.element.children("div:eq(" + i + ")");
                    panelId = panel.attr("id");
                    if (!panelId) {
                        panelId = tab.attr("aria-controls") || $({}).uniqueId()[0].id;
                        panel.attr("id", panelId);
                    }
                    selector = "#" + panelId;
                    $(anchor).attr("href", selector);
                    panel.attr("aria-live", "polite");
                }

                if (panel.length) {
                    that.panels = that.panels.add(panel);
                }
                if (originalAriaControls) {
                    tab.data("ui-tabs-aria-controls", originalAriaControls);
                }
                tab.attr({
                    "aria-controls": panelId,
                    "aria-labelledby": anchorId
                });
                panel.attr("aria-labelledby", anchorId);
            });

            this.panels
                .addClass("ui-tabs-panel")
                .attr("role", "tabpanel");

            // Avoid memory leaks (#10056)
            if (prevTabs) {
                this._off(prevTabs.not(this.tabs));
                this._off(prevAnchors.not(this.anchors));
                this._off(prevPanels.not(this.panels));
            }
            if (this.options.fixedHeight) {
                this.panels.addClass('ui-tabs-panel-absolute');
            }

        },

        // allow overriding how to find the list for rare usage scenarios (#7715)
        _getList: function () {
            return this.tablist || this.element.children("ol,ul").eq(0);
        },

        _setupDisabled: function (disabled) {
            if ($.isArray(disabled)) {
                if (!disabled.length) {
                    disabled = false;
                } else if (disabled.length === this.anchors.length) {
                    disabled = true;
                }
            }

            // disable tabs
            for (var i = 0, li;
                 (li = this.tabs[i]); i++) {
                if (disabled === true || $.inArray(i, disabled) !== -1) {
                    $(li)
                        .addClass("ui-tabs-disabled")
                        .attr("aria-disabled", "true");
                } else {
                    $(li)
                        .removeClass("ui-tabs-disabled")
                        .removeAttr("aria-disabled");
                }
            }

            this.options.disabled = disabled;
        },

        _setupEvents: function (event) {
            var events = {};
            if (event) {
                $.each(event.split(" "), function (index, eventName) {
                    events[eventName] = "_eventHandler";
                });
            }

            this._off(this.anchors.add(this.tabs).add(this.panels));
            // Always prevent the default action, even when disabled
            this._on(true, this.anchors, {
                click: function (event) {
                    event.preventDefault();
                }
            });
            this._on(this.anchors, events);
            this._on(this.tabs, {
                keydown: "_tabKeydown"
            });
            this._on(this.panels, {
                keydown: "_panelKeydown"
            });

            this._focusable(this.tabs);
            this._hoverable(this.tabs);
        },

        _setupHeightStyle: function (heightStyle) {
            var maxHeight,
                parent = this.element.parent();

            if (heightStyle === "fill") {
                maxHeight = parent.height();
                maxHeight -= this.element.outerHeight() - this.element.height();

                this.element.siblings(":visible").each(function () {
                    var elem = $(this),
                        position = elem.css("position");

                    if (position === "absolute" || position === "fixed") {
                        return;
                    }
                    maxHeight -= elem.outerHeight(true);
                });

                this.element.children().not(this.panels).each(function () {
                    maxHeight -= $(this).outerHeight(true);
                });

                this.panels.each(function () {
                        $(this).height(Math.max(0, maxHeight -
                            $(this).innerHeight() + $(this).height()));
                    })
                    .css("overflow", "auto");
            } else if (heightStyle === "auto") {
                maxHeight = 0;
                this.panels.each(function () {
                    maxHeight = Math.max(maxHeight, $(this).height("").height());
                }).height(maxHeight);
            }
        },

        _eventHandler: function (event, autoResize) {
            var options = this.options,
                active = this.active,
                anchor = $(event.currentTarget),
                tab = anchor.closest("li"),
                clickedIsActive = tab[0] === active[0],
                collapsing = clickedIsActive && options.collapsible,
                toShow = collapsing ? $() : this._getPanelForTab(tab),
                toHide = !active.length ? $() : this._getPanelForTab(active),
                eventData = {
                    oldTab: active,
                    oldPanel: toHide,
                    newTab: collapsing ? $() : tab,
                    newPanel: toShow
                };

            event.preventDefault();

            if (tab.hasClass("ui-tabs-disabled") ||
                    // can't switch durning an animation
                this.running ||
                    // click on active header, but not collapsible
                (clickedIsActive && !options.collapsible) ||
                    // allow canceling activation
                (this._trigger("beforeActivate", event, eventData) === false)) {
                return;
            }

            options.active = collapsing ? false : this.tabs.index(tab);

            this.active = clickedIsActive ? $() : tab;

            if (!toHide.length && !toShow.length) {
                $.error("jQuery UI Tabs: Mismatching fragment identifier.");
            }

            this._toggle(event, eventData, autoResize);
        },

        // handles show/hide for selecting tabs
        _toggle: function (event, eventData, autoResize) {
            var that = this,
                toShow = eventData.newPanel,
                toHide = eventData.oldPanel;

            this.running = true;

            function complete() {
                that.running = false;
                //activateOnce为true时,newPanel只加载一次
                if (!that.options.activateOnce || toShow.data("loaded") !== true) {
                    that._trigger("activate", event, eventData);
                    toShow.data("loaded", true);
                }

                if (that.options.autoResizable && autoResize !== false) {
                    $(window).trigger("debouncedresize");
                }
            }

            function show() {
                eventData.newTab.closest("li").addClass("ui-tabs-active");

                if (toShow.length && that.options.show) {
                    that._show(toShow, that.options.show, complete);
                } else {
                    toShow.show();
                    complete();
                }
            }

            // start out by hiding, then showing, then completing
            if (toHide.length && this.options.hide) {
                this._hide(toHide, this.options.hide, function () {
                    eventData.oldTab.closest("li").removeClass("ui-tabs-active");
                    show();
                });
            } else {
                eventData.oldTab.closest("li").removeClass("ui-tabs-active");
                toHide.hide();
                show();
            }

            toHide.attr("aria-hidden", "true");
            eventData.oldTab.attr({
                "aria-selected": "false",
                "aria-expanded": "false"
            });
            // If we're switching tabs, remove the old tab from the tab order.
            // If we're opening from collapsed state, remove the previous tab from the tab order.
            // If we're collapsing, then keep the collapsing tab in the tab order.
            if (toShow.length && toHide.length) {
                eventData.oldTab.attr("tabIndex", -1);
            } else if (toShow.length) {
                this.tabs.filter(function () {
                        return $(this).attr("tabIndex") === 0;
                    })
                    .attr("tabIndex", -1);
            }

            toShow.attr("aria-hidden", "false");
            eventData.newTab.attr({
                "aria-selected": "true",
                "aria-expanded": "true",
                tabIndex: 0
            });
        },

        _activate: function (index, autoResize) {
            var anchor,
                active = this._findActive(index);

            // trying to activate the already active panel
            if (active[0] === this.active[0]) {
                return;
            }

            // trying to collapse, simulate a click on the current active header
            if (!active.length) {
                active = this.active;
            }

            anchor = active.find(".ui-tabs-anchor")[0];
            this._eventHandler({
                target: anchor,
                currentTarget: anchor,
                preventDefault: $.noop
            }, autoResize);

            //add paging
            if (this.options.paging) {
                var that = this,
                    currentPage = that.options.currentPage,
                    pages = that.options.pages;

                // find the new page based on index of the tab selected
                for (var i in pages) {
                    var start = pages[i].start;
                    var end = pages[i].end;
                    if (index >= start && index < end) {
                        // if the the tab selected is not within the currentPage of tabs, then change pages
                        if (i != currentPage) {
                            that.tabs.hide().slice(start, end).show();

                            that._delay(function () {
                                that.active.focus();
                            });

                            currentPage = parseInt(i);
                            if (currentPage == 0) {
                                that._enableButton('next');
                                if (!that.options.cycle && start <= 0) that._disableButton('prev');
                            } else {
                                that._enableButton('prev');
                                if (!that.options.cycle && end >= that.tabs.length) that._disableButton('next');
                            }
                        }
                        break;
                    }
                }
                that.options.currentPage = currentPage;
            }

        },

        _findActive: function (index) {
            return index === false ? $() : this.tabs.eq(index);
        },

        _getIndex: function (index) {
            // meta-function to give users option to provide a href string instead of a numerical index.
            if (typeof index === "string") {
                index = this.anchors.index(this.anchors.filter("[href$='" + index + "']"));
                if (index === -1) return false;
            }

            return index;
        },

        _destroy: function () {

            this.element.removeClass("ui-tabs ui-tabs-collapsible").removeClass('ui-tabs-left ui-tabs-right');

            this.tablist
                .removeClass("ui-tabs-nav")
                .removeAttr("role");

            this.anchors
                .removeClass("ui-tabs-anchor")
                .removeAttr("role")
                .removeAttr("tabIndex")
                .removeUniqueId();

            this.tablist.unbind(this.eventNamespace);

            this.tabs.add(this.panels).each(function () {
                if ($.data(this, "ui-tabs-destroy")) {
                    $(this).remove();
                } else {
                    $(this)
                        .removeClass("ui-tabs-hidden ui-tabs-disabled ui-tabs-active ui-tabs-panel")
                        .removeAttr("tabIndex")
                        .removeAttr("aria-live")
                        .removeAttr("aria-busy")
                        .removeAttr("aria-selected")
                        .removeAttr("aria-labelledby")
                        .removeAttr("aria-hidden")
                        .removeAttr("aria-expanded")
                        .removeAttr("role");
                }
            });

            this.tabs.each(function () {
                var li = $(this),
                    prev = li.data("ui-tabs-aria-controls");
                if (prev) {
                    li
                        .attr("aria-controls", prev)
                        .removeData("ui-tabs-aria-controls");
                } else {
                    li.removeAttr("aria-controls");
                }
            });

            this.panels.show();

            if (this.options.heightStyle !== "content") {
                this.panels.css("height", "");
            }

            if (this.options.autoResizable && this.options.paging) {
                $(window).off('debouncedresize.' + this._tabsId);
            }
        },

        /**
         * 启用指定的tab页。
         * @param  {number} index 启用第几个标签页，从0开始计算。
         */
        enable: function (index) {
            var disabled = this.options.disabled;
            if (disabled === false) {
                return;
            }

            if (index === undefined) {
                disabled = false;
            } else {
                index = this._getIndex(index);
                if (index === false) return;
                if ($.isArray(disabled)) {
                    disabled = $.map(disabled, function (num) {
                        return num !== index ? num : null;
                    });
                } else {
                    disabled = $.map(this.tabs, function (li, num) {
                        return num !== index ? num : null;
                    });
                }
            }
            this._setupDisabled(disabled);
        },

        /**
         * 禁用指定的tab页。
         * @param  {number} index 启用第几个标签页，从0开始计算。
         */
        disable: function (index) {
            var disabled = this.options.disabled;
            if (disabled === true) {
                return;
            }

            if (index === undefined) {
                disabled = true;
            } else {
                index = this._getIndex(index);
                if (index === false) return;
                if ($.inArray(index, disabled) !== -1) {
                    return;
                }
                if ($.isArray(disabled)) {
                    disabled = $.merge([index], disabled).sort();
                } else {
                    disabled = [index];
                }
            }
            this._setupDisabled(disabled);
        },

        _getPanelForTab: function (tab) {
            var id = $(tab).attr("aria-controls");
            return this.element.find(this._sanitizeSelector("#" + id));
        }
    });

    // add/remove methods and events
    $.widget("ui.tabs", $.ui.tabs, {
        options: {
            // add: null,
            // remove: null,
            /**
             * @cfg {Boolean} canClose
             * 标签页是否可以关闭。
             */
            canClose: false,
            /**
             * @cfg {String} tabTemplate
             * tab标签的HTML模板。
             */
            tabTemplate: "<li><a href='#{href}'><span>#{label}</span></a></li>",
            /**
             * @cfg {String} tabCanCloseTemplate
             * 可关闭的tab标签的HTML模板。
             */
            tabCanCloseTemplate: "<li><a href='#{href}'>#{label}</a><button type='button' class='ui-tabs-close close' role='button'><span aria-hidden='true' title='close'>&times;<span class='sr-only'>Close</span></span></button></li>",
            /**
             * @cfg {String} panelTemplate
             * 标签页内容面板HTML模板。
             */
            panelTemplate: "<div></div>"
        },

        _ui: function (tab, panel) {
            return {
                tab: tab,
                panel: panel,
                index: this.anchors.index(tab)
            };
        },

        _createPanel: function (id) {
            return $(this.options.panelTemplate)
                .attr("id", id);
            // .addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" )
            // .data( "ui-tabs-destroy", true );
        },

        /**
         * 添加标签页。
         * @param {Object} o 配置项对象，此对象可以包含id, label, index ,content,active属性。
         */
        add: function (o) { //id, label, index ,content,active
            o = o || {};
            var index = o.index,
                id = o.id,
                label = o.label;
            //tabContentHtml = o.content;

            if (index === undefined) {
                index = this.anchors.length;
            }
            id = id || $({}).uniqueId()[0].id;
            label = label || id;

            if (this.options.paging) this._pageReset();

            var doInsertAfter, panel,
                options = this.options,
                li = $((options.canClose ? options.tabCanCloseTemplate : options.tabTemplate)
                    .replace(/#\{href\}/g, "#" + id)
                    .replace(/#\{label\}/g, label));
            // id = !url.indexOf( "#" ) ?
            //  url.replace( "#", "" ) :
            //  this._tabId( li );

            // li.addClass( "ui-state-default ui-corner-top" ).data( "ui-tabs-destroy", true );
            // li.attr( "aria-controls", id );

            doInsertAfter = index >= this.tabs.length;

            // try to find an existing element before creating a new one
            panel = this.element.find("#" + id);
            if (!panel.length) {
                panel = this._createPanel(id);
                panel.append(o.content);
                if (doInsertAfter) {
                    if (index > 0) {
                        panel.insertAfter(this.panels.eq(-1));
                    } else {
                        panel.appendTo(this.element);
                    }
                } else {
                    panel.insertBefore(this.panels[index]);
                }
            }
            // panel.addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" ).hide();
            panel.hide();

            if (doInsertAfter) {
                li.appendTo(this.tablist);
            } else {
                li.insertBefore(this.tabs[index]);
            }

            options.disabled = $.map(options.disabled, function (n) {
                return n >= index ? ++n : n;
            });

            this.refresh();

            if (this.tabs.length === 1 && options.active === false) {
                this._activate(0, false);
            }

            if (o.active === true) {
                this._activate(index, false);
            }

            this._trigger("add", null, this._ui(this.anchors[index], this.panels[index]));
            return this;
        },
        /**
         * 删除指定的标签页。
         * @param {number} index 序号，从0开始。
         */
        remove: function (index) {

            if (this.options.paging) this._pageReset();

            index = this._getIndex(index);
            if (index === false) return this;
            var options = this.options,
                tab = this.tabs.eq(index),
                panel = this._getPanelForTab(tab);

            if (this._trigger("beforeRemove", null, this._ui(tab, panel)) === false)
                return;

            tab.remove();
            panel.remove();

            // If selected tab was removed focus tab to the right or
            // in case the last tab was removed the tab to the left.
            // We check for more than 2 tabs, because if there are only 2,
            // then when we remove this tab, there will only be one tab left
            // so we don't need to detect which tab to activate.
            if (tab.hasClass("ui-tabs-active") && this.anchors.length > 2) {
                this._activate(index + (index + 1 < this.anchors.length ? 1 : -1));
            }

            options.disabled = $.map(
                $.grep(options.disabled, function (n) {
                    return n !== index;
                }),
                function (n) {
                    return n >= index ? --n : n;
                });

            this.refresh();

            this._trigger("remove", null, this._ui(tab.find("a")[0], panel[0]));
            return this;
        },
        /**
         * 隐藏指定的标签页。
         * @param  {Object} index 序号或id
         * @return {Object} tab对象
         */
        hideTab: function (index) {
            if (this.options.paging) this._pageReset();

            index = this._getIndex(index);
            if (index === false) return this;

            var options = this.options,
                tab = this.tabs.eq(index),
                panel = this._getPanelForTab(tab);

            if (this._trigger("beforeHide", null, this._ui(tab, panel)) === false)
                return;

            tab.removeClass("ui-tabs-active");
            tab.addClass("ui-tabs-hidden");
            tab.hide();
            panel.hide();

            // If selected tab was removed focus tab to the right or
            // in case the last tab was removed the tab to the left.
            // We check for more than 2 tabs, because if there are only 2,
            // then when we remove this tab, there will only be one tab left
            // so we don't need to detect which tab to activate.
            if (tab.hasClass("ui-tabs-active") && this.anchors.length > 2) {
                this._activate(index + (index + 1 < this.anchors.length ? 1 : -1));
            }

            options.disabled = $.map(
                $.grep(options.disabled, function (n) {
                    return n !== index;
                }),
                function (n) {
                    return n >= index ? --n : n;
                });

            this.refresh();

            this._trigger("hide", null, this._ui(tab.find("a")[0], panel[0]));
            return this;
        },
        /**
         * 显示指定的标签页。
         * @param  {Object} index   序号或id
         * @param  {Boolean} active 是否立即设置为当前活动的tab
         * @return {Object} tab对象
         */
        showTab: function (index, active) {
            if (this.options.paging) this._pageReset();

            index = this._getIndex(index);
            if (index === false) return this;

            var options = this.options,
                tab = this.tabs.eq(index),
                panel = this._getPanelForTab(tab);

            if (this._trigger("beforeShow", null, this._ui(tab, panel)) === false)
                return;

            tab.removeClass("ui-tabs-hidden");
            tab.show();
            panel.show();

            if (active) {
                tab.addClass("ui-tabs-active");
                this._activate(index);
            }

            options.disabled = $.map(
                $.grep(options.disabled, function (n) {
                    return n !== index;
                }),
                function (n) {
                    return n >= index ? --n : n;
                });

            this.refresh();

            this._trigger("show", null, this._ui(tab.find("a")[0], panel[0]));
            return this;
        },
        /**
         * 获取所有的tab页签。
         * @param  {Boolean} includeHidden   是否包含隐藏的tab，默认为true
         * @param  {Boolean} includeDisabled 是否包含已禁用的tab，默认为true
         * @return {Array} 所有的Tab页签对象
         */
        getAllTabs: function (includeHidden, includeDisabled) {
            if (includeHidden !== true) {
                includeHidden = false;
            }
            if (includeDisabled !== true) {
                includeDisabled = false;
            }
            var tabs = this.tabs;
            var result = [];
            tabs.each(function (index, el) {
                var li = $(this);
                result.push(li);
            });
            //排除隐藏的
            if (!includeHidden) {
                $.each(result, function (index, el) {
                    if ($(el).hasClass("ui-tabs-hidden")) {
                        result[index] = null;
                    }
                });
            }
            //排除禁用的
            if (!includeDisabled) {
                $.each(result, function (index, el) {
                    if ($(el).hasClass("ui-tabs-disabled")) {
                        result[index] = null;
                    }
                });
            }
            result = fish.compact(result);
            return result;
        },
        /**
         * 刷新指定的标签页。
         * @param {number} index 序号，从0开始。
         * @param {Object} o 参数对象。
         */
        update: function (index, o) {
            index = this._getIndex(index);
            if (index === false) return this;

            //options = this.options,
            var tab = this.tabs.eq(index);
            //panel = this._getPanelForTab(tab);

            //#515
            //先找自定义的,再找默认<a>
            var $span = tab.find(">a>span");
            if (!$span.length) {
                $span = tab.find(">a");
            }
            o.label && $span.text(o.label);

            if (o.cssprop !== undefined) {
                if (typeof o.cssprop === "string") {
                    $span.addClass(o.cssprop);
                } else if (typeof o.cssprop === "object") {
                    $span.css(o.cssprop);
                }
            }
            return this;
        },
        /**
         * 设置指定标签页的位置。
         * @param {number} index 指定页签序号,从0开始。
         * @param {number} positon 序号，从0开始。
         */
        setPosition: function (index, position) {
            index = this._getIndex(index);
            if (index === false) return this;

            position = this._getIndex(position);
            if (position === false) return this;

            if (position >= this.anchors.length) {
                position = this.anchors.length - 1;
            }
            var $tab = $(this.anchors[index]).parent();

            if (position < index) {
                $(this.anchors[position]).parent().before($tab);
            } else {
                $(this.anchors[position]).parent().after($tab);
            }

            this.refresh();

            return this;
        },
        _bindCloseEvent: function (flag) {
            var that = this;
            if (that.hasBindCloseEvent) return;
            this.element.on("click", "button.ui-tabs-close", function () {
                var index = that.tabs.index($(this).closest("li"));
                that.remove(index);
            });
            that.hasBindCloseEvent = true;
        }
    });


    //jquery-ui-tabs-paging.js
    $.widget("ui.tabs", $.ui.tabs, {

        // change styling of next/prev buttons when disabled
        _disableButton: function (direction) {
            $('.ui-tabs-paging-' + direction, this.element).addClass('ui-tabs-paging-disabled');
        },
        _enableButton: function (direction) {
            $('.ui-tabs-paging-' + direction, this.element).removeClass('ui-tabs-paging-disabled');
        },

        // remove all paging related changes and events
        _pageReset: function () {
            // remove buttons
            $('.ui-tabs-paging-next', this.element).remove();
            $('.ui-tabs-paging-prev', this.element).remove();
            // show all tabs
            this.tabs.show();

        },

        _paging: function () {
            var opts = {
                tabsPerPage: 0, // Max number of tabs to display at one time.  0 automatically sizing. //此参数不公开
                nextButton: '&#187;', // Text displayed for next button.
                prevButton: '&#171;', // Text displayed for previous button.
                follow: true, // When clicking next button, automatically select first.  When clicking previous button automatically select last.
                cycle: false // When at end of list, next button returns to first page.  When at beginning of list previous button goes to end of list.
            };

            opts = $.extend(opts, this.options.paging);

            var that = this, containerWidth;
            //initialized = false,
            // currentPage,
            // buttonWidth, containerWidth, allTabsWidth, tabWidths,
            //maxPageWidth, pages, resizeTimer = null,
            //windowHeight, windowWidth;

            that._pageReset();
            //windowHeight = $(window).height();
            //windowWidth = $(window).width();
            var allTabsWidth = 0,
                currentPage = 0,
                maxPageWidth = 0,
                buttonWidth = 0,
                pages = [],
                tabWidths = [],
                selectedTabWidths = [];

            containerWidth = that.tablist.width(); // 使用ul内容宽度，不用element.width();

            //遍历li，获取选中和未选中状态下的每个tab的宽度
            var maxDiff = 0; //选中状态下和未选中状态下的最大差异值
            that.tabs.each(function (i) {
                if (i == that.options.active) {
                    selectedTabWidths[i] = $(this).outerWidth(true); //{ margin: true }
                    tabWidths[i] = that.tabs.eq(i).removeClass('ui-tabs-selected').outerWidth(true); //{ margin: true }
                    that.tabs.eq(i).addClass('ui-tabs-selected');
                    maxDiff = Math.min(maxDiff, Math.abs(selectedTabWidths[i] - tabWidths[i]));
                    allTabsWidth += tabWidths[i];
                } else {
                    tabWidths[i] = $(this).outerWidth(true); //{ margin: true }
                    selectedTabWidths[i] = that.tabs.eq(i).addClass('ui-tabs-selected').outerWidth(true); //{ margin: true }
                    that.tabs.eq(i).removeClass('ui-tabs-selected');
                    maxDiff = Math.max(maxDiff, Math.abs(selectedTabWidths[i] - tabWidths[i]));
                    allTabsWidth += tabWidths[i];
                }
            });

            // fix padding issues with buttons
            // TODO determine a better way to handle this
            // allTabsWidth += maxDiff + ($.browser.msie?4:0) + 9;
            allTabsWidth += fish.getScrollBarWidth() + maxDiff + ($.support.boxSizingReliable ? 0 : 4); // + 9

            // if the width of all tables is greater than the container's width, calculate the pages
            if (allTabsWidth > containerWidth) {
                // create next button
                var li = $('<li></li>')
                    .addClass('ui-tabs-paging-next')
                    .append($('<a href="#"></a>')
                        .click(function () {
                            if ($(this).closest('li').hasClass('ui-tabs-paging-disabled')) return false;
                            that._page('next');
                            return false;
                        })
                        .html(opts.nextButton));

                that.tabs.eq(that.tabs.length - 1).after(li);
                buttonWidth = li.outerWidth(true); //{ margin: true }


                // create prev button
                li = $('<li></li>')
                    .addClass('ui-tabs-paging-prev')
                    .append($('<a href="#"></a>')
                        .click(function () {
                            if ($(this).closest('li').hasClass('ui-tabs-paging-disabled')) return false;
                            that._page('prev');
                            return false;
                        })
                        .html(opts.prevButton));

                that.tabs.eq(0).before(li);
                buttonWidth += li.outerWidth(true); //{ margin: true }
                // TODO determine fix for padding issues to next button
                //              buttonWidth += 19;
                var pageIndex = 0,
                    pageWidth = 0,
                    maxTabPadding = 0;
                // start calculating pageWidths
                for (var i = 0; i < tabWidths.length; i++) {
                    // if first tab of page or selected tab's padding larger than the current max, set the maxTabPadding
                    if (pageWidth == 0 || selectedTabWidths[i] - tabWidths[i] > maxTabPadding)
                        maxTabPadding = (selectedTabWidths[i] - tabWidths[i]);
                    // if first tab of page, initialize pages variable for page
                    if (pages[pageIndex] == null) {
                        pages[pageIndex] = {
                            start: i
                        };
                    } else if ((i > 0 && (i % opts.tabsPerPage) == 0) || (tabWidths[i] + pageWidth + buttonWidth) > containerWidth) { // + 12
                        if ((pageWidth + maxTabPadding) > maxPageWidth)
                            maxPageWidth = (pageWidth + maxTabPadding);
                        pageIndex++;
                        pages[pageIndex] = {
                            start: i
                        };
                        pageWidth = 0;
                    }
                    pages[pageIndex].end = i + 1;
                    pageWidth += tabWidths[i];
                    if (i == that.options.active) currentPage = pageIndex;
                }
                if ((pageWidth + maxTabPadding) > maxPageWidth)
                    maxPageWidth = (pageWidth + maxTabPadding);

                // hide all tabs then show tabs for current page
                that.tabs.hide().slice(pages[currentPage].start, pages[currentPage].end).show();
                if (currentPage == (pages.length - 1) && !opts.cycle)
                    that._disableButton('next');
                if (currentPage == 0 && !opts.cycle)
                    that._disableButton('prev');
            } else {
                that._pageReset();
            }

            that.options.currentPage = currentPage;
            that.options.pages = pages; //如果有整体切换TAB，可以使用这个
            that.options.cycle = opts.cycle;
            that.options.follow = opts.follow;

        },
        // handles paging forward and backward
        _page: function (direction) {
            var that = this,
                currentPage = that.options.currentPage,
                pages = that.options.pages;

            currentPage = currentPage + (direction == 'prev' ? -1 : 1);
            if ((direction == 'prev' && currentPage < 0 && that.options.cycle) ||
                (direction == 'next' && currentPage >= pages.length && !that.options.cycle))
                currentPage = pages.length - 1;
            else if ((direction == 'prev' && currentPage < 0) ||
                (direction == 'next' && currentPage >= pages.length && that.options.cycle))
                currentPage = 0;
            var start = pages[currentPage].start;
            var end = pages[currentPage].end;
            that.tabs.hide().slice(start, end).show();
            if (direction == 'prev') {
                that._enableButton('next');
                if (that.options.follow && (that.options.active < start || that.options.active > (end - 1))) that._activate(end - 1);
                if (!that.options.cycle && start <= 0) that._disableButton('prev');
            } else {
                that._enableButton('prev');
                if (that.options.follow && (that.options.active < start || that.options.active > (end - 1))) that._activate(start);
                if (!that.options.cycle && end >= that.tabs.length) that._disableButton('next');
            }
            that.options.currentPage = currentPage;
        }
    });
});

/**
 * @class fish.desktop.fish
 */
!(function () {
    var TRANSITION_DURATION = 150,
        template = fish.compile('\n            <div class="alert {{type}} alert-dismissible fade in" role="alert">\n                <button type="button" class="close" data-dismiss="alert" aria-label="Close">\n                    <span aria-hidden="true">&times;</span>\n                </button>\n                {{message}}\n            </div>'),
        $toast;

    function appendToToast($el) {
        if (!$toast) {
            $toast = $('<div class="alert-toast"></div>').appendTo(document.body);
        }

        $toast.append($el);
    }

    $.widget('ui.toast', {
        options: {
            duration: 2000,
            autoClose: false
        },

        _create: function () {
            this._on({
                'click [data-dismiss="alert"]': 'close'
            });

            if (this.options.autoClose) this.timer = setTimeout($.proxy(this.close, this), this.options.duration);
        },

        close: function (e) {
            var $el = this.element;

            if (this.timer) clearTimeout(this.timer);

            if (e) e.preventDefault();

            $el.removeClass('in');

            function removeElement() {
                $el.remove();
            }

            $.support.transition && $el.hasClass('fade') ? $el.one('bsTransitionEnd', removeElement).emulateTransitionEnd(TRANSITION_DURATION) : removeElement();
        }
    });

    /**
     * @method toast
     * 页面头部提示
     *
     * @param type 提示类型，值为success/info/warn/error
     * @param message 提示信息
     */
    fish.toast = function (type, message) {
        if (type === 'warn') type = 'warning';else if (type === 'error') type = 'danger';

        appendToToast($(template({
            type: 'alert-' + type,
            message: message
        })).toast({
            autoClose: type !== 'danger'
        }));
    };

    /**
     * 页面头部提示
     * @method showToast
     * @param {Object} arguments
     * <pre>
     *   fish.toast(options);
     * </pre>
     * @deprecated 请使用更简短的fish.toast替代
     */
    fish.showToast = fish.toast;
})();

/**
 * @class fish.desktop.widget.Validator
 * 校验控件,可单独校验元素,可针对form、带ui-validator样式的元素进行校验;注意,只针对当前为生效状态的元素起作用
 *
 * 使用组件
 *
 * 1. 通过JS传参，无需改变DOM。
 *
 * <pre>
 * $('form[name="register"]').validator({
 *    stopOnError: false,
 *    timely: false,
 *    fields: {
 *        'email': 'required;email;'
 *    }
 * });
 * </pre>
 *
 * 2. 通过在DOM上绑定属性，无需js调用。
 *
 * 在字段上绑定规则，参见公共定义-规则
 *
 * 如果要改变默认参数，可以在form上以json字符串形式绑定参数data-validator-option，参见公共定义-表单
 *
 * 如果参数全部在DOM元素上面传递，那么js就不需要初始化了
 *
 *
 * 内置规则（rules）
 *
 * 公共定义：
 *
 * 1. 数值范围使用波浪线（~）表示，例如：6~（大于等于6）、~6（小于等于6）、6~16（6到16）
 *
 * 2. 大小比较使用 lt（小于）、lte（小于等于）、gt（大于）、gte（大于等于）、eq（等于）表示
 *
 * 3. 如果某个规则可以带参数，参数要使用方括号（[]）或者圆括号（()）括起来，取决于你的习惯
 *
 * |规则|参数|描述|例子
 * |:-----|:------|:------|:------|
 * |required||必填项|required        //不能为空<br>required(xxx)   //满足xxx规则，才验证required<br>required(not, xxx) //如果值为空，或者xxx也认为是空
 * |integer|可选，标识|整数|integer         //请输入整数<br>integer[*]      //请输入整数<br>integer[+]      //请输入正整数<br>integer[+0]     //请输入正整数或0<br>integer[-]      //请输入负整数<br>integer[-0]     //请输入负整数或0<br>
 * |match|可选，标识<br>必选, 另一字段名|与另一字段匹配<br>match[name]; 用于验证两个字段的值必须相同<br>match[condition, name]; 用于比较两个字段大小<br/>match[condition, name, date]; 第三个参数设置为date，表示使用日期值比较，默认是进行数值比较|match[password]  //与password字段的值匹配<br>match[lt, money]  //小于money字段的值<br>match[lte, money] //小于等于money字段的值<br>match[eq, money]  //等于money字段的值匹配<br>match[neq, money]  //不能等于money字段的值<br>match[gte, money] //大于等于money字段的值<br>match[gt, money]  //大于money字段的值
 * |range|必选，范围值|数值范围|range[0~99]      //0到99的整数<br>range[~99]       //小于或等于99的整数<br>range[0~]        //大于或等于0的整数
 * |length|必选，范围值<br>可选，是否计算真实长度|验证字符长度|length[6~16]       //6-16个字符<br>length[6]          //6个字符<br>length[~6]         //小于6个字符<br>length[6~]         //大于6个字符<br>length[~6, true]   //小于6个字符,全角字符计算双字符
 * |checked|可选，范围值|对于checkbox或radio<br>必须要选中多少项|checked             //必填，相当于required<br>checked[3~5]        //请选择3到5项<br>checked[3]          //请选择3项<br>checked[~5]         //请选择少于5项<br>checked[3~]         //请选择大于3项
 */

!function () {
    "use strict";

    // bootstrap错误样式
    var errorClass = 'has-error';

    // Rule class
    function Rules(obj, context) {
        var that = context ? context === true ? this : context : Rules.prototype;

        if (!_.isObject(obj)) {
            return;
        }

        for (var k in obj) {
            that[k] = getRule(obj[k]);
        }
    }

    // Rule converted factory
    function getRule(fn) {
        switch ($.type(fn)) {
            case 'function':
                return fn;
            case 'array':
                return function (el) {
                    return fn[0].test(el.value) || fn[1] || false;
                };
            case 'regexp':
                return function (el) {
                    return fn.test(el.value);
                };
        }
    }

    // Message class
    function Messages(obj, context) {
        var that = context ? context === true ? this : context : Messages.prototype;

        if (!_.isObject(obj)) {
            return;
        }

        for (var k in obj) {
            if (!obj[k]) {
                return;
            }
            that[k] = obj[k];
        }
    }

    // Built-in rules (global)
    new Rules({
        required: function (element, params) {
            var val = $.trim(element.value),
                isValid = true;

            if (params) {
                if (params.length === 1) {
                    if (!val && !this.test(element, params[0])) {
                        $(element).attr('aria-required', null);
                        return null;
                    } else {
                        $(element).attr('aria-required', true);
                    }
                } else if (params[0] === 'not') {
                    $.map(params.slice(1), function (v) {
                        if (val === $.trim(v)) {
                            isValid = false;
                        }
                    });
                }
            }
            return isValid && !!val;
        },
        digits: function (element) {
            var val = $.trim(element.value);
            return !isNaN(val) || this.messages.digits;
        },
        integer: function (element, params) {
            var re, z = '0|',
                p = '[1-9]\\d*',
                key = params ? params[0] : '*';

            switch (key) {
                case '+':
                    re = p;
                    break;
                case '-':
                    re = '-' + p;
                    break;
                case '+0':
                    re = z + p;
                    break;
                case '-0':
                    re = z + '-' + p;
                    break;
                default:
                    re = z + '-?' + p;
            }
            re = '^(?:' + re + ')$';
            return new RegExp(re).test(element.value) || this.messages.integer[key];
        },

        'float': function (element, params) {
            var reg, key = params ? params[0] : '*';
            switch (key) {
                case '+':
                    reg = /^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$/;
                    break;
                case '+0':
                    reg = /^\d+(\.\d+)?$/;
                    break;
                case '-':
                    reg = /^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$/;
                    break;
                case '-0':
                    reg = /^((-\d+(\.\d+)?)|(0+(\.0+)?))$/;
                    break;
                default:
                    reg = /^(-?\d+)(\.\d+)?$/;
                    break;
            }

            return reg.test(element.value) || this.messages['float'][key];
        },

        match: function (element, params, field) {
            if (!params) {
                return;
            }
            var me = this,
                a, b,
                key, msg, type = 'eq',
                selector2, elem2, field2, dateType = false;
            if (params.length === 1) {
                key = params[0];
            } else {
                type = params[0];
                key = params[1];
            }
            selector2 = key.charAt(0) === '#' ? key : ':input[name="' + key + '"]';
            elem2 = me.element.find(selector2)[0];
            // If the compared field is not exist
            if (!elem2) {
                return;
            }
            field2 = me.getField(elem2);

            if (params[2] === 'date') {
                a = $(element).datetimepicker('value');
                b = $(elem2).datetimepicker('value');
                dateType = true;
            } else {
                a = element.value;
                b = elem2.value;
            }

            if (!field._match) {
                me.element.on('valid.field.validator', selector2, function () {
                    $(element).trigger('validate');
                });
                field._match = field2._match = 1;
            }

            // If one field are blank
            if (a === "" || b === "") {
                return null;
            }

            if (isNaN(a) || isNaN(b)) {
                //只要有一个不是数值,或者第三个参数是date类型,都作为字符串比较
            } else {
                a = +a;
                b = +b;
            }
            msg = dateType ? (me.messages.match['date' + type] || me.messages.match[type]) : me.messages.match[type];
            msg = msg.replace('{1}', me._getDisplay(element, field2.display || key));

            switch (type) {
                case 'lt':
                    return (a < b) || msg;
                case 'lte':
                    return (a <= b) || msg;
                case 'gte':
                    return (a >= b) || msg;
                case 'gt':
                    return (a > b) || msg;
                case 'neq':
                    return (a !== b) || msg;
                default:
                    return (a === b) || msg;
            }
        },

        range: function (element, params) {
            return this.getRangeMsg(+element.value, params, 'range');
        },

        checked: function (element, params, field) {
            if (!checkable(element)) {
                return;
            }

            var me = this,
                elem, count;

            count = me.element.find('input[name="' + element.name + '"]').filter(function () {
                var el = this;
                if (!elem && checkable(el)) {
                    elem = el;
                }
                return !el.disabled && el.checked && $(el).is(':visible');
            }).length;

            if (params) {
                return me.getRangeMsg(count, params, 'checked');
            } else {
                return !!count || getDataMsg(elem, field, '') || me.messages.required;
            }
        },

        length: function (element, params) {
            var value = element.value,
                len = utf8Length(value);

            return this.getRangeMsg(len, params, 'length', (params[1] ? '_2' : ''));
        },

        filter: function (element, params) {
            element.value = element.value.replace(params ? (new RegExp("[" + params[0] + "]", "gm")) : /<|>/g, '');
        }
    });

    function utf8Length(str) {
        var m = encodeURIComponent(str).match(/%[89ABab]/g);
        return str.length + (m ? m.length : 0);
    }

    // Convert space-separated keys to jQuery selector
    function keys2selector(keys) {
        var selector = '';

        $.map(keys.split(' '), function (k) {
            selector += ',' + (k.charAt(0) === '#' ? k : '[name="' + k + '"]');
        });

        return selector.substring(1);
    }

    // Get instance by an element
    function getInstance(el) {
        var wrap;

        if (!el || !el.tagName) {
            return;
        }
        switch (el.tagName) {
            case 'INPUT':
            case 'SELECT':
            case 'TEXTAREA':
            case 'BUTTON':
            case 'FIELDSET':
                wrap = el.form || $(el).closest('.ui-validator');
                break;
            case 'FORM':
                wrap = el;
                break;
            default:
                wrap = $(el).closest('.ui-validator');
        }

        return $(wrap).data('ui-validator') || $(wrap)['validator']().data('ui-validator');
    }

    // Get custom rules on the node
    function getDataRule(el, method) {
        var fn = $.trim($(el).attr('data-rule-' + method));

        if (!fn) {
            return;
        }
        fn = (new Function("return " + fn))();
        if (fn) {
            return getRule(fn);
        }
    }

    // Get custom messages on the node
    function getDataMsg(el, field, ret, m) {
        var msg = field.msg,
            item = field._r,
            $el = $(el);

        if (_.isObject(msg)) {
            msg = msg[item];
        }
        if (!_.isString(msg)) {
            msg = $el.attr('data-msg-' + item) || $el.attr('data-msg') || ret || (m ? _.isString(m) ? m : m[item] : '');
        }

        return msg;
    }

    // Check whether the element is checkbox or radio
    function checkable(el) {
        return el.tagName === 'INPUT' && (el.type === 'checkbox' || el.type === 'radio');
    }

    // A faster selector than ":input:not(:submit,:button,:reset,:image)"
    $.expr[":"].verifiable = function (elem) {
        var name = elem.nodeName.toLowerCase();

        return (name === 'input' && !({
            submit: 1,
            button: 1,
            reset: 1,
            image: 1
        })[elem.type] || name === 'select' || name === 'textarea');
    };

    $.widget('ui.validator', {
        options: {
            /**
             * @cfg {number} timely
             * 是否启用实时验证，可用值:
             * 0 || false: 关闭实时验证，将只在提交表单的时候进行验证
             * 1 || true: 启用实时验证，在字段失去焦点后验证该字段
             * 2: 启用实时验证，在输入的同时验证该字段
             */
            timely: 1,
            /**
             * @cfg {String} ignore
             * 指定需要忽略验证的元素的jQuery选择器。
             *
             * 注意：如果表单里有combobox/multiselect时则不好使用<br/>
             * 因为它们会隐藏原本的元素，导致不进行校验<br/>
             * 如果忽略某些元素不校验，不要配置校验规则即可<br/>
             * 或者是在某种情况下需要校验，则通过设置 {@link #setField} 方法来处理
             *
             * 示例：
             * <pre>
             * //任何不可见的元素，都不作验证
             * $('form').validator({
             *     ignore: ':hidden'
             * });
             * //id为tab2下的所有子元素都不作验证
             * $('form').validator({
             *     ignore: '#tab2'
             * });
             * //动态改变要忽略验证的元素
             * $('form').data('validator').options.ignore = '#tab1';
             * </pre>
             */
            ignore: '',
            /**
             * @cfg {Boolean} focusCleanup
             * 是否在输入框获得焦点的时候清除消息，默认清除。
             */
            focusCleanup: true,
            /**
             * @cfg {Boolean} focusInvalid
             * 是否自动让第一个出错的输入框获得的焦点，默认不获得。
             */
            focusInvalid: false,
            /**
             * @cfg {String} placement
             * 错误提示的位置,同tooltip,分为上下左右左上左下右上右下八个方向
             */
            placement: 'top-left',
            /**
             * @cfg {String|Function} display
             * 自定义消息中{0}的显示替换名称
             *
             * 示例：
             * <pre>
             * $('form').validator({
             *     messages: {
             *         required: "{0}不能为空"
             *     },
             *     fields: {
             *         username: "required"
             *     },
             *     display: function(element){
             *         return $(element).prev('label').text();
             *     }
             * });
             * </pre>
             */
            display: '',
            /**
             * @cfg {Object} messages
             * 自定义用于当前实例的规则消息
             *
             * 示例：
             * <pre>
             * $('form').validator({
             *     messages: {
             *         required: "请填写该字段",
             *         email: "请检查邮箱格式",
             *     },
             *     fields: {
             *         'email': 'required;email;'
             *     }
             * });
             * </pre>
             */
            messages: {},
            /**
             * @cfg {Object} rules
             * 自定义用于当前实例的规则，支持两种定义方式
             *
             * 示例：
             * <pre>
             * $('form').validator({
             *     rules: {
             *         //自定义验证函数，具有最大的灵活性，没有什么不能验证
             *         myRule: function(el, param, field){
             *            //do something...
             *         },
             *         //简单配置正则及错误消息，及其方便
             *         another: [/^\w*$/, '请输入字母或下划线']
             *     },
             *     fields: {
             *         //调用前面定义的两个规则
             *         foo: 'required; myRule[param]; another'
             *     }
             * });
             * </pre>
             */
            rules: {},
            /**
             * @cfg {Object} fields
             * 待验证的字段集合，键为字段的name值或者"#"+字段id。有两种用法：
             *
             * 1, 快捷字符串传参："name": "display: rule1;rule2;...rulen"，其中“display:”可选，用于替换错误消息的字段名字
             *
             * 2, 对象传参：
             * <pre>
             * fields: {
             *     //name字段使用了所有支持的参数
             *     name: {
             *          rule: "姓名: required; rule2; rule3",
             *          msg: {
             *              required: "请填写姓名",
             *              rule2: "xxxx",
             *              rule3: "xxxx"
             *          },
             *          timely: false
             *     },
             *     //email和mobile字段用最简单的方式传递字段规则
             *     email: "required; email",
             *     mobile: "mobile"
             * }
             * </pre>
             */
            fields: {},
            /**
             * @cfg {Array} groups
             * 组合多个字段，验证其中的每一个字段都会首先触发callback回调
             */
            groups: [],
            /**
             * @cfg {Function} invalid
             * @param {Array} errors 错误消息数组
             * 表单验证失败后的回调
             */
            invalid: null,
            /**
             * @cfg {Function} valid
             * @param {Element} form 表单DOM
             * 表单验证成功后的回调，有一个参数：当前表单对象
             */
            valid: $.noop
        },

        _create: function () {
            var me = this;

            if (this.element.is('form')) {
                this.element.attr('novalidate', 'novalidate');
            } else {
                this.element.addClass('ui-validator');
            }

            this.rules = new Rules(this.options.rules, true);
            this.messages = new Messages(this.options.messages, true);

            this.elements = {};
            this.errors = {};
            this.fields = {};

            this._initFields(this.options.fields);

            // Initialization group verification
            if ($.isArray(this.options.groups)) {
                $.map(this.options.groups, function (obj) {
                    if (!_.isString(obj.fields) || !$.isFunction(obj.callback)) {
                        return null;
                    }
                    obj.$elems = me.element.find(keys2selector(obj.fields));
                    $.map(obj.fields.split(' '), function (k) {
                        me.fields[k] = me.fields[k] || {};
                        me.fields[k].group = obj;
                    });
                });
            }

            me.msgOpt = {
                type: 'error',
                pos: 'bottom'
            };

            this._on({
                'focusin :verifiable': '_focusin',
                'click :verifiable': '_focusin',
                'focusout :verifiable': '_focusout',
                'validate :verifiable': '_focusout'
            });

            if (this.options.timely >= 2) {
                this._on({
                    'keyup :verifiable': '_focusout',
                    'paste :verifiable': '_focusout',
                    'click :radio,:checkbox': '_focusout',
                    'change select,input[type="file"]': '_focusout'
                });
            }
        },

        _initFields: function (fields) {
            var me = this;

            // Processing field information
            this._processFields(fields);

            // Parsing DOM rules
            me.element.find(':verifiable').each(function () {
                me._parse(this);
            });
        },

        _processFields: function (fields) {
            var me = this;

            if (_.isObject(fields)) {
                $.each(fields, function (k, v) {
                    // delete the field from settings
                    if (v === null) {
                        var el = me.elements[k];
                        if (el) {
                            me._resetElement(el, true);
                        }
                        delete me.fields[k];
                    } else {
                        me.fields[k] = _.isString(v) ? {
                            rule: v
                        } : v;
                    }
                });
            }
        },

        // Parsing a field
        _parse: function (el) {
            var me = this,
                $el = $(el),
                field,
                key = el.name,
                dataRule = $el.attr('data-rule');

            dataRule && $el.attr('data-rule', null);

            // if the field has passed the key as id mode, or it doesn't has a name
            if (el.id && ('#' + el.id in me.fields) || !el.name) {
                key = '#' + el.id;
            }
            // doesn't verify a field that has neither id nor name
            if (!key) {
                return;
            }

            field = me.fields[key] || {};
            field.key = key;
            field.rule = field.rule || dataRule || '';
            if (!field.rule) {
                return;
            }

            if (field.rule.match(/checked/)) {//match
                field.must = true;
            }
            if (field.rule.indexOf('required') !== -1) {
                field.required = true;
                $el.attr('aria-required', true);
            }
            if ('timely' in field && !field.timely || !me.options.timely) {
                $el.attr('notimely', true);
            }
            if (_.isString(field.target)) {
                $el.attr('data-target', field.target);
            }
            if (_.isString(field.tip)) {
                $el.attr('data-tip', field.tip);
            }

            me.fields[key] = me._parseRule(field);
        },

        // Parsing field rules
        _parseRule: function (field) {
            var arr = /(?:([^:;\(\[]*):)?(.*)/.exec(field.rule),
                opt = this.options;

            if (!arr) {
                return;
            }
            // current rule index
            field._i = 0;
            if (arr[1]) {
                field.display = arr[1];
            }
            if (!field.display && opt.display) {
                field.display = opt.display;
            }
            if (arr[2]) {
                field.rules = [];
                arr[2].replace(/(!?)\s?(\w+)(?:\[\s*(.*?\]?)\s*\]|\(\s*(.*?\)?)\s*\))?\s*(;|\||&)?/g, function () {
                    var args = arguments;
                    args[3] = args[3] || args[4];
                    field.rules.push({
                        not: args[1] === "!",
                        method: args[2],
                        params: args[3] ? args[3].split(', ') : undefined,
                        or: args[5] === "|"
                    });
                });
            }

            return field;
        },

        // Verify a zone
        _multiValidate: function ($inputs, doneCallbacks) {
            var me = this,
                opt = me.options;

            // me.verifying = true;
            me.isValid = true;
            if (opt.ignore) {
                $inputs = $inputs.not(opt.ignore);
            }

            $inputs.each(function (i, el) {
                var field = me.getField(el);
                if (field) {
                    if (checkable(el)) { //如果是checkbox,使用第一个有rule的el
                        el = me.element.find('input[name="' + el.name + '"]')[0];
                    }
                    me._validate(el, field);
                    if (!me.isValid && opt.stopOnError) {
                        // stop the verification
                        return false;
                    }
                }
            });
            doneCallbacks.call(me, me.isValid);
            return me.isValid;
        },

        _reset: function (e) {
            var me = this;
            me.errors = {};
            if (e) {
                me.element.find(':verifiable').each(function (i, el) {
                    me._resetElement(el);
                });
            }
        },

        _resetElement: function (el, all) {
            var $el = $(el);

            if (checkable(el)) {
                $el.parent().parent().removeClass(errorClass);
            } else {
                $el.parent().removeClass(errorClass);
            }

            this.hideMsg(el);
            if (all) {
                $el.attr('aria-required', null);
            }
        },

        _focusin: function (e) {
            var me = this,
                opt = me.options,
                el = e.target,
                $el = $(el);

            //if (me.verifying) return;

            if ($el.attr('data-inputstatus') === 'error') {
                if (opt.focusCleanup) {
                    $el.removeClass('n-invalid');
                    //me.hideMsg(el);
                }
            }

            //msg = $el.attr('data-tip');
            //if (!msg) return;
            //
            //me.showMsg(el, {
            //    type: 'tip',
            //    msg: msg
            //});
        },

        // Handle focusout/validate/keyup/click/change/paste events
        _focusout: function (e) {
            var me = this,
                opt = me.options,
                field,
                must,
                el = e.target,
                $el = $(e.target),
                etype = e.type,
                ignoreType = {
                    click: 1,
                    change: 1,
                    paste: 1
                },
                timer = 0;

            if (!ignoreType[etype]) {
                // must be verified, if it is a manual trigger
                if (etype === 'validate') {
                    must = true;
                    //timer = 0;
                }
                // or doesn't require real-time verification, exit
                else if ($el.attr('notimely')) {
                    return;
                }// or it isn't a "keyup" event, exit
                else if (opt.timely >= 2 && etype !== 'keyup') {
                    return;
                }

                // if the current field is ignored, exit
                if (opt.ignore && $el.is(opt.ignore)) {
                    return;
                }

                if (etype === 'keyup') {
                    var key = e.keyCode,
                        specialKey = {
                            8: 1, // Backspace
                            9: 1, // Tab
                            16: 1, // Shift
                            32: 1, // Space
                            46: 1 // Delete
                        };

                    // only gets focus, no verification
                    if (key === 9 && !el.value) {
                        return;
                    }

                    // do not validate, if triggered by these keys
                    if (key < 48 && !specialKey[key]) {
                        return;
                    }

                    // keyboard events, reducing the frequency of verification
                    timer = opt.timely >= 100 ? opt.timely : 500;
                }
            }

            field = me.getField(el);
            if (!field) {
                return;
            }


            if (checkable(el)) {
                el = me.element.find('input[name="' + el.name + '"]')[0];
            }

            if (timer) {
                if (field._t) {
                    clearTimeout(field._t);
                }
                field._t = setTimeout(function () {
                    me._validate(el, field, must);
                }, timer);
            } else {
                me._validate(el, field, must);
            }
        },

        // Validated a field
        _validatedField: function (el, field, ret) {
            var me = this,
                isValid = ret.isValid = field.isValid = !!ret.isValid,
                callback = isValid ? 'valid' : 'invalid';

            ret.key = field.key;
            ret.rule = field._r;
            if (isValid) {
                ret.type = 'ok';
            } else {
                if (me.submiting) {
                    me.errors[field.key] = ret.msg;
                }
                me.isValid = false;
            }
            me.elements[field.key] = ret.element = el;
            //me.$el[0].isValid = isValid ? me.isFormValid() : isValid;

            // trigger callback and event
            $.isFunction(field[callback]) && field[callback].call(me, el, ret);
            $(el).attr('aria-invalid', isValid ? null : true)
                .removeClass(isValid ? 'n-invalid' : 'n-valid')
                .addClass(!ret.skip ? isValid ? 'n-valid' : 'n-invalid' : "")
                .trigger(callback + ".field", [ret, me]);

            if (checkable(el)) {
                $(el).parent().parent().toggleClass(errorClass, !isValid);
            } else {
                $(el).parent().toggleClass(errorClass, !isValid);
            }

            me._trigger('validation', null, [ret, me]);
            //me.$el.triggerHandler('validation', [ret, me]);

            if (me.checkOnly) {
                return;
            }

            // show or hide the message
            me[ret.msg ? 'showMsg' : 'hideMsg'](el, ret, field);
        },

        // Validated a rule
        _validatedRule: function (el, field, ret, msgOpt) {
            var me = this,
                msg,
                rule,
                method = field._r,
                transfer,
                isValid = false;

            field = field || me.getField(el);
            msgOpt = msgOpt || {};

            // use null to break validation from a field
            if (ret === null) {
                me._validatedField(el, field, {
                    isValid: true,
                    skip: true
                });
                return;
            } else if (ret === true || ret === undefined || ret === '') {
                isValid = true;
            } else if (_.isString(ret)) {
                msg = ret;
            } else if (_.isObject(ret)) {
                if (ret.error) {
                    msg = ret.error;
                } else {
                    msg = ret.ok;
                    isValid = true;
                }
            }

            if (field.rules) {
                rule = field.rules[field._i];
                if (rule.not) {
                    msg = undefined;
                    isValid = method === "required" || !isValid;
                }
                if (rule.or) {
                    if (isValid) {
                        while (field._i < field.rules.length && field.rules[field._i].or) {
                            field._i++;
                        }
                    } else {
                        transfer = true;
                    }
                }
            }

            // message analysis, and throw rule level event
            if (!transfer) {
                if (isValid) {
                    msgOpt.isValid = isValid;
                    $(el).trigger('valid.rule', [method, msgOpt.msg]);
                } else {
                    /* rule message priority:
                     1. custom field message;
                     2. custom DOM message
                     3. global defined message;
                     4. rule returned message;
                     5. default message;
                     */
                    msgOpt.msg = (getDataMsg(el, field, msg, me.messages[method]) || me.messages.defaultMsg).replace('{0}', me._getDisplay(el, field.display || ''));
                    $(el).trigger('invalid.rule', [method, msgOpt.msg]);
                }
            }

            // output the debug message
            //if (opt.debug) {
            //    debug.log('   ' + field._i + ': ' + method + ' => ' + (isValid || msgOpt.msg || isValid));
            //}

            // the current rule has passed, continue to validate
            if (transfer || isValid && field._i < field.rules.length - 1) {
                field._i++;
                me._checkRule(el, field);
            }
            // field was invalid, or all fields was valid
            else {
                field._i = 0;
                me._validatedField(el, field, msgOpt);
            }
        },

        // Verify a rule form a field
        _checkRule: function (el, field) {
            var me = this,
                ret,
                //key = field.key,
                rule = field.rules[field._i],
                method = rule.method,
                params = rule.params;

            // request has been sent, wait it
            // if (me.submiting && me.deferred[key]) return;
            field._r = method;

            // get result from current rule
            ret = (getDataRule(el, method) || me.rules[method] || $.noop).call(me, el, params, field);

            me._validatedRule(el, field, ret);
        },

        // Processing the validation
        _validate: function (el, field) {
            // doesn't validate the element that has "disabled" attribute
            if (el.disabled) {
                return;
            }

            var me = this,
                msgOpt = {},
                group = field.group,
                ret,
                isValid = field.isValid = true;

            if (!field.rules) {
                me._parse(el);
            }

            // group validation
            if (group) {
                ret = group.callback.call(me, group.$elems);
                if (ret !== undefined) {
                    me.hideMsg(group.target, {}, field);
                    if (ret === true) {
                        ret = undefined;
                    } else {
                        field._i = 0;
                        field._r = 'group';
                        isValid = false;
                        me.hideMsg(el, {}, field);
                        $.extend(msgOpt, group);
                    }
                }
            }
            // if the field is not required and it has a blank value
            if (isValid && !field.required && !field.must && !el.value) {
                if ($(el).attr('data-inputstatus') === 'tip') {
                    return;
                }
                if (!checkable(el)) {
                    me._validatedField(el, field, {
                        isValid: true
                    });
                    return;
                }
            }

            // if the results are out
            if (ret !== undefined) {
                me._validatedRule(el, field, ret, msgOpt);
            } else if (field.rule) {
                me._checkRule(el, field);
            }
        },

        getField: function (el) {
            var me = this,
                key;

            if (el.id && '#' + el.id in me.fields || !el.name) {
                key = '#' + el.id;
            } else {
                key = el.name;
            }
            if ($(el).attr('data-rule')) {
                me._parse(el);
            }

            return me.fields[key];
        },

        /* Detecting whether the value of an element that matches a rule
         *
         * @interface: test
         */
        test: function (el, rule) {
            var me = this,
                ret,
                parts = /(\w+)(?:\[\s*(.*?\]?)\s*\]|\(\s*(.*?\)?)\s*\))?/.exec(rule),
                method,
                params;

            if (parts) {
                method = parts[1];
                if (method in me.rules) {
                    params = parts[2] || parts[3];
                    params = params ? params.split(', ') : undefined;
                    ret = me.rules[method].call(me, el, params);
                }
            }

            return ret === true || ret === undefined || ret === null;
        },

        // Get a range of validation messages
        getRangeMsg: function (value, params, type, suffix) {
            if (!params) {
                return;
            }

            var me = this,
                msg = me.messages[type] || '',
                p = params[0].split('~'),
                a = p[0],
                b = p[1],
                c = 'rg',
                args = [''],
                isNumber = +value === +value;

            if (p.length === 2) {
                if (a && b) {
                    if (isNumber && value >= +a && value <= +b) {
                        return true;
                    }
                    args = args.concat(p);
                } else if (a && !b) {
                    if (isNumber && value >= +a) {
                        return true;
                    }
                    args.push(a);
                    c = 'gte';
                } else if (!a && b) {
                    if (isNumber && value <= +b) {
                        return true;
                    }
                    args.push(b);
                    c = 'lte';
                }
            } else {
                if (value === +a) {
                    return true;
                }
                args.push(a);
                c = 'eq';
            }

            if (msg) {
                if (suffix && msg[c + suffix]) {
                    c += suffix;
                }
                args[0] = msg[c];
            }

            return me.renderMsg.apply(null, args);
        },

        /* @interface: renderMsg
         */
        renderMsg: function () {
            var args = arguments,
                tpl = args[0],
                i = args.length;

            if (!tpl) {
                return;
            }

            while (--i) {
                tpl = tpl.replace('{' + i + '}', args[i]);
            }

            return tpl;
        },

        _getDisplay: function (el, str) {
            return !_.isString(str) ? $.isFunction(str) ? str.call(this, el) : '' : str;
        },

        _getMsgOpt: function (obj) {
            return $.extend({}, this.msgOpt, _.isString(obj) ? {
                msg: obj
            } : obj);
        },

        showMsg: function (el, msgOpt, /*INTERNAL*/ field) {
            var me = this,
                $el = $(el),
                tooltipInstance;

            msgOpt = me._getMsgOpt(msgOpt);

            if (!msgOpt.msg) {
                return;
            }
            if ($el.is(':verifiable')) {
                // mark message status
                $el.attr('data-inputstatus', msgOpt.type);

                // if($(el).data("ui-multiselect") || $(el).data("ui-combobox") || $(el).data("ui-datetimepicker")){
                //     delay = true; //1)校验不同时,2)延迟的时候值改变了,需要清理延迟的函数
                // }

                if ($el.data("ui-multiselect")) {
                    $el = $($el.data("ui-multiselect").$ul[0]);
                } else if ($el.data("ui-combobox")) { //如果是combobox,使用新生成的input
                    $el = $($el.data("ui-combobox").$input[0]);
                }

                tooltipInstance = $el.data('ui-tooltip');
                if (tooltipInstance) {
                    tooltipInstance.enable();
                    tooltipInstance.options.title = msgOpt.msg;
                } else {
                    $el.tooltip({
                        placement: me.options.placement,
                        template: '<div class="tooltip invalid" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
                        title: msgOpt.msg
                    });
                }
            }
        },

        /* @interface: hideMsg
         */
        hideMsg: function (el) {
            var $el = $(el);

            if ($el.is(':verifiable')) {
                $el.attr('data-inputstatus', null);
                $el.attr('aria-invalid', null);

                if ($el.data("ui-multiselect")) {
                    $el = $($el.data("ui-multiselect").$ul[0]);
                } else if ($el.data("ui-combobox")) { //如果是combobox,使用新生成的input
                    $el = $($el.data("ui-combobox").$input[0]);
                }

                if ($el.data('ui-tooltip')) {
                    $el.tooltip('hide').tooltip('disable');
                }
            }
        },

        /**
         * @method setField
         * 更新一个字段信息<br/>
         * 如果是新字段key，则是添加一个字段规则<br/>
         * 如果field===null，并且实例中存在字段key，则会删除字段key（不验证key字段）
         *
         * @param {String|Object} key 字段名或者字段对象，
         * @param {String} obj 字段规则信息
         */
        setField: function (key, obj) {
            var fields = {};

            // update this field
            if (_.isString(key)) {
                fields[key] = obj;
            }
            // update fields
            else if (_.isObject(key)) {
                fields = key;
            }

            this._processFields(fields);
        },

        /**
         * 调用该方法后，会清除表单中已经显示的验证消息。
         * @method cleanUp
         */
        cleanUp: function () {
            this._reset(1);
        }
    });

    $.fn.isValid = function (hideMsg) {
        var me = getInstance(this[0]),
            ret, opt;

        if (!me) {
            return true;
        }
        me.checkOnly = !!hideMsg;
        opt = me.options;

        me.submiting = true;
        ret = me._multiValidate(
            this.is(':input') ? this : this.find(':verifiable'),
            function (isValid) {
                if (!isValid) {
                    if (opt.focusInvalid && !me.checkOnly) {
                        me.element.find(':input[aria-invalid="true"]:first').focus();
                    }
                    $.isFunction(opt['invalid']) && opt['invalid'].call(me, me.errors);
                }
                me.submiting = false;
                me.checkOnly = false;
            }
        );
        return ret;
    };

    $.fn.resetValid = function () {
        var me = getInstance(this[0]);
        if (!me) {
            return true;
        }
        me._reset(true);
    };

    $.fn.resetElement = function () {
        var me = getInstance(this[0]);
        if (!me) {
            return true;
        }
        me._resetElement(this);
    };

    /**
     * 添加全局校验规则<br/>
     * 使用示例：$.ui.validator.addRule('mobileRule', 'Please input correct mobile', /^1[3458]\d{9}$/);
     * @static
     * @param {String} name 规则名称
     * @param {String} errorMessage 规则校验失败错误提示
     * @param {RegExp|Function} rule 规则函数
     * 当是函数时参数为element/param/field,分别为元素/参数/属性，返回为true表示校验通过，false校验失败
     */
    $.ui.validator.addRule = function (name, errorMessage, rule) {
        Rules.prototype[name] = getRule(rule);
        Messages.prototype[name] = errorMessage;
    };

    new Rules(fish.getResource("validator.rules"));
    new Messages(fish.getResource("validator.msg"));

    $(document).on("languageChanged.fish", function () {
        new Rules(fish.getResource("validator.rules"));
        new Messages(fish.getResource("validator.msg"));
    });
}();
/**
 *  面板组件
 * @class fish.desktop.widget.Panel
 * @extends fish.desktop.widget
 * <pre>
 $(element).panel({title:'panel1', canClose:true, collapsible:true});
 * </pre>
 */
!function () {
    $.widget('fish.panel', {
        options: {
            /**
             * @cfg {String} [title=''] panel的标题
             */
            title: '',
            /**
             * @cfg {Boolean} [collapsible=false] 是否可以折叠，默认否；为true时右上角出现一个折叠图标
             */
            collapsible: false,
            /**
             * @cfg {Boolean} [canClose=false] 是否可以关闭panel，默认否；为true时右上角出现一个关闭图标
             */
            canClose: false,
            /**
             * @cfg [headingButton=[]]  自定义右上角按钮
             * {Object} option
             *     option.id  按钮的标识
             *     option.cssProp 按钮附加的样式,可以是css对象,也可以是class类选择器名称
             *     option.title 鼠标移到按钮上的提示
             *     option.buttonIcon = '' 按钮图标,为空则不使用图标;可以是ui-icon ui-icon-newwin;也可以是glyphicon glyphicon-plus
             *     option.onClick 按钮点击事件
             */
            headingButton: [],
            /**
             * @event slideUp 向上收缩事件
             */
            slideUp: $.noop,
            /**
             * @event slideDown 向下展开事件
             */
            slideDown: $.noop,

            /**
             * @event beforeClose panel关闭之前触发的事件，返回false会阻止panel关闭
             */
            beforeClose: $.noop,
            /**
             * @event close panel关闭时触发的事件
             */
            close: $.noop
        },

        _create: function () {
            this._createUI();
            this._bindEvent();
        },

        _createUI: function () {
            var $el = this.element;

            this.$heading = $el.find('>.panel-heading');
            this.$title = this.$heading.find('>.panel-title');

            if (!$el.find('>.panel-heading>.panel-heading-button').length) {
                this.$heading.append('<div class="panel-heading-button pull-right"></div>');
            }

            this.$headingButton = $el.find('>.panel-heading>.panel-heading-button');


            this._customHeadingButton();


            if (this.options.collapsible) {
                //   '<span class="glyphicon glyphicon-chevron-down"></span>'
                this.$headingButton.append('<span class="glyphicon glyphicon-chevron-up toggle"></span>');
            }

            if (this.options.canClose) {
                this.$headingButton.append('<span class="glyphicon glyphicon-remove remove"></span>');
            }

        },

        /**
         * 设置panel标题（模板中必须有 .panel-heading .panel-title样式）
         * @param title 标题
         */
        setTitle: function (title) {
            this.options.title = title;
            this.$title.html(title);
        },

        /**
         * 将panel-body隐藏及显示
         */
        toggle: function (e) {
            var self = this, $el = this.element, slideSpeed = 200;
            var $panelBody = $el.find('>.panel-body'), $toggleBtn = this.$headingButton.find('.toggle');

            if (this._animation) {
                return;
            }

            this._animation = true;
            if ($el.hasClass('panel-close')) {
                $panelBody.slideDown(slideSpeed, function () {
                    $toggleBtn.removeClass('glyphicon-chevron-down').addClass('glyphicon-chevron-up');

                    $el.removeClass('panel-close');
                    self._trigger('slideDown', e, {$el: $el});
                    self._animation = false;
                });
            } else {
                $panelBody.slideUp(slideSpeed, function () {
                    $toggleBtn.removeClass('glyphicon-chevron-up').addClass('glyphicon-chevron-down');

                    $el.addClass('panel-close');
                    self._trigger('slideUp', e, {$el: $el});
                    self._animation = false;
                });
            }
        },

        /**
         * 关闭面板
         */
        close: function (e) {
            if (this._trigger("beforeClose", e) === false) {
                return;
            }
            this.destroy();
            this.element.remove();
            this._trigger('close', e);
        },

        /**
         * 处理自定义的图标按钮
         * @private
         */
        _customHeadingButton: function () {
            if (fish.isEmpty(this.options.headingButton)) {
                return;
            }
            var self = this;

            fish.each(this.options.headingButton, function (item) {
                var $span = $('<span title="' + (item.title || '') + '" id="' + item.id + '" class="' + item.buttonIcon + '"></span>');
                if (fish.isString(item.cssProp)) {
                    $span.addClass(item.cssProp);
                }
                if (fish.isObject(item.cssProp)) {
                    $span.css(item.cssProp);
                }
                $span.appendTo(self.$headingButton).on('click', $.proxy(item.onClick, self.element[0]));
            });
        },

        _bindEvent: function () {
            this._on(this.$headingButton, {
                'click .toggle': 'toggle',
                'click .remove': 'close'
            });
        },

        _destroy: function () {
            var $el = this.element;

            if ($el.hasClass('panel-close')) { //如果收缩着，则展开
                $el.find('>.panel-body').show();
            }
            this.$headingButton.remove();
        }
    });
}();
/*
 *  Created by shi.pengyan on 2016-02-01.
 */
/**
 * @class fish.desktop.widget.Editor
 * 编辑器组件，对第三方组件再次封装，主要是取值、赋值、启用、禁用
 * <pre>
 *     html
 *     引入js
 *     <script src="../../dist/fish-desktop/third-party/ueditor/ueditor.config.js"></script>
 *     <script src="../../dist/fish-desktop/third-party/ueditor/ueditor.all.js"></script>
 *
 *     <div class="col-md-12 col-sm-12">
 *       <div class="form-group">
 *           <label class="col-md-2 col-sm-4 control-label">自我评价</label>
 *           <div class="input-group col-md-10 col-sm-8">
 *               <textarea name="DESCRIPTION" id="description"></textarea> <!-- 需要有ID，不能加form-control样式-->
 *          </div>
 *       </div>
 *     </div>
 *
 *     js
 *     $('#description').editor({
 *           //这里可以选择自己需要的工具按钮名称,此处仅选择如下五个
 *           toolbars: [
 *               ['FullScreen', 'Source', 'Undo', 'Redo', 'Bold', 'test']
 *           ],
 *           //focus时自动清空初始化时的内容
 *           autoClearinitialContent: true,
 *           //关闭字数统计
 *           wordCount: false,
 *           //关闭elementPath
 *           elementPathEnabled: false,
 *           //默认的编辑区域高度
 *           initialFrameHeight: 150,
 *           //快捷菜单
 *           shortcutMenu: ["fontfamily", "fontsize", "bold", "italic", "underline", "forecolor", "backcolor", "insertorderedlist", "insertunorderedlist"]
 *       });
 *
 * </pre>
 */

!function () {
    $.widget('ui.editor', $.ui.formfield, {
        /**
         * @cfg options={} UE的options
         */
        options: {},
        _create: function () {
            if (!window.UE) {
                console.error('please import "UEditor" Component ');
                return;
            }

            if (!this.element.is('textarea')) {
                console.error('please use <textarea/> as container for UEditor');
                return;
            }

            if (!this.element.attr('id')) {
                console.error('please use id in UEditor');
                return;
            }

            //this.element.uniqueId();
            var self = this;
            this.isReady = false;

            var editor = UE.getEditor(this.element.attr('id'), fish.omit(this.options, 'uiEditor'));
            editor.ready(function () {
                self.isReady = true;
                //将其挂载在ueditor上
                var $ueDiv = self.element.prev();
                $ueDiv.data(self.widgetFullName, self);
            });
            this.editor = editor;

            this._super();
        },

        _onFormReset: function () {
            //TODO
            if (this._initValue) {
                this._value(this._initValue);
            }
        },

        _onFormClear: function () {
            this._value('');
        },

        _formSetValue: function (value) {
            //remember value at first time
            this._value(value);
            this._initValue = value; // for on reset sense when use form set value method.
        },

        /**
         * 获取HTML内容（正常情形下）,特殊情形手动取值
         * @returns {*|String}
         * @private
         */
        _formGetValue: function () {
            return this.editor.getContent();
        },

        _afterFormSetValue: function () {
            //nothing
        },

        /**
         * 取/赋值 ；取值时返回带HTML的内容
         * @param value 内容
         * @param appendTo 是否在原先内容上追加，默认false
         * @returns {*|String}
         */
        value: function (value, appendTo) {
            if (value === undefined) {
                return this.editor.getContent();
            } else {
                this._value(value, appendTo);
            }
        },


        /**
         * 启用
         */
        enable: function () {
            this.editor.setEnabled();
        },

        /**
         * 禁用
         */
        disable: function () {
            this.editor.setDisabled();
        },

        /**
         * 判断编辑器是否有内容，有返回true，否则false
         * @returns {*|Boolean}
         */
        hasContents: function () {
            return this.editor.hasContents();
        },

        /**
         * 编辑器聚焦
         * @param toEnd 是否将光标移到最后
         */
        focus: function (toEnd) {
            var self = this;
            this._readyFunc(function () {
                self.editor.focus(toEnd);
            }, toEnd);
        },

        /**
         * 返回UE编辑器实例，非jQuery对象;
         * 可以进行更高级的操作，比如草稿箱之类的，具体参考http://fex.baidu.com/ueditor/#api-common
         * @returns {*|null}
         */
        getEditor: function () {
            return this.editor;
        },

        _value: function (value, appendTo) {
            this._readyFunc(this._setContent, value, appendTo);
        },

        _readyFunc: function (func) {
            var args = $.makeArray(arguments);
            args.shift();
            if (this.isReady) {
                func.apply(this, args);
            } else {
                var self = this;
                this.editor.ready(function () {
                    func.apply(self, args);
                });
            }
        },

        _setContent: function (value, appendTo) {
            this.editor.setContent(value, appendTo === true);
        },

        _destroy: function () {
            //this.element.removeUniqueId();
            if (this.editor) {
                this.editor.destroy();//禁止使用UE.delEditor
                this.editor = null;
            }
        }
    });
}();
/*
 * Created by tanyl on 2014/12/16.
 */
/**
 * 数据表格插件
 * @class fish.desktop.widget.Grid
 */
!function() {

    'use strict';

    $.jgrid = $.jgrid || {};

    $.each(['htmlDecode', 'htmlEncode', 'getAccessor'] ,function(i , v){
        //$.isFunction
        $.jgrid[v] = fish[v];
    });

    $.extend($.jgrid, {
        getCellIndex: function (cell) {
            var c = $(cell);
            if (c.is('tr')) {
                return -1;
            }
            c = (!c.is('td') && !c.is('th') ? c.closest("td,th") : c)[0];
            if (fish.browser.msie) { return $.inArray(c, c.parentNode.cells); }
            return c.cellIndex;
        },
        guid: 1,
        uidPref: 'jqg', //$.jgrid.uidPref可以用来判断是不是grid自动生成的id
        randId: function (prefix) {
            return (prefix || $.jgrid.uidPref) + ($.jgrid.guid++);
        },
        //只在设置title的时候用到
        stripHtml: function (v) {
            v = String(v);
            var regexp = /<("[^"]*"|'[^']*'|[^'">])*>/gi;
            if (v) {
                v = v.replace(regexp, "");
                return (v && v !== '&nbsp;' && v !== '&#160;') ? v.replace(/\"/g, "'") : "";
            }
            return v;
        },
        //后续dataSource抽象出来再修改,这里用到了多列排序
        from: function (source) {
            // Original Author Hugo Bonacci
            // License MIT http://jlinq.codeplex.com/license
            var QueryObject = function (d, q) {
                if (typeof d === "string") {
                    d = $.data(d);
                }
                var self = this,
                    _data = d,
                    _usecase = true,
                    _trim = false,
                    _query = q,
                    _stripNum = /[\$,%]/g,
                    _lastCommand = null,
                    _lastField = null,
                    _orDepth = 0,
                    _negate = false,
                    _queuedOperator = "",
                    _sorting = [],
                    _useProperties = true;
                if (typeof d === "object" && d.push) {
                    if (d.length > 0) {
                        if (typeof d[0] !== "object") {
                            _useProperties = false;
                        } else {
                            _useProperties = true;
                        }
                    }
                } else {
                    throw "data provides is not an array";
                }
                this._hasData = function () {
                    return _data === null ? false : _data.length === 0 ? false : true;
                };
                this._getStr = function (s) {
                    var phrase = [];
                    if (_trim) {
                        phrase.push("jQuery.trim(");
                    }
                    phrase.push("String(" + s + ")");
                    if (_trim) {
                        phrase.push(")");
                    }
                    if (!_usecase) {
                        phrase.push(".toLowerCase()");
                    }
                    return phrase.join("");
                };
                this._strComp = function (val) {
                    if (typeof val === "string") {
                        return ".toString()";
                    }
                    return "";
                };
                this._group = function (f, u) {
                    return ({
                        field: f.toString(),
                        unique: u,
                        items: []
                    });
                };
                this._toStr = function (phrase) {
                    if (_trim) {
                        phrase = $.trim(phrase);
                    }
                    phrase = phrase.toString().replace(/\\/g, '\\\\').replace(/\"/g, '\\"');
                    return _usecase ? phrase : phrase.toLowerCase();
                };
                this._funcLoop = function (func) {
                    var results = [];
                    $.each(_data, function (i, v) {
                        results.push(func(v));
                    });
                    return results;
                };
                this._append = function (s) {
                    var i;
                    if (_query === null) {
                        _query = "";
                    } else {
                        _query += _queuedOperator === "" ? " && " : _queuedOperator;
                    }
                    for (i = 0; i < _orDepth; i++) {
                        _query += "(";
                    }
                    if (_negate) {
                        _query += "!";
                    }
                    _query += "(" + s + ")";
                    _negate = false;
                    _queuedOperator = "";
                    _orDepth = 0;
                };
                this._setCommand = function (f, c) {
                    _lastCommand = f;
                    _lastField = c;
                };
                this._resetNegate = function () {
                    _negate = false;
                };
                this._repeatCommand = function (f, v) {
                    if (_lastCommand === null) {
                        return self;
                    }
                    if (f !== null && v !== null) {
                        return _lastCommand(f, v);
                    }
                    if (_lastField === null) {
                        return _lastCommand(f);
                    }
                    if (!_useProperties) {
                        return _lastCommand(f);
                    }
                    return _lastCommand(_lastField, f);
                };
                this._equals = function (a, b) {
                    return (self._compare(a, b, 1) === 0);
                };
                this._compare = function (a, b, d) {
                    var toString = Object.prototype.toString;
                    if (d === undefined) {
                        d = 1;
                    }
                    if (a === undefined) {
                        a = null;
                    }
                    if (b === undefined) {
                        b = null;
                    }
                    if (a === null && b === null) {
                        return 0;
                    }
                    if (a === null && b !== null) {
                        return 1;
                    }
                    if (a !== null && b === null) {
                        return -1;
                    }
                    if (toString.call(a) === '[object Date]' && toString.call(b) === '[object Date]') {
                        if (a < b) {
                            return -d;
                        }
                        if (a > b) {
                            return d;
                        }
                        return 0;
                    }
                    if (!_usecase && typeof a !== "number" && typeof b !== "number") {
                        a = String(a);
                        b = String(b);
                    }
                    if (a < b) {
                        return -d;
                    }
                    if (a > b) {
                        return d;
                    }
                    return 0;
                };
                this._performSort = function () {
                    if (_sorting.length === 0) {
                        return;
                    }
                    _data = self._doSort(_data, 0);
                };
                this._doSort = function (d, q) {
                    var by = _sorting[q].by,
                        dir = _sorting[q].dir,
                        type = _sorting[q].type,
                        dfmt = _sorting[q].datefmt;
                    if (q === _sorting.length - 1) {
                        return self._getOrder(d, by, dir, type, dfmt);
                    }
                    q++;
                    var values = self._getGroup(d, by, dir, type, dfmt),
                        results = [],
                        i, j, sorted;
                    for (i = 0; i < values.length; i++) {
                        sorted = self._doSort(values[i].items, q);
                        for (j = 0; j < sorted.length; j++) {
                            results.push(sorted[j]);
                        }
                    }
                    return results;
                };
                this._getOrder = function (data, by, dir, type, dfmt) {
                    var sortData = [],
                        _sortData = [],
                        newDir = dir === "a" ? 1 : -1,
                        i, ab, j,
                        findSortKey;

                    if (type === undefined) {
                        type = "text";
                    }
                    if (type === 'float' || type === 'number' || type === 'currency' || type === 'numeric') {
                        findSortKey = function ($cell) {
                            var key = parseFloat(String($cell).replace(_stripNum, ''));
                            return isNaN(key) ? 0.00 : key;
                        };
                    } else if (type === 'int' || type === 'integer') {
                        findSortKey = function ($cell) {
                            return $cell ? parseFloat(String($cell).replace(_stripNum, '')) : 0;
                        };
                    } else if (type === 'date' || type === 'datetime') {
                        findSortKey = function ($cell) {
                            return fish.dateutil.parse($cell, dfmt);
                        };
                    } else if ($.isFunction(type)) {
                        findSortKey = type;
                    } else {
                        findSortKey = function ($cell) {
                            $cell = $cell ? $.trim(String($cell)) : "";
                            return _usecase ? $cell : $cell.toLowerCase();
                        };
                    }
                    $.each(data, function (i, v) {
                        ab = by !== "" ? $.jgrid.getAccessor(v, by) : v;
                        if (ab === undefined) {
                            ab = "";
                        }
                        ab = findSortKey(ab, v);
                        _sortData.push({
                            'vSort': ab,
                            'index': i
                        });
                    });

                    _sortData.sort(function (a, b) {
                        a = a.vSort;
                        b = b.vSort;
                        return self._compare(a, b, newDir);
                    });
                    j = 0;
                    var nrec = data.length;
                    // overhead, but we do not change the original data.
                    while (j < nrec) {
                        i = _sortData[j].index;
                        sortData.push(data[i]);
                        j++;
                    }
                    return sortData;
                };
                this._getGroup = function (data, by, dir, type, dfmt) {
                    var results = [],
                        group = null,
                        last = null,
                        val;
                    $.each(self._getOrder(data, by, dir, type, dfmt), function (i, v) {
                        val = $.jgrid.getAccessor(v, by);
                        if (val == null) {
                            val = "";
                        }
                        if (!self._equals(last, val)) {
                            last = val;
                            if (group !== null) {
                                results.push(group);
                            }
                            group = self._group(by, val);
                        }
                        group.items.push(v);
                    });
                    if (group !== null) {
                        results.push(group);
                    }
                    return results;
                };
                this.ignoreCase = function () {
                    _usecase = false;
                    return self;
                };
                this.useCase = function () {
                    _usecase = true;
                    return self;
                };
                this.trim = function () {
                    _trim = true;
                    return self;
                };
                this.noTrim = function () {
                    _trim = false;
                    return self;
                };
                this.execute = function () {
                    var match = _query,
                        results = [];
                    if (match === null) {
                        return self;
                    }
                    $.each(_data, function () {
                        if (eval(match)) {
                            results.push(this);
                        }
                    });
                    _data = results;
                    return self;
                };
                this.data = function () {
                    return _data;
                };
                this.select = function (f) {
                    self._performSort();
                    if (!self._hasData()) {
                        return [];
                    }
                    self.execute();
                    if ($.isFunction(f)) {
                        var results = [];
                        $.each(_data, function (i, v) {
                            results.push(f(v));
                        });
                        return results;
                    }
                    return _data;
                };
                this.hasMatch = function () {
                    if (!self._hasData()) {
                        return false;
                    }
                    self.execute();
                    return _data.length > 0;
                };
                this.andNot = function (f, v, x) {
                    _negate = !_negate;
                    return self.and(f, v, x);
                };
                this.orNot = function (f, v, x) {
                    _negate = !_negate;
                    return self.or(f, v, x);
                };
                this.not = function (f, v, x) {
                    return self.andNot(f, v, x);
                };
                this.and = function (f, v, x) {
                    _queuedOperator = " && ";
                    if (f === undefined) {
                        return self;
                    }
                    return self._repeatCommand(f, v, x);
                };
                this.or = function (f, v, x) {
                    _queuedOperator = " || ";
                    if (f === undefined) {
                        return self;
                    }
                    return self._repeatCommand(f, v, x);
                };
                this.orBegin = function () {
                    _orDepth++;
                    return self;
                };
                this.orEnd = function () {
                    if (_query !== null) {
                        _query += ")";
                    }
                    return self;
                };
                this.isNot = function (f) {
                    _negate = !_negate;
                    return self.is(f);
                };
                this.is = function (f) {
                    self._append('this.' + f);
                    self._resetNegate();
                    return self;
                };
                this._compareValues = function (func, f, v, how, t) {
                    var fld;
                    if (_useProperties) {
                        fld = 'jQuery.jgrid.getAccessor(this,\'' + f + '\')';
                    } else {
                        fld = 'this';
                    }
                    if (v === undefined) {
                        v = null;
                    }
                    //var val=v===null?f:v,
                    var val = v,
                        swst = t.stype === undefined ? "text" : t.stype;
                    if (v !== null) {
                        switch (swst) {
                            case 'int':
                            case 'integer':
                                val = (isNaN(Number(val)) || val === "") ? '0' : val; // To be fixed with more inteligent code
                                fld = 'parseInt(' + fld + ',10)';
                                val = 'parseInt(' + val + ',10)';
                                break;
                            case 'float':
                            case 'number':
                            case 'numeric':
                                val = String(val).replace(_stripNum, '');
                                val = (isNaN(Number(val)) || val === "") ? '0' : val; // To be fixed with more inteligent code
                                fld = 'parseFloat(' + fld + ')';
                                val = 'parseFloat(' + val + ')';
                                break;
                            case 'date':
                            case 'datetime':
                                val = String(fish.dateutil.parse(val, t.newfmt || 'yyyy-mm-dd').getTime());
                                fld = 'fish.dateutil.parse("' + fld + '",' + t.srcfmt + ').getTime()';
                                break;
                            default:
                                fld = self._getStr(fld);
                                val = self._getStr('"' + self._toStr(val) + '"');
                        }
                    }
                    self._append(fld + ' ' + how + ' ' + val);
                    self._setCommand(func, f);
                    self._resetNegate();
                    return self;
                };
                this.equals = function (f, v, t) {
                    return self._compareValues(self.equals, f, v, "==", t);
                };
                this.notEquals = function (f, v, t) {
                    return self._compareValues(self.equals, f, v, "!==", t);
                };
                this.isNull = function (f, v, t) {
                    return self._compareValues(self.equals, f, null, "===", t);
                };
                this.greater = function (f, v, t) {
                    return self._compareValues(self.greater, f, v, ">", t);
                };
                this.less = function (f, v, t) {
                    return self._compareValues(self.less, f, v, "<", t);
                };
                this.greaterOrEquals = function (f, v, t) {
                    return self._compareValues(self.greaterOrEquals, f, v, ">=", t);
                };
                this.lessOrEquals = function (f, v, t) {
                    return self._compareValues(self.lessOrEquals, f, v, "<=", t);
                };
                this.startsWith = function (f, v) {
                    var val = (v == null) ? f : v,
                        length = _trim ? $.trim(val.toString()).length : val.toString().length;
                    if (_useProperties) {
                        self._append(self._getStr('jQuery.jgrid.getAccessor(this,\'' + f + '\')') + '.substr(0,' + length + ') == ' + self._getStr('"' + self._toStr(v) + '"'));
                    } else {
                        length = _trim ? $.trim(v.toString()).length : v.toString().length;
                        self._append(self._getStr('this') + '.substr(0,' + length + ') == ' + self._getStr('"' + self._toStr(f) + '"'));
                    }
                    self._setCommand(self.startsWith, f);
                    self._resetNegate();
                    return self;
                };
                this.endsWith = function (f, v) {
                    var val = (v == null) ? f : v,
                        length = _trim ? $.trim(val.toString()).length : val.toString().length;
                    if (_useProperties) {
                        self._append(self._getStr('jQuery.jgrid.getAccessor(this,\'' + f + '\')') + '.substr(' + self._getStr('jQuery.jgrid.getAccessor(this,\'' + f + '\')') + '.length-' + length + ',' + length + ') == "' + self._toStr(v) + '"');
                    } else {
                        self._append(self._getStr('this') + '.substr(' + self._getStr('this') + '.length-"' + self._toStr(f) + '".length,"' + self._toStr(f) + '".length) == "' + self._toStr(f) + '"');
                    }
                    self._setCommand(self.endsWith, f);
                    self._resetNegate();
                    return self;
                };
                this.contains = function (f, v) {
                    if (_useProperties) {
                        self._append(self._getStr('jQuery.jgrid.getAccessor(this,\'' + f + '\')') + '.indexOf("' + self._toStr(v) + '",0) > -1');
                    } else {
                        self._append(self._getStr('this') + '.indexOf("' + self._toStr(f) + '",0) > -1');
                    }
                    self._setCommand(self.contains, f);
                    self._resetNegate();
                    return self;
                };
                this.groupBy = function (by, dir, type, datefmt) {
                    if (!self._hasData()) {
                        return null;
                    }
                    return self._getGroup(_data, by, dir, type, datefmt);
                };
                this.orderBy = function (by, dir, stype, dfmt) {
                    dir = dir == null ? "a" : $.trim(dir.toString().toLowerCase());
                    if (stype == null) {
                        stype = "text";
                    }
                    if (dfmt == null) {
                        dfmt = "Y-m-d";
                    }
                    if (dir === "desc" || dir === "descending") {
                        dir = "d";
                    }
                    if (dir === "asc" || dir === "ascending") {
                        dir = "a";
                    }
                    _sorting.push({
                        by: by,
                        dir: dir,
                        type: stype,
                        datefmt: dfmt
                    });
                    return self;
                };
                return self;
            };
            return new QueryObject(source, null);
        },
        //根据类型创建出单元格,单元格编译的时候用到
        createEl : function(eltype,options,vl) {
            var elem = "", $t = this;
            switch (eltype)
            {
                case "textarea" :
                    elem = document.createElement("textarea");
                    if(!options.cols) { $(elem).css({width:"98%"});}
                    if(!options.rows) { options.rows = 2; }
                    if(vl==='&nbsp;' || vl==='&#160;' || (vl.length===1 && vl.charCodeAt(0)===160)) {vl="";}
                    elem.value = vl;
                    $(elem).attr({"id":options.id,"name":options.name,"role":"textbox","multiline":"true"});
                    break;
                case "checkbox" : //what code for simple checkbox
                    elem = document.createElement("input");
                    elem.type = "checkbox";
                    if( !options.value ) {
                        var vl1 = (vl+"").toLowerCase();
                        if(vl1.search(/(false|f|0|no|n|off|undefined)/i)<0 && vl1!=="") {
                            elem.checked=true;
                            elem.defaultChecked=true;
                            elem.value = vl;
                        } else {
                            elem.value = "on";
                        }
                        $(elem).attr("offval","off");
                    } else {
                        var cbval = options.value.split(":");
                        if(vl === cbval[0]) {
                            elem.checked=true;
                            elem.defaultChecked=true;
                        }
                        elem.value = cbval[0];
                        $(elem).attr("offval",cbval[1]);
                    }
                    $(elem).attr({"id":options.id,"name":options.name,"role":"checkbox"});
                    break;
                case "select" :
                    elem = document.createElement("select");
                    var msl, ovm = [];
                    if(options.multiple===true) {
                        msl = true;
                        elem.multiple="multiple";
                        $(elem).attr("aria-multiselectable","true");
                    } else { msl = false; }
                    if(options.value) {
                        var i;
                        if(options.size === undefined) {
                            options.size = msl ? 3 : 1;
                        }
                        if(msl) {
                            ovm = vl.split(",");
                            ovm = $.map(ovm,function(n){return $.trim(n);});
                        }
                        if(typeof options.value === 'function') { options.value = options.value(); }
                        var so,sv, ov,
                            sep = options.separator === undefined ? ":" : options.separator,
                            delim = options.delimiter === undefined ? ";" : options.delimiter;
                        if(typeof options.value === 'string') {
                            so = options.value.split(delim);
                            for(i=0; i<so.length;i++){
                                sv = so[i].split(sep);
                                if(sv.length > 2 ) {
                                    sv[1] = $.map(sv,function(n,ii){if(ii>0) { return n;} }).join(sep);
                                }
                                ov = document.createElement("option");
                                ov.setAttribute("role","option");
                                ov.value = sv[0]; ov.innerHTML = sv[1];
                                elem.appendChild(ov);
                                if (!msl &&  ($.trim(sv[0]) === $.trim(vl))) { ov.selected ="selected"; }
                                if (msl && ($.inArray($.trim(sv[0]), ovm)>-1)) {ov.selected ="selected";}
                            }
                        } else if (typeof options.value === 'object') {
                            var oSv = options.value, key;
                            for (key in oSv) {
                                if (oSv.hasOwnProperty(key ) ){
                                    ov = document.createElement("option");
                                    ov.setAttribute("role","option");
                                    ov.value = key; ov.innerHTML = oSv[key];
                                    elem.appendChild(ov);
                                    if (!msl &&  ( $.trim(key) === $.trim(vl)) ) { ov.selected ="selected"; }
                                    if (msl && ($.inArray($.trim(key),ovm)>-1)) { ov.selected ="selected"; }
                                }
                            }
                        }
                    }
                    elem.size = options.size;
                    $(elem).attr({"id":options.id,"name":options.name,"role":"select"});
                    break;
                case "text" :
                case "password" :
                case "button" :
                    var role;
                    if(eltype==="button") { role = "button"; }
                    else { role = "textbox"; }
                    elem = document.createElement("input");
                    elem.type = eltype;
                    elem.value = vl;
                    if(eltype !== "button"){
                        
                        if(!options.size) { $(elem).css({width:"98%"}); }
                    }
                    $(elem).attr({"id":options.id,"name":options.name,"role":role});
                    break;
            }
            return elem;
        },
        //采用校验控件来校验单元格的值,等校验控件改造之后再修改
        validator : function(rowid,nm,dataRule) {
            var ts = this;
            if(!$("#"+rowid,ts.element).hasClass('ui-validator')){
                $("#"+rowid,ts.element).addClass('ui-validator').validator();
            }
            return $("#"+rowid,ts.element).validator("setField",nm,dataRule).isValid();
        }
    });

}();

//grid 需要首先引入模板
'use strict';

!(function (factory) {
  if (typeof define === 'function' && define.amd) {
    define('text!src/grid/grid.tpl', factory);
  } else {
    factory();
  }
})(function () {
  'use strict';

  $.jgrid = $.jgrid || {};

  $.jgrid.tpl = '<div class="ui-jqgrid" id="{{id}}">\n  <div class="ui-jqgrid-view" id="gview_{{id}}">\n    {{#if caption}}\n    <div class="ui-jqgrid-titlebar ui-helper-clearfix">\n      {{#if hidegrid}}\n      <a role="link" class="ui-jqgrid-titlebar-close HeaderButton">\n        <span class="glyphicon glyphicon-triangle-top"></span>\n      </a>\n      {{/if}}\n      <span class="ui-jqgrid-title">{{caption}}</span>\n    </div>\n    {{/if}}\n    {{#if topbar}}\n    <div class="ui-userdata ui-userdata-t" id="t_{{id}}"></div>\n    {{/if}}\n    <div class="ui-jqgrid-hdiv" {{#if colHide}}style="display:none;"{{/if}}>\n      <div class="ui-jqgrid-hbox">\n        <table class="ui-jqgrid-htable" role="grid" aria-labelledby="{{id}}" cellspacing="0" cellpadding="0" border="0">\n          <thead>\n            <tr class="ui-jqgrid-labels" role="rowheader">\n              {{#colModel}}\n              <th id="{{../id}}_{{name}}" role="columnheader" class="ui-state-default ui-th-column" title="{{headertitle}}">\n                {{#if resizable}}\n                <span class="ui-jqgrid-resize">&nbsp;</span>\n                {{/if}}\n                <div id="jqgh_{{../id}}_{{name}}">\n                  {{#ifCond name \'===\' \'cb\'}}\n                  <input role="checkbox" id="cb_{{../../id}}" class="cbox" type="checkbox">\n                  {{else}}{{label}}{{/ifCond}}\n                  {{#if sortable}}\n                  <span class="s-ico" style="display:none">\n                    <span sort="asc" class="ui-grid-ico-sort ui-icon-asc ui-state-disabled glyphicon glyphicon-triangle-top"></span>\n                    <span sort="desc" class="ui-grid-ico-sort ui-icon-desc ui-state-disabled glyphicon glyphicon-triangle-bottom"></span>\n                  </span>\n                  {{/if}}\n                </div>\n              </th>\n              {{/colModel}}\n            </tr>\n          </thead>\n        </table>\n      </div>\n    </div>\n    <div class="ui-jqgrid-bdiv" style="height: {{height}}px;">\n      <div style="position:relative;">\n        <div></div>\n        <table id="btable_{{id}}" tabindex="0" cellspacing="0" cellpadding="0" border="0" role="grid" aria-multiselectable="{{multiselect}}" aria-labelledby="{{id}}" class="ui-jqgrid-btable">\n          <tbody>\n            <tr class="jqgfirstrow" role="row" style="height:auto">\n              {{#colModel}}\n              <td role="gridcell" style="height:0.01px;"></td>\n              {{/colModel}}\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    {{#if footerrow}}\n    <div class="ui-jqgrid-sdiv">\n      <div class="ui-jqgrid-hbox">\n        <table role="grid" class="ui-jqgrid-ftable" cellspacing="0" cellpadding="0" border="0">\n          <tbody>\n            <tr role="row" class="footrow">\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    {{/if}}\n    {{#if bottombar}}\n    <div class="ui-userdata ui-userdata-tb" id="tb_{{id}}"></div>\n    {{/if}}\n  </div>\n  <div class="ui-jqgrid-resize-mark" id="rs_m{{id}}">&nbsp;</div>\n  {{#if pagebar}}\n  <div id="{{id}}_pager" class="ui-jqgrid-pager">\n    <div id="{{id}}_pager_left" class="ui-pg-button"></div>\n    <div id="{{id}}_pager_right" class="ui-pg-control"></div>\n  </div>\n  {{/if}}\n</div>';

  return $.jgrid.tpl;
});


/*
 * Created by tanyl on 2014/12/16.
 * Modify  by tanyl on 2015/07/23.
 */
!function () {

    'use strict';

    $.fmatter = {};
//opts can be id:row id for the row, rowdata:the data for the row, colmodel:the column model for this column
//example {id:1234,}
    $.extend($.fmatter, {
        isBoolean: function (o) {
            return typeof o === 'boolean';
        },
        isObject: function (o) {
            return (o && (typeof o === 'object' || $.isFunction(o))) || false;
        },
        isString: function (o) {
            return typeof o === 'string';
        },
        isNumber: function (o) {
            return typeof o === 'number' && isFinite(o);
        },
        isValue: function (o) {
            return (this.isObject(o) || this.isString(o) || this.isNumber(o) || this.isBoolean(o));
        },
        isEmpty: function (o) {
            if (!this.isString(o) && this.isValue(o)) {
                return false;
            }
            if (!this.isValue(o)) {
                return true;
            }
            o = $.trim(o).replace(/\&nbsp\;/ig, '').replace(/\&#160\;/ig, '');
            return o === "";
        }
    });
    $.fn.fmatter = function (formatType, cellval, opts, rwd, act) {
        // build main options before element iteration
        var v = cellval;
        opts = $.extend({}, $.jgrid.formatter, opts);

        try {
            v = $.fn.fmatter[formatType].call(this, cellval, opts, rwd, act);
        } catch (fe) {
        }
        return v;
    };
    $.fmatter.util = {
        // Taken from YAHOO utils
        NumberFormat: function (nData, opts) {
            if (!$.fmatter.isNumber(nData)) {
                nData *= 1;
            }
            if ($.fmatter.isNumber(nData)) {
                var bNegative = (nData < 0);
                var sOutput = String(nData);
                var sDecimalSeparator = opts.decimalSeparator || ".";
                var nDotIndex;
                if ($.fmatter.isNumber(opts.decimalPlaces)) {
                    // Round to the correct decimal place
                    var nDecimalPlaces = opts.decimalPlaces;
                    var nDecimal = Math.pow(10, nDecimalPlaces);
                    sOutput = String(Math.round(nData * nDecimal) / nDecimal);
                    nDotIndex = sOutput.lastIndexOf(".");
                    if (nDecimalPlaces > 0) {
                        // Add the decimal separator
                        if (nDotIndex < 0) {
                            sOutput += sDecimalSeparator;
                            nDotIndex = sOutput.length - 1;
                        }
                        // Replace the "."
                        else if (sDecimalSeparator !== ".") {
                            sOutput = sOutput.replace(".", sDecimalSeparator);
                        }
                        // Add missing zeros
                        while ((sOutput.length - 1 - nDotIndex) < nDecimalPlaces) {
                            sOutput += "0";
                        }
                    }
                }
                if (opts.thousandsSeparator) {
                    var sThousandsSeparator = opts.thousandsSeparator;
                    nDotIndex = sOutput.lastIndexOf(sDecimalSeparator);
                    nDotIndex = (nDotIndex > -1) ? nDotIndex : sOutput.length;
                    var sNewOutput = sOutput.substring(nDotIndex);
                    var nCount = -1, i;
                    for (i = nDotIndex; i > 0; i--) {
                        nCount++;
                        if ((nCount % 3 === 0) && (i !== nDotIndex) && (!bNegative || (i > 1))) {
                            sNewOutput = sThousandsSeparator + sNewOutput;
                        }
                        sNewOutput = sOutput.charAt(i - 1) + sNewOutput;
                    }
                    sOutput = sNewOutput;
                }
                // Prepend prefix
                sOutput = (opts.prefix) ? opts.prefix + sOutput : sOutput;
                // Append suffix
                sOutput = (opts.suffix) ? sOutput + opts.suffix : sOutput;
                return sOutput;

            }
            return nData;
        }
    };
    $.fn.fmatter.defaultFormat = function (cellval, opts) {
        return ($.fmatter.isValue(cellval) && cellval !== "" ) ? cellval : opts.defaultValue || "&#160;";
    };
    $.fn.fmatter.checkbox = function (cval, opts) {
        var op = $.extend({}, opts.checkbox), ds;
        if (opts.colModel !== undefined && opts.colModel.formatoptions !== undefined) {
            op = $.extend({}, op, opts.colModel.formatoptions);
        } else if (opts.colModel !== undefined && opts.colModel.editoptions !== undefined) {
            op = $.extend({}, op, opts.colModel.editoptions);
        }
        if (op.disabled === true) {
            ds = "disabled=\"disabled\"";
        } else {
            ds = "";
        }
        if ($.fmatter.isEmpty(cval) || cval === undefined) {
            cval = $.fn.fmatter.defaultFormat(cval, op);
        }
        var cbv = op.value ? op.value.split(":") : ["Yes", "No"];
        var bchk = (cval == cbv[0]) ? " checked='checked' " : "";
        return "<input type=\"checkbox\" " + bchk + " value=\"" + cval + "\" offval=\"no\" " + ds + "/>";
    };
    $.fn.fmatter.linkFunction = function (cellval, opts , rwd) {
        var op = {cssp: "linkfunction"};// ui-state-active
        if (opts.colModel !== undefined && opts.colModel.formatoptions !== undefined) {
            op = $.extend({}, op, opts.colModel.formatoptions);
        }
        if (!$.fmatter.isEmpty(cellval)) {
            var cssp = op.cssp;
            if (typeof cssp === 'string' && $.trim(cssp) != "") {
                cssp = "class=" + cssp;
            } else if (cssp) {
                var tmp = [];
                for (var key in cssp) {
                    tmp.push(key + ":" + cssp[key]);
                }
                cssp = "style=" + tmp.join(",");
            }
            return '<a ' + cssp + ' href="javascript:void(0)" onclick='+ op.action + '.call(this,"'+opts.rowId+'")>' + cellval + '</a>';
        } else {
            return $.fn.fmatter.defaultFormat(cellval, opts);
        }
    };

    $.fn.fmatter.integer = function (cellval, opts) {
        var op = $.extend({}, opts.integer);
        if (opts.colModel !== undefined && opts.colModel.formatoptions !== undefined) {
            op = $.extend({}, op, opts.colModel.formatoptions);
        }
        if ($.fmatter.isEmpty(cellval)) {
            return op.defaultValue;
        }
        return $.fmatter.util.NumberFormat(cellval, op);
    };
    $.fn.fmatter.number = function (cellval, opts) {
        var op = $.extend({}, opts.number);
        if (opts.colModel !== undefined && opts.colModel.formatoptions !== undefined) {
            op = $.extend({}, op, opts.colModel.formatoptions);
        }
        if ($.fmatter.isEmpty(cellval)) {
            return op.defaultValue;
        }
        return $.fmatter.util.NumberFormat(cellval, op);
    };
    $.fn.fmatter.currency = function (cellval, opts) {
        var op = $.extend({}, opts.currency);
        if (opts.colModel !== undefined && opts.colModel.formatoptions !== undefined) {
            op = $.extend({}, op, opts.colModel.formatoptions);
        }
        if ($.fmatter.isEmpty(cellval)) {
            return op.defaultValue;
        }
        return $.fmatter.util.NumberFormat(cellval, op);
    };
    $.fn.fmatter.date = function (cellval, opts, rwd, act) {
        var op = $.extend({}, opts.date);
        if (opts.colModel !== undefined && opts.colModel.formatoptions !== undefined) {
            op = $.extend({}, op, opts.colModel.formatoptions);
        }
        if (!op.reformatAfterEdit && act === 'edit') {
            return $.fn.fmatter.defaultFormat(cellval, opts);
        }
        if (!$.fmatter.isEmpty(cellval)) {
            var configParseFormat = fish.config.get('dateParseFormat.date');
            var configDiaplayFormat = fish.config.get('dateDisplayFormat.date'); 

            var dateTimeParseFormat = fish.config.get('dateParseFormat.datetime');
            var dateTimeDisplayFormat = fish.config.get('dateDisplayFormat.datetime');

            if (cellval.length === dateTimeParseFormat.length) {
                configParseFormat = dateTimeParseFormat;
                configDiaplayFormat = dateTimeDisplayFormat;
            }

            var dateCell = fish.dateutil.parse(cellval, op.srcformat || configParseFormat);//统一日期格式
            return fish.dateutil.format(dateCell, op.newformat || configDiaplayFormat); //统一日期格式
        }
        return $.fn.fmatter.defaultFormat(cellval, opts);
    };
    $.fn.fmatter.select = function (cellval, opts) {
        // jqGrid specific
        cellval = String(cellval);
        var oSelect = false, ret = [], sep, delim;
        if (opts.colModel.formatoptions !== undefined) {
            oSelect = opts.colModel.formatoptions.value;
            sep = opts.colModel.formatoptions.separator === undefined ? ":" : opts.colModel.formatoptions.separator;
            delim = opts.colModel.formatoptions.delimiter === undefined ? ";" : opts.colModel.formatoptions.delimiter;
        } else if (opts.colModel.editoptions !== undefined) {
            oSelect = opts.colModel.editoptions.value;
            sep = opts.colModel.editoptions.separator === undefined ? ":" : opts.colModel.editoptions.separator;
            delim = opts.colModel.editoptions.delimiter === undefined ? ";" : opts.colModel.editoptions.delimiter;
        }
        if (oSelect) {
            var msl = opts.colModel.editoptions && opts.colModel.editoptions.multiple === true ? true : false,
                scell = [], sv;
            if (msl) {
                scell = cellval.split(",");
                scell = $.map(scell, function (n) {
                    return $.trim(n);
                });
            }
            if ($.fmatter.isString(oSelect)) {
                // mybe here we can use some caching with care ????
                var so = oSelect.split(delim), j = 0, i;
                for (i = 0; i < so.length; i++) {
                    sv = so[i].split(sep);
                    if (sv.length > 2) {
                        sv[1] = $.map(sv, function (n, i) {
                            if (i > 0) {
                                return n;
                            }
                        }).join(sep);
                    }
                    if (msl) {
                        if ($.inArray(sv[0], scell) > -1) {
                            ret[j] = sv[1];
                            j++;
                        }
                    } else if ($.trim(sv[0]) === $.trim(cellval)) {
                        ret[0] = sv[1];
                        break;
                    }
                }
            } else if ($.fmatter.isObject(oSelect)) {
                // this is quicker
                if (msl) {
                    ret = $.map(scell, function (n) {
                        return oSelect[n];
                    });
                } else {
                    ret[0] = oSelect[cellval] || "";
                }
            }
        }
        cellval = ret.join(", ");
        return cellval === "" ? $.fn.fmatter.defaultFormat(cellval, opts) : cellval;
    };
    $.fn.fmatter.rowactions = function (act) {
        var $tr = $(this).closest("tr.jqgrow"),
            rid = $tr.attr("id"),
            $grid = $(this).closest(".ui-jqgrid"),
            ts = $grid.data("ui-grid"),
            p = ts.p,
            cm = p.colModel[$.jgrid.getCellIndex(this)],
            //冻结的列怎么处理的 TODO?
            $actionsDiv = cm.frozen ? $("tr#" + rid + " td:eq(" + $.jgrid.getCellIndex(this) + ") > div", $grid) : $(this).parent(),
            op = {};

        if (cm.formatoptions !== undefined && cm.formatoptions.extraparam) {
            op = $.extend(op,cm.formatoptions.extraparam);
        }

        switch (act) {
            case 'edit':
                $grid.jqGrid('editRow', rid, op);
                break;
            case 'save':
                $grid.jqGrid('saveRow', rid, op);
                break;
            case 'cancel' :
                $grid.jqGrid('restoreRow', rid, op);
                break;
            case 'del':
                $grid.jqGrid('delRow', rid);
                break;
        }
    };
    $.fn.fmatter.actions = function (cellval, opts) {
        var op = {keys: false, editbutton: true, delbutton: true},
            rowid = opts.rowId, str = "", ocl;
        if (opts.colModel.formatoptions !== undefined) {
            op = $.extend(op, opts.colModel.formatoptions);
        }
        if (rowid === undefined || $.fmatter.isEmpty(rowid)) {
            return "";
        }
        if (op.editbutton) {
            ocl = "id='jEditButton_" + rowid + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'edit'); ";
            str += "<div title='" + $.jgrid.nav.edittitle + "' class='ui-inline-edit' " + ocl + "><span class='"+$.jgrid.edit.editicon+"'></span></div>";
            ocl = "id='jSaveButton_" + rowid + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'save');";
            str += "<div title='" + $.jgrid.edit.bSubmit + "' style='display:none;' class='ui-inline-save' " + ocl + "><span class='"+$.jgrid.edit.saveicon+"'></span></div>";
            ocl = "id='jCancelButton_" + rowid + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'cancel');";
            str += "<div title='" + $.jgrid.edit.bCancel + "' style='display:none;' class='ui-inline-cancel' " + ocl + "><span class='"+$.jgrid.edit.cancelicon+"'></span></div>";
        }
        if (op.delbutton) {
            ocl = "id='jDeleteButton_" + rowid + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'del');";
            str += "<div title='" + $.jgrid.nav.deltitle + "' class='ui-inline-del' " + ocl + "><span class='"+$.jgrid.edit.delicon+"'></span></div>";
        }
        if(op.inlineButtonAdd){
            var buttons = op.inlineButtonAdd;
            for(var i = 0 ;i < buttons.length ; i++ ){
                ocl = buttons[i].id ? 'id="'+ buttons[i].id + '_' + rowid + '"' : '';
                ocl += buttons[i].title ? ' title="' + buttons[i].title + '"' : '';
                ocl += buttons[i].className ? ' class="' + buttons[i].className + '"' : "";
                ocl += buttons[i].hidden ? ' style="display:none"' : '';
                str += '<div ' + ocl + '><span class="' + buttons[i].icon+ '"></span></div>';
            }
        }
        return "<div class ='ui-inline'>" + str + "</div>";
    };
    $.unformat = function (cellval, options, pos, cnt) {
        // specific for jqGrid only
        var ret, formatType = options.colModel.formatter,
            op = options.colModel.formatoptions || {}, sep,
            re = /([\.\*\_\'\(\)\{\}\+\?\\])/g,
            unformatFunc = options.colModel.unformat || ($.fn.fmatter[formatType] && $.fn.fmatter[formatType].unformat);
        if (unformatFunc !== undefined && $.isFunction(unformatFunc)) {
            ret = unformatFunc.call(this, $(cellval).text(), options, cellval);
        } else if (formatType !== undefined && $.fmatter.isString(formatType)) {
            var opts = $.jgrid.formatter || {}, stripTag;
            switch (formatType) {
                case 'integer' :
                    op = $.extend({}, opts.integer, op);
                    sep = op.thousandsSeparator.replace(re, "\\$1");
                    stripTag = new RegExp(sep, "g");
                    ret = $(cellval).text().replace(stripTag, '');
                    break;
                case 'number' :
                    op = $.extend({}, opts.number, op);
                    sep = op.thousandsSeparator.replace(re, "\\$1");
                    stripTag = new RegExp(sep, "g");
                    ret = $(cellval).text().replace(stripTag, "").replace(op.decimalSeparator, '.');
                    break;
                case 'currency':
                    op = $.extend({}, opts.currency, op);
                    sep = op.thousandsSeparator.replace(re, "\\$1");
                    stripTag = new RegExp(sep, "g");
                    ret = $(cellval).text();
                    if (op.prefix && op.prefix.length) {
                        ret = ret.substr(op.prefix.length);
                    }
                    if (op.suffix && op.suffix.length) {
                        ret = ret.substr(0, ret.length - op.suffix.length);
                    }
                    ret = ret.replace(stripTag, '').replace(op.decimalSeparator, '.');
                    break;
                case 'checkbox':
                    var cbv = (options.colModel.editoptions) ? options.colModel.editoptions.value.split(":") : ["Yes", "No"];
                    ret = $('input', cellval).is(":checked") ? cbv[0] : cbv[1];
                    break;
                case 'select' :
                    ret = $.unformat.select(cellval, options, pos, cnt);
                    break;
                case 'actions':
                    return "";
                default:
                    ret = $(cellval).text();
            }
        }
        return ret !== undefined ? ret : cnt === true ? $(cellval).text() : $.jgrid.htmlDecode($(cellval).html());
    };
    $.unformat.select = function (cellval, options, pos, cnt) {
        // Spacial case when we have local data and perform a sort
        // cnt is set to true only in sortDataArray
        var ret = [];
        var cell = $(cellval).text();
        // if (cnt === true) { //搜索功能不在grid里面做
        //     return cell;
        // }
        var op = $.extend({}, options.colModel.formatoptions !== undefined ? options.colModel.formatoptions : options.colModel.editoptions),
            sep = op.separator === undefined ? ":" : op.separator,
            delim = op.delimiter === undefined ? ";" : op.delimiter;

        if (op.value) {
            var oSelect = op.value,
                msl = op.multiple === true ? true : false,
                scell = [], sv;
            if (msl) {
                scell = cell.split(",");
                scell = $.map(scell, function (n) {
                    return $.trim(n);
                });
            }
            if ($.fmatter.isString(oSelect)) {
                var so = oSelect.split(delim), j = 0, i;
                for (i = 0; i < so.length; i++) {
                    sv = so[i].split(sep);
                    if (sv.length > 2) {
                        sv[1] = $.map(sv, function (n, i) {
                            if (i > 0) {
                                return n;
                            }
                        }).join(sep);
                    }
                    if (msl) {
                        if ($.inArray(sv[1], scell) > -1) {
                            ret[j] = sv[0];
                            j++;
                        }
                    } else if ($.trim(sv[1]) === $.trim(cell)) {
                        ret[0] = sv[0];
                        break;
                    }
                }
            } else if ($.fmatter.isObject(oSelect) || $.isArray(oSelect)) {
                if (!msl) {
                    scell[0] = cell;
                }
                ret = $.map(scell, function (n) {
                    var rv;
                    $.each(oSelect, function (i, val) {
                        if (val === n) {
                            rv = i;
                            return false;
                        }
                    });
                    if (rv !== undefined) {
                        return rv;
                    }
                });
            }
            return ret.join(", ");
        }
        return cell || "";
    };
    $.unformat.date = function (cellval, opts) {
        var op = opts.formatoptions;

        if (!$.fmatter.isEmpty(cellval)) {
            var configParseFormat = fish.config.get('dateParseFormat.date');
            var configDiaplayFormat = fish.config.get('dateDisplayFormat.date');

            var dateTimeParseFormat = fish.config.get('dateParseFormat.datetime');
            var dateTimeDisplayFormat = fish.config.get('dateDisplayFormat.datetime');

            if (cellval.length === dateTimeParseFormat.length) {
                configParseFormat = dateTimeParseFormat;
                configDiaplayFormat = dateTimeDisplayFormat;
            }

            var dateCell = fish.dateutil.parse(cellval, op.newformat || configDiaplayFormat);//统一日期格式
            return fish.dateutil.format(dateCell, op.srcformat || configParseFormat); //统一日期格式
        }

        return $.fn.fmatter.defaultFormat(cellval, opts);
    };

}();

/**
 * 数据表格插件
 * @class fish.desktop.widget.Grid
 * @extends fish.desktop.widget
 * <pre>
 $(element).jqGrid(option);
 $(element).jqGrid(method);
 * </pre>
 * Created by tanyl on 2014/12/16.
 * Modify  by tanyl on 2015/07/23.
 * Dependent:
 *      grid.util.js
 *      grid.formatter.js
 *      grid.tpl.js
 *      grid.en.js
 * ps:rowid因为需要做选择器用,不能含有.等具有含义的字符
 */
!function () {

    'use strict';

    $.extend($.jgrid, fish.getResource("grid"));
    $(document).on("languageChanged.fish", function () {
        $.extend($.jgrid, fish.getResource("grid"));
    })

    $.jgrid.MAXROWNUM = 99999;
    $.jgrid.reader = {
        id: "_id_"
    };

    $.widget("ui.grid", {
        //控件的默认参数
        options: {
            /**
             * 表格最小高度
             * @cfg {Object} minHeight='150'
             */
            minHeight: 150,
            /**
             * 表格高度,默认取父容器的高度,可以设置具体数值
             * @cfg {Object} height
             *  <pre>
             *      取值逻辑:
             *      先取控件初始化参数中的height属性,如果没有设置
             *      再取元素自身的height,如果没有设置
             *      再取元素父容器的height,如果高度为0
             *      则取150的默认值
             *      注意点:
             *      如果页面表格控件已经初始化计算出宽度,此时动态操作dom使页面出现垂直滚动条(垂直滚动条的出现会使屏幕变窄),此时宽度需要重新设置
             *  </pre>
             */
            height: "",
            /**
             * 分页对象,设置为true会根据grid创建出来,默认在grid底部构造id为gridid+pager的分页栏;
             * 也可以指定一个外部的selector,selector自行生成分页组件
             * @cfg {Boolean} pager
             */
            pager: "",
            /**
             * 当前显示的是第几页.初始化的时候基本是第一页,一般用于取值
             * @cfg {Number} page=1
             */
            page: 1,
            /**
             * 初始化一页显示的记录条数,默认无限大;
             * 分页的场景下，默认20条每页.
             * @cfg {Number} rowNum=20
             */
            rowNum: $.jgrid.MAXROWNUM,
            /**
             * 初始化页码可选数量，默认显示10个页码按钮.
             * @cfg {Number} displayNum=10
             */
            displayNum: 10,
            /**
             * 记录总数.一般用于取值
             * @cfg {Number} records=0
             */
            records: 0,
            /**
             * 当前页的记录总数.一般用于取值,最后一页的记录数往往跟rowNum不一样
             * @cfg {Number} reccount
             */
            reccount: 0,
            /**
             * 是否显示分页前后所有可点击按钮
             * @cfg {Boolean} pgbuttons=true
             */
            pgbuttons: true,
            /**
             * 是否显示分页的页码按钮
             * @cfg {Boolean} pgnumbers=true
             */
            pgnumbers: true,
            /**
             * 是否显示分页的文本输入框，按回车可以跳转到指定的页
             * @cfg {Boolean} pginput=true
             */
            pginput: true,
            /**
             * 分页输入框的默认格式,默认取值为grid的国际化资源文件
             * @cfg {String} pgtext="Page {0} of {1}"
             */
            pgtext: "Page {0} of {1}",
            /**
             * 有分页栏的情况下显示详细的记录数，tree的场景下此参数无效
             * @cfg {Boolean} viewrecords=true
             */
            viewrecords: true,
            /**
             * 有分页栏的情况下显示分页总数，tree的场景下此参数无效
             * @cfg {Boolean} viewtotal=true
             */
            viewtotal: true,
            /**
             * 分页栏详细记录的语言提示,默认取值为grid的国际化资源文件
             * @cfg {String} recordtext="View {0} - {1} of {2}"
             */
            recordtext: "View {0} - {1} of {2}",
            /**
             * 分页栏详细记录的语言提示,没有记录的时候提示语,默认取值为grid的国际化资源文件
             * @cfg {String} emptyrecords="No records to view"
             */
            emptyrecords: "No records to view",
            /**
             * 分页的场景下,可以设置每页显示多少条记录,数组形式如[20,50,100].
             * @cfg {Array} rowList=[]
             */
            rowList: [],
            /**
             * 分页情况下的总页数，一般用于取值
             * @cfg {Number} lastpage=0
             */
            lastpage: 0,
            /**
             * 排序方式，默认升序
             * @cfg {String} sortorder="asc"
             */
            sortorder: "asc",
            /**
             * 排序的列标识
             * @cfg {String} sortname
             */
            sortname: "",
            /**
             * 表格是否支持多列排序，默认false
             * @cfg {Boolean} multiSort
             */
            multiSort: false,
            /**
             * 记录上一次排序列的索引，一般用于取值，从0开始
             * @cfg {Number} lastsort
             */
            lastsort: 0,
            /**
             * 数据类型，一般分为local数组和json格式,分别对应本地数据和服务器端数据
             * @cfg {String} datatype="local"
             */
            datatype: "local",
            /**
             * 服务器端数据接口函数，参数datatype为json时生效;此函数的返回值为包含分页信息的json数据，用户可以在此方法里面跟服务器作交互,此方法提供参数有目标页码，一页显示的记录个数，排序列及排序方式,这些参数有可以通过grid的方法获取到。
             * 如果pageData内函数是异步方式，可以直接返回false,等数据回调成功时reloadData即可
             * @cfg {Function} pageData
             */
            pageData: null,
            /**
             * json格式数据的定义
             * @cfg {Object} jsonReader={root: "rows",page: "page",total: "total",records: "records",id: "_id_",userdata: "userdata"}
             * @cfg {String} jsonReader.root=rows json格式中数据源对应的key值
             * @cfg {String} jsonReader.page=page json格式中当前页对应的key值
             * @cfg {String} jsonReader.total=total json格式中总页数对应的key值,treeGrid场景中,子节点无法计算,total必须要自己传进来
             * @cfg {String} jsonReader.records=records json格式中总记录数的key值,正常数据传入了总记录数,total就不需要传了,会自动计算出来的
             * @cfg {String} jsonReader.userdata=userdata json格式中额外数据的key值,可用于数据统计之类的
             */
            jsonReader: {
                root: "rows",
                page: "page",
                total: "total",
                records: "records",
                userdata: "userdata"
            },
            /**
             * 列的定义
             * @cfg {Object} colModel
             * @cfg {String} colModel.name     设置列在表格中的唯一名称，此属性是必须的。保留字rn,cb
             * @cfg {String} colModel.label    定义此列的标题,若为空，则标题为该列的name属性值
             * @cfg {Boolean} colModel.key=false    该列可设置为行ID,只有一列可设置该属性。
             * @cfg {Boolean} colModel.sortable=true  定义是否可以排序
             * @cfg {String} colModel.sorttype=text   用于定义排序列类型。可取int/integer、float/number/currency、date、text;也可以定义自定义函数
             * @cfg {Boolean} colModel.resizable=true  定义是否可变列宽
             * @cfg {Boolean} colModel.title=true     当设置为false时，鼠标滑向单元格时不显示title属性
             * @cfg {String} colModel.headertitle     鼠标划向列头时的提示,默认为列名
             * @cfg {Number} colModel.width=150       设置列的初始宽度，可用pixels和百分比
             * @cfg {String} colModel.align=left      定义表格单元格（非表头）的对齐方式，可取值：left, center, right
             * @cfg {String} colModel.wordwrap=pre   定义表格单元格（非表头）是否保留文本内容中的空白和换行符，可取值pre,nowrap,pre-wrap,pre-inline
             * @cfg {Boolean} colModel.hidden=false   定义初始化时，列是否隐藏
             * @cfg {Boolean} colModel.hidedlg=false  用户可以此控制列的显示或隐藏;若设置为true，该列将不能隐藏，即选择哪些列可以隐藏的场景下，此列不出现在选项里面
             * @cfg {String} colModel.classes         此属性用于定义列样式的类名，当有多个类名时，用空格间隔，例如：“class1 class2”。在表格的CSS中，有一个预定义的类ui-ellipsis用于定义特定的行
             * @cfg {Boolean} colModel.editable=false 定义字段是否可编辑，用于单元格编辑、行编辑
             * @cfg {String}  colModel.formatter      定义单元格的显示值，数据集内值与显示值可能不一样，可以是select、checkbox、integer、number、currency、date、linkFunction、actions(内置编辑删除功能);也可以扩展$.fn.fmatter自定义格式
             *                                        也可以指定一个function,返回一个html元素即可，function的参数为cellval(单元格值), opts(参数含rowid、列属性等), rwdat(行数据), _act(行为,是add还是edit方式调用的)
             * @cfg {Object} colModel.formoptions     formatter格式的各种选项
             * <pre>
             * defaultValue : 数据集内值为空的时候默认显示这个值
             * integer类型：
             * thousandsSeparator： //千分位分隔符,
             * defaulValue
             * number类型：
             * decimalSeparator, //小数分隔符，如”.”
             * thousandsSeparator, //千分位分隔符，如”,”
             * decimalPlaces, //小数保留位数
             * defaulValue
             * currency类型：
             * decimalSeparator, //小数分隔符，如”.”
             * thousandsSeparator, //千分位分隔符，如”,”
             * decimalPlaces, //小数保留位数
             * defaulValue,
             * prefix //前缀，如加上”$”
             * suffix//后缀
             * date类型：
             * checkbox类型：
             * 没有参数时使用editoptions
             * disabled //true/false 默认为true此时的checkbox不能编辑
             * value  为冒号分开的字符串,冒号前的是真值,会打勾
             * select类型：
             * 设置下拉框，没有参数时使用editoptions
             * value 可以是一个键值对对象;也可以是用冒号分号分割的字符串，数据集中的是key，界面将显示value值
             * multiple 默认false,如果设置成true支持多选，多选的值界面上显示会用逗号隔开
             * delimiter 是value值为字符串的场景下，选项值的分割符，就是默认的分号
             * separator 是value值为字符串的场景下，每个选项的key:value分割符，就是默认的冒号
             * linkFunction类型：
             * cssp 样式，可以是classes，也可以是css对象
             * action 点击触发的事件,参数是rowid
             * actions类型：
             * editbutton=true 开启修改，保存，取消的功能
             * delbutton=true 开启删除的功能
             * inlineButtonAdd 开启自定义按钮，每个对象代表一个按钮,{id,title,className,hide,icon},用户可以稍后自行通过jquery方式绑定事件
             * </pre>
             * @cfg {String}  colModel.edittype=text   定义行编辑和表单模式的编辑类型，可以是text、textarea、select、checkbox、 password、button。
             * @cfg {Object}  colModel.editoptions     根据edittype 参数定义可用的值数组，其中checkbox,select参数值与formoptions一致;其他的皆是文本框形式;含有defaultValue,在行编辑模式新增行数据且设置useDefValues=true的时候会默认使用这个值
             * @cfg {String}  colModel.editrules       设置可编辑字段的校验规则，规则详见校验控件
             * @cfg {Function} colModel.cellattr 在创建单元格内容的时候给单元格添加附加到属性
             * <pre>
             * cellattr: function(rowId, value, rowObject, colModel) {return ' colspan=2';}
             * 传递进入这个配置方法的参数如下
             * rowId - 单元格所属行id
             * value - 显示在单元格中的值
             * rawObject - 原始的数据行对象
             * colModel - 该列的属性
             * </pre>
             */
            colModel: [],
            /**
             * 单选条件下的选中的记录.一般用于取值
             * @cfg {String} selrow
             */
            selrow: null,
            /**
             * 复选条件下的选中的记录.一般用于获取打勾的记录
             * @cfg {Array} selarrrow
             */
            selarrrow: [],
            /**
             * 单元格编辑保存的内容.一般被用于保存记录时使用
             * @cfg {Array} savedRow
             */
            savedRow: [],
            /**
             * 表头显示的标题，只有配置此参数才会出现表格的缩放按钮
             * @cfg {String} caption
             */
            caption: "",
            /**
             * 当含有表头时，是否出现表格缩放按钮
             * @cfg {Boolean} hidegrid=false
             */
            hidegrid: false,
            /**
             * 初始化是否隐藏表格
             * @cfg {Boolean} hiddengrid=false
             */
            hiddengrid: false,
            /**
             * 表格数据额外的值，也可以存在于json格式数据中，可用于toolbar或者footerrow
             * @cfg {Object} userData
             */
            userData: {},
            /**
             * 表格列宽是否按比例缩放，默认true
             * @cfg {Boolean} shrinkToFit=true
             */
            shrinkToFit: true,
            /**
             * 表格宽度是否自适应，取决于父节点宽度，默认为false，否则可以设置width来指定表格宽度
             * @cfg {Boolean} autowidth=false
             */
            autowidth: false,
            /**
             * 表格宽度是否自适应，取决于父节点宽度，同autowidth=true场景，否则可以设置width来指定表格宽度
             * @cfg {Boolean} width="100%"
             */
            width: "100%",
            /**
             * 鼠标拖动修改某列宽度的时候其他列是否自适应填充
             * @cfg {Boolean} forceFit=false
             */
            forceFit: false,
            /**
             * 表格状态，一般用于取值，判断表格是否隐藏
             * @cfg {String} gridstate="visible"
             */
            gridstate: "visible",
            /**
             * 是否开启序号列,会产生一个name='rn'的colMod对象
             * @cfg {Boolean} rownumbers=false
             */
            rownumbers: false,
            /**
             * rownumbers序号列开启时的列宽
             * @cfg {Number} rownumWidth=25
             */
            rownumWidth: 25,
            /**
             * 开启表格多选功能,会产生一个name='cb'的colMod对象
             * @cfg {Boolean} multiselect=false
             */
            multiselect: false,
            /**
             * 多选框列开启时的列宽
             * @cfg {Number} multiselectWidth=20
             */
            multiselectWidth: 20,
            /**
             * 水平滚动条的高度,如果有样式修改了浏览器水平滚动条默认的高度,则这里需要同步修改
             * @cfg {Number} scrollOffset=18
             */
            scrollOffset: 18,
            /**
             * 是否在表格底部新增一行
             * @cfg {Boolean} footerrow=false
             */
            footerrow: false,
            /**
             * 是否将userdata数据自动同步到footerrow那一行上,一般结合userData与footerrow参数用于统计
             * @cfg {Boolean} userDataOnFooter=false
             */
            userDataOnFooter: false,
            /**
             * 是否开启单元格编辑模式，如果点击到可编辑的单元格时,不触发行选中事件
             * @cfg {Boolean} cellEdit=false
             */
            cellEdit: false,
            /**
             * 单元格编辑，切换单元格后，原值是否保存，默认true,可选"",false分别表示切换时不处理和不保存值
             * @cfg {Boolean} cellAutoSave
             */
            cellAutoSave: true,
            /**
             * 是否在表格上下新增两个空行,其中第一个参数为boolean,设置为true表示开启toolbar功能,第二个参数为'top'或者'bottom',分别表示是在表格上部还是下部新增空行.也可以设置成'both',上下都新增,新增的空行id默认为't_'或者'tb_'加上表格id,一般用户存放操作按钮或者显示额外信息
             * @cfg {Array} toolbar=[false, ""]
             */
            toolbar: [false, ""],
            /**
             * 当设置某条记录选中时，如果此记录未在可见范围，滚动条会自动滚动，默认值true
             * @cfg {Boolean} scrollrows=true
             */
            scrollrows: true,
            /**
             * 是否开启快速加载模式，如果定义了afterInsertRow事件，此参数则要求设置为false
             * @cfg {Boolean} gridview=true
             */
            gridview: true,
            /**
             * 隐藏列的时候是否改变表格外层宽度
             * @cfg {Boolean} fixWidth=false
             */
            fixWidth: false,
            /**
             * 加载表格数据的时候是否出现loading遮罩,依赖blockui控件;此属性开启会采用延迟加载数据的方式,因此加载完数据对数据进行操作的步骤,需要放到数据加载完成事件(gridComplete)里完成;异步的场景就直接用fish.ajax,这里的参数就不要用了
             * @cfg {Boolean} showMask=false
             */
            showMask: false,
            /**
             * 表格列的通用属性,可简化colMod列的配置
             * @cfg {Object} cmTemplate
             */
            cmTemplate: {},
            /**
             * 表格的数据源
             * @cfg {Array} data
             */
            data: [],
            //内部用,用来记录rowid所在行的索引
            _index: {},
            /**
             * 表格是否启用tree形式
             * @cfg {Boolean} treeGrid
             */
            treeGrid: false,
            /**
             * tree格式的定义
             * @cfg {Object} treeReader={level: "level",parentid: "parent",leaf: "isLeaf",expanded: "expanded",icon: "icon"}
             * @cfg {String} treeReader.level=level 节点所在等级的key值
             * @cfg {String} treeReader.parentid=parent 节点的父节点的key值
             * @cfg {String} treeReader.leaf=isLeaf 是否为叶子节点的key值
             * @cfg {String} treeReader.expanded=expanded 节点是否展开的key值
             * @cfg {String} treeReader.icon=icon   节点显示图标的key值
             */
            treeReader: {
                level: "level",
                parentid: "parent",
                leaf: "isLeaf",
                expanded: "expanded",
                icon: "icon"
            },
            /**
             * tree格式用来展开的那一列
             * @cfg {String} expandColumn
             */
            expandColumn: null,
            /**
             * 点击可展开列内容而不需要点击图标就支持节点缩放
             * @cfg {String} expandColClick=false
             */
            expandColClick: false,
            /**
             * treeGrid场景下节点的图标,一般分为展开,收缩,叶子节点三种,如果数据中含有icon属性,则取数据中的图标样式
             * @cfg {Boolean} treeIcons={plus: 'glyphicon glyphicon-triangle-right',minus:'glyphicon glyphicon-triangle-bottom',leaf:'glyphicon glyphicon-file',folderOpen:'',folderClosed:''}
             */
            treeIcons: {
                plus: 'glyphicon glyphicon-triangle-right',
                minus: 'glyphicon glyphicon-triangle-bottom',
                leaf: 'glyphicon glyphicon-file',
                folderClosed: '', //支持全局配置,展开列的close状态的节点图标，默认为空
                folderOpen: '' //支持全局配置,展开列的open状态的节点图标，默认为空
            },
            /**
             * treeGrid场景下，节点类型是否支持转变，点击的节点如果没有子节点，则此节点的图标会变成叶子节点
             * @cfg {Boolean} leafChange=false
             * 注意：目前删光子节点,父节点会变成叶子节点的;这里是不是需要参数控制下?
             */
            leafChange: false,
            /**
             * treeGrid的多选场景下，点击某个节点，是否自动选中它的所有父节点
             * @cfg {Boolean} checkParent=false
             */
            checkParent: false,
            /**
             * treeGrid的多选场景下，点击某个节点，是否自动选中它的所有子节点
             * @cfg {Boolean} checkChildren=false
             */
            checkChildren: false,
            /**
             * 为列指定一个调整宽度时候的显示风格class
             * @cfg {String} resizeclass
             */
            resizeclass: '',
            /**
             * 单元格是否对html自动编码,单元格内有特殊字符的时候需要控制,如存在'<','>'等
             * @cfg {Boolean} autoencode=false
             */
            autoencode: false,
            //nextVisible,列拖拽的用到.鼠标操作的下一个可见的列位置索引差,通过此能方便找到下一个可见列,在forceFit为true的时候,下一个可见列需要自动调整大小,内部用;
            nv: 0,
            //在拖拽列的时候用,内部用
            remapColumns: [],
            /**
             * 在窗口发生变化的时候，宽度能否根据父层容器的大小自适应
             * @cfg {Boolean} autoResizable=true
             */
            autoResizable: true,
            /**
             * @since V2.0.0
             * @cfg {Boolean} [showColumnsFeature=false] 是否展示列功能
             */
            showColumnsFeature: false,
            /**
             * @since V2.0.0
             * @cfg {Boolean} [pagebar=false] 是否出现分页栏,pager和showColumnsFeature设置为true的时候自动会出现;也可以显式设置为true供navButton使用
             */
            pagebar: false,
            cached: false,
            /**
             * 滚动条的宽度 单位px
             */
            scrollbarWidth: 10,
            /**
             * @since V2.2.0
             * @cfg {Boolean} [exportFeature=false] 是否显示导出按钮;可以是对象或者函数,为true表示导出当前页数据
             */
            exportFeature: false,

            /**
             * @cfg {Boolean} [subGrid=false] 是否含有子Grid
             */
            subGrid: false,
            /**
             * @cfg {Number} [subGridWidth=20] 子Grid点击按钮默认宽度20px
             */
            subGridWidth: 20,
            /**
             * @cfg {Array} SubGrid模型，如果模型一致则使用该选项
             */
            subGridModel: [],

            /**
             * @cfg {Object} subGridAjaxOptions 通用模型下Ajax请求参数
             * @cfg {String | Function} subGridAjaxOptions.url 请求地址;或函数返回url
             * @cfg {String} subGridAjaxOptions.type 请求类型，默认post
             * @cfg {String} subGridAjaxOptions.data 请求其他参数，默认null
             * @cfg {String} subGridAjaxOptions.showMask，是否显示遮罩，默认false
             */
            subGridAjaxOptions: {
                url: null,
                type: 'post',
                data: null,
                showMask: false
            },
            /**
             * @event subGridBeforeExpand SubGrid 展开前事件，return false可组织SubGrid展开
             */
            subGridBeforeExpand: $.noop,
            /**
             * @event subGridRowExpanded SubGrid展开事件
             */
            subGridRowExpanded: $.noop,
            /**
             * @event subGridRowColapsed  SubGrid收起事件
             */
            subGridRowColapsed: $.noop,
            /**
             * @cfg {Object} subGridOptions SubGrid配置参数
             * @cfg {String} subGridOptions.plusIcon=glyphicon glyphicon-plus 收缩时图标
             * @cfg {String} subGridOptions.minusIcon=glyphicon glyphicon-minus 展开时图标
             * @cfg {Boolean} subGridOptions.reloadOnExpand=true, 展开时重新渲染SubGrid
             * @cfg {Boolean} subGridOptions.selectOnExpand=true, 展开时选中当前行
             * @cfg {Boolean} subGridOptions.selectOnCollapse=true, 收起时选中当前行
             */
            subGridOptions: {
                plusIcon: 'glyphicon glyphicon-plus',
                minusIcon: 'glyphicon glyphicon-minus',
                reloadOnExpand: true,
                selectOnExpand: false,
                selectOnCollapse: false
            }
        },
        //控件默认参数的扩展
        _getCreateOptions: function () {
            // $.jgrid.defaults 为国际化文件的内容
            return $.jgrid.defaults;
        },
        //控件入口函数
        _create: function () {
            var ts = this, //控件对象
                $el = this.element, //表格整体的jquery形式
                el = $el[0], //表格整体
                p = this.options, //表格参数
                $tb; //表格核心的jquery形式
            ts.p = p; //别名p指向option
            if (!el.id) $el.uniqueId(); //没有ID,生成一个
            ts.p.id = el.id; //option 存入表格ID
            //将生成的对象保存到控件,后续要用到
            ts.grid = this._innerParam();
            //对初始化函数进行必要的处理
            ts._formatOption();
            //生成HTML
            ts._buildHTML();
            //设置高度
            this._initHeight();
            //设置宽度
            this._initWidth();

            ts.$tb = $tb = $("#btable_" + el.id, $el); //表格数据主体,用一个变量存起来,很常用
            var $hDiv = $(".ui-jqgrid-hdiv", $el);
            ts.grid.hDiv = $hDiv[0]; //保存表头容器hdiv和表格主体数据容器bdiv
            var $bDiv = $(".ui-jqgrid-bdiv", $el);
            ts.grid.bDiv = $bDiv[0];
            ts.rows = $tb[0].rows; //将表格的行存到ts.rows属性内;一定要保证元素在dom内
            ts.grid.cols = ts.rows[0].cells; //将表格的第一行的各列存到grid对象上去,jqgfisrtrow这一列吧
            //渲染每一列的状态,排序,列宽等
            this._renderCol();
            //绑定事件
            this._setupEvents();
            //分页的处理
            if (ts.p.pager) {
                ts.setPager(ts.p.pageEl);
            }
            //footerrow的处理
            if (ts.p.footerrow) {
                this._setFooterRow();
            }
            //列头的处理
            if (ts.p.caption) {
                this._setCaption();
            }

            // 展示列功能按钮
            if (ts.p.showColumnsFeature) {
                this._setupColumnsFeature();
            }
            // 展示列功能按钮
            if (ts.p.exportFeature) {
                this._setupExportFeature();
            }


            //数据加载
            ts.populate();
            //键盘数据
            ts.bindKeys();

            //更换滚动条
            if (!(ts.p.height === 'auto' || (fish.browser.msie && ts.p.height === "100%"))) {
                ts.$slimScroll = $(ts.$tb).parent();
                var cursorwidth = ts.p.scrollbarWidth + "px";
                $bDiv.niceScroll({
                    cursorcolor: '#1d5987',
                    cursorwidth: cursorwidth,
                    cursoropacitymax: "0.4"
                });
                $bDiv.scroll(ts.grid.scrollGrid);
            } else {
                ts.$slimScroll = $(ts.grid.bDiv);
            }
        },

        _init: function () {
            if (this._inited) {
                var options = this.options;
                this.element.grid('destroy');
                this.element.grid(options);
            }
            this._inited = true;
        },

        //重写_setOption方法,支持多次初始化控件,同grid内置的setGridParam,部分参数设置的时候,并没有触发页面变化,会导致数据与界面不同步;高度、宽度的变化,需要调用setGridWidth或者setGridHeight
        _setOption: function (key, value) {
            this.options[key] = value;
            return this;
        },
        //重写_destroy方法  销毁表格
        _destroy: function () {
            var ts = this;
            //销毁滚动条
            $(ts.grid.bDiv).getNiceScroll().remove();

            //销毁分页
            if (ts.p.pagebar) {
                $(ts.p.pageEl).pagination("destroy");
                //#480, delete grid pager
                this.element.find('.ui-jqgrid-pager').remove();
            }
            //删除所有的行
            this.emptyRows();
            //去掉事件的响应
            $(document).unbind("mouseup.jqGrid" + ts.p.id);
            this.element.unbind();

            //删除头部
            var i, l = ts.grid.headers.length;
            for (i = 0; i < l; i++) {
                ts.grid.headers[i].el = null;
            }

            this.element.find("#gview_" + ts.p.id).remove();
            this.element.find("#rs_m" + ts.p.id).remove();

            this.element.removeClass("ui-jqgrid");

        },
        //创建一个对象保存到控件内
        _innerParam: function () {
            var ts = this;
            return {
                headers: [],
                cols: [],
                footers: [],
                //resizing hDiv bDiv sDiv
                dragStart: function (i, x, y) {
                    var leftpos = $(this.hDiv).offset().left; //fix bootstrap css bug
                    this.resizing = {
                        idx: i,
                        startX: x.clientX - leftpos,
                        sOL: x.clientX - leftpos
                    };
                    this.hDiv.style.cursor = "col-resize";
                    this.curGbox = $("#rs_m" + ts.p.id, ts.element);
                    this.curGbox.css({
                        display: "block",
                        left: x.clientX - leftpos,
                        top: y[1],
                        height: y[2]
                    });
                    ts._trigger("resizeStart", null, [x, i]);
                    document.onselectstart = function () {
                        return false;
                    };
                },
                dragMove: function (x) {
                    if (this.resizing) {
                        var leftpos = $(this.hDiv).offset().left; //fix bootstrap css bug
                        var diff = x.clientX - leftpos - this.resizing.startX,
                            h = this.headers[this.resizing.idx],
                            newWidth = h.width + diff,
                            hn, nWn;
                        if (newWidth > 33) {
                            this.curGbox.css({
                                left: this.resizing.sOL + diff
                            });
                            if (ts.p.forceFit === true) {
                                hn = this.headers[this.resizing.idx + ts.p.nv];
                                nWn = hn.width - diff;
                                if (nWn > 33) {
                                    h.newWidth = newWidth;
                                    hn.newWidth = nWn;
                                }
                            } else {
                                this.newWidth = ts.p.tblwidth + diff;
                                h.newWidth = newWidth;
                            }
                        }
                    }
                },
                dragEnd: function () {
                    this.hDiv.style.cursor = "default";
                    if (this.resizing) {
                        var idx = this.resizing.idx,
                            nw = this.headers[idx].newWidth || this.headers[idx].width;
                        nw = parseInt(nw, 10);
                        this.resizing = false;
                        $("#rs_m" + ts.p.id).css("display", "none");
                        ts.p.colModel[idx].width = nw;
                        this.headers[idx].width = nw;
                        this.headers[idx].el.style.width = nw + "px";
                        this.cols[idx].style.width = nw + "px";
                        if (this.footers.length > 0) {
                            this.footers[idx].style.width = nw + "px";
                        }
                        if (ts.p.forceFit === true) {
                            nw = this.headers[idx + ts.p.nv].newWidth || this.headers[idx + ts.p.nv].width;
                            this.headers[idx + ts.p.nv].width = nw;
                            this.headers[idx + ts.p.nv].el.style.width = nw + "px";
                            this.cols[idx + ts.p.nv].style.width = nw + "px";
                            if (this.footers.length > 0) {
                                this.footers[idx + ts.p.nv].style.width = nw + "px";
                            }
                            ts.p.colModel[idx + ts.p.nv].width = nw;
                        } else {
                            ts.p.tblwidth = this.newWidth || ts.p.tblwidth;
                            $('table:first', this.bDiv).css("width", ts.p.tblwidth + "px");
                            $('table:first', this.hDiv).css("width", ts.p.tblwidth + "px");
                            this.hDiv.scrollLeft = ts.$slimScroll[0].scrollLeft;
                            if (ts.p.footerrow) {
                                $('table:first', this.sDiv).css("width", ts.p.tblwidth + "px");
                                this.sDiv.scrollLeft = ts.$slimScroll[0].scrollLeft;
                            }
                        }
                        ts._trigger("resizeStop", null, [nw, idx]);
                    }
                    this.curGbox = null;
                    document.onselectstart = function () {
                        return true;
                    };
                },
                scrollGrid: function (e) {
                    var scrollLeft = ts.grid.bDiv.scrollLeft;

                    ts.grid.hDiv.scrollLeft = scrollLeft;
                    if (ts.p.footerrow) {
                        ts.grid.sDiv.scrollLeft = scrollLeft;
                    }
                    if (e) {
                        e.stopPropagation();
                    }
                }
            }
        },
        //option默认参数的处理
        _formatOption: function () {
            var ts = this,
                $el = ts.element,
                p = ts.p;
            //处理高度
            if (!p.height) {
                p.height = $el.height();
                if (p.height > 0) {
                    $el.height("auto");
                } else {
                    p.height = $el.parent().innerHeight();
                }
                if (p.height < p.minHeight) {
                    p.height = p.minHeight;
                }
            }
            //处理colModel
            p.keyIndex = false;
            p.keyName = false;
            var item, i, sortarr = [],
                sortord = [],
                sotmp = [];

            //subGrid
            if (p.subGrid) {
                p.colModel.unshift({
                    name: 'subgrid',
                    label: '',
                    width: p.subGridWidth,
                    sortable: false,
                    resizable: false,
                    hidedlg: true,
                    align: 'center',
                    fixed: true
                });
            }

            //解析排序列,设置lastsort,在multiSort场景下设置每一列的lso
            if (p.multiSort) {
                sortarr = p.sortname.split(",");
                for (i = 0; i < sortarr.length; i++) {
                    sotmp = $.trim(sortarr[i]).split(" ");
                    sortarr[i] = $.trim(sotmp[0]);
                    sortord[i] = sotmp[1] ? $.trim(sotmp[1]) : p.sortorder || "asc";
                }
            }
            //补充多选框与序列列
            if (p.multiselect) {
                p.colModel.unshift({
                    name: 'cb',
                    label: '',
                    width: p.multiselectWidth,
                    sortable: false,
                    resizable: false,
                    hidedlg: true,
                    align: 'center',
                    fixed: true
                });
            }

            if (p.rownumbers) {
                p.colModel.unshift({
                    name: 'rn',
                    label: '',
                    width: p.rownumWidth,
                    sortable: false,
                    resizable: false,
                    hidedlg: true,
                    align: 'center',
                    fixed: true
                });
            }

            if (p.showColumnsFeature) {
                var opt = {};
                if (p.cached) {
                    var columnsStr = fish.store.get(this.p.id);
                    if (columnsStr) {
                        opt.colModel = JSON.parse(columnsStr);
                    }
                    this._trigger("columnsFeatureInit", null, opt);
                    if (opt.colModel) {
                        this._readCacheColumnsFeature(opt.colModel);
                    }
                }
            }
            //处理每一列的属性
            $.each(p.colModel, function (i, item) {
                $.extend(true, item, p.cmTemplate, item.template || {}, item);
                item.widthOrg = item.width = item.width ? parseInt(item.width, 10) : 150; //widthOrg影响到拖拽grid时大小改变
                item.label === void 0 ? item.label = item.name : "";
                item.title !== false ? item.title = true : "";
                item.headertitle = item.headertitle || $.jgrid.stripHtml(item.label);
                item.hidden = !!item.hidden;
                item.resizable !== false ? item.resizable = true : "";
                item.sortable !== false ? item.sortable = true : "";
                if (p.keyIndex === false && item.key === true) {
                    p.keyIndex = i;
                    p.keyName = item.name;
                }
                // item.lso = ""; //ISO是对应列的最后一次排序方式,lastsortorder?
                if (item.name === p.sortname) p.lastsort = i;
                if (ts.p.multiSort) {
                    sotmp = $.inArray(item.name, sortarr);
                    if (sotmp !== -1) {
                        item.lso = sortord[sotmp];
                    }
                }
            });
            //
            //最后一列在自适应填充满宽度的时候,最后一列不出现可拖动线条
            if (p.shrinkToFit === true && p.forceFit === true) {
                for (i = p.colModel.length - 1; i >= 0; i--) {
                    if (!p.colModel[i].hidden) {
                        p.colModel[i].resizable = false;
                        break;
                    }
                }
            }
            //排序方式内部采用小写方式
            p.sortorder = p.sortorder.toLowerCase();
            //各列非自适应宽度的场景下,forceFit参数失效
            if (p.shrinkToFit === false) p.forceFit = false;
            //防重复点击,IE8能穿透~
            p.disableClick = false;
            //treeGrid基本属性
            p.treeGrid && ts._setTreeGrid();
            // 如果没有设置keyName,则取$.jgrid.reader.id的配置
            p.keyName ? "" : p.keyName = $.jgrid.reader.id;
            // 新增ExpandColumn,ExpandColClick的别名,后续默认全部改成小写
            p.expandColumn = p.expandColumn || p.ExpandColumn;
            p.expandColClick = p.expandColClick || p.ExpandColClick;
            // add pager===true表示的是使用自带的分页,否则就是指向的外部分页
            if (p.pager) {
                p.rowNum = p.rowNum === $.jgrid.MAXROWNUM ? 20 : p.rowNum; //分页情况下默认20条记录
                if (p.pager === true) {
                    p.pagebar = true;
                    p.pager = "#" + ts.p.id + "_pager";
                    p.pageEl = "#" + ts.p.id + "_pager_right";
                } else {
                    p.pageEl = p.pager;
                }
            }

            p.pagebar = p.pagebar || p.showColumnsFeature;
            //处理垂直滚动条
            if (!$.fn.niceScroll) { //TODO 后续改为抛出异常
                console.warn("need niceScroll");
            }
        },
        //采用Handlebars生成HTML
        _buildHTML: function () {
            var p = this.p;
            var tplParams = $.extend({}, p);
            if (p.toolbar[0]) {
                if (p.toolbar[1] === 'top') tplParams.topbar = true;
                else if (p.toolbar[1] === 'bottom') tplParams.bottombar = true;
                else if (p.toolbar[1] === 'both') {
                    tplParams.bottombar = true;
                    tplParams.topbar = true;
                }
            }
            // 去除模板中的空白部分
            var tpl = $.jgrid.tpl.replace(/\>\s+\</g, "><").replace(/\>\s+\{\{/g, ">{{").replace(/\}\}\s+\</g, "}}<").replace(/\}\}\s+\{\{/g, "}}{{");
            var fhtml = fish.compile(tpl)(tplParams);
            var $tmp = $(fhtml);
            this.element.addClass($tmp[0].className).append($tmp.html());
            // return $tmp;
        },
        // 计算高度 // 需要等列头宽度计算好了之后,才能计算出高度 // http://10.45.61.11/fish/fish-desktop/issues/309
        _initHeight: function () {
            var p = this.p;
            if (!isNaN(p.height)) {
                //修复高度,$el.outerHeight()中存在列头、分页栏及边框的高度
                //这里加上容错处理 fish/fish-desktop/issues/108
                var tempHeight = this.element.outerHeight();
                if (tempHeight <= p.height) { //隐藏的状态下tempHeight是0
                    var $tmp = this.element.clone();
                    tempHeight = $tmp.appendTo('body').outerHeight();
                    $tmp.remove();
                }
                p.height = p.height - (tempHeight - p.height);
            }
            $(".ui-jqgrid-bdiv", this.element).css({
                height: p.height
            });
        },

        //设置表格宽度和具体的列宽
        _initWidth: function () {
            var ts = this,
                grid = ts.grid,
                initwidth = 0, //内部实际的宽度
                lvc = 0, //记录最后一个可见的列索引
                cw, //临时变量,记录每一列的宽度,根据自身宽度与总宽度算出比例后的宽度
                aw, //去除了gw的表格宽度
                gw = 0; //计算框架生成rn,cb列占用的宽度 multiselectWidth: 20,rownumWidth: 25,


            if (ts.p.autowidth === true || ts.p.width === '100%') {
                if (ts.element.is("table")) {
                    ts.element.css("width", "100%"); //table默认宽度不是100%,建议直接使用div
                }
                ts.p.autowidth = true;
                var pw = $(this.element).outerWidth();
                if (pw > 0) {
                    ts.p.width = pw;
                } else {
                    ts.p.width = 'nw';
                    console.warn("grid[" + ts.p.id + "] 请不要在父容器隐藏的情况下初始化表格");
                }
            }

            $.each(ts.p.colModel, function () {
                if (this.hidden === false) {
                    initwidth += this.widthOrg;
                    if (this.fixed) { //rn,cb列里面使用到,这两列不参与宽度计算
                        gw += this.width;
                    } else {
                        lvc++;
                    }
                }
            });
            if (isNaN(ts.p.width)) { //不设置宽度的时候,由各列的值相加而来;如果按照各列自己的宽度计算并且设置了具体高度,预留滚动条的位置
                ts.p.width = initwidth;
            }
            grid.width = ts.p.width; //外层宽度
            ts.p.tblwidth = initwidth; //表格数据主体宽度
            //自适应场景需要按比例重新计算宽度
            if (ts.p.shrinkToFit === true && lvc > 0) {
                aw = grid.width - gw;
                initwidth = 0;
                $.each(ts.p.colModel, function (i) {
                    if (this.hidden === false && !this.fixed) { //rn,cb列已经统计在gw中,会剔除
                        cw = Math.round(aw * this.width / (ts.p.tblwidth - gw));
                        this.width = cw; //按比例修正后的宽度
                        initwidth += cw;
                        lvc = i;
                    }
                });
                //修正最后一可见列宽度;.ui-jqgrid-bdiv还有border宽度左右各1px,因此减2
                var cr = grid.width - gw - initwidth;
                ts.p.colModel[lvc].width += (cr - 2);
                ts.p.tblwidth = gw + initwidth + (cr - 2);
            }

            $(ts.element).css("width", grid.width + "px");
            $("#gview_" + ts.p.id).css("width", grid.width + "px");
            $(".ui-jqgrid-hdiv", ts.element).css({
                width: grid.width + "px"
            });
            $(".ui-jqgrid-bdiv", ts.element).css({
                width: (grid.width) + "px"
            });
            //表格数据主体
            $(".ui-jqgrid-btable", ts.element).css({
                width: ts.p.tblwidth + "px",
                "table-layout": "fixed"
            });
            $(".ui-jqgrid-htable", ts.element).css({
                width: ts.p.tblwidth + "px"
            });
            //避免autoResizable多触发一次宽度设置
            ts.lastParentWidth = grid.width;
        },

        //渲染每一列的状态,排序,列宽等
        _renderCol: function () {
            var ts = this,
                $el = ts.element,
                $tb = ts.$tb,
                sort, w;

            var thr = $("thead > tr:first", $el),
                tdr = $("tbody > tr:first", $tb),
                ftd = null;
            $("th", thr).each(function (j) {

                ftd = tdr.find("td:eq(" + j + ")");
                w = ts.p.colModel[j].width;

                if (ts.p.colModel[j].resizable) {
                    $(this).addClass(ts.p.resizeclass);
                }

                $(this).css("width", w + "px");
                ftd.css("width", w + "px");
                if (ts.p.colModel[j].hidden) {
                    $(this).css("display", "none");
                    ftd.css("display", "none");
                }
                ts.grid.headers[j] = {
                    width: w,
                    el: this
                };

                sort = ts.p.colModel[j].sortable;
                var nm = ts.p.colModel[j].name;
                if (!(nm === 'cb' || nm === 'rn')) {
                    $(">div", this).addClass('ui-jqgrid-sortable');
                }
                if (sort) {
                    if (ts.p.multiSort) {
                        if (ts.p.colModel[j].lso) {
                            $("div span.s-ico", this).show();
                            $("div span.ui-icon-" + ts.p.colModel[j].lso, this).removeClass("ui-state-disabled");
                        }
                    } else {
                        if (j === ts.p.lastsort) {
                            $("div span.s-ico", this).show();
                            $("div span.ui-icon-" + ts.p.sortorder, this).removeClass("ui-state-disabled");
                        }
                    }
                }
            })
        },
        //绑定事件
        _setupEvents: function () {
            var ts = this,
                $tb = ts.$tb,
                thr = $("thead > tr:first", ts.element);
            //列头事件
            $("th", thr).on("mousedown", function (e) {
                if ($(e.target).closest("th>span.ui-jqgrid-resize").length !== 1) {
                    return;
                }
                var ci = ts.getColumnHeaderIndex(this);
                if (ts.p.forceFit === true) {
                    ts.p.nv = ts.nextVisible(ci);
                }
                ts.grid.dragStart(ci, e, ts.getOffset(ci));
                return false;
            }).on("click", function (e) {
                if (ts.p.disableClick) { //拖拽,IE8下用到
                    ts.p.disableClick = false;
                    return false;
                }
                var s = "th>div.ui-jqgrid-sortable";
                var t = $(e.target).closest(s);
                if (t.length !== 1) {
                    return;
                }
                var ci;
                if (ts.p.frozenColumns) {
                    var tid = $(this)[0].id.substring(ts.p.id.length + 1);
                    $(ts.p.colModel).each(function (i) {
                        if (this.name === tid) {
                            ci = i;
                            return false;
                        }
                    });
                } else {
                    ci = ts.getColumnHeaderIndex(this);
                }
                if (ci != null) {
                    ts.sortData($('div', this)[0].id, ci);
                }
                return false;
            });
            //多选场景下全选按钮的事件
            if (ts.p.multiselect) {
                $(ts.element).on('click', '#cb_' + ts.p.id, function () {
                    ts.p.selarrrow = [];
                    var froz = ts.p.frozenColumns === true ? ts.p.id + "_frozen" : "";
                    if (this.checked) {
                        $(ts.rows).each(function (i) {
                            if (i > 0) { //第一行是jqfirstrow
                                var $cbox = $(document.getElementById("jqg_" + ts.p.id + "_" + this.id));
                                //if (!$(this).hasClass('ui-state-disabled') && !$cbox.prop("disabled")) {
                                if (!$cbox.prop("disabled")) {
                                    $cbox.prop("checked", true);
                                    ts.p.selarrrow.push(this.id);
                                    if (froz) {
                                        $("#jqg_" + ts.p.id + "_" + this.id, ts.grid.fbDiv).prop("checked", true);
                                    }
                                }
                            }
                        });
                    } else {
                        $(ts.rows).each(function (i) {
                            if (i > 0) {
                                var $cbox = $(document.getElementById("jqg_" + ts.p.id + "_" + this.id));
                                //if (!$(this).hasClass('ui-state-disabled') && !$cbox.prop("disabled")) {
                                if (!$cbox.prop("disabled")) {
                                    $cbox.prop("checked", false);
                                    if (froz) {
                                        $("#jqg_" + ts.p.id + "_" + this.id, ts.grid.fbDiv).prop("checked", false);
                                    }
                                }
                            }
                        });
                    }
                    ts._trigger("onSelectAll", null, this.checked);
                });
            }
            //表格主体响应滚轮事件
            $(ts.grid.bDiv).scroll(ts.grid.scrollGrid);
            //表格主体的事件
            var ri, ci, tdHtml, td, ptr;
            $tb.click(function (e) {
                td = e.target || e.srcElement;
                ptr = $(td, ts.rows).closest("tr.jqgrow");
                if ($(ptr).length === 0) {
                    return this;
                }
                var scb = $(td).hasClass("cbox");
                if (scb) { //如果点击的是checkbox,会执行选中的默认行为;这里先进行反选中操作 fish/fish-desktop/issues/122
                    $(td).prop("checked", !$(td).is(":checked"));
                }
                var cSel = ts._trigger("beforeSelectRow", e, ptr[0].id);
                if (td.tagName === 'A' || ((td.tagName === 'INPUT' || td.tagName === 'TEXTAREA' || td.tagName === 'OPTION' || td.tagName === 'SELECT') && !scb)) {
                    return;
                }
                if (cSel !== false) {
                    ri = ptr[0].id;
                    ci = $.jgrid.getCellIndex(td);
                    tdHtml = $(td).closest("td,th").html();
                    ts._trigger("onCellSelect", e, [ri, ci, tdHtml]);
                    if (ts.p.cellEdit === true) {
                        if (ts.p.multiselect && scb) {
                            ts.setSelection(ri, true, e);
                        } else {
                            ts.editCell(ptr[0].rowIndex, ci, true);
                        }
                    } else {
                        if (ts.p.treeGrid && ($(td).hasClass('treeclick') || (ts.p.expandColClick && $(td).hasClass('cell-wrapper')))) {
                            ts._treeNodeClick(ri);
                        } else if (ts.p.subGrid && $(td).hasClass('ui-subgrid-btn')) {
                            ts._subGridBtnHandler(e);
                        } else {
                            ts.setSelection(ri, true, e);
                        }
                    }
                }
                //e.stopPropagation(); //不能放这里，放在各个处理函数中
            }).dblclick(function (e) {
                td = e.target;
                ptr = $(td, ts.rows).closest("tr.jqgrow");
                if ($(ptr).length === 0) {
                    return;
                }
                ri = ptr[0].rowIndex;
                ci = $.jgrid.getCellIndex(td);
                ts._trigger("onDblClickRow", e, [$(ptr).attr("id"), ri, ci]);
            }).bind('contextmenu', function (e) {
                td = e.target;
                ptr = $(td, ts.rows).closest("tr.jqgrow");
                if ($(ptr).length === 0) {
                    return;
                }
                ri = ptr[0].rowIndex;
                ci = $.jgrid.getCellIndex(td);
                ts._trigger("onRightClickRow", e, [$(ptr).attr("id"), ri, ci]);
            });
            //支持reloadGrid的事件
            ts.element.on('reloadGrid', function (e, opts) {
                ts._cleanUp();
                if (opts && opts.page) {
                    var page = opts.page;
                    if (page > ts.p.lastpage) {
                        page = ts.p.lastpage;
                    }
                    if (page < 1) {
                        page = 1;
                    }
                    ts.p.page = page;
                }
                ts.populate();
                if (ts.p.pagebar) {
                    var pagerRight = $("#" + ts.p.id + "_pager_right").width(),
                        gridBtn = $("#" + ts.p.id + "_pager_left .ui-nav-div"),
                        parentWidth = $("#" + ts.p.id + "_pager").width(),
                        btngroupWidth = parentWidth - pagerRight - gridBtn.width();
                    var navbtn = ts.element.find("#" + ts.p.id + "_pager_left .btn-group.ui-nav-btn-group");
                    if (navbtn && navbtn.length > 0) {
                        ts._arrangeBtn(navbtn, btngroupWidth);
                    }
                }

                return false;
            });
            //resizing及drag事件的响应
            $(ts.grid.hDiv).mousemove(function (e) {
                if (ts.grid.resizing) {
                    ts.grid.dragMove(e);
                    return false;
                }
            });
            $(".ui-jqgrid-labels", ts.grid.hDiv).bind("selectstart", function () {
                return false;
            });
            $(document).bind("mouseup.jqGrid" + ts.p.id, function () {
                if (ts.grid.resizing) {
                    ts.grid.dragEnd();
                    return false;
                }
                return true;
            });
            //sortable,列拖拽
            if (ts.p.sortable && $.fn.sortable) {
                try {
                    $(ts.element).jqGrid("sortableColumns", thr);
                } catch (e) { //Cannot set property 'floating' of undefined
                    console.warn(e);
                }
            }

            if (ts.p.autoResizable) {
                //fish.dialog fish.popup 拖动功能都是基于jQuery UI Resizable
                //当拖动时jQuery UI Resizable会向外面派发 resize事件 ，window也可以侦听到  不需要对fish.dialog fish.popup做特殊处理了
                this._on($(window), {
                    debouncedresize: function () {
                        if ($("#" + ts.p.id).length < 1) {
                            console.warn("grid[" + ts.p.id + "]内存泄露,dom中已经不存在,请检查是否调用了remove方法");
                        }
                        var parentWidth = ts.element.parent().width();
                        var isParentVisible = ts.element.parent().is(":visible");
                        var $bDiv = $(ts.grid.bDiv);
                        if (parentWidth < 1 || (!isParentVisible)) {
                            $bDiv.getNiceScroll(0).hide();  //隐藏状态下把滚动条给隐藏，所以隐藏表格的时候，需要触发debouncedresize事件
                            return false; //隐藏状态下width能取到负值
                        }
                        $bDiv.getNiceScroll(0).show();

                        if (parentWidth < 100) {
                            console.warn("grid[" + ts.p.id + "] 表格宽度resize,父容器取到宽度只有:" + parentWidth + " (建议为grid单独套一层div)");
                        }
                        if (parentWidth !== ts.lastParentWidth) {
                            ts.setGridWidth(parentWidth);
                            ts.lastParentWidth = parentWidth;

                            ts.navButtonRefresh();
                        }
                    }
                });
            }
        },
        _setFooterRow: function () {
            var ts = this,
                tfoot = "";
            $("thead > tr > th", ts.element).each(function (j) {
                tfoot += "<td role='gridcell' " + ts._formatCol(j) + " width=" + ts.grid.headers[j].width + ">&#160;</td>";
            })

            ts.grid.sDiv = $(".ui-jqgrid-sdiv", ts.element)[0];
            $(ts.grid.sDiv).css("width", ts.grid.width);
            $("table", ts.grid.sDiv).width(ts.p.tblwidth);
            $(".footrow", ts.grid.sDiv).html(tfoot);
            ts.grid.footers = $(".ui-jqgrid-ftable", ts.grid.sDiv)[0].rows[0].cells;
            if (ts.p.rownumbers) {
                ts.grid.footers[0].className = 'jqgrid-rownum';
            }
        },
        _setCaption: function () {
            var ts = this,
                $cDiv = $(".ui-jqgrid-titlebar", ts.element);
            ts.grid.cDiv = $cDiv[0];
            $("a", $cDiv).css("right", "0px");

            if (ts.p.hidegrid === true) {
                $(".ui-jqgrid-titlebar-close", ts.grid.cDiv).click(function (e) {
                    var elems = ".ui-jqgrid-bdiv, .ui-jqgrid-hdiv, .ui-jqgrid-pager, .ui-jqgrid-sdiv ,.ui-userdata",
                        counter, self = this;
                    counter = $(elems, "#gview_" + ts.p.id).length;

                    if (ts.p.gridstate === 'visible') {
                        $(elems, ts.element).slideUp("fast", function () {
                            counter--;
                            if (counter === 0) {
                                $("span", self).addClass("glyphicon").removeClass("glyphicon-triangle-top").addClass("glyphicon-triangle-bottom");
                                ts.p.gridstate = 'hidden';
                                if ($(ts.element).hasClass("ui-resizable")) {
                                    $(".ui-resizable-handle", ts.element).hide();
                                }
                                ts._trigger("onHeaderClick", e, ts.p.gridstate);
                            }
                        });
                    } else if (ts.p.gridstate === 'hidden') {
                        $(elems, ts.element).slideDown("fast", function () {
                            counter--;
                            if (counter === 0) {
                                $("span", self).addClass("glyphicon").removeClass("glyphicon-triangle-bottom").addClass("glyphicon-triangle-top");
                                ts.p.gridstate = 'visible';
                                if ($(ts.element).hasClass("ui-resizable")) {
                                    $(".ui-resizable-handle", ts.element).show();
                                }
                                ts._trigger("onHeaderClick", e, ts.p.gridstate);
                            }
                        });
                    }
                    return false;
                });
                if (ts.p.hiddengrid === true) { //hidegrid的时候才能生效
                    $(".ui-jqgrid-titlebar-close", ts.grid.cDiv).trigger("click");
                }
            }
        },

        //封装grid的事件绑定方法
        _bind: function (type, callback) {
            type = this.widgetEventPrefix + ':' + type.toLowerCase();
            return this.element.bind(type, callback);
        },
        //格式化并生产dom
        _formatCol: function (pos, cellval, rowdata, rowid) {
            var ts = this,
                cm = ts.p.colModel[pos],
                ral = cm.align,
                wordwrap = cm.wordwrap,
                result = "style=\"",
                clas = cm.classes,
                nm = cm.name,
                celp, acp = [];
            if (ral) {
                result += "text-align:" + ral + ";";
            }
            if (wordwrap){
                result += "white-space:"+ wordwrap + ";";
            }
            if (cm.hidden === true) {
                result += "display:none;";
            }
            if (cm.cellattr && $.isFunction(cm.cellattr)) {
                celp = cm.cellattr.call(ts, rowid, cellval, rowdata, cm);
                if (celp && typeof celp === "string") {
                    celp = celp.replace(/style/i, 'style').replace(/title/i, 'title');
                    if (celp.indexOf('title') > -1) {
                        cm.title = false;
                    }
                    if (celp.indexOf('class') > -1) {
                        clas = undefined;
                    }
                    acp = celp.replace('-style', '-sti').split(/style/);
                    if (acp.length === 2) {
                        acp[1] = $.trim(acp[1].replace('-sti', '-style').replace("=", ""));
                        if (acp[1].indexOf("'") === 0 || acp[1].indexOf('"') === 0) {
                            acp[1] = acp[1].substring(1);
                        }
                        result += acp[1].replace(/'/gi, '"');
                    } else {
                        result += "\"";
                    }
                }
            }
            if (!acp.length) {
                acp[0] = "";
                result += "\"";
            }
            result += (clas !== undefined ? (" class=\"" + clas + "\"") : "") + ((cm.title && cellval) ? (" title=\"" + $.jgrid.stripHtml(cellval) + "\"") : "");
            result += " aria-describedby=\"" + ts.p.id + "_" + nm + "\"";
            return result + acp[0];
        },
        //空字符串的转义
        _cellVal: function (val) {
            var ts = this;
            return val == null || val === "" ? "&#160;" : (ts.p.autoencode ? $.jgrid.htmlEncode(val) : String(val));
        },
        //格式化列值的显示内容
        formatter: function (rowid, cellval, colpos, rowdata, _act) {
            var ts = this;
            var cm = ts.p.colModel[colpos],
                v;
            if (cm.formatter !== undefined) {
                var opts = {
                    rowId: rowid,
                    colModel: cm,
                    gid: ts.p.id,
                    pos: colpos
                };
                if ($.isFunction(cm.formatter)) {
                    v = cm.formatter.call(ts, cellval, opts, rowdata, _act);
                } else if ($.fmatter) {
                    v = $.fn.fmatter.call(ts, cm.formatter, cellval, opts, rowdata, _act);
                } else {
                    v = ts._cellVal(cellval);
                }
            } else {
                v = ts._cellVal(cellval);
            }
            return v;
        },
        //新增单元格
        addCell: function (rowid, cellval, colpos, rowdata) {
            var ts = this;
            var v, prp;
            v = ts.formatter(rowid, cellval, colpos, rowdata, 'add');
            prp = ts._formatCol(colpos, v, rowdata, rowid);
            return "<td role=\"gridcell\" " + prp + ">" + v + "</td>";
        },
        //新增checkbox单元格
        addMulti: function (rowid, colpos) {
            var ts = this;
            var v = '<input type="checkbox"' + ' id="jqg_' + ts.p.id + '_' + rowid + '" class="cbox">',
                prp = ts._formatCol(colpos);
            return '<td role="gridcell" ' + prp + ' class="jqgrid-cbox">' + v + '</td>';
        },
        //新增序列号单元格
        addRowNum: function (colpos, irow, page, rownum) {
            var ts = this;
            var v = (parseInt(page, 10) - 1) * parseInt(rownum, 10) + 1 + irow,
                prp = ts._formatCol(colpos);
            return '<td role="gridcell" class="jqgrid-rownum" ' + prp + '>' + v + '</td>';
        },
        //清空数据
        emptyRows: function () {
            var firstrow = this.rows.length > 0 ? this.rows[0] : null;
            $(this.$tb[0].children[0]).empty().append(firstrow);
        },
        //新增,删除记录的时候需要重置_index,重新建立rowid与数据索引的映射关系
        refreshIndex: function () {
            var ts = this;
            var datalen = ts.p.data.length,
                idname, i, val;
            idname = ts.p.keyName;
            for (i = 0; i < datalen; i++) {
                val = ts.p.data[i][idname];
                if (val === undefined) {
                    //初始化数据不含有key的时候 2014/9/12
                    val = $.jgrid.randId();
                    ts.p.data[i][idname] = val;
                }
                ts.p._index[val] = i;
            }
        },
        //rowAttr 暂不开放
        _constructTr: function (id, cur) {
            var ts = this;
            var tabindex = '-1',
                restAttr = '',
                attrName, style = '',
                classes = 'jqgrow',
                rowAttrObj = ts._trigger("rowAttr", null, [cur, id]);
            if (typeof rowAttrObj !== "object") {
                rowAttrObj = $.isFunction(ts.p.rowattr) ? ts.p.rowattr.call(ts, cur, id) : {};
            }
            if (!$.isEmptyObject(rowAttrObj)) {
                if (rowAttrObj.hasOwnProperty("id")) {
                    id = rowAttrObj.id;
                    delete rowAttrObj.id;
                }
                if (rowAttrObj.hasOwnProperty("tabindex")) {
                    tabindex = rowAttrObj.tabindex;
                    delete rowAttrObj.tabindex;
                }
                if (rowAttrObj.hasOwnProperty("style")) {
                    style = rowAttrObj.style;
                    delete rowAttrObj.style;
                }
                if (rowAttrObj.hasOwnProperty("class")) {
                    classes += ' ' + rowAttrObj['class'];
                    delete rowAttrObj['class'];
                }
                // dot't allow to change role attribute
                try {
                    delete rowAttrObj.role;
                } catch (ra) {
                }
                for (attrName in rowAttrObj) {
                    if (rowAttrObj.hasOwnProperty(attrName)) {
                        restAttr += ' ' + attrName + '=' + rowAttrObj[attrName];
                    }
                }
            }
            return '<tr role="row" id="' + id + '" tabindex="' + tabindex + '" class="' + classes + '"' +
                (style === '' ? '' : ' style="' + style + '"') + restAttr + '>';
        },
        //数据入口方法
        addJSONData: function (data) {
            var ts = this;
            if (data) {
                ts.emptyRows();
            } else {
                return;
            }

            if (ts.p.datatype === "json") { //json数据需重新装填
                ts.p.data = [];
                ts.p._index = {};
            }

            ts.p.reccount = 0;
            ts.p.page = $.jgrid.getAccessor(data, ts.p.jsonReader.page) || ts.p.page;
            ts.p.records = $.jgrid.getAccessor(data, ts.p.jsonReader.records);
            var defaultTotal = Math.ceil(ts.p.records / ts.p.rowNum);
            ts.p.lastpage = $.jgrid.getAccessor(data, ts.p.jsonReader.total) || (defaultTotal ? defaultTotal : 1);
            ts.p.userData = $.jgrid.getAccessor(data, ts.p.jsonReader.userdata) || {};

            var drows = $.jgrid.getAccessor(data, ts.p.jsonReader.root) || [],
                len = drows.length;
            if (len > 0 && ts.p.page <= 0) {
                ts.p.page = 1;
            }
            var rn = parseInt(ts.p.rowNum, 10),
                rowid, rowData = [],
                i = 0,
                cur, j, v, ir = 0;

            while (i < len) {
                cur = drows[i];
                rowid = cur[ts.p.keyName];
                if (rowid === undefined) {
                    rowid = $.jgrid.randId();
                    cur[ts.p.keyName] = rowid;
                }

                rowData[rowData.length] = ts._constructTr(rowid, cur);
                var field, f = [],
                    j = 0,
                    i;
                for (j = 0; j < ts.p.colModel.length; j++) {
                    field = ts.p.colModel[j];
                    if (field.name === 'rn') {
                        rowData.push(ts.addRowNum(0, i, ts.p.page, ts.p.rowNum));
                    } else if (field.name === 'cb') {
                        rowData.push(ts.addMulti(rowid, j));
                    } else if (field.name === 'subgrid') {
                        rowData.push(ts._addSubGridCell(rowid, j));
                    } else {
                        v = $.jgrid.getAccessor(cur, field.name); //级联获取对象?
                        rowData.push(ts.addCell(rowid, v, j, cur));
                    }
                }
                rowData.push("</tr>");
                if (ts.p.datatype === "json") { //填充JSON格式数据
                    ts.p.data.push(cur);
                    ts.p._index[cur[ts.p.keyName]] = ts.p.data.length - 1;
                }
                if (ts.p.gridview === false) {
                    $("tbody:first", ts.$tb).append(rowData.join(''));
                    ts._trigger("afterInsertRow", null, [rowid, cur]);
                    rowData = [];
                }
                ir++;
                i++;
                if (ir === rn) {
                    break;
                }
            }

            if (ts.p.gridview === true) {
                $("tbody:first", ts.$tb).append(rowData.join(''));
            }
            if (ts.p.treeGrid === true) {
                ts._setTreeNode(1, ir + 1);
            }
            ts.p.reccount = ir;
            if (ts.p.userDataOnFooter) {
                $(ts.element).jqGrid("footerData", "set", ts.p.userData, true);
            }
            ts.updatepager(false, true);
        },
        //将local数组数据转成统一的json格式数据,由统一入口加载
        addLocalData: function () {
            var ts = this;
            var st = ts.p.multiSort ? [] : "",
                sto = [],
                fndsort = false,
                cmtypes = {},
                grtypes = [],
                grindexes = [],
                srcformat, sorttype, newformat;
            if (!$.isArray(ts.p.data)) {
                return;
            } else {
                ts.refreshIndex();
            }
            $.each(ts.p.colModel, function () {
                sorttype = this.sorttype || "text";
                if (sorttype === "date" || sorttype === "datetime") {
                    srcformat = fish.config.get('dateParseFormat.date'); //统一日期格式
                    newformat = fish.config.get('dateDisplayFormat.date'); //统一日期格式
                    cmtypes[this.name] = {
                        "stype": sorttype,
                        "srcfmt": srcformat,
                        "newfmt": newformat
                    };
                } else {
                    cmtypes[this.name] = {
                        "stype": sorttype,
                        "srcfmt": '',
                        "newfmt": ''
                    };
                }
                if (ts.p.multiSort) {
                    if (this.lso) {
                        st.push(this.name);
                        var tmplso = this.lso.split("-"); //this.lso 可以是 asc asc-desc "" 3种状态
                        sto.push(tmplso[tmplso.length - 1]);
                    }
                } else {
                    if (!fndsort && this.name === ts.p.sortname) {
                        st = this.name;
                        fndsort = true;
                    }
                }
            });

            var query = $.jgrid.from(ts.p.data);
            if (ts.p.multiSort) {
                $.each(st, function (i) {
                    query.orderBy(this, sto[i], cmtypes[this].stype, cmtypes[this].srcfmt);
                });
            } else {
                if (st && ts.p.sortorder && fndsort) {
                    query.orderBy(ts.p.sortname, ts.p.sortorder, cmtypes[st].stype, cmtypes[st].srcfmt);
                }
            }
            var queryResults = query.select(),
                recordsperpage = parseInt(ts.p.rowNum, 10),
                total = queryResults.length,
                page = parseInt(ts.p.page, 10),
                totalpages = Math.ceil(total / recordsperpage),
                retresult = {};
            queryResults = queryResults.slice((page - 1) * recordsperpage, page * recordsperpage);
            query = null;
            cmtypes = null;
            retresult[ts.p.jsonReader.total] = totalpages;
            retresult[ts.p.jsonReader.page] = page;
            retresult[ts.p.jsonReader.records] = total;
            retresult[ts.p.jsonReader.root] = queryResults;
            retresult[ts.p.jsonReader.userdata] = ts.p.userData;
            queryResults = null;
            return retresult;
        },
        //清除状态,重新加载数据时用到,常见于翻页等操作
        _cleanUp: function () {
            var ts = this;
            ts.p.selrow = null;
            if (ts.p.multiselect) {
                ts.p.selarrrow = [];
                ts.setHeadCheckBox(false);
            }
            ts.p.savedRow = [];
        },
        //更新分页信息
        updatepager: function (rn, dnd) {
            var ts = this;

            if (ts.p.pager) {
                $(ts.p.pageEl).pagination("update", {
                    records: ts.p.records,
                    rowNum: ts.p.rowNum,
                    total: ts.p.lastpage,
                    start: ts.p.page
                })
            }
            if (rn === true && ts.p.rownumbers === true) {
                var base = parseInt(ts.p.page, 10) - 1;
                if (base < 0) {
                    base = 0;
                }
                $(">td.jqgrid-rownum", ts.rows).each(function (i) {
                    $(this).html(base + 1 + i);
                });
            }
            if (dnd && ts.p.jqgdnd) {
                $(ts.element).jqGrid('gridDnD', 'updateDnD');
            }
            ts._trigger("gridComplete");
        },
        //内部加载表格数据用
        populate: function (npage) {
            var ts = this;
            if (this.p.showMask && $.blockUI) {
                $(this.element).blockUI();
                _.delay(function () {
                    ts._populate(npage);
                    $(ts.element).unblockUI();
                }, 0)
            } else {
                ts._populate(npage);
            }

        },
        //内部加载表格数据用
        _populate: function (npage) {
            var ts = this,
                dt;
            if (ts.p.page <= 0) {
                ts.p.page = Math.min(1, ts.p.lastpage);
            }
            dt = ts.p.datatype.toLowerCase();

            switch (dt) {
                case "json":
                    if (ts.p.treeGrid === true) {
                        ts.p.data ? ts.p.data[ts.p.jsonReader.root] = ts._childrenDataFormat(ts.p.data[ts.p.jsonReader.root]) : "";
                    }
                    ts.addJSONData(ts.p.data);
                    break;
                case "local":
                    //本地数据,p.data在客户端,需刷新index,分页排序
                    if (ts.p.treeGrid === true) {
                        ts.p.data = ts._childrenDataFormat(ts.p.data);
                    }
                    var req = ts.addLocalData();
                    ts.addJSONData(req);
                    break;
            }
        },
        //列头的checkbox,一般内部用于重新加载数据的时候取消列头的checkbox打勾状态
        setHeadCheckBox: function (checked) {
            var ts = this;
            $('#cb_' + ts.p.id, ts.grid.hDiv).prop("checked", checked);
            var fid = ts.p.frozenColumns ? ts.p.id + "_frozen" : "";
            if (fid) {
                $('#cb_' + ts.p.id, ts.grid.fhDiv).prop("checked", checked);
            }
        },
        //特殊处理服务器分页的情况,分页、排序需要重取服务端数据
        populatePage: function () {
            var ts = this;
            if (ts.p.datatype === "json") {
                var ret = [];
                if ($.isFunction(ts.p.pageData)) {
                    var result = ts.p.pageData.call(ts, ts.p.page, ts.p.rowNum, ts.p.sortname, ts.p.sortorder);
                    if (!result) return false;
                    this.reloadData(result);
                } else { //基本不会走到
                    alert("please support pageData function to fetch per page data!");
                    return false;
                }
            } else {
                ts._cleanUp();
                ts.populate();
            }
        },
        //初始化设置分页信息
        setPager: function (pgid) {
            var ts = this,
                dataList;

            var clearVals = function (page, opt) {
                var ret;
                ret = ts._trigger('onPaging', null, [page, opt]);
                if (ret === false) {
                    return false;
                }
                return true;
            };
            //增加json格式数据的支持
            if (ts.p.datatype === 'json') {
                dataList = (ts.p.data && ts.p.data.length > 0) ? ts.p.data[ts.p.jsonReader.root] : [];
            } else {
                dataList = ts.p.data;
            }
            if (!dataList || !dataList.length) {
                dataList = [];
            }
            var pagiOption = {
                records: dataList.length,
                displayNum: ts.p.displayNum,
                rowNum: ts.p.rowNum,
                rowList: ts.p.rowList,
                pgButton: ts.p.pgbuttons,
                pgNumber: ts.p.pgnumbers,
                pgInput: ts.p.pginput,
                pgTotal: ts.p.viewtotal,
                pgRecText: ts.p.viewrecords ? true : false,
                recordtext: ts.p.recordtext,
                pgtext: ts.p.pgtext,
                rowtext: ts.p.rowtext,

                onPageClick: function (e, data) {
                    var page = data.page,
                        type = data.eventType;
                    if (!clearVals(page, type)) {
                        return false;
                    }
                    if (type === 'select') {
                        ts.p.rowNum = $(pgid).pagination("option", "rowNum");
                        ts.p.lastpage = parseInt((ts.p.records - 1) / ts.p.rowNum + 1);
                    }
                    if (page < 1 || page > ts.p.lastpage) {
                        return false;
                    } //判断如果输入值不在范围内,直接不响应
                    ts.p.page = page;
                    ts.populatePage();
                }
            };
            $(pgid).pagination(pagiOption);
        },

        //_setupColumnsFeature: function() {
        //    var that = this,
        //        $columnsFeature = this.element.find('.dropdown-menu-ne');
        //
        //    $columnsFeature.sortable({
        //        "update": function(event, ui) {
        //            var $ul = $(this);
        //            var cmMap = {}, colModel = that.options.colModel;
        //            $.each(colModel, function(i) {
        //                cmMap[this.name]=i;
        //            });
        //
        //            var permutation = [];
        //            $ul.children().each(function (index, li) {
        //                permutation.push(cmMap[$(li).find('input').val()]);
        //            });
        //
        //            // resort columns headers
        //            $("thead:first>tr", that.grid.hDiv).each(function () {
        //                var row = this;
        //                var elems = $.makeArray(row.cells);
        //                $.each(permutation, function () {
        //                    var e = elems[this];
        //                    if (e) {
        //                        row.appendChild(e);
        //                    }
        //                });
        //            });
        //
        //            that.remapColumns(permutation);
        //        }
        //    });
        //
        //    this._on($columnsFeature, {
        //        'click input': function(e) {
        //            var checkbox = e.currentTarget;
        //            if (checkbox.checked) {
        //                that.showCol(checkbox.value);
        //            } else {
        //                that.hideCol(checkbox.value);
        //            }
        //        }
        //    });
        //},

        //排序列索引,目标列的element
        _multiSort: function (idxcol, selTh) {
            var ts = this;
            var splas, sort = "",
                cm = ts.p.colModel,
                fs = false,
                ls, so = "";
            $("span.ui-grid-ico-sort", selTh).addClass('ui-state-disabled');
            $(selTh).attr("aria-selected", "false");

            if (cm[idxcol].lso) {
                if (cm[idxcol].lso === "asc") {
                    cm[idxcol].lso += "-desc";
                    so = "desc";
                } else if (cm[idxcol].lso === "desc") {
                    cm[idxcol].lso += "-asc";
                    so = "asc";
                } else if (cm[idxcol].lso === "asc-desc" || cm[idxcol].lso === "desc-asc") {
                    cm[idxcol].lso = "";
                }
            } else {
                cm[idxcol].lso = so = 'asc';
            }
            if (so) {
                $("span.s-ico", selTh).show();
                $("span.ui-icon-" + so, selTh).removeClass('ui-state-disabled');
                $(selTh).attr("aria-selected", "true");
            } else {
                $("span.s-ico", selTh).hide();
            }
            ts.p.sortorder = "";
            $.each(cm, function (i) {
                if (this.lso) {
                    if (i > 0 && fs) {
                        sort += ", ";
                    }
                    splas = this.lso.split("-");
                    sort += cm[i].name;
                    sort += " " + splas[splas.length - 1];
                    fs = true;
                    ts.p.sortorder = splas[splas.length - 1];
                }
            });
            ls = sort.lastIndexOf(ts.p.sortorder);
            sort = sort.substring(0, ls);
            ts.p.sortname = sort;
        },
        //idxcol 排序列的索引;targetid 点击列的对象的id,可以是冻结列,列id的组成规则是jqgh_gridid_colname;sortorder 指定的排序方式
        sortData: function (targetid, idxcol, sortorder) {
            var ts = this;
            if (!ts.p.colModel[idxcol].sortable) {
                return;
            }
            if (ts.p.savedRow.length > 0) {
                return;
            }

            if (sortorder) { //如果传入了排序方式,就使用这种方式进行排序;如果排序列及排序方式与上一次相同,直接返回
                if (ts.p.lastsort === idxcol && ts.p.sortorder === sortorder) {
                    return;
                }
                ts.p.sortorder = sortorder;
            } else if (ts.p.lastsort === idxcol) {
                if (ts.p.sortorder === 'asc') {
                    ts.p.sortorder = 'desc';
                } else if (ts.p.sortorder === 'desc') {
                    ts.p.sortorder = 'asc';
                }
            } else {
                ts.p.sortorder = 'asc';
            }

            var previousSelectedTh = ts.grid.headers[ts.p.lastsort].el;
            var newSelectedTh = ts.grid.headers[idxcol].el;
            if (ts.p.frozenColumns) { //冻结列的场景,目标对象变化
                var obj = ts.grid.fhDiv.find("#" + ts.p.id + "_" + ts.p.colModel[idxcol].name);
                if (obj) newSelectedTh = obj;
            }

            if (ts.p.multiSort) {
                ts._multiSort(idxcol, newSelectedTh);
            } else {
                $("span.ui-grid-ico-sort", previousSelectedTh).addClass('ui-state-disabled');
                $(previousSelectedTh).attr("aria-selected", "false");
                if (ts.p.frozenColumns) {
                    ts.grid.fhDiv.find("span.ui-grid-ico-sort").addClass('ui-state-disabled');
                    ts.grid.fhDiv.find("th").attr("aria-selected", "false");
                }
                $("span.ui-icon-" + ts.p.sortorder, newSelectedTh).removeClass('ui-state-disabled');
                $(newSelectedTh).attr("aria-selected", "true");
                if (ts.p.lastsort !== idxcol) {
                    if (ts.p.frozenColumns) {
                        ts.grid.fhDiv.find("span.s-ico").hide();
                    }
                    $("span.s-ico", previousSelectedTh).hide();
                    $("span.s-ico", newSelectedTh).show();
                }
                ts.p.sortname = targetid.substring(5 + ts.p.id.length + 1); //id的组成为"jqgh_"+gridId+colName
            }
            if (ts._trigger("onSortCol", null, [ts.p.sortname, idxcol, ts.p.sortorder]) === false) {
                //返回true之后,是否要还原变量ts.p.sortorder、ts.p.sortname、ts.p.lastsort等
                ts.p.lastsort = idxcol;
                return;
            }

            ts.p.page = 1;
            ts.populatePage();
            ts.p.lastsort = idxcol;
        },

        //找到下一个可见列,返回列的索引差值,结合放forceFit与ts.p.nv使用,参数为列索引
        nextVisible: function (iCol) {
            var ts = this;
            var ret = iCol,
                j = iCol,
                i;
            for (i = iCol + 1; i < ts.p.colModel.length; i++) {
                if (ts.p.colModel[i].hidden !== true) {
                    j = i;
                    break;
                }
            }
            return j - ret;
        },
        //计算拖拽目标列的位置,参数为列索引
        getOffset: function (iCol) {
            var ts = this;
            var $th = $(ts.grid.headers[iCol].el),
                ret = [$th.position().left + $th.outerWidth()];
            var scrollLeft = ts.$slimScroll[0].scrollLeft;
            ret[0] -= scrollLeft;
            ret.push($(ts.grid.hDiv).position().top);
            ret.push($(ts.grid.bDiv).offset().top - $(ts.grid.hDiv).offset().top + $(ts.grid.bDiv).height());
            return ret;
        },
        //返回操作列的索引值,参数为列element
        getColumnHeaderIndex: function (th) {
            var ts = this;
            var i, headers = ts.grid.headers,
                ci = $.jgrid.getCellIndex(th);
            for (i = 0; i < headers.length; i++) {
                if (th === headers[i].el) {
                    ci = i;
                    break;
                }
            }
            return ci;
        },

        /**
         * 获取参数数据.目前等效于option方法
         * 此方法非常有用，可以获取很多需要的东西,如page当前页,rowNum每页记录数,records记录总数等等
         * <pre>
         *        var dataLength = $("#gridBase").jqGrid("getGridParam","records记录总数等等");
         * </pre>
         * @param  {string} pName 参数的key值
         * @return {Object}       返回参数key值对应的值value
         */
        getGridParam: function (pName) {
            var ts = this;
            if (!pName) {
                return ts.p;
            }
            return ts.p[pName] !== undefined ? ts.p[pName] : null;
        },
        /**
         * 设置参数数据.目前等效于option方法.可以动态的改变表格的部分行为,部分设计到ui变化的还需要调用专有的方法,譬如width变化要调用setGridWidth等
         * @param {Object} newParams 新的键值对，会覆盖原有的参数数据
         */
        setGridParam: function (newParams) {
            if (this.grid && typeof newParams === 'object') {
                $.extend(true, this.p, newParams);
            }
        },
        /**
         * 获取界面的行元素
         * @param  {string} rowid 行标识
         * @return {Object} 返回行标识对应的dom节点
         */
        getGridRowById: function (rowid) {
            var row;
            try {
                row = this.rows.namedItem(rowid);
            } catch (e) {
                //row = $(this.grid.bDiv).find("#" + rowid);
                console.warn("namedItem not support");
            }
            return row;
        },
        /**
         * 获取所有行唯一标识
         * @return {Array} 返回rowid的集合
         */
        getDataIDs: function () {
            var ids = [],
                i = 0,
                len, j = 0;
            len = this.rows.length;
            if (len && len > 0) {
                while (i < len) {
                    if ($(this.rows[i]).hasClass('jqgrow')) {
                        ids[j] = this.rows[i].id;
                        j++;
                    }
                    i++;
                }
            }
            return ids;
        },
        /**
         * 获取多选模式下选中的记录
         * @return {Array} 打勾的记录
         */
        getCheckRows: function () {
            var rows = [];
            var ts = this,
                index;
            var selarrrow = ts.p.selarrrow;
            for (var i = 0; i < selarrrow.length; i++) {
                rows.push(ts.p.data[ts.p._index[selarrrow[i]]]);
            }
            return rows;
        },
        /**
         * 禁用,启用多个复选框
         * @param {Array} selarrrow 目标行的标识集合
         * @param {Boolean} flag true表示禁用,false表示取消禁用
         */
        setCheckDisabled: function (selarrrow, flag) {
            var ts = this,
                rowid, $row;
            if ($.isArray(selarrrow)) {
                for (var i = 0; i < selarrrow.length; i++) {
                    rowid = selarrrow[i];
                    $row = $(this.getGridRowById(rowid));
                    $row.find("input[type='checkbox']").prop("disabled", flag);
                    // flag ? $row.addClass('ui-state-disabled') : $row.removeClass('ui-state-disabled');
                }
            } else {
                rowid = selarrrow;
                $row = $(this.getGridRowById(rowid));
                $row.find("input[type='checkbox']").prop("disabled", flag);
                // flag ? $row.addClass('ui-state-disabled') : $row.removeClass('ui-state-disabled');
            }
        },
        /**
         * 禁用,启用全部复选框
         * @param {Boolean} flag true表示禁用复选框功能，false表示取消禁用复选框功能
         */
        setAllCheckDisabled: function (flag) {
            $("#gview_" + this.p.id).find("input[type='checkbox']").prop("disabled", flag);
            // flag ? $("#gview_" + this.p.id).find(".jqgrow").addClass('ui-state-disabled') : $("#gview_" + this.p.id).find(".jqgrow").removeClass('ui-state-disabled');
        },
        /**
         * 实现多选模式下表格的全选,清空
         * @param {Boolean} [flag] true表示全选,false表示清空
         */
        setAllCheckRows: function (flag) {
            var ts = this;
            if (flag !== false && flag !== true) {
                flag = !$("#cb_" + ts.p.id).prop("checked");
            }
            $("#cb_" + ts.p.id, ts.element).prop("checked", !flag).trigger("click");
            return this;
        },

        /**
         * 设置，取消，反选多选记录
         * @param {Array} selarrrow 目标行的标识集合
         * @param {Boolean} flag 为空默认反选,true表示全选,false表示清空
         */
        setCheckRows: function (selarrrow, flag) {
            var ts = this,
                _flag, rowid, ia, row;
            for (var i = 0; i < selarrrow.length; i++) {
                rowid = selarrrow[i];
                ia = $.inArray(rowid, ts.p.selarrrow); //原为(非)选中状态
                if (flag === true || flag === false) { //如果不定义flag参数，则进行反选操作
                    _flag = flag;
                } else {
                    _flag = ia === -1 ? true : false;
                }
                if (_flag === false && ia !== -1) { //原为选中状态且现要求取消选中
                    ts.setHeadCheckBox(false);
                    ts.p.selarrrow.splice(ia, 1);
                    $(this.getGridRowById(rowid)).find('.cbox').prop("checked", false);
                } else if (_flag === true && ia === -1) { //原为非选中状态且现要求选中
                    ts.p.selarrrow.push(rowid);
                    $(this.getGridRowById(rowid)).find('.cbox').prop("checked", true);
                }
            }
        },
        /**
         * 获取选中行记录
         * @return {Object} 返回选中行的记录
         */
        getSelection: function () {
            var row = {};
            var ts = this;
            if (ts.p.selrow) {
                row = $(ts.element).jqGrid("getRowData", ts.p.selrow);
            }
            return row;
        },
        /**
         * 设置行选中
         * @param {string} rowid 行标识;也可以是行数据对象
         * @param {boolean} onsr 是否触发行选中的事件onSelectRow
         */
        setSelection: function (selection, onsr, e) {
            var ts = this,
                stat, checked, pt, ner, ia, tpsr, fid;
            if (selection === undefined) {
                return;
            }
            if ($.type(selection) === 'object') {
                selection = selection[ts.p.keyName];
            }
            onsr = onsr === false ? false : true;
            pt = this.getGridRowById(selection); //$(ts.element).jqGrid('getGridRowById', selection);
            //if (!pt || !pt.className || pt.className.indexOf('ui-state-disabled') > -1) {
            if (!pt) {
                return;
            }

            function scrGrid(iR) {
                var ch = $(ts.grid.bDiv)[0].clientHeight,
                // st = ts.$slimScroll[0].scrollTop,
                    st = ts.grid.bDiv.scrollTop - ts.p.scrollbarWidth,
                    rpos = ts.rows[iR].offsetTop,
                    rh = ts.rows[iR].clientHeight;
                var $bDiv = $(ts.grid.bDiv);
                if ($bDiv.getNiceScroll(0)) {  //表格空间够不需要出现滚动条时 返回false
                    $bDiv.getNiceScroll(0).resize();  // Check for scrollbars resize (when content or postion have changed) fix:issue #600
                    // 选中行offsetTop  + 行高 + 水平滚动条高度默认 > 表格高度 + 外层DIV scrollTop
                    if ((rpos + rh + ts.p.scrollOffset > ch + st) && ts.p.width < ts.p.tblwidth) {
                        //ts.$slimScroll.slimscroll({
                        //    scrollTo: rpos - (ch + st) + rh + ts.p.scrollOffset + st
                        //});
                        $bDiv.getNiceScroll(0).doScrollTop(rpos - (ch + st) + rh + ts.p.scrollOffset + st, 0);
                        // 选中行offsetTop  + 行高 > 表格高度 + 外层DIV scrollTop
                    } else if ((rpos + rh > ch + st)) {
                        //ts.$slimScroll.slimscroll({
                        //    scrollTo: rpos - (ch + st) + rh + st
                        //});
                        $bDiv.getNiceScroll(0).doScrollTop(rpos - (ch + st) + rh + st, 0);
                        //  选中行offsetTop <   表格高度 + 外层DIV scrollTop
                    } else if (rpos < ch + st) {
                        //if (rpos < st) {
                        //    ts.$slimScroll.slimscroll({
                        //        scrollTo: rpos
                        //    });
                        //}
                        //选中行offsetTop < 外层DIV scrollTop
                        if (rpos < st) {
                            $bDiv.getNiceScroll(0).doScrollTop(rpos, 0);
                        }
                    }
                }
            }

            if (ts.p.scrollrows === true) {
                ner = pt.rowIndex //$(ts.element).jqGrid('getGridRowById', selection).rowIndex;
                if (ner >= 0) {
                    scrGrid(ner);
                }
            }
            if (ts.p.frozenColumns === true) {
                fid = ts.p.id + "_frozen";
            }

            if (ts.p.selrow !== pt.id) {
                if (ts.p.selrow) {
                    $(this.getGridRowById(ts.p.selrow)).removeClass("ui-state-highlight").attr({
                        "aria-selected": "false",
                        "tabindex": "-1"
                    });
                }
                $(pt).addClass("ui-state-highlight").attr({
                    "aria-selected": "true",
                    "tabindex": "0"
                }); //.focus();
                if (fid) {
                    $("#" + ts.p.selrow, "#" + fid).removeClass("ui-state-highlight");
                    $("#" + selection, "#" + fid).addClass("ui-state-highlight");
                }
                stat = true;
            } else {
                stat = false;
            }
            var oldrowid = ts.p.selrow;
            ts.p.selrow = pt.id;

            var scb = e != null && e.target != null && $(e.target).hasClass("cbox");
            if (ts.p.multiselect && scb) {
                //unselect selectall checkbox when deselecting a specific row
                ts.setHeadCheckBox(false);
                ia = $.inArray(ts.p.selrow, ts.p.selarrrow);
                if (ia === -1) {
                    ts.p.selarrrow.push(ts.p.selrow);
                    $(document.getElementById("jqg_" + ts.p.id + "_" + pt.id)).prop("checked", true);
                } else {
                    ts.p.selarrrow.splice(ia, 1);
                    $(document.getElementById("jqg_" + ts.p.id + "_" + pt.id)).prop("checked", false);
                }
            }

            ia = $.inArray(ts.p.selrow, ts.p.selarrrow);
            ia === -1 ? checked = false : checked = true;

            if (ts.p.treeGrid) { //自己如果没有显示,则显示出来
                ts._setVisibleNode(pt.id);
                if (ts.p.multiselect && scb) {
                    ts._cascadeChecked(checked);
                }
            }

            if (onsr) {
                ts._trigger("onSelectRow", e, [pt.id, stat, checked]);
                stat && ts._trigger("onChangeRow", e, [pt.id, oldrowid]);
            }

            if (this.element.closest('.ui-subgrid').length) {
                e.stopPropagation();
            }

        },
        /**
         * 取消行选中,还原编辑前的状态
         */
        resetSelection: function () {
            var ts = this,
                sr, fid;
            if (ts.p.frozenColumns === true) {
                fid = ts.p.id + "_frozen";
            }

            if (ts.p.selrow) {
                $(this.getGridRowById(ts.p.selrow)).removeClass("ui-state-highlight").attr("aria-selected", "false");
                if (fid) {
                    $("#" + ts.p.selrow, "#" + fid).removeClass("ui-state-highlight");
                }
                ts.p.selrow = null;
            }

            if (ts.p.cellEdit === true) {
                if (parseInt(ts.p.iCol, 10) >= 0 && parseInt(ts.p.iRow, 10) >= 0) {
                    $("td:eq(" + ts.p.iCol + ")", ts.rows[ts.p.iRow]).removeClass("edit-cell ui-state-highlight");
                    $(ts.rows[ts.p.iRow]).removeClass("selected-row ui-state-hover");
                }
            }
            ts.p.savedRow = [];
        },
        /**
         * 获取参考目标记录的前一条记录
         * @param  {string} rowid    参考目标记录的行标识;也可以是行数据对象
         */
        getPrevSelection: function (selection) {
            var ts = this;
            if (selection === undefined) {
                return null;
            }
            if ($.type(selection) === 'object') {
                selection = selection[ts.p.keyName];
            }

            var index = ts.p._index[selection];
            if (isNaN(index)) {
                return null;
            }
            if (ts.p.treeGrid) {
                return $(this.element).jqGrid("getPrevNode", ts.p.data[index]);
            }
            if (index === 0) return null;
            return ts.p.data[index === 0 ? 1 : index - 1]; //第一条的情况下，取下一条
        },
        /**
         * 获取参考目标记录的后一条记录
         * @param  {string} rowid    参考目标记录的行标识;也可以是行数据对象
         */
        getNextSelection: function (selection) {
            var ts = this,
                pt;
            if (selection === undefined) {
                return null;
            }
            if ($.type(selection) === 'object') {
                selection = selection[ts.p.keyName];
            }

            var index = ts.p._index[selection];
            if (isNaN(index)) {
                return null;
            }
            if (ts.p.treeGrid) {
                return $(this.element).jqGrid("getNextNode", ts.p.data[index]);
            }
            if (index === (ts.p.reccount - 1)) return null;
            return ts.p.data[index === (ts.p.reccount - 1) ? index - 1 : index + 1];
        },
        /**
         * 选择参考目标记录的前一条记录
         * @param  {string} rowid    参考目标记录的行标识;也可以是行数据对象
         * @param  {Boolean} onsr=true    目标记录选中后是否触发选中行事件,默认true
         */
        setPrevSelection: function (selection, onsr) {
            var data = $(this.element).jqGrid("getPrevSelection", selection);
            data && $(this.element).jqGrid("setSelection", data, onsr);
        },
        /**
         * 选择参考目标记录的后一条记录
         * @param  {string} rowid    参考目标记录的行标识;也可以是行数据对象
         * @param  {Boolean} onsr=true    目标记录选中后是否触发选中行事件,默认true
         */
        setNextSelection: function (selection, onsr) {
            var data = $(this.element).jqGrid("getNextSelection", selection);
            data && $(this.element).jqGrid("setSelection", data, onsr);
        },
        /**
         * 通过数据对象获取行标识rowid
         * @param  {Object} data 行数据对象
         * @return {String} 如果配置了列的key属性,则此值返回data[key对应的列名];否则返回由表格自动生成的标识
         */
        getRowid: function (data) {
            return data ? data[this.p.keyName] : null
        },
        /**
         * 获取表格对象的行标识名称
         * @return {String} 如果配置了列的key属性,则返回此列列名,否则返回表格默认的key值名称.
         * 默认取值"_id_".可以通过设置全局对象$.jgrid.reader.id改变默认的key值名字.
         */
        getKeyName: function () {
            return this.p.keyName;
        },
        /**
         * 获取表格单个或者全部数据(如果是分页则返回是本页的全部数据)
         * @param  {String} rowid (optional) 表格行记录的唯一标识
         * @param  {Boolean} usedata (optional) 是否从数据源中获取数据,默认true
         * @return {Object} 如果参数rowid为空，返回整个记录数组，否则只返回rowid对应的那条记录数据
         */
        getRowData: function (rowid, usedata) {
            var res = {},
                resall, getall = false,
                len, j = 0;
            var ts = this,
                nm, ind;
            if (rowid == null) {
                getall = true;
                resall = [];
                len = ts.rows.length;
            } else {
                ind = this.getGridRowById(rowid); //$(ts.element).jqGrid('getGridRowById', rowid);
                if (!ind) {
                    return res;
                }
                len = 2;
            }
            if (ts.p.data.length > 0) {
                usedata = usedata !== false ? true : false;
            } else {
                return resall || res;
            }
            while (j < len) {
                if (getall) {
                    ind = ts.rows[j];
                }
                if ($(ind).hasClass('jqgrow')) {
                    if (usedata) {
                        res = ts.p.data[ts.p._index[ind.id]];
                    } else {
                        $('td[role="gridcell"]', ind).each(function (i) {
                            nm = ts.p.colModel[i].name;
                            if (nm !== 'cb' && nm !== 'rn') {
                                if (ts.p.treeGrid === true && nm === ts.p.expandColumn) {
                                    res[nm] = $.jgrid.htmlDecode($("span:first", this).html());
                                } else {
                                    try {
                                        res[nm] = $.unformat.call(ts, this, {
                                            rowId: ind.id,
                                            colModel: ts.p.colModel[i]
                                        }, i);
                                    } catch (e) {
                                        res[nm] = $.jgrid.htmlDecode($(this).html());
                                    }
                                }
                            }
                        });
                    }
                    if (getall) {
                        resall.push(res);
                        res = {};
                    }
                }
                j++;
            }
            return resall || res;
        },
        /**
         * 删除行记录
         * @param  {string} rowid 行标识,也可以是行对象
         * @return {boolean}       是否删除成功
         */
        delRowData: function (rowid) {
            var success = false,
                rowInd, ia;
            var ts = this;
            //如果rowid是对象,则说明参数没有rowid
            if ($.type(rowid) === 'object') {
                rowid = rowid[ts.p.keyName];
            }
            rowInd = this.getGridRowById(rowid);
            if (!rowInd) {
                return false;
            }
            $(rowInd).remove();
            ts.p.records--;
            ts.p.reccount--;
            ts.updatepager(true, false);
            success = true;

            if (ts.p.multiselect) {
                ia = $.inArray(rowid, ts.p.selarrrow);
                if (ia !== -1) {
                    ts.p.selarrrow.splice(ia, 1);
                }
            }
            if (ts.p.selrow === rowid) {
                ts.p.selrow = null; //如果删除的正是选中的记录,清空ts.p.selrow
            }
            var pos = ts.p._index[rowid];
            if (pos !== undefined) {
                ts.p.data.splice(pos, 1);
                ts.refreshIndex();
            }
            return success;
        },
        /**
         * 修改行数据,目前不接受rowid值的修改
         * @param {string} rowid 行标识,此参数也可以是行数据,会自动取数据的key值作为rowid
         * @param {Object} [data]  修改后的内容,对象会进行深拷贝替换掉原来的值
         * @param {string} [cssp]  修改后的行样式，可以是class，也可以是css对象
         * @return {boolean} 是否修改成功
         */
        setRowData: function (rowid, data, cssp) {
            var ts = this,
                ind, nm, vl, title, success = true;
            //如果rowid是对象,则说明参数没有rowid
            if (typeof rowid === 'object') {
                cssp = data;
                data = rowid;
                rowid = data[ts.p.keyName];
            }
            ind = this.getGridRowById(rowid);
            if (!ind) {
                return false;
            }
            if (data) {
                $(ts.p.colModel).each(function (i) {
                    nm = this.name;
                    var dval = $.jgrid.getAccessor(data, nm);
                    if (dval !== undefined) {
                        vl = ts.formatter(rowid, dval, i, data, 'edit');
                        title = this.title ? {
                            "title": $.jgrid.stripHtml(vl)
                        } : {};
                        if (ts.p.treeGrid === true && nm === ts.p.expandColumn) {
                            $("td[role='gridcell']:eq(" + i + ") > span:first", ind).html(vl).attr(title);
                        } else {
                            $("td[role='gridcell']:eq(" + i + ")", ind).html(vl).attr(title);
                        }
                    }
                });
                var pos = ts.p._index[rowid];
                if (pos !== undefined) {
                    ts.p.data[pos] = $.extend(false, ts.p.data[pos], data);
                }
            }
            if (success) {
                if (typeof cssp === 'string') {
                    $(ind).addClass(cssp);
                } else if (typeof cssp === 'object') {
                    $(ind).css(cssp);
                }
            }
            return success;
        },
        /**
         * 新增数据，可以指定新增的位置
         * @param {string} rowid 行标识,此参数也可以是行数据,会自动取数据的key值作为rowid;
         * @param {Object} [rdata] 行数据,也可以是数据数组
         * @param {string} [pos]   数据新增的位置，默认是last，可选值有first、last，after和before则需要参考src参数
         * @param {string} [src]   新增位置的参考标识
         * @return {boolean} 是否新增成功
         */
        addRowData: function (rowid, rdata, pos, src) {
            var ts = this;
            //如果rowid是对象,则说明参数没有rowid
            if (typeof rowid === 'object') {
                src = pos;
                pos = rdata;
                rdata = rowid;
                rowid = undefined;
            }
            if (!pos) {
                pos = "last";
            }
            var success = false,
                cnm = ts.p.keyName,
                nm, row, gi, ni, si, sind, data;
            if (rdata) {
                if (!$.isArray(rdata)) {
                    if (rowid !== undefined) {
                        rdata[cnm] = rowid; //万一用户新增的记录,传入了rowid,后面的data却没有这个字段
                    }
                    rdata = [rdata];
                }
                var datalen = rdata.length;
                ni = ts.p.rownumbers === true ? 1 : 0;
                gi = ts.p.multiselect === true ? 1 : 0;
                si = ts.p.subGrid === true ? 1 : 0;

                var k = 0,
                    newsrc = src; //newsrc 在after的场景下,批量新增记录的时候,参考位置要变
                while (k < datalen) {
                    data = rdata[k];
                    rowid = data[cnm];
                    if (rowid === undefined) {
                        rowid = $.jgrid.randId();
                        data[cnm] = rowid;
                    }
                    row = [];
                    if (ni) {
                        row[row.length] = ts.addRowNum(0, 0, 1, 0); //新增个0的,后续updatepager会更新的
                    }
                    if (gi) {
                        row[row.length] = ts.addMulti(rowid, ni);
                    }

                    if (si) {
                        row[row.length] = ts._addSubGridCell(rowid, ni);
                    }

                    for (i = gi + ni + si; i < ts.p.colModel.length; i++) {
                        nm = ts.p.colModel[i].name;
                        row[row.length] = ts.addCell(rowid, $.jgrid.getAccessor(data, nm), i, data);
                    }
                    row.unshift(ts._constructTr(rowid, data));
                    row[row.length] = "</tr>";
                    if (ts.rows.length === 0) {
                        $("table:first", ts.grid.bDiv).append(row.join(''));
                    } else {
                        switch (pos) {
                            case 'last':
                                $(ts.rows[ts.rows.length - 1]).after(row.join(''));
                                break;
                            case 'first':
                                $(ts.rows[0]).after(row.join(''));
                                break;
                            case 'after':
                                sind = this.getGridRowById(newsrc);
                                if (sind) {
                                    $(sind).after(row.join(''));
                                    newsrc = rowid; //修复批量新增子节点顺序的问题
                                }
                                break;
                            case 'before':
                                sind = this.getGridRowById(src);
                                if (sind) {
                                    $(sind).before(row.join(''));
                                }
                                break;
                        }
                    }
                    ts.p.records++;
                    ts.p.reccount++;
                    ts._trigger("afterInsertRow", null, [rowid, data]);
                    k++;
                }

                //新增节点的数据插入到对应的节点处,以免刷新的时候会换位置
                var newdata = [];
                if (pos === 'first') newdata = newdata.concat(rdata);
                var parentindex = ts.p._index[src];
                for (var i = 0; i < ts.p.data.length; i++) {
                    if (pos === 'before') {
                        if (parentindex == i) newdata = newdata.concat(rdata);
                    }
                    newdata.push(ts.p.data[i]);
                    if (pos === 'after') {
                        if (parentindex == i) newdata = newdata.concat(rdata);
                    }
                }
                if (pos === 'last') newdata = newdata.concat(rdata);
                ts.p.data = newdata;
                ts.refreshIndex();

                ts.updatepager(true, true);
                success = true;
            }
            return success;
        },
        /**
         * 在含有footerrow的场景下，可以获取或设置底部的值
         * @param  {String} action set or get
         * @param  {Object} data   如果是set方式,则此参数就是设置进去的值
         */
        footerData: function (action, data, format) {
            var nm, success = false,
                res = {},
                title;

            if (action === undefined) {
                action = "get";
            }
            if (typeof format !== "boolean") {
                format = true;
            }
            action = action.toLowerCase();
            var ts = this,
                vl;
            if (!ts.grid || !ts.p.footerrow) {
                return false;
            }
            if (action === "set") {
                if ($.isEmptyObject(data)) {
                    return false;
                }
            }
            success = true;
            $(this.p.colModel).each(function (i) {
                nm = this.name;
                if (action === "set") {
                    if (data[nm] !== undefined) {
                        vl = format ? ts.formatter("", data[nm], i, data, 'edit') : data[nm];
                        title = this.title ? {
                            "title": $.jgrid.stripHtml(vl)
                        } : {};
                        $("tr.footrow td:eq(" + i + ")", ts.grid.sDiv).html(vl).attr(title);
                        success = true;
                    }
                } else if (action === "get") {
                    res[nm] = $("tr.footrow td:eq(" + i + ")", ts.grid.sDiv).html();
                }
            });
            return action === "get" ? res : success;
        },
        _showHideCol: function (colname, show) {
            var ts = this,
                fndh = false,
                cw;
            if (typeof colname === 'string') {
                colname = [colname];
            }
            var sw = show === "" ? true : false,
                gh = ts.p.groupHeader;
            if (gh) {
                $(ts.element).jqGrid('destroyGroupHeader', false);
            }
            $(this.p.colModel).each(function (i) {
                if ($.inArray(this.name, colname) !== -1 && this.hidden === sw) {
                    if (ts.p.frozenColumns === true && this.frozen === true) {
                        return true;
                    }
                    $("tr[role=rowheader]", ts.grid.hDiv).each(function () {
                        $(this.cells[i]).css("display", show);
                    });
                    $(ts.rows).each(function () {
                        $(this.cells[i]).css("display", show);
                    });
                    if (ts.p.footerrow) {
                        $("tr.footrow td:eq(" + i + ")", ts.grid.sDiv).css("display", show);
                    }
                    cw = parseInt(this.width, 10);
                    if (show === "none") {
                        ts.p.tblwidth -= cw;
                    } else {
                        ts.p.tblwidth += cw;
                    }
                    this.hidden = !sw;
                    fndh = true;
                    ts._trigger("showHideCol", null, [sw, this.name, i]);
                    //http://10.45.61.11/fish/fish-desktop/issues/307
                    if (fish.browser.msie && fish.browser.version === 8) {
                        ts.setGridWidth(ts.p.width);
                    }
                }
            });
            if (fndh === true && ts.p.fixWidth) {
                $(ts.element).jqGrid("setGridWidth", ts.p.shrinkToFit === true ? ts.p.tblwidth : ts.p.width);
            }
            if (gh) {
                $(ts.element).jqGrid('setGroupHeaders', ts.p.groupHeader);
            }
        },
        /**
         * 隐藏(多)列
         * @param  {Array} colname 要隐藏的列名称的集合,也可以是单独一列的列名
         */
        hideCol: function (colname) {
            return this._showHideCol(colname, "none");
        },
        /**
         * 显示(多)列
         * @param  {Array} colname 要显示的列名称的集合,也可以是单独一列的列名
         */
        showCol: function (colname) {
            return this._showHideCol(colname, "");
        },
        /**
         * 修改表格宽度
         * @param {number} newWidth 新的宽度，不带单位，默认px
         * @param {boolean} shrink 默认取初始化参数shrinkToFit的值，值为false的话，列宽不按比例缩小
         */
        setGridWidth: function (nwidth, shrink) {
            var ts = this,
                grid = ts.grid;

            if (typeof shrink !== 'boolean') {
                shrink = ts.p.shrinkToFit;
            }
            if (isNaN(nwidth)) {
                return;
            }

            var initwidth = 0,
                lvc = -1,
                cw,
                aw,
                gw = 0;

            ts.grid.width = ts.p.width = nwidth;
            $(ts.element).css("width", nwidth + "px");
            $("#gview_" + ts.p.id).css("width", nwidth + "px");
            $(ts.grid.bDiv).css("width", nwidth + "px");
            $(ts.grid.hDiv).css("width", nwidth + "px");

            if (ts.p.footerrow) {
                $(ts.grid.sDiv).css("width", nwidth + "px");
            }
            if (shrink === false && ts.p.forceFit === true) {
                ts.p.forceFit = false;
            }
            if (shrink === true) {
                $.each(ts.p.colModel, function () {
                    if (this.hidden === false) {
                        cw = this.widthOrg;
                        initwidth += cw;
                        if (this.fixed) {
                            gw += cw;
                        } else {
                            lvc++;
                        }
                    }
                });
                if (lvc === -1) {
                    return;
                }
                ts.p.tblwidth = initwidth;
                aw = nwidth - gw;
                initwidth = 0;
                var cle = ts.grid.cols.length > 0;
                $.each(ts.p.colModel, function (i) {
                    if (this.hidden === false && !this.fixed) {
                        cw = this.widthOrg;
                        cw = Math.round(aw * cw / (ts.p.tblwidth - gw));
                        this.width = cw;
                        initwidth += cw;
                        ts.grid.headers[i].width = cw;
                        ts.grid.headers[i].el.style.width = cw + "px";
                        if (ts.p.footerrow) {
                            ts.grid.footers[i].style.width = cw + "px";
                        }
                        if (cle) {
                            ts.grid.cols[i].style.width = cw + "px";
                        }
                        lvc = i;
                    }
                });

                if (lvc === -1) {
                    return;
                }

                var cr = grid.width - gw - initwidth;
                ts.p.colModel[lvc].width += (cr - 2); //ui-jqgrid-bdiv 有border 左右各1px
                ts.p.tblwidth = initwidth + (cr - 2) + gw;
                if (ts.p.tblwidth > nwidth) {
                    var delta = ts.p.tblwidth - parseInt(nwidth, 10);
                    ts.p.tblwidth = nwidth;
                    cw = ts.p.colModel[lvc].width = ts.p.colModel[lvc].width - delta;
                } else {
                    cw = ts.p.colModel[lvc].width;
                }
                ts.grid.headers[lvc].width = cw;
                ts.grid.headers[lvc].el.style.width = cw + "px";
                if (cle) {
                    ts.grid.cols[lvc].style.width = cw + "px";
                }
                if (ts.p.footerrow) {
                    ts.grid.footers[lvc].style.width = cw + "px";
                }
            }
            if (ts.p.tblwidth) {
                $('table:first', ts.grid.bDiv).css("width", ts.p.tblwidth + "px");
                $('table:first', ts.grid.hDiv).css("width", ts.p.tblwidth + "px");
                ts.grid.hDiv.scrollLeft = ts.$slimScroll[0].scrollLeft;
                if (ts.p.footerrow) {
                    $('table:first', ts.grid.sDiv).css("width", ts.p.tblwidth + "px");
                }
            }

            if (ts.p.subGrid) {
                this.setSubGridWidth(nwidth);
            }

        },
        /**
         * 修改表格高度
         * @param {number} newHeight 表格新的高度，可以带单位
         */
        setGridHeight: function (nh) {
            var ts = this;
            if (!ts.grid) {
                return;
            }
            var $el = $(ts.element);
            if (!isNaN(ts.p.height)) {
                nh = nh - ($el.outerHeight() - ts.p.height);
            }
            var bDiv = $(ts.grid.bDiv);
            bDiv.css({
                height: nh + (isNaN(nh) ? "" : "px")
            });
            if (ts.p.frozenColumns === true) {
                //follow the original set height to use 16, better scrollbar width detection
                $('#' + ts.p.id + "_frozen").parent().height(bDiv.height() - 16);
            }
            ts.p.height = nh;
            //重新加载slimscroll高度
            //ts.$slimScroll.slimscroll({
            //    height: 'auto'
            //});
            $(ts.grid.bDiv).getNiceScroll(0).resize();
        },
        /**
         * 设置表格头部显示的信息
         * @param {String} newcap 新的提示信息
         */
        setCaption: function (newcap) {
            this.p.caption = newcap;
            $("span.ui-jqgrid-title", this.grid.cDiv).html(newcap);
            $(this.grid.cDiv).show();
        },
        /**
         * 修改列头内容及样式
         * @param {string} colname 列名
         * @param {string} newData   单元格修改后的值
         * @param {string} [prop]  修改后的单元格样式，可以是class也可以是css对象
         * @param {Object} [attrp] 修改后的单元格的附加属性，譬如可以修改title属性
         */
        setLabel: function (colname, nData, prop, attrp) {
            var ts = this,
                pos = -1;
            if (colname !== undefined) {
                $(ts.p.colModel).each(function (i) {
                    if (this.name === colname) {
                        pos = i;
                        return false;
                    }
                });
            } else {
                return;
            }
            if (pos >= 0) {
                var thecol = $("tr.ui-jqgrid-labels th:eq(" + pos + ")", ts.grid.hDiv);
                if (nData) {
                    var ico = $(".s-ico", thecol);
                    $("[id^=jqgh_]", thecol).empty().html(nData).append(ico);
                    ts.p.colModel[pos].label = nData
                }
                if (prop) {
                    if (typeof prop === 'string') {
                        $(thecol).addClass(prop);
                    } else {
                        $(thecol).css(prop);
                    }
                }
                if (typeof attrp === 'object') {
                    $(thecol).attr(attrp);
                }
            }
        },
        /**
         * 修改单元格内容及样式
         * @param {string} rowid   行标识
         * @param {string} colname 列名,也可以是列的索引
         * @param {string} newData   单元格修改后的值,只修改样式的情况下只传""即可
         * @param {string} [prop]  修改后的单元格样式，可以是class也可以是css对象
         * @param {Object} [attrp] 修改后的单元格的附加属性，譬如可以修改title属性
         * @param {boolean} [forceupd] 强制刷新标识，如果单元格要修改成空值的，需要设置此参数为true;此参数主要用来区别只修改单元格样式功能用的
         */
        setCell: function (rowid, colname, nData, cssp, attrp, forceupd) {
            var ts = this,
                pos = -1,
                v, title;
            if (isNaN(colname)) {
                $(ts.p.colModel).each(function (i) {
                    if (this.name === colname) { //hidden属性需要考虑嘛?
                        pos = i;
                        return false;
                    }
                });
            } else {
                pos = parseInt(colname, 10);
            }
            if (pos >= 0) {
                var ind = this.getGridRowById(rowid);
                if (ind) {
                    var tcell = $("td:eq(" + pos + ")", ind);
                    if (nData !== "" || forceupd === true) {
                        v = ts.formatter(rowid, nData, pos, ind, 'edit');
                        title = ts.p.colModel[pos].title ? {
                            "title": $.jgrid.stripHtml(v)
                        } : {};
                        if (ts.p.treeGrid && $(".tree-wrap", $(tcell)).length > 0) {
                            $("span", $(tcell)).html(v).attr(title);
                        } else {
                            $(tcell).html(v).attr(title);
                        }
                        if (ts.p.datatype === "local") {
                            var cm = ts.p.colModel[pos],
                                index;
                            nData = cm.formatter && typeof cm.formatter === 'string' && cm.formatter === 'date' ? $.unformat.date.call(ts, nData, cm) : nData;
                            index = ts.p._index[rowid];
                            if (index !== undefined) {
                                ts.p.data[index][cm.name] = nData;
                            }
                        }
                    }
                    if (typeof cssp === 'string') {
                        $(tcell).addClass(cssp);
                    } else if (cssp) {
                        $(tcell).css(cssp);
                    }
                    if (typeof attrp === 'object') {
                        $(tcell).attr(attrp);
                    }
                }
            }
        },
        /**
         * 获取单元格内容
         * @param {string} rowid   行标识
         * @param {string} colname 列名,也可以是列的索引
         * @return {string}  获取单元格的值
         */
        getCell: function (rowid, colname) {
            var ret = false;
            var ts = this,
                pos = -1;
            if (isNaN(colname)) {
                $(ts.p.colModel).each(function (i) {
                    if (this.name === colname) {
                        pos = i;
                        return false;
                    }
                });
            } else {
                pos = parseInt(colname, 10);
            }
            if (pos >= 0) {
                var ind = this.getGridRowById(rowid);
                if (ind) {
                    try {
                        ret = $.unformat.call(ts, $("td:eq(" + pos + ")", ind), {
                            rowId: ind.id,
                            colModel: ts.p.colModel[pos]
                        }, pos, true);
                    } catch (e) {
                        ret = $.jgrid.htmlDecode($("td:eq(" + pos + ")", ind).html());
                    }
                }
            }
            return ret;
        },
        /**
         * @method reloadData 重新加载数据
         * @param {Array|Object} newData
         * 传入为数组数据时，刷新表格内部数据<br/>
         * 传入Object对象，对象内容定义参看{@link #jsonReader}，刷新表格
         */
        reloadData: function (newData) {
            if (newData) {
                $(this.element).jqGrid("clearData");
                $(this.element).jqGrid("setGridParam", {
                    "data": newData
                });
            }
            $(this.element).trigger("reloadGrid");
        },
        /**
         * 清空数据
         * @deprecated 请使用更简短的clearData替代
         */
        clearGridData: function () {
            this.clearData();
        },
        /**
         * 清空数据
         * @method clearData
         * @param  {Boolean} [clearfooter = false] 如果设置为true的话,footerrow的数据也会清空掉
         */
        clearData: function (clearfooter) {
            var ts = this;
            if (typeof clearfooter !== 'boolean') {
                clearfooter = false;
            }
            var trf = $("#" + ts.p.id + " tbody:first tr:first")[0];
            $("#" + ts.p.id + " tbody:first").empty().append(trf);

            if (ts.p.footerrow && clearfooter) {
                $(".ui-jqgrid-ftable td", ts.grid.sDiv).html("&#160;");
            }
            ts.p.selrow = null;
            ts.p.selarrrow = [];
            ts.p.savedRow = [];
            ts.p.records = 0;
            ts.p.page = 1;
            ts.p.lastpage = 0;
            ts.p.reccount = 0;
            ts.p.data = [];
            ts.p._index = {};
            ts.updatepager(true, false);
        },
        /**
         * 获取界面的行在表格中的索引
         * @param  {String} rowid 行标识
         * @param  {Boolean} flag  默认false,设置为true则等效于与getGridRowById方法
         * @return {Object} 返回行在表格内的索引
         */
        getInd: function (rowid, flag) {
            var ret = false,
                rw;
            rw = this.getGridRowById(rowid);
            if (rw) {
                ret = flag === true ? rw : rw.rowIndex;
            }
            return ret;
        },
        //给表格加上默认行为,上下左右箭头的功能
        bindKeys: function (settings) {
            var o = $.extend({
                scrollingRows: true
            }, settings || {});

            var ts = this;
            if (!$('body').is('[role]')) {
                $('body').attr('role', 'application');
            }
            ts.p.scrollrows = o.scrollingRows;
            $(ts.$tb).keydown(function (event) {
                var target = $(this).find('tr[tabindex=0]')[0],
                    id, r, mind,
                    expanded = ts.p.treeReader.leaf;
                //check for arrow keys
                if (target) {
                    mind = ts.p._index[target.id];
                    if (event.keyCode === 37 || event.keyCode === 38 || event.keyCode === 39 || event.keyCode === 40) {
                        // up key
                        if (event.keyCode === 38) {
                            r = target.previousSibling;
                            id = "";
                            if (r) {
                                if ($(r).is(":hidden")) {
                                    while (r) {
                                        r = r.previousSibling;
                                        if (!$(r).is(":hidden") && $(r).hasClass('jqgrow')) {
                                            id = r.id;
                                            break;
                                        }
                                    }
                                } else {
                                    id = r.id;
                                }
                            }
                            $(ts.element).jqGrid('setSelection', id, true, event);
                            event.preventDefault();
                        }
                        //if key is down arrow
                        if (event.keyCode === 40) {
                            r = target.nextSibling;
                            id = "";
                            if (r) {
                                if ($(r).is(":hidden")) {
                                    while (r) {
                                        r = r.nextSibling;
                                        if (!$(r).is(":hidden") && $(r).hasClass('jqgrow')) {
                                            id = r.id;
                                            break;
                                        }
                                    }
                                } else {
                                    id = r.id;
                                }
                            }
                            $(ts.element).jqGrid('setSelection', id, true, event);
                            event.preventDefault();
                        }
                        // left
                        if (event.keyCode === 37) {
                            if (ts.p.treeGrid && ts.p.data[mind][expanded]) {
                                $(target).find("div.treeclick").trigger('click');
                            }
                            ts._trigger("onLeftKey", null, ts.p.selrow);
                        }
                        // right
                        if (event.keyCode === 39) {
                            if (ts.p.treeGrid && !ts.p.data[mind][expanded]) {
                                $(target).find("div.treeclick").trigger('click');
                            }
                            ts._trigger("onRightKey", null, ts.p.selrow);
                        }
                    }
                    //check if enter was pressed on a grid or treegrid node
                    else if (event.keyCode === 13) {
                        ts._trigger("onEnter", null, ts.p.selrow);
                    } else if (event.keyCode === 32) {
                        ts._trigger("onSpace", null, ts.p.selrow);
                    }
                }
            });
        },
        unbindKeys: function () {
            $(this.$tb).unbind('keydown');
        },
        /**
         * 给表格新增按钮
         * @method navButtonAdd
         * @param {Object} [option]
         *     option.id  按钮的标识
         *     option.cssprop 按钮附加的样式,可以是css对象,也可以是class类选择器名称
         *     option.caption = newButton 按钮显示的名称
         *     option.title 鼠标移到按钮上的提示
         *     option.buttonicon = '' 按钮图标,为空则不使用图标;可以是ui-icon ui-icon-newwin;也可以是glyphicon glyphicon-plus
         *     option.onClick 按钮点击事件
         *     option.navpos  按钮在表格中新增的位置,默认'pager',可选'topbar','bottombar',也可以是任意selector;譬如设置为'topbar',则表示将按钮添加到topbar, 此处navpos参数为空的情况会取表格的初始化属性navpos,如果还取不到则默认定位到分页栏左侧
         *     ps:按钮失效加上ui-state-disabled样式即可;默认按钮排序是左对齐,可自行设置样式控制
         */
        navButtonAdd: function (option) {
            if (option) {
                if (!$.isArray(option)) {
                    option = [option];
                }
            }
            var ts = this,
                p;
            var btngroupWidth = 0;

            for (var i = 0; i < option.length; i++) {
                var p = $.extend({
                    caption: ''
                }, option[i] || {});

                if (!p.navpos) {
                    p.navpos = this.p.navpos || 'pager';
                }
                if (p.navpos === 'topbar') {
                    p.navpos = "#t_" + ts.p.id;
                } else if (p.navpos === 'bottombar') {
                    p.navpos = "#tb_" + ts.p.id;
                } else if (p.navpos === 'pager') { //默认值
                    p.navpos = this.p.pagebar ? "#" + ts.p.id + "_pager_left" : "";
                }

                if (!p.navpos) return;
                var findnav = $(".ui-nav-btn-group", p.navpos)[0],
                    pgid = ts.p.pager;
                if (!findnav) {
                    findnav = $("<div class='btn-group ui-nav-btn-group'></div>").appendTo(p.navpos)[0];
                }
                if (p.id && $("#" + p.id, findnav).length > 0) {
                    return;
                }
                var $tbd = $("<button class='ui-nav-button' type='button'>" + p.caption + "</button>");
                if (typeof p.cssprop === "string") {
                    $tbd.addClass(p.cssprop);
                } else if (typeof p.cssprop === "object") {
                    $tbd.css(p.cssprop);
                }
                p.buttonicon ? $tbd.prepend("<span class='" + p.buttonicon + "'></span>") : "";
                p.title ? $tbd.attr("title", p.title) : "";
                p.id ? $tbd.attr("id", p.id) : "";
                $tbd.appendTo(findnav).click(
                    function (p) {
                        var $this = $tbd;
                        return function (e) {
                            if ($.isFunction(p.onClick)) {
                                p.onClick.call(ts, e);
                            }
                        }
                    }(p)
                )
            } //添加按钮

            //重新计算排列按钮
            var parentWidth = $("#" + ts.p.id + "_pager").width(),
                pagerRight = $("#" + ts.p.id + "_pager_right").width();
            if (ts.options.showColumnsFeature) {
                var gridBtn = $("#" + ts.p.id + "_pager_left .js-columns");
                btngroupWidth = parentWidth - pagerRight - gridBtn.outerWidth(true);
            } else {
                btngroupWidth = parentWidth - pagerRight;
            }
            var $pager = $("#" + ts.p.id + "_pager_left");

            if ($pager && $pager.length > 0) {
                var $dropdown = $pager.find(".btn-group.ui-nav-btn-group .dropdown-toggle")[0];
                if (!$dropdown) {
                    $dropdown = $("<div class='ui-nav-btn-group'></div>");
                    var $dropdownBtn = $("<button class='ui-nav-button dropdown-toggle' data-toggle='dropdown' type='button'><span class='glyphicon glyphicon-option-horizontal'></span></button>");
                    $dropdown.append($dropdownBtn);
                    $pager.find(".btn-group.ui-nav-btn-group").append($dropdown);
                }
                var $btngroup = $pager.find('.btn-group.ui-nav-btn-group');
                var diff = $btngroup.outerWidth(true) - btngroupWidth;
                if (diff <= 0) {
                    $btngroup.find(".ui-nav-btn-group").remove();
                } else {
                    this._arrangeBtn($btngroup, btngroupWidth);
                }
            }

        },
        _arrangeBtn: function ($btngroup, btngroupWidth) {
            var that = this;
            var diff = $btngroup.outerWidth(true) - btngroupWidth,
                dropdown = $btngroup.children('.ui-nav-btn-group'),
                ul = $(".dropdown-menu-btn", dropdown)[0];

            if (ul) {
                var children = $(ul).children().children();
                children = children.toArray().reverse();
                $(children).each(function (index, val) {
                    var $btn = $(val).clone(true);
                    $btn.insertBefore(dropdown);
                    $(val).parent().remove();
                });
                diff = $btngroup.outerWidth(true) - btngroupWidth;
            } else {
                if (dropdown && dropdown.length == 0) {
                    dropdown = $("<div class='ui-nav-btn-group'></div>");
                    var $dropdownBtn = $("<button class='ui-nav-button dropdown-toggle' data-toggle='dropdown' type='button'><span class='glyphicon glyphicon-option-horizontal'></span></button>");
                    dropdown.append($dropdownBtn);
                    $btngroup.append(dropdown);
                }
                ul = $("<ul class='dropdown-menu dropdown-menu-btn'></ul>");
                ul.appendTo(dropdown);
            }
            while (diff > 0) {
                var children = $btngroup.children(),
                    length = children.length;

                var $li = $("<li></li>"),
                    $a = $(children[length - 2]).clone(true);
                $li.append($a).appendTo(ul);

                $(children[length - 2]).remove();
                diff = $btngroup.outerWidth(true) - btngroupWidth;

            }
            if ($(ul).children().length == 0) {
                $(ul).parent().remove();
            }

        },
        /**
         * 重新计算分页栏上按钮的排列顺序
         */
        navButtonRefresh: function () {
            var ts = this;
            var parentWidth = ts.element.parent().width();
            var pagerRight = $("#" + ts.p.id + "_pager_right").width();
            var btngroupWidth;
            if (ts.options.showColumnsFeature) {
                var gridBtn = $("#" + ts.p.id + "_pager_left .js-columns");
                btngroupWidth = parentWidth - pagerRight - gridBtn.outerWidth(true);
            } else {
                btngroupWidth = parentWidth - pagerRight;
            }
            var navbtn = ts.element.find("#" + ts.p.id + "_pager_left .btn-group.ui-nav-btn-group");
            if (navbtn && navbtn.length > 0) {
                ts._arrangeBtn(navbtn, btngroupWidth);
            }
        }
    });

    $.fn.jqGrid = $.fn.grid; //历史原因,增加别名

}();

/**
 * 表格事件操作完成的事件,可绑定grid:gridcomplete事件
 * @event gridComplete
 */
/**
 * 加载每一条数据触发的事件,可修改每一行的展示,需要设置参数gridview为false,可绑定grid:afterinsertrow事件
 * @event afterInsertRow
 * @param  {Event} e 事件对象
 * @param  {String} rowid 行标识
 * @param  {Object} data 行数据对象
 */
/**
 * 单击其他行之后的事件,可绑定grid:onchangerow事件,与选中行事件的区别在于点击已选中的记录不再会触发事件
 * @event onChangeRow
 * @param  {Event} e 事件对象
 * @param  {String} rowid 目标选中的行标识
 * @param  {String} oldrowid 之前选中的行标识
 */
/**
 * 单击选中行之后的事件,可绑定grid:onselectrow事件
 * @event onSelectRow
 * @param  {Event} e 事件对象
 * @param  {String} rowid 行标识
 * @param  {Boolean} state 选中的是否是同一行
 * @param  {Boolean} checked 多选场景下,选中行是否打勾
 */
/**
 * 选中单元格的事件,可绑定grid:oncellselect事件
 * @event onCellSelect
 * @param  {Event} e 事件对象
 * @param  {String} rowid 行标识
 * @param  {Number} iCol  列索引
 * @param  {String} cellcontent 单元格内容
 */
/**
 * 双击选中行事件,可绑定grid:ondblclickrow事件
 * @event onDblClickRow
 * @param  {Event} e 事件对象
 * @param  {String} rowid 行标识
 * @param  {Number} iRow  行索引
 * @param  {Number} iCol  列索引
 */
/**
 * 右击选中行事件,可绑定grid:rightclickrow事件
 * @event onRightClickRow
 * @param  {Event} e 事件对象
 * @param  {String} rowid 行标识
 * @param  {Number} iRow  行索引
 * @param  {Number} iCol  列索引
 */
/**
 * 单击选中行开始的事件,可绑定grid:beforeselectrow事件
 * @event beforeSelectRow
 * @param  {Event} e 事件对象
 * @param  {String} rowid 行标识
 * @return {Boolean} 返回值，返回false中断选中行操作
 */
/**
 * 点击排序开始的事件,可绑定grid:onsortcol事件
 * @event onSortCol
 * @param  {Event} e 事件对象
 * @param  {String} sortname 排序列名称
 * @param  {Number} iCol  列索引
 * @param  {String} sortorder 排序方式,升序还是降序
 * @return {String} 返回值，返回false中断排序操作
 */
/**
 * 列头拖拽的开始事件,可绑定grid:resizestart事件
 * @event resizeStart
 * @param  {Event} e 事件对象
 * @return {number} idx 列索引
 */
/**
 * 列头拖拽的结束事件,可绑定grid:resizestop事件
 * @event resizeStop
 * @param  {Event} e 事件对象
 * @param  {Number} nw  新的列宽
 * @return {Number} idx 列索引
 */
/**
 * 点击表头缩放按钮触发的事件,可绑定grid:onheaderclick事件
 * @event onHeaderClick
 * @param  {Event} e 事件对象
 * @param  {String} gridstate  表格状态,visible或者hidden
 */
/**
 * 按回车键触发事件,可绑定grid:onenter事件
 * @event onEnter
 * @param  {Event} e 事件对象
 * @param  {String} rowid 行标识
 */
/**
 * 按空格键触发事件,可绑定grid:onspace事件
 * @event onSpace
 * @param  {Event} e 事件对象
 * @param  {String} rowid 行标识
 */
/**
 * 按左移键触发事件,可绑定grid:onleftkey事件;如果是tree则收缩节点
 * @event onLeftKey
 * @param  {Event} e 事件对象
 * @param  {String} rowid 行标识
 */
/**
 * 按右移键触发事件,可绑定grid:onrightkey事件;如果是tree则展开节点
 * @event onRightKey
 * @param  {Event} e 事件对象
 * @param  {String} rowid 行标识
 */
/**
 * 重载表格数据的事件,通过grid对象的trigger方法调用.
 * @event reloadGrid
 * @param  {Event} e 事件对象
 * @param  {Object} [opt] 重载参数,一般为{page:n}格式,表示加载的页数
 */
/**
 * 点击分页按钮触发的事件,可绑定grid:onpaging事件;
 * @event onPaging
 * @param  {Event} e 事件对象
 * @param  {Number} page 分页的页码
 * @param  {Object} opt 点击的按钮位置,对应first,prev,next,last;如果是直接输入页码,则此值为user
 * @return {String} 返回值，返回false中断翻页操作
 */
/**
 * 点击列头全选按钮触发的事件,可绑定grid:onselectall事件
 * @event onSelectAll
 * @param  {Event} e 事件对象
 * @param  {Boolean} status 表格状态,true表示选中,false表示没有选中
 */
/**
 * 点击列头全选按钮触发的事件,可绑定grid:showhidecol事件
 * @event showHideCol
 * @param  {Event} e 事件对象
 * @param  {Boolean} show  显示(true)还是隐藏(false),
 * @param  {String}  name  操作的列名,隐藏多列的话,会触发多次
 * @param  {Number}  index 操作的列索引
 */

/*
 * Created by tanyl on 2014/12/22.
 * Modify  by tanyl on 2015/07/27.
 */
/**
 * 数据表格插件
 * @class fish.desktop.widget.Grid
 */

/**
 * 拖拽列头改变顺序的时候触发的事件,可绑定grid:remapcolumns事件
 * @event remapColumns
 * @param  {Event} e 事件对象
 * @param  {Array}  permutation 新的列顺序,值为colMod对应的列索引值
 */
!function () {

    'use strict';

    $.extend($.ui.grid.prototype, {
        /**
         * 获取列的属性
         * @param  {String} colname 列定义的name
         * @return {Object}         列对象
         */
        getColProp: function (colname) {
            var ret = {}, ts = this;
            var cM = ts.p.colModel, i;
            for (i = 0; i < cM.length; i++) {
                if (cM[i].name === colname) {
                    ret = cM[i];
                    break;
                }
            }
            return ret;
        },
        /**
         * 设置列的属性
         * @param {String} colname 列定义的name
         * @param {Object} obj     列的新对象
         * @param {Boolean} [deep=true] 是不是深层赋值
         */
        setColProp: function (colname, obj, deep) {
            if (obj) {
                var cM = this.p.colModel, i;
                for (i = 0; i < cM.length; i++) {
                    if (cM[i].name === colname) {
                        //浅拷贝需要重新赋值 http://10.45.61.11/fish/fish-desktop/issues/306
                        this.p.colModel[i] = $.extend(deep === false ? false : true, this.p.colModel[i], obj);
                        break;
                    }
                }
            }
        },
        /**
         * 如果改变了排序列及排序方式,可以通过此方法将界面显示的数据进行排序
         * @method sortGrid
         * @param {String} colname 需要排序的列名
         * @param {String} sortorder 排序的方式,升序asc还是降序desc
         */
        sortGrid: function (colname, sortorder) {
            var ts = this, idx = -1, i, sobj = false;
            for (i = 0; i < ts.p.colModel.length; i++) {
                if (ts.p.colModel[i].name === colname) {
                    idx = i;
                    break;
                }
            }
            if (idx !== -1) {
                var sort = ts.p.colModel[idx].sortable;
                if (sort) {
                    ts.sortData("jqgh_" + ts.p.id + "_" + colname, idx, sortorder);
                }
            }
        },
        /**
         * 设置表格是否可见
         * @param {String} state 如果是hidden,则隐藏表格;如果是visible,则显示出表格
         */
        setGridState: function (state) {
            var ts = this;
            if (state === 'hidden') {
                $(".ui-jqgrid-bdiv, .ui-jqgrid-hdiv", "#gview_" + ts.p.id).slideUp("fast");
                if (ts.p.pager) {
                    $(ts.p.pager).slideUp("fast");
                }
                if (ts.p.toppager) {
                    $(ts.p.toppager).slideUp("fast");
                }
                if (ts.p.toolbar[0] === true) {
                    if (ts.p.toolbar[1] === 'both') {
                        $(ts.grid.ubDiv).slideUp("fast");
                    }
                    $(ts.grid.uDiv).slideUp("fast");
                }
                if (ts.p.footerrow) {
                    $(".ui-jqgrid-sdiv", "#gbox_" + ts.p.id).slideUp("fast");
                }
                $(".ui-jqgrid-titlebar-close span", ts.grid.cDiv).removeClass("glyphicon-triangle-top").addClass("glyphicon-triangle-bottom");
                ts.p.gridstate = 'hidden';
            } else if (state === 'visible') {
                $(".ui-jqgrid-hdiv, .ui-jqgrid-bdiv", "#gview_" + ts.p.id).slideDown("fast");
                if (ts.p.pager) {
                    $(ts.p.pager).slideDown("fast");
                }
                if (ts.p.toppager) {
                    $(ts.p.toppager).slideDown("fast");
                }
                if (ts.p.toolbar[0] === true) {
                    if (ts.p.toolbar[1] === 'both') {
                        $(ts.grid.ubDiv).slideDown("fast");
                    }
                    $(ts.grid.uDiv).slideDown("fast");
                }
                if (ts.p.footerrow) {
                    $(".ui-jqgrid-sdiv", "#gbox_" + ts.p.id).slideDown("fast");
                }
                $(".ui-jqgrid-titlebar-close span", ts.grid.cDiv).removeClass("glyphicon-triangle-bottom").addClass("glyphicon-triangle-top");
                ts.p.gridstate = 'visible';
            }
        },
        /**
         * 设置复杂表头
         * @param {Object} o 复杂表头的参数.
         * 参数内useColSpanStyle表示列头是否纵向合并单元格;
         * 参数内groupHeaders表示列头属性,内部startColumnName表示开始的列,numberOfColumns表示从开始列的数量,titleText表示合并后的列头显示值
         * <pre>
         * $("#gridAdvanced").jqGrid("setGroupHeaders", {
         *    useColSpanStyle: true,
         *    groupHeaders:[{startColumnName: "amount", numberOfColumns: 3, titleText: "<em>Price</em>"}]
         * });
         * </pre>
         */
        setGroupHeaders: function (o) {
            o = $.extend({
                useColSpanStyle: false,
                groupHeaders: []
            }, o || {});
            // this.p.groupHeader = o; //后续考虑可以直接设置进config内
            var ts = this,
                numberOfColumns, //从开始列之后的数量
                cVisibleColumns, //从开始列之后的可见列数量,如果从开始列之后的几个列都没有hidden属性,则与numberOfColumns一致
                titleText, //组合的列名称
                skip = 0, //匹配上startColumnName之后,跳过的numberOfColumns
                colModel = ts.p.colModel, //简写
                ths = ts.grid.headers,
                cml = ths.length, //colModel //http://10.45.61.11/fish/fish-desktop/issues/261
                $htable = $("table.ui-jqgrid-htable", ts.grid.hDiv),//列头table主体
                $secondHeaderRow = $htable.find("tr.ui-jqgrid-labels:last").addClass("jqg-second-row-header"),//上层列头,合并过单元格的
                $firstHeaderRow = $htable.find(".jqg-first-row-header"), //创建出第一个header,高度为0,用来控制宽度
                $thirdHeaderRow; //传进第三个,下层列头

            if ($firstHeaderRow[0] === undefined) {
                $firstHeaderRow = $('<tr>', {
                    role: "row",
                    "aria-hidden": "true"
                }).addClass("jqg-first-row-header").css("height", "auto");
            } else {
                $firstHeaderRow.empty();
            }

            $thirdHeaderRow = $('<tr>', {role: "rowheader"}).addClass("ui-jqgrid-labels jqg-third-row-header");
            for (var i = 0; i < cml; i++) {
                var th = ths[i].el,
                    $th = $(th),
                    cmi = colModel[i];
                // build the next cell for the first header row
                $("<th>", {role: 'gridcell'}).css({
                    height: '0px',
                    width: ths[i].width + 'px',
                    display: (cmi.hidden ? 'none' : '')
                }).appendTo($firstHeaderRow);

                // th.style.width = ""; // remove unneeded style
                var iCol = _.indexOf(_.pluck(o.groupHeaders, 'startColumnName'), cmi.name);
                if (iCol >= 0) {
                    var cghi = o.groupHeaders[iCol];
                    numberOfColumns = cghi.numberOfColumns;
                    titleText = cghi.titleText;

                    // caclulate the number of visible columns from the next numberOfColumns columns
                    for (cVisibleColumns = 0, iCol = 0; iCol < numberOfColumns && (i + iCol < cml); iCol++) {
                        if (!colModel[i + iCol].hidden) {
                            cVisibleColumns++;
                        }
                    }

                    // The next numberOfColumns headers will be moved in the next row
                    // in the current row will be placed the new column header with the titleText.
                    // The text will be over the cVisibleColumns columns
                    var $colHeader = $('<th>').attr({role: "columnheader"})
                        .addClass("ui-th-column-header")
                        //.css({'border-top': '0px none'})//'height':'22px',
                        .html(titleText);
                    if (cVisibleColumns > 0) {
                        $colHeader.attr("colspan", String(cVisibleColumns));
                    }
                    $colHeader.attr("title", $colHeader.text());
                    // hide if not a visible cols
                    if (cVisibleColumns === 0) {
                        $colHeader.hide();
                    }

                    $th.before($colHeader); // insert new column header before the current
                    $thirdHeaderRow.append(th);         // move the current header in the next row

                    // set the coumter of headers which will be moved in the next row
                    skip = numberOfColumns - 1;
                } else {
                    if (skip === 0) {
                        if (o.useColSpanStyle) {
                            // expand the header height to two rows
                            $th.attr("rowspan", "2");
                        } else {
                            $('<th>', {role: "columnheader"})
                                .addClass("ui-th-column-header")
                                .css({"display": cmi.hidden ? 'none' : ''})
                                .insertBefore($th);
                            $thirdHeaderRow.append(th);
                        }
                    } else {
                        // move the header to the next row
                        //$th.css({"padding-top": "2px", height: "19px"});
                        $thirdHeaderRow.append(th);
                        skip--;
                    }
                }
            }
            //生成界面
            $secondHeaderRow.before($firstHeaderRow).after($thirdHeaderRow);

            if (o.useColSpanStyle && !(fish.browser.msie && fish.browser.version === 8)) {
                // Increase the height of resizing span of visible headers
                $htable.find("span.ui-jqgrid-resize").each(function () {
                    var $parent = $(this).parent();
                    if ($parent.is(":visible")) {
                        this.style.cssText = 'height: ' + $parent.height() + 'px !important; cursor: col-resize;';
                    }
                });

                // Set position of the sortable div (the main lable)
                // with the column header text to the middle of the cell.
                // One should not do this for hidden headers.
                $htable.find("div.ui-jqgrid-sortable").each(function () {
                    var $ts = $(this), $parent = $ts.parent();
                    if ($parent.is(":visible") && $parent.is(":has(span.ui-jqgrid-resize)")) {
                        $ts.css('top', ($parent.height() - $ts.outerHeight()) / 2 + 'px');
                    }
                });
            }

            ts._bind('resizeStop.setGroupHeaders', function (e, nw, idx) {
                $htable.find("tr.jqg-first-row-header th").eq(idx).css("width", nw);
            });

            //组合表头只支持2级,变成2级之后高度有变化
            $(ts.element).jqGrid('setGridHeight', $(ts.element).outerHeight() - $thirdHeaderRow.height());
        },
        /**
         * 取消设置复杂表头,与setGroupHeaders相对
         */
        destroyGroupHeader: function () {
            var ts = this, $tr, headers, $th, $resizing,
                thead = $("table.ui-jqgrid-htable thead", ts.grid.hDiv);
            $(ts.element).unbind('.setGroupHeaders');
            $tr = $("<tr>", {role: "rowheader"}).addClass("ui-jqgrid-labels");
            headers = ts.grid.headers;
            var thirdHeight = $(".jqg-third-row-header", thead).height();
            for (var i = 0; i < headers.length; i++) {
                $th = $(headers[i].el).css({
                    width: headers[i].width,
                    display: ts.p.colModel[i].hidden ? "none" : ""
                })
                $th.removeAttr("rowSpan");
                $tr.append($th);
                $resizing = $th.children("span.ui-jqgrid-resize");
                if ($resizing.length > 0) {// resizable column
                    $resizing[0].style.height = "";
                }
                $th.children("div")[0].style.top = "";
            }
            $(ts.element).jqGrid('setGridHeight', $(ts.element).outerHeight() + thirdHeight);
            $(thead).children('tr.ui-jqgrid-labels').remove();
            $(thead).prepend($tr);
        },
        /**
         * 设置列的冻结效果,在有水平滚动条的情况下,移动水平滚动条,此列位置不变.列的冻结从最左侧开始算起,可支持多列
         * @param {number} colnum 冻结列的数量
         */
        setFrozenColumns: function (colnum) {
            var ts = this, cm = ts.p.colModel, i = 0, len = cm.length, maxfrozen = -1;
            // TODO treeGrid Support
            if (ts.p.treeGrid === true || ts.p.cellEdit === true || ts.p.sortable) {
                return;
            }
            if (ts.p.rownumbers) {
                i++;
            }
            if (ts.p.multiselect) {
                i++;
            }

            if (colnum < len) {
                maxfrozen = colnum - 1;
                while (i < colnum) {
                    cm[i].frozen = true;
                    i++;
                }
            }
            if (maxfrozen >= 0) {
                var top = ts.p.caption ? $(ts.grid.cDiv).outerHeight() : 0,
                    hth = $(".ui-jqgrid-htable", "#gview_" + ts.p.id).height();
                if (ts.p.toolbar[0] === true) {
                    if (ts.p.toolbar[1] !== "bottom") {
                        top = top + $(ts.grid.uDiv).outerHeight();
                    }
                }
                ts.grid.fhDiv = $('<div style="position:absolute;left:0px;top:' + top + 'px;height:' + hth + 'px;border-bottom-width: 0px;" class="frozen-div ui-jqgrid-hdiv"></div>');
                ts.grid.fbDiv = $('<div style="position:absolute;left:0px;top:' + (parseInt(top, 10) + parseInt(hth, 10) + 1) + 'px;overflow-y:hidden" class="frozen-bdiv ui-jqgrid-bdiv"></div>');
                $("#gview_" + ts.p.id, ts.element).append(ts.grid.fhDiv);
                // ts.grid.fhDiv.innerWidth(250);
                var htbl = $(".ui-jqgrid-htable", "#gview_" + ts.p.id).clone(true);
                // groupheader support - only if useColSpanstyle is false
                if (ts.p.groupHeader) {
                    $("tr.jqg-first-row-header, tr.jqg-third-row-header", htbl).each(function () {
                        $("th:gt(" + maxfrozen + ")", this).remove();
                    });
                    var swapfroz = -1, fdel = -1, cs, rs;
                    $("tr.jqg-second-row-header th", htbl).each(function () {
                        cs = parseInt($(this).attr("colspan"), 10);
                        rs = parseInt($(this).attr("rowspan"), 10);
                        if (rs) {
                            swapfroz++;
                            fdel++;
                        }
                        if (cs) {
                            swapfroz = swapfroz + cs;
                            fdel++;
                        }
                        if (swapfroz === maxfrozen) {
                            return false;
                        }
                    });
                    if (swapfroz !== maxfrozen) {
                        fdel = maxfrozen;
                    }
                    $("tr.jqg-second-row-header", htbl).each(function () {
                        $("th:gt(" + fdel + ")", this).remove();
                    });
                } else {
                    $("tr", htbl).each(function () {
                        $("th:gt(" + maxfrozen + ")", this).remove();
                    });
                }
                $(htbl).width(1);
                // resizing stuff
                $(ts.grid.fhDiv).append(htbl).mousemove(function (e) {
                    if (ts.grid.resizing) {
                        ts.grid.dragMove(e);
                        return false;
                    }
                });

                $("#gview_" + ts.p.id, ts.element).append(ts.grid.fbDiv);

                //ts.$slimScroll.scroll(function () {
                //    $(ts.grid.fbDiv).scrollTop($(this).scrollTop());
                //});
                $(ts.grid.bDiv).scroll(function () {
                    $(ts.grid.fbDiv).scrollTop($(this).scrollTop());
                })

                ts._bind('resizeStop.setFrozenColumns', function (e, w, index) {
                    var th_width = $("th:eq(" + index + ")", ts.grid.hDiv).outerWidth();
                    // console.log("width:"+th_width + ":another:"+w);
                    var rhth = $(".ui-jqgrid-htable", ts.grid.fhDiv);
                    $("th:eq(" + index + ")", rhth).outerWidth(th_width);
                    var btd = $(".ui-jqgrid-btable", ts.grid.fbDiv);
                    $("td:eq(" + index + ")", btd).outerWidth(th_width);
                    //
                });
                // sorting stuff
                ts._bind('onSortCol.setFrozenColumns', function (e, index, idxcol) {
                    var previousSelectedTh = $("tr.ui-jqgrid-labels:last th:eq(" + ts.p.lastsort + ")", ts.grid.fhDiv), newSelectedTh = $("tr.ui-jqgrid-labels:last th:eq(" + idxcol + ")", ts.grid.fhDiv);
                    $("span.ui-grid-ico-sort", previousSelectedTh).addClass('ui-state-disabled');
                    $(previousSelectedTh).attr("aria-selected", "false");
                    $("span.ui-icon-" + ts.p.sortorder, newSelectedTh).removeClass('ui-state-disabled');
                    $(newSelectedTh).attr("aria-selected", "true");
                    if (ts.p.lastsort !== idxcol) {
                        $("span.s-ico", previousSelectedTh).hide();
                        $("span.s-ico", newSelectedTh).show();
                    }
                    ;
                    //http://10.45.61.11/fish/fish-desktop/issues/282
                    if (fish.browser.msie && fish.browser.version === 8) {
                        ts.p.disableClick = true;
                    }

                });
                //TODO support for setRowData
                ts._bind('gridComplete.setFrozenColumns', function () {
                    $("#" + ts.p.id + "_frozen", ts.element).remove();
                    $(ts.grid.fbDiv).height($(ts.grid.bDiv).height());// $(ts.grid.fbDiv).height($(ts.grid.bDiv).height()-18);
                    var btbl = $(ts.$tb).clone(true);
                    $("tr[role=row]", btbl).each(function (index) {
                        $(this).height($(ts.rows[index]).height());
                        $("td[role=gridcell]:gt(" + maxfrozen + ")", this).remove();

                    });
                    // 与header一致 2014/8/25
                    var rhths = $(".ui-jqgrid-htable", ts.grid.fhDiv).find('.jqg-first-row-header th');
                    $("tr[role=row]:first", btbl).each(function () {
                        $("td", this).each(function (index, val) {
                            $(this).width($(rhths[index]).outerWidth());
                        });
                    });
                    $(btbl).width(1).attr("id", ts.p.id + "_frozen");
                    $(ts.grid.fbDiv).append(btbl);
                    $(ts.grid.fbDiv).scrollTop($(ts.grid.bDiv).scrollTop());//初始化的时候,可能就存在scrollTop
                    btbl = null;
                });

                ts._trigger("gridComplete.setFrozenColumns");//组装冻结列内部内容
                ts.p.frozenColumns = true;
            }
        },
        /**
         * 取消列的冻结效果,与setFrozenColumns相对
         */
        destroyFrozenColumns: function () {
            if (this.p.frozenColumns === true) {
                var ts = this;
                $(ts.grid.fhDiv).remove();
                $(ts.grid.fbDiv).remove();
                ts.grid.fhDiv = null;
                ts.grid.fbDiv = null;
                $(this.element).unbind('.setFrozenColumns');
                this.p.frozenColumns = false;
            }
        },
        //可以在表格内拖动列,改变列的位置,依赖jqueryui的sortable事件;内部用,option中含有sortable:true时;tblrow 列头
        sortableColumns: function (tblrow) {
            var ts = this, tid = ts.p.id;

            function start() {
                ts.p.disableClick = true;
            }

            var sortable_opts = {
                "tolerance": "pointer",
                "axis": "x",
                "scrollSensitivity": "1",
                "items": '>th:not(:has(#jqgh_' + tid + '_cb' + ',#jqgh_' + tid + '_rn),:hidden)',
                "placeholder": {
                    element: function (item) {
                        var el = $(document.createElement(item[0].nodeName))
                            .addClass(item[0].className + " ui-sortable-placeholder ui-state-highlight")
                            .removeClass("ui-sortable-helper")[0];
                        return el;
                    },
                    update: function (self, p) {
                        p.height(self.currentItem.innerHeight() - parseInt(self.currentItem.css('paddingTop') || 0, 10) - parseInt(self.currentItem.css('paddingBottom') || 0, 10));
                        p.width(self.currentItem.innerWidth() - parseInt(self.currentItem.css('paddingLeft') || 0, 10) - parseInt(self.currentItem.css('paddingRight') || 0, 10));
                    }
                },
                "update": function (event, ui) {
                    var p = $(ui.item).parent(),
                        th = $(">th", p),
                        colModel = ts.p.colModel,
                        cmMap = {}, tid = ts.p.id + "_";
                    $.each(colModel, function (i) {
                        cmMap[this.name] = i;
                    });
                    var permutation = [];
                    th.each(function () {
                        var id = $(">div", this).get(0).id.replace(/^jqgh_/, "").replace(tid, "");
                        if (cmMap.hasOwnProperty(id)) {
                            permutation.push(cmMap[id]);
                        }
                    });

                    $(ts.element).jqGrid("remapColumns", permutation);
                    if ($.isFunction(ts.p.sortable.update)) {
                        ts.p.sortable.update(permutation);
                    }
                    setTimeout(function () {
                        ts.p.disableClick = false;
                    }, 50);
                }
            };
            if (ts.p.sortable.options) {
                $.extend(sortable_opts, ts.p.sortable.options);
            } else if ($.isFunction(ts.p.sortable)) {
                ts.p.sortable = {"update": ts.p.sortable};
            }
            if (sortable_opts.start) {
                var s = sortable_opts.start;
                sortable_opts.start = function (e, ui) {
                    start();
                    s.call(this, e, ui);
                };
            } else {
                sortable_opts.start = start;
            }
            if (ts.p.sortable.exclude) {
                sortable_opts.items += ":not(" + ts.p.sortable.exclude + ")";
            }
            tblrow.sortable(sortable_opts).data("ui-sortable").floating = true;
        },
        //permutation 新排列的colMod的顺序
        remapColumns: function (permutation) {
            function resortArray(a) {
                var ac;
                if (a.length) {
                    ac = $.makeArray(a);
                } else {
                    ac = $.extend({}, a);
                }
                $.each(permutation, function (i) {
                    a[i] = ac[this];
                });
            }

            var ts = this;

            function resortRows(parent, clobj) {
                $(">tr" + (clobj || ""), parent).each(function () {
                    var row = this;
                    var elems = $.makeArray(row.cells);
                    $.each(permutation, function () {
                        var e = elems[this];
                        if (e) {
                            row.appendChild(e);
                        }
                    });
                });
            }

            resortArray(ts.p.colModel);
            resortArray(ts.grid.headers);
            resortRows($("thead:first", ts.grid.hDiv), ":not(.ui-jqgrid-labels)");
            resortRows(ts.element.find("tbody:first"), ".jqgfirstrow, tr.jqgrow, tr.jqfoot");
            if (ts.p.footerrow) {
                resortRows($("tbody:first", ts.grid.sDiv));
            }
            if (ts.p.remapColumns) {
                if (!ts.p.remapColumns.length) {
                    ts.p.remapColumns = $.makeArray(permutation);
                } else {
                    resortArray(ts.p.remapColumns);
                }
            }
            ts.p.lastsort = $.inArray(ts.p.lastsort, permutation);
            ts._trigger("remapColumns", null, permutation);
        },

        /**
         * 可以在表格内拖动行数据移动位置,依赖jqueryui的拖拽事件,不支持tree操作
         * @param  {Object} [opts] 可定义start和update事件，会在拖拽开始和结束的时候执行
         */
        sortableRows: function (opts) {
            // Can accept all sortable options and events
            var ts = this;
            // Currently we disable a treeGrid sortable
            if (ts.p.treeGrid) {
                return;
            }
            if ($.fn.sortable) {
                opts = $.extend({
                        "cursor": "move",
                        "axis": "y",
                        "items": ">.jqgrow"
                    },
                    opts || {});
                if (opts.start && $.isFunction(opts.start)) {
                    opts._start_ = opts.start;
                    delete opts.start;
                } else {
                    opts._start_ = false;
                }
                if (opts.update && $.isFunction(opts.update)) {
                    opts._update_ = opts.update;
                    delete opts.update;
                } else {
                    opts._update_ = false;
                }
                opts.start = function (ev, ui) {
                    $(ui.item).css("border-width", "0px");
                    $("td", ui.item).each(function (i) {
                        this.style.width = ts.grid.cols[i].style.width;
                    });

                    if (ts.p.subGrid) {
                        try {
                            ts.collapseAllSubGridRow();    // collapse all SubGrid
                        } catch (e) {
                        }
                    }

                    if (opts._start_) {
                        opts._start_.apply(this, [ev, ui]);
                    }
                };
                opts.update = function (ev, ui) {
                    $(ui.item).css("border-width", "");
                    if (ts.p.rownumbers === true) {
                        $("td.jqgrid-rownum", ts.rows).each(function (i) {
                            $(this).html(i + 1 + (parseInt(ts.p.page, 10) - 1) * parseInt(ts.p.rowNum, 10));
                        });
                    }
                    if (opts._update_) {
                        opts._update_.apply(this, [ev, ui]);
                    }
                };
                $("tbody:first", ts.element).sortable(opts);
                $("tbody:first", ts.element).disableSelection();
            }
        },
        /**
         * 可在表格间拖拽数据,依赖jqueryui的拖拽事件,不支持tree操作
         * @param  {Object} opts 可定义onstart、onstop事件，会在拖拽开始、结束的时候执行等等,
         * opts.connectWith 此值不为空,表示拖拽的目标对象.如示例中gridDrag2的行数据能拖进gridDrag中
         * <pre>
         *  $("#gridDrag2").jqGrid("gridDnD",{connectWith:"#gridDrag"})
         * </pre>
         */
        gridDnD: function (opts) {
            var ts = this, i, cn;
            // Currently we disable a treeGrid drag and drop
            if (ts.p.treeGrid) {
                return;
            }
            if (!$.fn.draggable || !$.fn.droppable) {
                return;
            }
            function updateDnD() {
                var datadnd = $.data(ts.element[0], "dnd");
                $("tr.jqgrow:not(.ui-draggable)", ts.element).draggable($.isFunction(datadnd.drag) ? datadnd.drag.call(ts.element[0], datadnd) : datadnd.drag);
            }

            var appender = "<table id='jqgrid_dnd' class='ui-jqgrid-dnd'></table>";
            if ($("#jqgrid_dnd", ts.element)[0] === undefined) {
                $('body').append(appender);
            }

            if (typeof opts === 'string' && opts === 'updateDnD' && ts.p.jqgdnd === true) {
                updateDnD();
                return;
            }
            opts = $.extend({
                "drag": function (opts) {
                    return $.extend({
                        start: function (ev, ui) {

                            if (ts.p.subGrid) {
                                try {
                                    ts.collapseAllSubGridRow();    // collapse all SubGrid
                                } catch (e) {
                                }
                            }
                            var i, subgid;
                            // hack
                            // drag and drop does not insert tr in table, when the table has no rows
                            // we try to insert new empty row on the target(s)
                            var datadnd = $.data(ts.element[0], "dnd");
                            for (i = 0; i < datadnd.connectWith.length; i++) {
                                if ($(datadnd.connectWith[i]).jqGrid('getGridParam', 'reccount') === 0) {
                                    $(datadnd.connectWith[i]).jqGrid('addRowData', 'jqg_empty_row', {});
                                }
                            }
                            ui.helper.addClass("ui-state-highlight");
                            $("td", ui.helper).each(function (i) {
                                this.style.width = ts.grid.headers[i].width + "px";
                            });
                            if (opts.onstart && $.isFunction(opts.onstart)) {
                                opts.onstart.call(ts.element[0], ev, ui);
                            }
                        },
                        stop: function (ev, ui) {
                            var i, ids;
                            if (ui.helper.dropped && !opts.dragcopy) {
                                ids = $(ui.helper).attr("id");
                                if (ids === undefined) {
                                    ids = $(this).attr("id");
                                }
                                $(ts.element).jqGrid('delRowData', ids);
                            }
                            var datadnd = $.data(ts.element[0], "dnd");
                            // if we have a empty row inserted from start event try to delete it
                            for (i = 0; i < datadnd.connectWith.length; i++) {
                                $(datadnd.connectWith[i]).jqGrid('delRowData', 'jqg_empty_row');
                            }
                            if (opts.onstop && $.isFunction(opts.onstop)) {
                                opts.onstop.call(ts.element[0], ev, ui);
                            }
                        }
                    }, opts.drag_opts || {});
                },
                "drop": function (opts) {
                    return $.extend({
                        accept: function (d) {
                            if (!$(d).hasClass('jqgrow')) {
                                return d;
                            }
                            var tid = $(d).closest(".ui-jqgrid");//找到目标table
                            if (tid.length > 0 && $.data(tid[0], "dnd") !== undefined) {
                                var cn = $.data(tid[0], "dnd").connectWith;
                                return $.inArray('#' + this.id, cn) !== -1 ? true : false;
                            }
                            return false;
                        },
                        drop: function (ev, ui) {
                            if (!$(ui.draggable).hasClass('jqgrow')) {
                                return;
                            }
                            var accept = $(ui.draggable).attr("id");
                            var getdata = ui.draggable.closest(".ui-jqgrid").jqGrid('getRowData', accept);
                            // if(!opts.dropbyname) {
                            //     var j =0, tmpdata = {}, nm, key;
                            //     var dropmodel = $("#"+this.id).jqGrid('getGridParam','colModel');
                            //     try {
                            //         for (key in getdata) {
                            //             if (getdata.hasOwnProperty(key)) {
                            //                 if(key === $.jgrid.reader.id) continue;
                            //                 nm = dropmodel[j].name;
                            //                 if( !(nm === 'cb' || nm === 'rn')) {
                            //                     if(getdata.hasOwnProperty(key) && dropmodel[j]) {
                            //                         tmpdata[nm] = getdata[key];
                            //                     }
                            //                 }
                            //                 j++;
                            //             }
                            //         }
                            //         getdata = tmpdata;
                            //     } catch (e) {
                            //         console.log(e);
                            //     }
                            // }
                            ui.helper.dropped = true;
                            if (opts.beforedrop && $.isFunction(opts.beforedrop)) {
                                //parameters to this callback - event, element, data to be inserted, sender, reciever
                                // should return object which will be inserted into the reciever
                                var datatoinsert = opts.beforedrop.call(this, ui, getdata, ts.p.id, $(this));
                                if (datatoinsert !== undefined && datatoinsert !== null && typeof datatoinsert === "object") {
                                    getdata = datatoinsert;
                                }
                            }
                            if (ui.helper.dropped) {
                                var growid;
                                if (opts.autoid) {
                                    if ($.isFunction(opts.autoid)) {
                                        growid = opts.autoid.call(this, getdata);
                                    } else {
                                        growid = opts.autoidprefix + $.jgrid.randId();
                                    }
                                }
                                // NULL is interpreted as undefined while null as object
                                $(ts.element).jqGrid('addRowData', growid, getdata, opts.droppos);
                            }
                            if (opts.ondrop && $.isFunction(opts.ondrop)) {
                                opts.ondrop.call(this, ui, getdata);
                            }
                        }
                    }, opts.drop_opts || {});
                },
                "onstart": null,
                "onstop": null,
                "beforedrop": null,
                "ondrop": null,
                // "drop_opts" : {
                //     "activeClass": "ui-state-active",
                //     "hoverClass": "ui-state-hover"
                // },
                "drag_opts": {
                    "revert": "invalid",
                    "helper": "clone",
                    "cursor": "move",
                    "appendTo": "#jqgrid_dnd",
                    "zIndex": 5000
                },
                "dragcopy": false,
                // "dropbyname" : false,
                "droppos": "first",
                "autoid": true,
                "autoidprefix": "dnd_"
            }, opts || {});

            if (!opts.connectWith) {
                return;
            }
            opts.connectWith = opts.connectWith.split(",");
            opts.connectWith = $.map(opts.connectWith, function (n) {
                return $.trim(n);
            });
            $.data(ts.element[0], "dnd", opts);

            if (ts.p.reccount !== 0 && !ts.p.jqgdnd) {
                updateDnD();
            }
            ts.p.jqgdnd = true;
            for (i = 0; i < opts.connectWith.length; i++) {
                cn = opts.connectWith[i];
                $(cn).droppable($.isFunction(opts.drop) ? opts.drop.call(ts.element[0], opts) : opts.drop);
            }
        },
        /**
         * 给表格加上可拖拽改变,依赖jqueryui的resizable控件,能改变表格大小
         * @param  {Object} [opts] 可定义_stop_事件，会在拖拽结束的时候执行
         */
        gridResize: function (opts) {
            var ts = this, gID = ts.p.id;
            if (!$.fn.resizable) {
                return;
            }
            opts = $.extend({}, opts || {});
            if (opts.alsoResize) {
                opts._alsoResize_ = opts.alsoResize;
                delete opts.alsoResize;
            } else {
                opts._alsoResize_ = false;
            }
            if (opts.stop && $.isFunction(opts.stop)) {
                opts._stop_ = opts.stop;
                delete opts.stop;
            } else {
                opts._stop_ = false;
            }
            opts.stop = function (ev, ui) {
                $(ts.element).jqGrid('setGridParam', {height: $("#gview_" + gID + " .ui-jqgrid-bdiv", ts.element).height()});
                $(ts.element).jqGrid('setGridWidth', ui.size.width, opts.shrinkToFit);
                if (opts._stop_) {
                    opts._stop_.call(ts.element[0], ev, ui);
                }
            };
            if (opts._alsoResize_) {
                var optstest = "{\'#gview_" + gID + " .ui-jqgrid-bdiv\':true,'" + opts._alsoResize_ + "':true}";
                opts.alsoResize = eval('(' + optstest + ')'); // the only way that I found to do this
            } else {
                opts.alsoResize = $(".ui-jqgrid-bdiv", "#gview_" + gID);
            }
            delete opts._alsoResize_;
            $(ts.element).resizable(opts);
        }
    })

}();

/*
 * Created by tanyl on 2014/12/30.
 */
/**
 * 数据表格插件
 * @class fish.desktop.widget.Grid
 */

/**
 * tree节点的展开事件,可绑定grid:onrowexpand事件
 * @event onRowExpand
 * @param  {Event} e 事件对象
 * @param  {Object} row 需展开的节点对象
 */
/**
 * tree节点的收缩事件,可绑定grid:onrowcollapse事件
 * @event onRowCollapse
 * @param  {Event} e 事件对象
 * @param  {Object} row 需收缩的节点对象
 */
!function () {
    'use strict';

    var iconTpl = '<div class="tree-wrap" style="width:{{ident}}px;"><div style="left:{{lftpos}}px;" class="treeclick {{treeicon}}"></div>{{#if iscustom}}<div style="left:{{nextPos}}px;" class="treefolder {{icon}}"></div>{{/if}}</div><span class="cell-wrapper{{#if isLeaf}}leaf{{/if}}">{{{text}}}</span>';

    $.extend($.ui.grid.prototype, {
        //数据加载成功后设置成tree格式
        _setTreeNode: function (i, len) {
            var ts = this;
            var expCol,
                expanded = ts.p.treeReader.expanded,
                isLeaf = ts.p.treeReader.leaf,
                level = ts.p.treeReader.level,
                icon = ts.p.treeReader.icon,
                curLevel,
                ldat;
            //获取expandColumn所在的列索引,此列要处理图标
            expCol = _.indexOf(_.pluck(ts.p.colModel, 'name'), ts.p.expandColumn);
            while (i < len) {
                var ind = ts.rows[i].id,
                    dind = ts.p._index[ind],
                    $cell = $(ts.rows[i].cells[expCol]);
                ldat = ts.p.data[dind];
                curLevel = parseInt(ldat[level], 10);
                var cicon = ldat[icon];
                var ident, lftpos, nextPos, iscustom, treeicon;
                $cell.find('.tree-wrap').remove();
                if (cicon) {
                    ident = (curLevel + 2) * 18;
                    lftpos = curLevel * 18;
                    nextPos = (curLevel + 1) * 18;
                    iscustom = true;
                    treeicon = ldat[isLeaf] ? "tree-leaf " + ts.p.treeIcons.leaf : ldat[expanded] ? "tree-minus " + ts.p.treeIcons.minus : "tree-plus " + ts.p.treeIcons.plus;

                } else {
                    iscustom = true;
                    if (ldat[isLeaf]) {
                        iscustom = false;
                    } else {
                        if (ts.p.treeIcons.folderClosed === "" || ts.p.treeIcons.folderOpen === "") {
                            iscustom = false;
                        }
                    }
                    if (iscustom) {
                        if (ldat[isLeaf]) {
                            ident = (curLevel + 1) * 18;
                            lftpos = curLevel * 18;
                            iscustom = false;
                            treeicon = "tree-leaf " + ts.p.treeIcons.leaf;
                        } else {
                            ident = (curLevel + 2) * 18;
                            lftpos = curLevel * 18;
                            nextPos = (curLevel + 1) * 18;
                            iscustom = true;
                            treeicon = ldat[expanded] ? "tree-minus " + ts.p.treeIcons.minus : "tree-plus " + ts.p.treeIcons.plus;
                            cicon = ldat[expanded] ? ts.p.treeIcons.folderOpen : ts.p.treeIcons.folderClosed;
                        }
                    } else {
                        ident = (curLevel + 1) * 18;
                        lftpos = curLevel * 18;
                        iscustom = false;
                        treeicon = ldat[isLeaf] ? "tree-leaf " + ts.p.treeIcons.leaf : ldat[expanded] ? "tree-minus " + ts.p.treeIcons.minus : "tree-plus " + ts.p.treeIcons.plus;
                    }
                }
                $cell.html(fish.compile(iconTpl)({
                    ident: ident,
                    lftpos: lftpos,
                    nextPos: nextPos,
                    iscustom: iscustom,
                    isLeaf: ldat[isLeaf],
                    icon: cicon,
                    text: $cell.html(),
                    treeicon: treeicon
                }));

                if (curLevel !== 0) {
                    var pn = ts.getNodeParent(ldat);
                    var expan = pn && pn.hasOwnProperty(expanded) ? pn[expanded] : true;
                    if (!expan) {
                        $(ts.rows[i]).css("display", "none");
                    }
                }
                i++;
            }
        },

        _treeNodeClick: function (rowid) {
            var ts = this,
                pos = ts.p._index[rowid],
                expanded = ts.p.treeReader.expanded,
                isLeaf = ts.p.treeReader.leaf;
            if (!ts.p.data[pos][isLeaf]) {
                if (ts.p.data[pos][expanded]) {
                    ts.collapseNode(ts.p.data[pos], true);
                } else {
                    ts.expandNode(ts.p.data[pos], true);
                    if (!ts.p.leafChange) return false;

                    var parent = ts.p.data[pos];
                    var children = ts.getNodeChildren(parent);
                    if (children.length == 0) {//没有子节点则自动更新图标及状态
                        parent[isLeaf] = true;//更新父节点状态
                        parent[expanded] = false;

                        var prow = ts.getGridRowById(parent[ts.p.keyName]);
                        $(prow)
                            .find("span.cell-wrapper").removeClass("cell-wrapper").addClass("cell-wrapperleaf")
                            .end()
                            .find("div.tree-minus").removeClass(ts.p.treeIcons.minus + " tree-minus").addClass(ts.p.treeIcons.leaf + " tree-leaf");
                    }
                }
            }
        },

        //设置treeGrid的基本属性
        _setTreeGrid: function () {
            var ts = this;
            for (var i = 0; i < ts.p.colModel.length; i++) {
                ts.p.colModel[i].sortable = false;  //树目前不允许排序
            }
            // 必须指定key,因为内部是线性结构数据
            if (ts.p.keyName === false) throw new Error("treeGrid因为父子节点的关联，需要指定关联的列key=true");
            //由于不知道子节点数量,
            ts.p.viewrecords = false;//树分页,总记录数无法计算
            ts.p.rowNum = $.jgrid.MAXROWNUM; //树分页,rowNum参数无效,用户给什么数据就显示什么数据

            ts.p.subGrid = false;//不支持
        },
        //界面上展开节点行
        _expandRow: function (rowData) {
            var ts = this;
            var childern = ts.getNodeChildren(rowData);
            $(childern).each(function () {
                var id = this[ts.p.keyName];
                $(ts.getGridRowById(id)).css("display", "");
                if (this[ts.p.treeReader.expanded]) {
                    ts._expandRow(this);
                }
            });

        },
        //使某个节点可见,如果父节点时收缩状态,则往上级联展开;设置行选中的场景用到
        _setVisibleNode: function (rowid) {
            var ts = this;
            var rc = ts.getRowData(rowid);
            if (!ts.isVisibleNode(rc)) {
                var parents = ts.getNodeAncestors(rc);
                for (var i = parents.length - 1; i >= 0; i--) {
                    ts.expandNode(parents[i]);
                }
            }
        },
        /**
         * 界面上收缩节点行
         * @param  {Object} rowData 要收缩的行数据
         */
        _collapseRow: function (rowData) {
            var ts = this;
            var childern = ts.getNodeChildren(rowData);
            $(childern).each(function () {
                var id = $.jgrid.getAccessor(this, ts.p.keyName);
                $(ts.getGridRowById(id)).css("display", "none");
                if (this[ts.p.treeReader.expanded]) {
                    ts._collapseRow(this);
                }
            });
        },
        /**
         * 获取同级的前一个节点
         * @return {Object} 前一个节点数据
         */
        getPrevNode: function (rc) {
            var result = null;
            var ts = this;
            $(this.p.data).each(function () {
                if (this[ts.p.keyName] === rc[ts.p.keyName])
                    return false;
                if (this[ts.p.treeReader.parentid] === rc[ts.p.treeReader.parentid])
                    result = this;
            });
            return result;
        },
        /**
         * 获取同级的后一个节点
         * @return {Object} 后一个节点数据
         */
        getNextNode: function (rc) {
            var result = null,
                src;
            var ts = this;
            $(this.p.data).each(function () {
                if (this[ts.p.treeReader.parentid] === rc[ts.p.treeReader.parentid] && src) {
                    result = this;
                    return false;
                }
                if (this[ts.p.keyName] === rc[ts.p.keyName])
                    src = true;
            });
            return result;
        },
        /**
         * 获取跟节点数据
         * @return {Array} 根节点数据集合
         */
        getRootNodes: function () {
            var result = [];
            var ts = this;
            $(ts.p.data).each(function () {
                if (this[ts.p.treeReader.parentid] === null
                    || this[ts.p.treeReader.parentid] === undefined
                    || this[ts.p.treeReader.parentid] === "") {
                    result.push(this);
                }
            });
            return result;
        },
        /**
         * 获取某节点的级别，即相对于根节点的level
         * @param  {Object} rowData 节点数据
         * @return {Object} 所在tree里面的级别
         */
        getNodeDepth: function (rowData) {
            var ret = null;
            var ts = this;
            ret = ts.getNodeAncestors(rowData).length;
            return ret;
        },
        /**
         * 获取某节点的父节点数据
         * @param  {Object} rowData 节点数据
         * @return {Object} 父节点数据
         */
        getNodeParent: function (rowData) {
            var result = null;
            var ts = this;
            $(this.p.data).each(function () {
                if (this[ts.p.keyName] === rowData[ts.p.treeReader.parentid]) {
                    result = this;
                    return false;
                }
            });
            return result;
        },
        /**
         * 获取某节点的子节点数据
         * @param  {Object} rowData 节点数据
         * @return {Array} 下一级子节点数据集合
         */
        getNodeChildren: function (rowData) {
            var result = [];
            var ts = this;
            $(this.p.data).each(function () {
                if (this[ts.p.treeReader.parentid] === rowData[ts.p.keyName]) {
                    result.push(this);
                }
            });
            return result;
        },
        /**
         * 获取某节点下的全部节点数据，含自身数据
         * @param  {Object} rowData 节点数据
         * @return {Array}  节点下全部的数据集合
         */
        getFullTreeNode: function (rowData) {
            var result = [rowData];
            var ts = this,
                len;
            $(this.p.data).each(function (i) {
                len = result.length;
                for (i = 0; i < len; i++) {
                    if (result[i][ts.p.keyName] === this[ts.p.treeReader.parentid]) {
                        result.push(this);
                        break;
                    }
                }
            });
            return result;
        },
        /**
         * 获取某节点的父节点以上的数据，从下往上的数据集合，不包含自身
         * @param  {Object} rowData 节点数据
         * @return {Object} 父节点递归数据集合
         */
        getNodeAncestors: function (rowData) {
            var ancestors = [];
            var ts = this;
            var parent = ts.getNodeParent(rowData);
            while (parent) {
                ancestors.push(parent);
                parent = ts.getNodeParent(parent);
            }
            return ancestors;
        },
        /**
         * 节点是否可见，可用于定位某个节点用
         * @param  {Object} rowData 节点数据
         * @return {Boolean}    节点是否可见，所有的父节点都是展开状态节点才是可见状态
         */
        isVisibleNode: function (rowData) {
            var result = true;
            var ts = this;
            var ancestors = ts.getNodeAncestors(rowData),
                expanded = ts.p.treeReader.expanded_field;
            $(ancestors).each(function () {
                result = result && this[ts.p.treeReader.expanded];
                if (!result) {
                    return false;
                }
            });
            return result;
        },
        /**
         * 展开节点数据
         * @param  {Object} rowData 节点数据
         * @param  {Boolean} flag 是否触发rowExpand事件
         */
        expandNode: function (rc, flag) {
            var ts = this;
            if (!rc[ts.p.treeReader.expanded]) {
                rc[ts.p.treeReader.expanded] = true;
                var id = rc[ts.p.keyName];
                var rc1 = $(ts.getGridRowById(id), ts.grid.bDiv)[0];
                $("div.treeclick", rc1).removeClass(ts.p.treeIcons.plus + " tree-plus").addClass(ts.p.treeIcons.minus + " tree-minus");
                $("div.treefolder", rc1).removeClass(ts.p.treeIcons.folderClosed).addClass(ts.p.treeIcons.folderOpen);
                ts._expandRow(rc);
                //add 2014/5/22 -- 2015/5/18 update
                if (flag) ts._trigger("onRowExpand", null, rc);
            }
        },
        /**
         * 收缩节点数据
         * @param  {Object} rowData 节点数据
         * @param  {Boolean} flag 是否触发rowCollapse事件
         */
        collapseNode: function (rc, flag) {
            var ts = this;
            if (rc[ts.p.treeReader.expanded]) {
                rc[ts.p.treeReader.expanded] = false;
                var id = rc[ts.p.keyName];
                var rc1 = $(ts.getGridRowById(id), ts.grid.bDiv)[0];
                $("div.treeclick", rc1).removeClass(ts.p.treeIcons.minus + " tree-minus").addClass(ts.p.treeIcons.plus + " tree-plus");
                $("div.treefolder", rc1).removeClass(ts.p.treeIcons.folderOpen).addClass(ts.p.treeIcons.folderClosed);
                ts._collapseRow(rc);
                if (flag) ts._trigger("onRowCollapse", null, rc);
            }
        },
        //选中行的时候,如果点击的是checkbox,则需要根据参数来判断子节点或者父节点是否也要选中
        _cascadeChecked: function (stat) {
            var ts = this;
            var pos = ts.p._index[ts.p.selrow];
            var rowData = ts.p.data[pos];
            var rowid, result, ia;
            if (ts.p.checkChildren) {
                result = ts.getFullTreeNode(rowData);
                ;
                result.splice(0, 1);
                $(result).each(function (i) {
                    rowid = result[i][ts.p.keyName] + ""; //需要强制转成字符串嘛?
                    ia = $.inArray(rowid, ts.p.selarrrow);
                    if (ia === -1 && stat) {
                        $(ts.getGridRowById(rowid)).addClass("ui-state-highlight").attr("aria-selected", "true");
                        ts.p.selarrrow.push(rowid);
                    } else if (ia !== -1 && !stat) {
                        $(ts.getGridRowById(rowid)).removeClass("ui-state-highlight").attr({"aria-selected": "false"});
                        ts.p.selarrrow.splice(ia, 1);
                    }
                    $("#jqg_" + ts.p.id + "_" + rowid, ts.element).prop("checked", stat);
                });
            }
            if (ts.p.checkParent) {
                result = $(ts.element).jqGrid("getNodeAncestors", rowData);
                $(result).each(function (i) {
                    if (!stat && childrenNodeChecked(result[i])) return false;//首先判断result[i]有没有子节点选中,有则跳出
                    rowid = result[i][ts.p.keyName] + "";
                    ia = $.inArray(rowid, ts.p.selarrrow);
                    if (ia === -1 && stat) {
                        $(document.getElementById("jqg_" + ts.p.id + "_" + rowid)).prop("checked", stat);
                        ts.p.selarrrow.push(rowid);
                    }
                    if (ia !== -1 && !stat) {
                        $(document.getElementById("jqg_" + ts.p.id + "_" + rowid)).prop("checked", stat);
                        ts.p.selarrrow.splice(ia, 1);
                    }
                });
            }

            function childrenNodeChecked(node) {
                var checkflag = false;
                var result = ts.getFullTreeNode(node);
                result.splice(0, 1);
                $(result).each(function (i) {
                    ia = $.inArray(result[i][ts.p.keyName] + "", ts.p.selarrrow);
                    if (ia !== -1) {
                        checkflag = true;
                        return false;
                    }
                });
                return checkflag;
            }

        },
        /**
         * 同modTreeNode
         * @method setTreeRow
         * @param {String} rowid 行标识,也可以直接传入行数据rowData
         * @param {Object} [rowData]  行数据,行标识的值目前不支持修改
         */
        setTreeRow: function (rowid, data) {
            return this.modTreeNode(rowid, data);
        },
        /**
         * 修改节点数据
         * @method modTreeNode
         * @param {String} rowid 行标识,也可以直接传入行数据rowData
         * @param {Object} [rowData]  行数据,行标识的值目前不支持修改
         */
        modTreeNode: function (rowid, data) {
            var ts = this;
            var result = this.setRowData(rowid, data);
            if ($.type(rowid) === 'object') {
                rowid = rowid[ts.p.keyName];
            }
            var i = ts.getInd(rowid);
            ts._setTreeNode(i, i + 1);
            return result;
        },
        /**
         * 删除tree节点
         * @param  {String} rowid 行标识,也可以是行数据rowData
         */
        delTreeNode: function (rowid) {
            var ts = this;
            if ($.type(rowid) === 'object') {
                rowid = rowid[ts.p.keyName];
            }
            var index = ts.p._index[rowid];
            if (index !== undefined) {
                var parentindex,
                    parentdata,
                    parentid;
                parentid = ts.p.data[index][ts.p.treeReader.parentid];
                if (parentid) {
                    parentindex = ts.p._index[parentid];
                    parentdata = ts.p.data[parentindex];
                    var children = ts.getNodeChildren(parentdata);
                    if (children.length === 1 && ts.p.leafChange) {
                        parentdata[ts.p.treeReader.leaf] = true;
                        parentdata[ts.p.treeReader.expanded] = false;
                        var prow = ts.getGridRowById(parentid);
                        $(prow)
                            .find("span.cell-wrapper").removeClass("cell-wrapper").addClass("cell-wrapperleaf")
                            .end()
                            .find("div.tree-minus").removeClass(ts.p.treeIcons.minus + " tree-minus").addClass(ts.p.treeIcons.leaf + " tree-leaf");
                    }
                }

                var dr = ts.getFullTreeNode(ts.p.data[index]);
                if (dr.length > 0) {
                    for (var i = 0; i < dr.length; i++) {
                        ts.delRowData(dr[i][ts.p.keyName]);
                    }
                }

            }
        },
        /**
         * 新增tree节点
         * @param {String} rowid     行标识,也可以是行数据rowData
         * @param {String} parent     父节点标识,也可以是父节点数据,可为空,为空表示新增的是跟节点
         * @param {Object} [rowData]     新增的节点数据,如果第一个参数是行标识的话,此值需要传
         * @param {Boolean} [expandData] 如果新增的数据所在的父节点未展开且此值设置为true，则触发展开操作
         * @param {string} [pos]   数据新增的位置，默认是last，可选值有first、last，after和before则需要参考src参数
         * @param {string} [src]   新增位置的参考标识
         */
        addChildNode: function (rowid, parentid, data, expandData, pos, src) {
            if ($.type(rowid) === 'object') {
                src = pos;
                pos = expandData;
                expandData = data;
                data = rowid;
                rowid = data[this.p.keyName];
            }
            if (data) {
                return this.addTreeNodes([data], parentid, expandData, pos, src);
            }
        },
        addTreeNode: function (rowid, parentid, data, expandData, pos, src) {
            return this.addChildNode(rowid, parentid, data, expandData, pos, src);
        },

        _getTreeNodePos: function (parentid, pos, src) {
            var ts = this;

            var method,
                parentindex,
                parentdata,
                parentlevel,
                i,
                rowind = parentid;

            // if not a parent we assume root
            if (parentid === undefined || parentid === null || parentid === "") {
                parentid = null;
                rowind = null;
                method = pos || 'last';
                parentlevel = 0;
                i = method === 'last' ? ts.p.data.length + 1 : 1;

                if (src) {
                    rowind = src;
                    if (pos === 'after') {
                        var srcData = ts.getRowData(rowind);
                        var childs = ts.getFullTreeNode(srcData);
                        if (childs.length) {
                            i = childs[childs.length - 1][ts.p.keyName];
                            rowind = i;
                            i = ts.getInd(rowind) + 1;
                        }
                    } else {
                        i = ts.getInd(rowind);
                    }
                    method = pos;
                }

            } else {
                method = 'after';
                parentindex = ts.p._index[parentid];
                parentdata = ts.p.data[parentindex];
                parentlevel = parseInt(parentdata[ts.p.treeReader.level], 10) + 1;

                if (src) {
                    rowind = src;
                    if (pos === 'after') {
                        var srcData = ts.getRowData(rowind);
                        var childs = ts.getFullTreeNode(srcData);
                        if (childs.length) {
                            i = childs[childs.length - 1][ts.p.keyName];
                            rowind = i;
                            i = ts.getInd(rowind) + 1;
                        }
                    } else {
                        i = ts.getInd(rowind);
                    }
                    method = pos;
                } else {
                    if (pos === "first") { //tree节点下的first
                        i = $(ts.element).jqGrid('getInd', parentid) + 1;
                    } else {
                        var childs = ts.getFullTreeNode(parentdata);

                        if (childs.length) { // if there are child nodes get the last index of it
                            i = childs[childs.length - 1][ts.p.keyName];
                            rowind = i;
                            i = ts.getInd(rowind) + 1;
                        } else {
                            i = ts.getInd(parentid) + 1;
                        }
                    }
                    // if the node is leaf
                    if (parentdata[ts.p.treeReader.leaf]) {
                        parentdata[ts.p.treeReader.expanded] = true;

                        var prow = ts.getGridRowById(parentid);
                        $(prow).find("span.cell-wrapperleaf").removeClass("cell-wrapperleaf").addClass("cell-wrapper")
                            .end()
                            .find("div.tree-leaf").removeClass(ts.p.treeIcons.leaf + " tree-leaf").addClass(ts.p.treeIcons.minus + " tree-minus");
                        parentdata[ts.p.treeReader.leaf] = false;
                    }
                }

            }
            ;
            return {
                rowind: rowind,
                i: i,
                method: method,
                parentlevel: parentlevel
            }
        },
        /**
         * 新增多个tree节点
         * @param {Array} dataArr  多个带children的tree节点
         * @param {Object} [parent]  父节点行数据,也可以是父节点rowid,为空则表示数据加在根节点上
         * @param {Boolean} [expandData] 如果新增的数据所在的父节点未展开且此值设置为true，则触发展开操作
         */
        addChildNodes: function (dataArr, parent, expandData) {
            if (dataArr) {
                if (!$.isArray(dataArr)) {
                    dataArr = [dataArr];
                }
                var ts = this,
                    parentlevel,
                    parentid;
                if ($.type(parent) === 'object') {
                    parentlevel = parent[ts.p.treeReader.level];
                    parentid = parent[ts.p.keyName];
                } else {
                    parentid = parent;
                }
                if (!parentid) {
                    parentlevel = -1;
                }
                if (!parentlevel && parentlevel !== 0) {
                    parentlevel = ts.p.data[ts.p._index[parentid]][ts.p.treeReader.level];
                }
                dataArr = ts._childrenDataFormat(dataArr, parentlevel + 1);

                return this.addTreeNodes(dataArr, parent, expandData);
            }
        },
        /**
         * 新增多个tree节点
         * @param {Array} dataArr  多个tree节点,线性结构,可以是通过parent获取到的数据
         * @param {Object} [parent]  父节点行数据,也可以是父节点rowid,为空则表示数据加在根节点上
         * @param {Boolean} [expandData] 如果新增的数据所在的父节点未展开且此值设置为true，则触发展开操作
         * @param {string} [pos]   数据新增的位置，默认是last，可选值有first、last，after和before则需要参考src参数
         * @param {string} [src]   新增位置的参考标识
         */
        addTreeNodes: function (dataArr, parentid, expandData, pos, src) {
            var ts = this,
                parentdata,
                rowind;
            if ($.type(expandData) === 'string' && src === undefined) {
                src = pos;
                pos = expandData;
                expandData = false;
            }
            if ($.type(parentid) === 'object') {
                parentdata = parentid;
                parentid = parentid[ts.p.keyName];
            }
            if (dataArr) {
                if (!$.isArray(dataArr)) {
                    dataArr = [dataArr];
                }

                var pos = this._getTreeNodePos(parentid, pos, src);
                var i = pos.i,
                    parentlevel = pos.parentlevel,
                    method = pos.method,
                    rowind = pos.rowind;

                for (var j = 0; j < dataArr.length; j++) {
                    if (dataArr[j][ts.p.treeReader.expanded] === undefined) {
                        dataArr[j][ts.p.treeReader.expanded] = false;
                    }
                    //含children自动转成线性数据的时候,需加上parentlevel;直接获取的子数据的是不需要加的
                    if (dataArr[j][ts.p.treeReader.level] === undefined) {
                        dataArr[j][ts.p.treeReader.level] = parentlevel;
                    }
                    if (dataArr[j][ts.p.treeReader.leaf] === undefined) {
                        dataArr[j][ts.p.treeReader.leaf] = true;
                    }
                    if (dataArr[j][ts.p.treeReader.parentid] === undefined || dataArr[j][ts.p.treeReader.parentid] === null) {
                        dataArr[j][ts.p.treeReader.parentid] = parentid;
                    }
                }
                ts.addRowData(dataArr, method, rowind);
                ts._setTreeNode(i, i + dataArr.length)
                //
                if (parentdata && !parentdata[ts.p.treeReader.expanded] && expandData) {

                    var prow = ts.getGridRowById(parentid);
                    $(prow).find("div.treeclick")
                        .click();
                }
            }
        },
        //内部用,将带children结构的树形数据转化成线性结构
        _childrenDataFormat: function (items, treeLevel) {
            var ts = this;
            //首先验证是否已经是格式化过后的数据
            if (!items || !items.length) {
                return items;
            }
            // if(items && items.length === 0 )
            //     return items;
            if (items[0].hasOwnProperty(ts.p.treeReader.level) &&
                items[0].hasOwnProperty(ts.p.treeReader.parentid) &&
                items[0].hasOwnProperty(ts.p.treeReader.expanded) &&
                items[0].hasOwnProperty(ts.p.treeReader.leaf))
                return items;
            //level,parentid都是根据children生成出来的,一般不会设置
            var treeData = [],
                index = 0,
                treeLevel = treeLevel || 0;

            dealWithChildren(items, treeLevel, null);

            function dealWithChildren(retVal, treeLevel, parentId) {
                for (var i = 0; i < retVal.length; i++) {
                    var temp = retVal[i];
                    var tempData = temp;
                    tempData[ts.p.treeReader.level] = treeLevel;
                    tempData[ts.p.treeReader.parentid] = parentId;
                    if (tempData[ts.p.treeReader.leaf] == null) {
                        tempData[ts.p.treeReader.leaf] = tempData.hasOwnProperty("children") ? false : true; //根据节点是否有children属性,判断是否为叶子节点
                    }
                    if (tempData[ts.p.treeReader.expanded] == null) {
                        tempData[ts.p.treeReader.expanded] = false; //默认不展开
                    }
                    treeData[index++] = tempData;
                    if (tempData.children != null) {
                        if (tempData.children.length > 0) {
                            dealWithChildren(tempData.children, treeLevel + 1, tempData[ts.p.keyName]);
                        }
                        tempData.children = null;
                    }
                }
            }

            return treeData;
        }
    });

}();

/*
 * Created by tanyl on 2015/01/02.
 * Modify  by tanyl on 2015/07/23.
 */

/**
 * 数据表格插件
 * @class fish.desktop.widget.Grid
 */

/**
 * 编辑单元格前绑定的事件;可绑定grid:beforeeditcell事件
 * @event beforeEditCell
 * @param  {Event} e 事件对象
 * @param  {String} rowid  行标识
 * @param  {String} colName  列名
 * @param  {String} cellcontext  单元格值
 * @param  {number} iRow  行索引
 * @param  {number} iCol  列索引
 */
/**
 * 编辑单元格后绑定的事件;可绑定grid:aftereditcell事件
 * @event afterEditCell
 * @param  {Event} e 事件对象
 * @param  {String} rowid  行标识
 * @param  {String} colName  列名
 * @param  {String} cellcontext  单元格值
 * @param  {number} iRow  行索引
 * @param  {number} iCol  列索引
 */
/**
 * 保存单元格数据前绑定的事件,返回false则取消单元格的修改并中断保存操作;可绑定grid:beforesavecell事件
 * @event beforeSaveCell
 * @param  {Event} e 事件对象
 * @param  {String} rowid  行标识
 * @param  {String} colName  列名
 * @param  {String} cellcontext  单元格值
 * @param  {number} iRow  行索引
 * @param  {number} iCol  列索引
 */
/**
 * 保存单元格数据后绑定的事件;可绑定grid:aftersavecell事件
 * @event afterSaveCell
 * @param  {Event} e 事件对象
 * @param  {String} rowid  行标识
 * @param  {String} colName  列名
 * @param  {String} cellcontext  单元格值
 * @param  {number} iRow  行索引
 * @param  {number} iCol  列索引
 */
/**
 * 取消单元格编辑前绑定的事件,返回false中断操作;可绑定grid:beforerestorecell事件
 * @event beforeRestoreCell
 * @param  {Event} e 事件对象
 * @param  {String} rowid  行标识
 * @param  {String} colName  列名
 * @param  {String} cellcontext  单元格值
 * @param  {number} iRow  行索引
 * @param  {number} iCol  列索引
 */
/**
 * 取消单元格编辑后绑定的事件;可绑定grid:afterrestorecell事件
 * @event afterRestoreCell
 * @param  {Event} e 事件对象
 * @param  {String} rowid  行标识
 * @param  {String} colName  列名
 * @param  {String} cellcontext  单元格值
 * @param  {number} iRow  行索引
 * @param  {number} iCol  列索引
 */

!function () {

    'use strict';

    $.extend($.ui.grid.prototype, {
        /**
         * 编辑单元格
         * @param  {number} irow 行索引
         * @param  {number} icol 列索引
         * @param  {Boolean} [ed]   已在编辑状态的单元格是否不再触发编辑操作
         */
        editCell: function (irow, icol, ed) {
            var ts = this, nm, tmp, cc, cm;
            if (!ts.grid || ts.p.cellEdit !== true) {
                return;
            }
            icol = parseInt(icol, 10);
            // select the row that can be used for other methods
            ts.p.selrow = ts.rows[irow].id;
            // check to see if we have already edited cell
            if (ts.p.savedRow.length > 0) {
                // prevent second click on that field and enable selects
                if (ed === true) {
                    if (irow == ts.p.irow && icol == ts.p.icol) {
                        return;
                    }
                }
                if (ts.p.cellAutoSave === true || ts.p.cellAutoSave === "true") {
                    var flag = ts.saveCell(ts.p.savedRow[0].id, ts.p.savedRow[0].ic);
                    if (flag === false) return;

                } else if (ts.p.cellAutoSave === false || ts.p.cellAutoSave === "false") {
                    ts.restoreCell(ts.p.savedRow[0].id, ts.p.savedRow[0].ic);
                }
            }
            cm = ts.p.colModel[icol];
            nm = cm.name;
            if (nm === 'subgrid' || nm === 'cb' || nm === 'rn') {
                return;
            }
            cc = $("td:eq(" + icol + ")", ts.rows[irow]);
            if (cm.editable === true && ed === true && !cc.hasClass("not-editable-cell")) {
                if (parseInt(ts.p.icol, 10) >= 0 && parseInt(ts.p.irow, 10) >= 0) {
                    $("td:eq(" + ts.p.icol + ")", ts.rows[ts.p.irow]).removeClass("edit-cell ui-state-highlight");
                    $(ts.rows[ts.p.irow]).removeClass("selected-row");
                }
                $(cc).addClass("edit-cell ui-state-highlight");
                $(ts.rows[irow]).addClass("selected-row");
                try {
                    tmp = $.unformat.call(ts, cc, {rowId: ts.rows[irow].id, colModel: cm}, icol, true);
                } catch (_) {
                    tmp = ( cm.edittype && cm.edittype === 'textarea' ) ? $(cc).text() : $(cc).html();
                }
                if (ts.p.autoencode) {
                    tmp = $.jgrid.htmlDecode(tmp);
                }
                if (!cm.edittype) {
                    cm.edittype = "text";
                }
                if (tmp === "&nbsp;" || tmp === "&#160;" || (tmp.length === 1 && tmp.charCodeAt(0) === 160)) {
                    tmp = '';
                }


                if (ts._trigger("beforeEditCell", null, [ts.rows[irow].id, nm, tmp, irow, icol]) === false) {
                    return false;
                }
                ts.p.savedRow.push({id: irow, ic: icol, name: nm, v: tmp});

                var opt = $.extend({}, cm.editoptions || {}, {id: ts.rows[irow].id + "_" + nm, name: nm});
                var elc = $.jgrid.createEl.call(ts, cm.edittype, opt, tmp, true);
                $(cc).html("").append(elc).attr("tabindex", "0");
                // $.jgrid.bindEv.call(ts, elc, opt);
                window.setTimeout(function () {
                    $(elc).focus();
                }, 0);
                $("input, select, textarea", cc).bind("keydown", function (e) {
                    if (e.keyCode === 27) {
                        // if($("input.hasDatepicker",cc).length >0) {
                        // 	if( $(".ui-datepicker").is(":hidden") )  { $(ts.element).jqGrid("restoreCell",irow,icol); }
                        // 	else { $("input.hasDatepicker",cc).datepicker('hide'); }
                        // } else {
                        ts.restoreCell(irow, icol);
                        // }
                    } //ESC
                    if (e.keyCode === 13) {
                        ts.saveCell(irow, icol);
                        // Prevent default action
                        return false;
                    } //Enter 暂时屏蔽
                    if (e.keyCode === 9) {
                        if (e.shiftKey) {
                            ts.prevCell(irow, icol);
                        } //Shift TAb
                        else {
                            ts.nextCell(irow, icol);
                        } //Tab
                    }
                    e.stopPropagation();
                });
                $("input, select, textarea", cc).blur(function (e) {

                    if ($("input", cc).length > 0) {   //时间控件单元格内没有特殊的class标示
                        if ($('.datetimepicker.datetimepicker-dropdown').length > 0) {  //时间控件是生成插在在body里面的.如果存在则不触发保存操作
                            $(this).on("datetimepicker:hide", function (e) {
                                if (ts.p.cellAutoSave === true || ts.p.cellAutoSave === "true") {
                                    ts.saveCell(irow, icol);
                                } else if (ts.p.cellAutoSave === false || ts.p.cellAutoSave === "false") {
                                    ts.restoreCell(irow, icol);
                                }
                            })
                            return;
                        }
                    }
                    if (ts.p.cellAutoSave === true || ts.p.cellAutoSave === "true") {
                        ts.saveCell(irow, icol);
                    } else if (ts.p.cellAutoSave === false || ts.p.cellAutoSave === "false") {
                        ts.restoreCell(irow, icol);
                    }

                });

                ts._trigger("afterEditCell", null, [ts.rows[irow].id, nm, tmp, irow, icol]);
            } else {
                if (parseInt(ts.p.icol, 10) >= 0 && parseInt(ts.p.irow, 10) >= 0) {
                    $("td:eq(" + ts.p.icol + ")", ts.rows[ts.p.irow]).removeClass("edit-cell ui-state-highlight");
                    $(ts.rows[ts.p.irow]).removeClass("selected-row");
                }
                cc.addClass("edit-cell ui-state-highlight");
                $(ts.rows[irow]).addClass("selected-row");
                tmp = cc.html().replace(/\&#160\;/ig, '');
                ts._trigger("onSelectCell", null, [ts.rows[irow].id, nm, tmp, irow, icol]);
            }
            ts.p.icol = icol;
            ts.p.irow = irow;
        },

        /**
         * 保存单元格
         * @param  {number} irow 行索引
         * @param  {number} icol 列索引
         */
        saveCell: function (irow, icol) {
            var ts = this, fr, rowid;
            if (!ts.grid || ts.p.cellEdit !== true) {
                return false;
            }
            if (ts.p.savedRow.length >= 1) {
                fr = 0;
            } else {
                fr = null;
            }
            if (fr !== null) {
                var cc = $("td:eq(" + icol + ")", ts.rows[irow]), v, v2, rowid = ts.rows[irow].id,
                    cm = ts.p.colModel[icol], nm = cm.name;
                var $selectCell = $(document.getElementById(rowid + "_" + nm), ts.rows[irow]);
                switch (cm.edittype) {
                    case "select":
                        if (!cm.editoptions.multiple) {
                            v = $selectCell.find("option:selected").val();
                            v2 = $selectCell.find("option:selected").text();
                        } else {
                            var sel = $("#" + rowid + "_" + nm, ts.rows[irow]), selectedText = [];
                            v = $(sel).val();
                            if (v) {
                                v = v.join(",");
                            } else {
                                v = "";
                            }
                            $("option:selected", sel).each(
                                function (i, selected) {
                                    selectedText[i] = $(selected).text();
                                }
                            );
                            v2 = selectedText.join(",");
                        }
                        if (cm.formatter) {
                            v2 = v;
                        }
                        break;
                    case "checkbox":
                        var cbv = ["Yes", "No"];
                        if (cm.editoptions) {
                            cbv = cm.editoptions.value.split(":");
                        }
                        v = $selectCell.is(":checked") ? cbv[0] : cbv[1];
                        v2 = v;
                        break;
                    case "password":
                    case "text":
                    case "textarea":
                    case "button" :
                        v = $selectCell.val();
                        v2 = v;
                        break;
                }
                // The common approach is if nothing changed do not do anything
                if (v2 !== ts.p.savedRow[fr].v) {

                    if (cm.editrules) {//add 校验逻辑
                        if ($.jgrid.validator.call(ts, ts.rows[irow].id, nm, cm.editrules) === false) {
                            return false;
                        }
                    }

                    if (ts._trigger("beforeSaveCell", null, [ts.rows[irow].id, nm, v, irow, icol]) === false) {
                        $(ts.element).jqGrid("restoreCell", irow, icol);
                        return false;
                    }

                    $(cc).empty();
                    $(ts.element).jqGrid("setCell", ts.rows[irow].id, icol, v2, false, false, true);
                    var leftpos = $(cc).position().left;
                    $(cc).addClass("dirty-cell").prepend('<span class="span-dirty" style="left:' + leftpos + 'px"></span>');
                    $(ts.rows[irow]).addClass("edited");
                    ts._trigger("afterSaveCell", null, [ts.rows[irow].id, nm, v, irow, icol]);
                    ts.p.savedRow.splice(0, 1);
                    return true;

                } else {
                    $(ts.element).jqGrid("restoreCell", irow, icol);
                }
            }
            return true;

        },
        /**
         * 取消单元格编辑
         * @param  {number} irow 行索引
         * @param  {number} icol 列索引
         */
        restoreCell: function (irow, icol) {
            var ts = this, fr;
            if (!ts.grid || ts.p.cellEdit !== true) {
                return;
            }
            if (ts.p.savedRow.length >= 1) {
                fr = 0;
            } else {
                fr = null;
            }
            if (fr !== null) {

                if (ts._trigger("beforeRestoreCell", null, [ts.rows[irow].id, ts.p.savedRow[fr].v, irow, icol]) === false) {
                    return false;
                }

                var cc = $("td:eq(" + icol + ")", ts.rows[irow]);

                if ($.fn.validator) {//存在校验控件,清除出错信息
                    cc.resetValid();
                }

                $(cc).empty().attr("tabindex", "-1");
                $(ts.element).jqGrid("setCell", ts.rows[irow].id, icol, ts.p.savedRow[fr].v, false, false, true);
                var leftpos = $(cc).position().left;
                $(cc).hasClass("dirty-cell") ? $(cc).prepend('<span class="span-dirty" style="left:' + leftpos + 'px"></span>') : "";
                ts._trigger("afterRestoreCell", null, [ts.rows[irow].id, ts.p.savedRow[fr].v, irow, icol]);
                ts.p.savedRow.splice(0, 1);
            }
        },
        //一般为内部用,tab键选择下一个
        nextCell: function (irow, icol) {
            var ts = this, nCol = false, i;
            if (!ts.grid || ts.p.cellEdit !== true) {
                return;
            }
            while (irow <= ts.p.reccount) {
                for (i = icol + 1; i < ts.p.colModel.length; i++) {
                    if (ts.p.colModel[i].editable === true) {
                        nCol = i;
                        break;
                    }
                }
                if (nCol === false && irow < ts.p.reccount) {
                    irow++;
                    icol = 0;
                } else {
                    break;
                }
            }
            if (nCol !== false) {
                $(ts.element).jqGrid("editCell", irow, nCol, true);
            } else {
                if (ts.p.savedRow.length > 0) {
                    $(ts.element).jqGrid("saveCell", irow, icol);
                }
            }
        },
        //一般为内部用,shift+tab键选择上一个
        prevCell: function (irow, icol) {
            var ts = this, nCol = false, i;
            if (!ts.grid || ts.p.cellEdit !== true) {
                return;
            }
            while (irow > 0) {
                for (i = icol - 1; i >= 0; i--) {
                    if (ts.p.colModel[i].editable === true) {
                        nCol = i;
                        break;
                    }
                }
                if (nCol === false && irow > 1) {
                    irow--;
                    icol = ts.p.colModel.length - 1;
                } else {
                    break;
                }
            }

            if (nCol !== false) {
                $(ts.element).jqGrid("editCell", irow, nCol, true);
            } else {
                if (ts.p.savedRow.length > 0) {
                    $(ts.element).jqGrid("saveCell", irow, icol);
                }
            }
        },

        /**
         * 获取修改过的单元格记录,可用于一次性提交
         * @param  {String} [mthd] 可设置为值dirty，设置的话则返回修改过的单元格记录,为空则返回修改过的行记录
         */
        getChangedCells: function (mthd) {
            var ret = [];
            if (!mthd) {
                mthd = 'all';
            }
            var ts = this, nm;
            if (!ts.grid || ts.p.cellEdit !== true) {
                return;
            }
            $(ts.rows).each(function (j) {
                var res = {};
                if ($(this).hasClass("edited")) {
                    $('td', this).each(function (i) {
                        nm = ts.p.colModel[i].name;
                        if (nm !== 'cb' || nm !== 'subgrid') {
                            if (mthd === 'dirty') {
                                if ($(this).hasClass('dirty-cell')) {
                                    try {
                                        res[nm] = $.unformat.call(ts, this, {
                                            rowId: ts.rows[j].id,
                                            colModel: ts.p.colModel[i]
                                        }, i, true);
                                    } catch (e) {
                                        res[nm] = $.jgrid.htmlDecode($(this).html());
                                    }
                                }
                            } else {
                                try {
                                    res[nm] = $.unformat.call(ts, this, {
                                        rowId: ts.rows[j].id,
                                        colModel: ts.p.colModel[i]
                                    }, i, true);
                                } catch (e) {
                                    res[nm] = $.jgrid.htmlDecode($(this).html());
                                }
                            }
                        }
                    });
                    res.id = this.id;
                    ret.push(res);
                }
            });
            return ret;
        }
    });
}();

/*
 * Created by tanyl on 2015/06/02.
 * Modify  by tanyl on 2015/07/23.
 */

/**
 * 数据表格插件
 * @class fish.desktop.widget.Grid
 */

/**
 * 编辑行之前的事件,可用于判断能不能编辑等,返回false中断操作;可绑定grid:beforeeditrow事件
 * @event beforeEditRow
 * @param  {Event} e 事件对象
 * @param  {String} rowid  行标识
 * @param  {Object} data   行数据
 * @param  {Object} option 参数对象,内置'oper'用来区分操作行为
 */
/**
 * 编辑行之后的事件,可用于表单的渲染,如渲染成时间控件等;可绑定grid:aftereditrow事件
 * @event afterEditRow
 * @param  {Event} e 事件对象
 * @param  {String} rowid  行标识
 * @param  {Object} data   行数据
 * @param  {Object} option 参数对象,内置'oper'用来区分操作行为
 */

/**
 * 保存行之前的事件,可用于数据校验等,返回false中断操作;可绑定grid:beforesaverow事件
 * @event beforeSaveRow
 * @param  {Event} e 事件对象
 * @param  {String} rowid  行标识
 * @param  {Object} data   行数据
 * @param  {Object} option 参数对象,内置'oper'用来区分操作行为
 */
/**
 * 保存行之后的事件,可用于同步界面其他变化等;可绑定grid:aftersaverow事件
 * @event afterSaveRow
 * @param  {Event} e 事件对象
 * @param  {String} rowid  行标识
 * @param  {Object} data   行数据
 * @param  {Object} option 参数对象,内置'oper'用来区分操作行为
 */

/**
 * 取消行编辑之前的事件,返回false中断操作;可绑定grid:beforerestorerow事件
 * @event beforeRestoreRow
 * @param  {Event} e 事件对象
 * @param  {String} rowid  行标识
 * @param  {Object} data   行数据
 * @param  {Object} option 参数对象,内置'oper'用来区分操作行为
 */
/**
 * 取消行编辑之后的事件,可用于同步界面其他变化等;可绑定grid:afterrestorerow事件
 * @event afterRestoreRow
 * @param  {Event} e 事件对象
 * @param  {String} rowid  行标识
 * @param  {Object} data   行数据
 * @param  {Object} option 参数对象,内置'oper'用来区分操作行为
 */

/**
 * 删除行之前的事件,可用于判断能不能删除等,返回false中断操作;可绑定grid:beforedeleterow事件
 * @event beforeDeleteRow
 * @param  {Event} e 事件对象
 * @param  {String} rowid  行标识
 * @param  {Object} data   行数据
 * @param  {Object} option 参数对象,内置'oper'用来区分操作行为
 */
/**
 * 删除行之后的事件,可用于同步界面其他变化等;可绑定grid:afterdeleterow事件
 * @event afterDeleteRow
 * @param  {Event} e 事件对象
 * @param  {String} rowid  行标识
 * @param  {Object} data   行数据
 * @param  {Object} option 参数对象,内置'oper'用来区分操作行为
 */

/**
 * 新增行之前的事件,返回false中断操作;可绑定grid:beforeaddrow事件
 * @event beforeAddRow
 * @param  {Event} e 事件对象
 * @param  {String} rowid  行标识
 * @param  {Object} data   行数据
 * @param  {Object} option 参数对象,内置'oper'用来区分操作行为
 */
/**
 * 新增行之后的事件,实际上是新增了一条记录再进行编辑的,可用来补充编辑行为等;可绑定grid:afteraddrow事件
 * @event afterAddRow
 * @param  {Event} e 事件对象
 * @param  {String} rowid  行标识
 * @param  {Object} data   行数据
 * @param  {Object} option 参数对象,内置'oper'用来区分操作行为
 */

!function () {

    'use strict';

    $.extend($.ui.grid.prototype, {
        /**
         * 编辑某行记录
         * @method editRow
         * @param  {String} rowid    行标识
         * @param  {Object} [option] 参数对象,内置'oper=edit'用来区分操作行为
         */
        editRow: function (rowid, o) {
            o = $.extend(true, {"oper": "edit"}, o);

            var ts = this, ind, src, cm, nm, tmp, editable, cnt = 0, focus = null, svr = {};
            ind = ts.getInd(rowid, true);
            if (ind === false) {
                return;
            }
            src = ts.getRowData(rowid);

            if (o.trigger !== false && ts._trigger("beforeEditRow", null, [rowid, src, o]) === false) {
                return;
            }

            editable = $(ind).attr("editable") || "0";
            if (editable === "0" && !$(ind).hasClass("not-editable-row")) {
                cm = ts.p.colModel;
                $('td[role="gridcell"]', ind).each(function (i) {
                    nm = cm[i].name;
                    var treeg = ts.p.treeGrid === true && nm === ts.p.expandColumn;
                    if (treeg) {
                        tmp = $("span:first", this).html();
                    } else {
                        try {
                            tmp = $.unformat.call(ts, this, {rowid: rowid, colModel: cm[i]}, i, true);
                        } catch (_) {
                            tmp = ( cm[i].edittype && cm[i].edittype === 'textarea' ) ? $(this).text() : $(this).html();
                        }
                    }
                    if (nm !== 'cb' && nm !== 'subgrid' && nm !== 'rn') {
                        if (ts.p.autoencode) {
                            tmp = $.jgrid.htmlDecode(tmp);
                        }
                        svr[nm] = tmp;
                        if (cm[i].editable === true) {
                            if (focus === null) {
                                focus = i;
                            }
                            if (treeg) {
                                $("span:first", this).html("");
                            } else {
                                $(this).html("");
                            }
                            var opt = $.extend({}, cm[i].editoptions || {}, {id: rowid + "_" + nm, name: nm});
                            if (!cm[i].edittype) {
                                cm[i].edittype = "text";
                            }
                            if (tmp === "&nbsp;" || tmp === "&#160;" || (tmp.length === 1 && tmp.charCodeAt(0) === 160)) {
                                tmp = '';
                            }
                            var elc = $.jgrid.createEl.call(ts, cm[i].edittype, opt, tmp, true);
                            $(elc).addClass("editable");
                            if (treeg) {
                                $("span:first", this).append(elc);
                                var parent = $("span:first", this).parent('td');
                                var tdWidth = parent.width();
                                var iconWidth = parent.find('.tree-wrap').width();
                                $(elc).css('width', tdWidth * 0.98 - iconWidth);
                            } else {
                                $(this).append(elc);
                            }
                            // $.jgrid.bindEv.call(ts, elc, opt);
                            cnt++;
                        }
                    }
                });
                if (cnt > 0) {
                    svr.id = rowid;
                    svr = $.extend(false, src, svr);
                    ts.p.savedRow.push(svr);
                    $(ind).attr("editable", "1");
                    window.setTimeout(function () {
                        $("td:eq(" + focus + ") input", ind).focus();
                    }, 0);//采用延迟方式获取焦点,以便用户在inlineAfterEditRow事件中作一些操作

                    //如果存在ui-inline-edit内置图标
                    $(ind).find("div.ui-inline-edit,div.ui-inline-del").hide();
                    $(ind).find("div.ui-inline-save,div.ui-inline-cancel").show();

                    ts._trigger("afterEditRow", null, [rowid, svr, o]);
                }
            }
        },
        /**
         * 保存某行记录
         * @method saveRow
         * @param  {String} rowid              行标识
         * @param  {Object} [option]           参数对象
         * option.aftersavefunc 数据保存成功后触发的函数
         * option.oper 可以区分是新增还是修改的操作行为
         * @returns {boolean} 是否保存成功
         */
        saveRow: function (rowid, o) {

            o = $.extend(true, {}, o);

            var success = false;
            var ts = this, nm, tmp = {}, tmp2 = {}, tmp3 = {}, editable, fr, cv, ind, src;
            ind = ts.getInd(rowid, true);
            if (ind === false) {
                return;
            }
            src = ts.getRowData(rowid);

            o.oper = $(ind).hasClass("jqgrid-new-row") ? 'add' : 'edit';

            editable = $(ind).attr("editable");
            if (editable === "1") {
                var cm;
                $('td[role="gridcell"]', ind).each(function (i) {
                    cm = ts.p.colModel[i];
                    nm = cm.name;
                    if (nm !== 'cb' && nm !== 'subgrid' && cm.editable === true && nm !== 'rn' && !$(this).hasClass('not-editable-cell')) {
                        switch (cm.edittype) {
                            case "checkbox":
                                var cbv = ["Yes", "No"];
                                if (cm.editoptions) {
                                    cbv = cm.editoptions.value.split(":");
                                }
                                tmp[nm] = $("input", this).is(":checked") ? cbv[0] : cbv[1];
                                break;
                            case 'text':
                            case 'password':
                            case 'textarea':
                            case "button" :
                                tmp[nm] = $("input, textarea", this).val();
                                break;
                            case 'select':
                                if (!cm.editoptions.multiple) {
                                    tmp[nm] = $("select option:selected", this).val();
                                    tmp2[nm] = $("select option:selected", this).text();
                                } else {
                                    var sel = $("select", this), selectedText = [];
                                    tmp[nm] = $(sel).val();
                                    if (tmp[nm]) {
                                        tmp[nm] = tmp[nm].join(",");
                                    } else {
                                        tmp[nm] = "";
                                    }
                                    $("select option:selected", this).each(
                                        function (i, selected) {
                                            selectedText[i] = $(selected).text();
                                        }
                                    );
                                    tmp2[nm] = selectedText.join(",");
                                }
                                if (cm.formatter && cm.formatter === 'select') {
                                    tmp2 = {};
                                }
                                break;
                        }
                        //add 校验逻辑
                        if (cm.editrules) {
                            cv = $.jgrid.validator.call(ts, rowid, nm, cm.editrules);
                            if (cv === false)  return false;
                        }
                        if (ts.p.autoencode) {
                            tmp[nm] = $.jgrid.htmlEncode(tmp[nm]);
                        }
                    }
                });
                if (cv === false) return success;
                var idname,
                    oldrowid = rowid,
                    idname = ts.p.keyName;
                tmp = $.extend(false, src, tmp);
                if (o.trigger !== false && ts._trigger("beforeSaveRow", null, [rowid, tmp, o]) === false) {
                    return success;
                }

                tmp = $.extend({}, tmp, tmp2);
                if (ts.p.autoencode) {
                    $.each(tmp, function (n, v) {
                        tmp[n] = $.jgrid.htmlDecode(v);
                    });
                }
                var k, resp = ts.setRowData(rowid, tmp);
                $(ind).attr("editable", "0");
                for (k = 0; k < ts.p.savedRow.length; k++) {
                    if (String(ts.p.savedRow[k].id) === String(oldrowid)) {
                        fr = k;
                        break;
                    }
                }
                if (fr >= 0) {
                    ts.p.savedRow.splice(fr, 1);
                }

                //如果存在ui-inline-edit内置图标
                $(ind).find("div.ui-inline-edit,div.ui-inline-del").show();
                $(ind).find("div.ui-inline-save,div.ui-inline-cancel").hide();


                ts._trigger("afterSaveRow", null, [rowid, tmp, o]);
                if ($.isFunction(o.aftersavefunc)) {
                    o.aftersavefunc.call(ts, rowid, resp, o);
                }
                success = true;
                $(ind).removeClass("jqgrid-new-row").unbind("keydown");
            }
            return success;
        },
        /**
         * 取消某行记录的编辑状态
         * @method restoreRow
         * @param  {String} rowid            行标识
         * @param  {Object} [option]         参数对象
         * option.afterrestorefunc 数据取消修改后触发的函数
         * option.oper 可以区分是新增还是修改的操作行为
         */
        restoreRow: function (rowid, o) {

            o = $.extend(true, {}, o);

            var ts = this, fr, ind, ares = {}, k, src;
            ind = ts.getInd(rowid, true);
            if (ind === false) {
                return;
            }
            src = ts.getRowData(rowid);

            for (k = 0; k < ts.p.savedRow.length; k++) {
                if (String(ts.p.savedRow[k].id) === String(rowid)) {
                    fr = k;
                    break;
                }
            }
            if (fr >= 0) {
                var row = ts.getGridRowById(rowid);
                if ($(row).hasClass("jqgrid-new-row")) {
                    o.oper = 'add';
                    setTimeout(function () {
                        if (ts.p.treeGrid) {
                            ts.delTreeNode(rowid);
                        } else {
                            ts.delRowData(rowid);
                        }
                    }, 0);
                } else {
                    o.oper = 'edit';
                }

                if (ts._trigger("beforeRestoreRow", null, [rowid, src, o]) === false) {
                    return;
                }

                if ($.fn.validator) { //存在校验控件,清除出错信息
                    $("#" + rowid, ts.element).resetValid();
                }

                $.each(ts.p.colModel, function () {
                    if (this.editable === true && ts.p.savedRow[fr].hasOwnProperty(this.name)) {
                        ares[this.name] = ts.p.savedRow[fr][this.name];
                    }
                });
                ts.setRowData(rowid, ares);
                $(ind).attr("editable", "0").unbind("keydown");
                ts.p.savedRow.splice(fr, 1);

                //如果存在ui-inline-edit内置图标
                $(ind).find("div.ui-inline-edit,div.ui-inline-del").show();
                $(ind).find("div.ui-inline-save,div.ui-inline-cancel").hide();


            }

            ts._trigger("afterRestoreRow", null, [rowid, src, o]);
            if ($.isFunction(o.afterrestorefunc)) {
                o.afterrestorefunc.call(ts, rowid);
            }
        },
        /**
         * 删除某行记录
         * @method delRow
         * @param  {String} rowid      行标识
         * @param  {Object} [option]  参数对象,内置'oper=del'用来区分操作行为
         */
        delRow: function (rowid, o) {
            o = $.extend(true, {"oper": "del"}, o);

            var ts = this, ind, bfdr, src;

            ind = ts.getInd(rowid, true);
            if (ind === false) {
                return;
            }
            src = ts.getRowData(rowid);

            if (o.trigger !== false && ts._trigger("beforeDeleteRow", null, [rowid, src, o]) === false) {
                return;
            }

            if (ts.p.treeGrid) {
                ts.delTreeNode(rowid);
            } else {
                ts.delRowData(rowid);
            }
            ts._trigger("afterDeleteRow", null, [rowid, src, o]);
        },
        /**
         * 新增一行记录
         * @param  {Object} [option] 新增行的参数对象
         * option.rowid 行标识
         * option.initdata 新增的初始化值
         * option.position 新增的行记录位置，默认last
         * option.useDefValues 是否用colmod内定义的默认值,默认true
         * option.addRowParam 额外的参数,保存或者取消的时候能取到;内置'oper=add',用来区分修改的行为
         */
        addRow: function (o) {

            o = $.extend(true, {
                rowid: null,
                initdata: {},
                position: "last",
                useDefValues: true,
                addRowParam: {oper: "add"}
            }, o);

            var ts = this,
                idname = ts.p.keyName,
                rowid = o.rowid,
                initdata = o.initdata;

            if ($.isFunction(rowid)) {
                rowid = rowid.call(ts, o);
            } else {
                if (!rowid) {
                    if (initdata[idname]) {
                        rowid = initdata[idname];
                    } else {
                        rowid = $.jgrid.randId();
                        initdata[idname] = rowid;
                    }
                }
            }

            if (ts._trigger("beforeAddRow", null, [rowid, initdata, o.addRowParam]) === false) {
                return;
            }

            if (o.useDefValues === true) {
                $(ts.p.colModel).each(function () {
                    if (this.editoptions && this.editoptions.defaultValue) {
                        var opt = this.editoptions.defaultValue,
                            tmp = $.isFunction(opt) ? opt.call(ts) : opt;
                        initdata[this.name] = tmp;
                    }
                });
            }
            if (ts.p.treeGrid) {
                ts.addChildNode(rowid, o.parent, initdata, o.position);
            } else {
                ts.addRowData(rowid, initdata, o.position);
            }
            var row = ts.getGridRowById(rowid);
            $(row).addClass("jqgrid-new-row");
            $(ts.element).jqGrid('editRow', rowid, o.addRowParam);
            $(ts.element).jqGrid('setSelection', rowid);
            var src = ts.getRowData(rowid);
            ts._trigger("afterAddRow", null, [rowid, $.extend(false, src, initdata), o.addRowParam]);
        }
    });

}();

/**
 * Created by huangxinghui on 2015/11/27.
 */

!(function () {
    var template = fish.compile("\n        <div class=\"ui-dialog dialog-lg columns-dialog\">\n            <div class=\"modal-header\">\n                <h4 class=\"modal-title\">{{title}}</h4>\n            </div>\n            <div class=\"modal-body clearfix\">\n                <div class=\"columns-container\">\n                    <div class=\"panel panel-default\">\n                        <div class=\"panel-heading\">\n                            <div class=\"panel-title\">{{invisibleColumns}}</div>\n                        </div>\n                        <div class=\"panel-body\">\n                            <div class=\"js-invisible-columns\" style=\"height: 280px\"></div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"btn-separate-group-vertical\">\n                    <button type=\"button\" class=\"btn btn-primary js-move-right-all\">&gt;&gt;</button>\n                    <button type=\"button\" class=\"btn btn-primary js-move-right\">&gt;</button>\n                    <button type=\"button\" class=\"btn btn-primary js-move-left\">&lt;</button>\n                    <button type=\"button\" class=\"btn btn-primary js-move-left-all\">&lt;&lt;</button>\n                </div>\n                <div class=\"columns-container\">\n                    <div class=\"panel panel-default\">\n                        <div class=\"panel-heading\">\n                            <div class=\"panel-title\">{{visibleColumns}}</div>\n                        </div>\n                        <div class=\"panel-body\">\n                            <div class=\"js-visible-columns\" style=\"height: 280px\"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-primary js-ok\">{{ok}}</button>\n                <button type=\"button\" class=\"btn btn-default\" data-dismiss>{{cancel}}</button>\n            </div>\n        </div>\n    ");
    $.extend($.ui.grid.prototype, {
        _setupColumnsFeature: function () {
            var $pagerLeft = $("#" + this.options.id + "_pager_left", this.element);
            $pagerLeft.append('<button type="button" title="' + $.jgrid.columnsFeature.title + '" class="btn btn-xs btn-link js-columns">' + '<i class="glyphicon glyphicon-list-alt"></i></button>');

            this._on({
                "click .js-columns": "_onColumnsClick"
            });
        },

        _onColumnsClick: function () {
            if (this.__columnsFeatureFlag__) {
                return;
            }

            this.__columnsFeatureFlag__ = true;

            var that = this,
                visibleColumns = [],
                invisibleColumns = [],
                $columnsFeatureDialog = $(template(fish.extend({}, $.jgrid.columnsFeature, {
                ok: fish.getResource('alert.ok'),
                cancel: fish.getResource('alert.cancel')
            }))),
                $invisibleGrid,
                $visibleGrid,
                popup;

            popup = fish.popup({
                content: $columnsFeatureDialog,
                modal: false
            });

            fish.each(this.options.colModel, function (column) {
                if (column.label) {
                    if (column.hidden) {
                        invisibleColumns.push(column);
                    } else {
                        visibleColumns.push(column);
                    }
                }
            });

            $invisibleGrid = $(".js-invisible-columns", $columnsFeatureDialog).grid({
                multiselect: true,
                colModel: [{
                    name: "label",
                    label: $.jgrid.columnsFeature.columnName,
                    sortable: false,
                    resizable: false
                }],
                data: invisibleColumns
            });

            $visibleGrid = $(".js-visible-columns", $columnsFeatureDialog).grid({
                multiselect: true,
                cellEdit: true,
                colModel: [{
                    name: "label",
                    label: $.jgrid.columnsFeature.columnName,
                    resizable: false,
                    sortable: false
                }, {
                    name: "width",
                    label: $.jgrid.columnsFeature.columnWidth,
                    formatter: "integer",
                    resizable: false,
                    sortable: false,
                    editable: true
                }],
                data: visibleColumns
            });
            $visibleGrid.grid("sortableRows");

            $columnsFeatureDialog.on("click", ".js-move-right-all", function (e) {
                var rows = $invisibleGrid.grid("getRowData");
                $invisibleGrid.grid("clearGridData");

                fish.each(rows, function (data) {
                    $visibleGrid.grid("addRowData", data);
                });
            });

            $columnsFeatureDialog.on("click", ".js-move-right", function (e) {
                var rows = $invisibleGrid.grid("getCheckRows");

                fish.each(rows, function (data) {
                    $invisibleGrid.grid("delRowData", data);
                    $visibleGrid.grid("addRowData", data);
                });
            });

            $columnsFeatureDialog.on("click", ".js-move-left", function (e) {
                var rows = $visibleGrid.grid("getCheckRows");

                fish.each(rows, function (data) {
                    $visibleGrid.grid("delRowData", data);
                    $invisibleGrid.grid("addRowData", data);
                });
            });

            $columnsFeatureDialog.on("click", ".js-move-left-all", function (e) {
                var rows = $visibleGrid.grid("getRowData");
                $visibleGrid.grid("clearGridData");

                fish.each(rows, function (data) {
                    $invisibleGrid.grid("addRowData", data);
                });
            });

            $columnsFeatureDialog.on("click", ".js-ok", function () {
                var hideCols = [],
                    showCols = [],
                    visibleColumns,
                    invisibleColumns;

                visibleColumns = $visibleGrid.grid("getRowData");

                if (visibleColumns.length === 0) {
                    fish.warn(fish.getResource('grid.columnsFeature.checkOneVisible'));
                    return;
                }

                fish.each(visibleColumns, function (data) {
                    if (data.hidden) {
                        showCols.push(data);
                    }
                });

                invisibleColumns = $invisibleGrid.grid("getRowData");
                fish.each(invisibleColumns, function (data) {
                    if (!data.hidden) {
                        hideCols.push(data);
                    }
                });

                popup.close({
                    visibleColumns: visibleColumns,
                    invisibleColumns: invisibleColumns,
                    showColumns: showCols,
                    hideColumns: hideCols
                });
            });

            popup.result.then(function (data) {
                var rows = data.showColumns;
                fish.each(rows, function (data) {
                    that.showCol(data.name);
                });

                rows = data.hideColumns;
                fish.each(rows, function (data) {
                    that.hideCol(data.name);
                });

                that._updateColumnsProperty(data.visibleColumns, data.invisibleColumns);

                if (that.options.cached) {
                    that._writeCacheColumnsFeature();
                }

                that._trigger("columnsFeatureChanged", null, [that.options.colModel]);
            }).always(function () {
                $columnsFeatureDialog.off("click");
                that.__columnsFeatureFlag__ = false;
            });
        },

        _updateColumnsProperty: function (visibleColumns, invisibleColumns) {
            var that = this,
                cmMap = {},
                colModel = this.options.colModel,
                permutation = new Array(colModel.length),
                columns = visibleColumns.concat(invisibleColumns),
                offset = 0,
                dropWidth;
            $.each(colModel, function (i, data) {
                cmMap[this.name] = i;

                if (!data.label) {
                    permutation[i] = i;
                }
            });

            while (offset in permutation) {
                offset++;
            }

            fish.each(columns, function (data, i) {
                permutation[offset + i] = cmMap[data.name];
            });

            // resort columns headers
            $("thead:first>tr", this.grid.hDiv).each(function () {
                var row = this,
                    elems = $.makeArray(row.cells);

                $.each(permutation, function () {
                    var e = elems[this];
                    if (e) {
                        row.appendChild(e);
                    }
                });
            });

            this.remapColumns(permutation);

            fish.each(visibleColumns, function (data, index) {
                that.grid.headers[index + offset].el.style.width = data.width + "px";
                that.grid.cols[index + offset].style.width = data.width + "px";
                colModel[index + offset].width = data.width;
            });

            dropWidth = fish.reduce(invisibleColumns, function (width, data) {
                return width += data.width;
            }, 0);

            if (dropWidth) {
                this.options.tblwidth -= dropWidth;
                $('table:first', this.grid.bDiv).css("width", this.options.tblwidth + "px");
                $('table:first', this.grid.hDiv).css("width", this.options.tblwidth + "px");
                $('table:first', this.grid.sDiv).css("width", this.options.tblwidth + "px");
            }
        },

        _writeCacheColumnsFeature: function () {
            var columns = [];
            fish.each(this.options.colModel, function (data) {
                columns.push({
                    name: data.name,
                    width: data.width,
                    hidden: data.hidden
                });
            });
            fish.store.set(this.options.id, JSON.stringify(columns));
        },

        _readCacheColumnsFeature: function (columns) {
            //            var columns = JSON.parse(fish.store.get(this.options.id)),
            var colModel = new Array(this.options.colModel.length),
                colMapping = {};

            if (columns) {
                fish.each(columns, function (data, index) {
                    colMapping[data.name] = {
                        index: index,
                        data: data
                    };
                });

                fish.each(this.options.colModel, function (data, index) {
                    var mapping = colMapping[data.name];
                    if (mapping) {
                        colModel[mapping.index] = fish.extend(data, mapping.data);
                    } else {
                        colModel[index] = data;
                    }
                });

                this.options.colModel = colModel;
            }
        }
    });
})();

!(function() {
    $.extend($.ui.grid.prototype, {
        _setupExportFeature: function() {
            var $pagerLeft = $("#" + this.options.id + "_pager_left", this.element);

            $pagerLeft.append("<button type=\"button\" title=\""+$.jgrid.exportFeature.title+"\" class=\"btn btn-xs btn-link js-export\">" + "<i class=\"glyphicon glyphicon-export\"></i>" + "</button>");

            this._on({
                "click .js-export": "_onExportClick"
            });
        },

        _onExportClick: function() {

        	var param={},
        		gridWidth = this.options.width;
		        param.fileType = "xlsx";
	        	param.colModel = _.chain(this.options.colModel).filter(function (col) {
	                return (!col.hidden || col.exportable === true) && col.name && col.name != 'cb' && col.name != 'rn' && (col.exportable !== false);
	            })
	            .map(function (col) {
	                return {
	                    label: col.label,
	                    name: col.name,
	                    colWidth: (parseInt(col.width / gridWidth * 60)),
	                    numeric: (col.formatter == 'number')
	                };
	            }).value();

	        if(fish.isFunction(this.options.exportFeature)){
	        	$.extend(true,param,this.options.exportFeature.call(this));
	        } else if(fish.isObject(this.options.exportFeature)){
	        	$.extend(true,param,this.options.exportFeature);
	        }
	        	
            this._trigger("exportFeatureClicked", null, [param]);
        }
    });
})();

/*
 * Created by shi.pengyan on 2016-01-27.
 */
/**
 * SubGrid
 * @class fish.desktop.widget.Grid
 */
!function () {
    'use strict';

    $.extend($.ui.grid.prototype, {
        /*
         * 为SubGrid增加一个‘+’/'-' 列
         * @param rowid 行ID
         * @param colPos 列位置
         * @returns {string} '<td>...</td>'
         */
        _addSubGridCell: function (rowid, colPos) {
            var v = '<a class="ui-subgrid-href"><span class="' + this.p.subGridOptions.plusIcon + ' ui-subgrid-btn"></span></a>',
                prp = this._formatCol(colPos);
            return '<td role="gridcell" ' + prp + ' class="ui-sgcollapsed sgcollapsed">' + v + '</td>';
        },

        /*
         * 点击subGrid按钮
         * @param e event
         * @returns {boolean}
         * @private
         */
        _subGridBtnHandler: function (e) {
            var ts = this, $btn = $(e.target);
            var $tr = $btn.parents("tr"), $td = $btn.parents('td');
            var pID = ts.p.id, rowId = $tr.attr('id'), subGridId = pID + "_" + rowId, nhc = 0;

            $.each(ts.p.colModel, function () {
                if (this.hidden === true || this.name === 'rn' || this.name === 'cb') {
                    nhc++;
                }
            });
            var $r = $("#" + subGridId + "_expandedContent");
            if ($td.hasClass("sgcollapsed")) {
                if (this._trigger('subGridBeforeExpand', e, [subGridId, rowId]) === false) {
                    return false;
                }

                if (ts.p.subGridOptions.reloadOnExpand === true || ( ts.p.subGridOptions.reloadOnExpand === false && !$r.hasClass('ui-subgrid') )) {
                    var pos = $td.index(), atd = pos >= 1 ? "<td class='subgrid-cell' colspan='" + pos + "'>&#160;</td>" : ""; //SubGrid偏移量
                    $tr.after("<tr role='row' id='" + subGridId + "_expandedContent" + "' class='ui-subgrid ui-sg-expanded'>" + atd + "<td class='subgrid-cell'></td><td colspan='" + parseInt(ts.p.colModel.length - 1 - nhc, 10) + "' class='subgrid-data'><div id=" + subGridId + " class='tablediv'></div></td></tr>");
                    this._trigger('subGridRowExpanded', e, [subGridId, rowId]);
                    this._populateSubGrid($tr);

                } else {
                    $r.show().removeClass("ui-sg-collapsed").addClass("ui-sg-expanded");
                }

                $btn.removeClass(this.p.subGridOptions.plusIcon).addClass(this.p.subGridOptions.minusIcon);
                $td.removeClass("sgcollapsed").addClass("sgexpanded");
                if (ts.p.subGridOptions.selectOnExpand) {
                    this.setSelection(rowId, true, e);
                }
            } else if ($td.hasClass("sgexpanded")) {
                if (this._trigger("subGridRowColapsed", e, [subGridId, rowId]) === false) {
                    return false;
                }
                if (ts.p.subGridOptions.reloadOnExpand === true) {
                    $r.remove(".ui-subgrid");
                } else if ($r.hasClass('ui-subgrid')) { // incase of dynamic deleting
                    $r.hide().addClass("ui-sg-collapsed").removeClass("ui-sg-expanded");
                }
                $btn.removeClass(ts.p.subGridOptions.minusIcon).addClass(ts.p.subGridOptions.plusIcon);
                $td.removeClass("sgexpanded").addClass("sgcollapsed");
                if (ts.p.subGridOptions.selectOnCollapse) {
                    this.setSelection(rowId, true, e);
                }
            }
            e.stopPropagation();
        },

        /*
         * 构建SubGrid
         * @param $tr 行对象 table row
         * @private
         */
        _populateSubGrid: function ($tr) {
            if (fish.isEmpty(this.p.subGridModel)) {
                console.log('subGridModel is empty.');
                return;
            }

            var ts = this, rowId = $tr.attr('id');
            var subGridId = ts.p.id + '_' + rowId;
            var $subGridContainer = this.element.find('#' + subGridId);
            var url = ts.p.subGridAjaxOptions.url, data = ts.p.subGridAjaxOptions.data;

            if (ts.p.subGridAjaxOptions.showMask === true) {
                $subGridContainer.blockUI();
            }

            $.ajax({
                type: ts.p.subGridAjaxOptions.type,
                url: $.isFunction(url) ? url.call(ts, rowId) : url,
                dataType: 'json',
                data: $.isFunction(data) ? data.call(ts, rowId) : data
            }).done(function (response) {
                ts._addSubGridJsonData(response, rowId);
            }).always(function () {
                if (ts.p.subGridAjaxOptions.showMask === true) {
                    $subGridContainer.unblockUI();
                }
            });
        },

        /**
         * 设置SubGrid的宽度（正常情形下不需要调用）
         * @param parentGridWidth 父Grid宽度
         */
        setSubGridWidth: function (parentGridWidth) {
            if (this.p.subGrid !== true) {
                return;
            }
            //通用模型不需要设置宽度
            if (this.p.subGridModel && this.p.subGridModel.length != 0) {
                return;
            }
            if (parentGridWidth <= 0) {
                return;
            }

            var $subGrids = this.element.find('.ui-subgrid .subgrid-data>div .ui-jqgrid');// 二级
            if ($subGrids.length === 0) {
                console.log('no subGrid in grid');
                return;
            }

            //compute subGrid width
            var subGridWidth = parentGridWidth - this.p.subGridWidth - 2; // - table
            if (this.p.multiselect) {
                subGridWidth -= this.p.multiselectWidth - 1;
            }
            if (this.p.rownumbers) {
                subGridWidth -= this.p.rownumWidth - 1;
            }

            fish.each($subGrids, function (subGrid) {
                $(subGrid).grid('setGridWidth', subGridWidth);
            });
        },
        /*
         * 通过数据构造SubGrid表格
         * @param data json数据
         * @param rowId 行ID
         * @private
         */
        _addSubGridJsonData: function (data, rowId) {
            var ts = this, subGridId = ts.p.id + '_' + rowId;
            var $subGridContainer = this.element.find('#' + subGridId);
            var $subGrid = $('<table><thead></thead><tbody></tbody></table>'),
                $tr = $('<tr></tr>'),
                $th;

            // 整理参数
            var allWidth = $subGridContainer.outerWidth(), allModelWidth = 0, fixedModelWidth = 0;
            fish.each(ts.p.subGridModel, function (model) {
                model.widthOrg = model.width = model.width ? parseInt(model.width, 10) : 150;
                model.hidden = !!model.hidden;
                model.fixed = !!model.fixed;
                if (!model.hidden) {
                    if (model.fixed) {
                        fixedModelWidth += model.width;
                    } else {
                        allModelWidth += model.width;
                    }
                }
            });

            //thead
            var usefullWidth = allWidth - fixedModelWidth;
            fish.each(ts.p.subGridModel, function (model) {
                $th = $('<th class="ui-th-subgrid">' + model.label + '</th>');
                if (model.hidden) {
                    $th.css('display', 'none');
                } else {
                    if (model.fixed) {
                        $th.width(model.width);
                    } else {
                        $th.width(model.width / allModelWidth * usefullWidth);
                    }
                }
                $tr.append($th);
            });
            $subGrid.find('thead').append($tr);

            //tbody
            if (!fish.isEmpty(data)) {
                var $tbody = $subGrid.find('tbody');
                fish.each(data, function (item) {
                    $tr = $('<tr class="ui-subtblcell"></tr>');
                    fish.each(ts.p.subGridModel, function (model) {
                        var $td = $('<td>' + item[model.name] + '</td>');
                        if (model.hidden) {
                            $td.css('display', 'none');
                        }
                        if (model.align) {
                            $td.css('text-align', model.align);
                        }
                        $tr.append($td);
                    });
                    $tbody.append($tr);
                });
            }

            ts.element.find('#' + ts.p.id + '_' + rowId).append($subGrid);
        },

        /**
         * 获取指定rowId的$subGrid(包括显示和隐藏的,不包括未生成的）则返回$subGrid(jquery对象)，否则为null
         * @param rowId 行ID
         * @returns 如果有subGrid（包括显示和隐藏的）则返回$subGrid(jquery对象)，否则为null
         */
        getSubGrid: function (rowId) {
            var $subGrid = null;
            if (this.p.subGrid === true) {
                var row = this.getInd(rowId, true);
                if (row) {
                    var $row = $(row);
                    var $next = $row.next();
                    if ($next.hasClass('ui-subgrid')) {
                        var $grid = $next.find('.subgrid-data .ui-jqgrid');
                        if ($grid.length) {
                            $subGrid = $grid;
                        } else {
                            $subGrid = $next.find('.subgrid-data table');
                        }
                    }
                }
            }
            return $subGrid;
        },

        /**
         *展开SubGrid
         * @param rowId 行Id
         */
        expandSubGridRow: function (rowId) {
            if (this.p.subGrid === true) {
                var row = this.getInd(rowId, true);
                if (row) {
                    var $subGridBtn = $("td.sgcollapsed>a.ui-subgrid-href>span", row);
                    $subGridBtn.length && $subGridBtn.trigger("click");
                }
            }
        },

        /**
         * 收缩SubGrid
         * @param rowId 行Id
         */
        collapseSubGridRow: function (rowId) {
            if (this.p.subGrid === true) {
                var row = this.getInd(rowId, true);
                if (row) {
                    var $subGridBtn = $("td.sgexpanded>a.ui-subgrid-href>span", row);
                    $subGridBtn.length && $subGridBtn.trigger("click");
                }
            }
        },

        /**
         * 展开所有SubGrid
         */
        expandAllSubGridRow: function () {
            if (this.p.subGrid === true) {
                var $rows = this.element.find('tbody:first>.jqgrow');
                fish.each($rows, function (row) {
                    var $row = $(row);
                    var $next = $row.next();

                    if ($next.hasClass('ui-subgrid')) {
                        if ($next.hasClass('ui-sg-expanded')) {
                        } else if ($next.hasClass('ui-sg-collapsed')) {
                            $('td.ui-sgcollapsed>a.ui-subgrid-href>span', $row).trigger('click');
                        }
                    } else {
                        $('td.ui-sgcollapsed>a.ui-subgrid-href>span', $row).trigger('click');
                    }
                });
            }
        },
        /**
         * 收起所有SubGrid
         */
        collapseAllSubGridRow: function () {
            if (this.p.subGrid === true) {
                var $rows = this.element.find('.ui-subgrid.ui-sg-expanded');
                fish.each($rows, function (row) {
                    var $row = $(row);
                    var $prev = $row.prevAll('.jqgrow').not('.ui-sortable-placeholder').eq(0);
                    $('td.ui-sgcollapsed>a.ui-subgrid-href>span', $prev).trigger('click');
                });
            }
        },


        /**
         * 如果rowId下的SubGrid展开则收起，否则展开
         * @param rowId 行Id
         */
        toggleSubGridRow: function (rowId) {
            if (this.p.subGrid === true) {
                var row = this.getInd(rowId, true);
                if (row) {
                    var $subGridBtn = $("td.sgcollapsed>a.ui-subgrid-href>span", row);
                    if (!$subGridBtn.length) {
                        $subGridBtn = $("td.sgexpanded>a.ui-subgrid-href>span", row);
                    }
                    $subGridBtn.trigger("click");
                }
            }
        }
    });

}();
/**
 * Created by wxh on 2016-1-13.
 */
/**
 * 树插件 method of tools for tree
 * @class fish.desktop.widget.Tree
 */
!function () {

	'use strict';

	$.tree = $.tree || {};

	$.extend($.tree, {
		/**
		 * 深拷贝  ， jquery.extend不支持日期型的深拷贝
		 * @param obj
		 * @returns {*}
		 */
		clone: function (obj) {
			if (obj === null) return null;
			var o = fish.isArray(obj) ? [] : {};
			for (var i in obj) {
				o[i] = (obj[i] instanceof Date) ? new Date(obj[i].getTime()) : (typeof obj[i] === "object" ? $.tree.clone(obj[i]) : obj[i]);
			}
			return o;
		},
		eqs: function (str1, str2) {
			return str1.toLowerCase() === str2.toLowerCase();
		},
		isChildOrSelf: function (dom, parentId) {
			return ( $(dom).closest("#" + parentId).length > 0 );
		},
		/**
		 * 获取焦点，并且选中
		 * @param inputObj
		 */
		inputFocus: function(inputObj) {
			if (inputObj.get(0)) {
				inputObj.focus();
				$.tree.setCursorPosition(inputObj.get(0), inputObj.val().length);
			}
		},

		/**
		 * 光标选中
		 * @param obj
		 * @param pos
		 */
		setCursorPosition: function(obj, pos){
			if(obj.setSelectionRange) {
				obj.focus();
				obj.setSelectionRange(pos,pos);
			} else if (obj.createTextRange) {
				var range = obj.createTextRange();
				range.collapse(true);
				range.moveEnd('character', pos);
				range.moveStart('character', pos);
				range.select();
			}
		},
		/**
		 * 获取焦点
		 * @param inputObj
		 */
		inputSelect: function(inputObj) {
			if (inputObj.get(0)) {
				inputObj.focus();
				inputObj.select();
			}
		},
		/**
		 * 获取li
		 * @param target
		 * @returns {*|jQuery}
		 */
		getNodeMainDom: function (target) {
			return ($(target).parent("li").get(0) || $(target).parentsUntil("li").parent().get(0));
		},

		transformTozTreeFormat: function (sNodes, key, parentKey, childKey) {
			var i, l;
			if (!key || key == "" || !sNodes) return [];

			if (fish.isArray(sNodes)) {
				var r = [];
				var tmpMap = [];
				for (i = 0, l = sNodes.length; i < l; i++) {
					tmpMap[sNodes[i][key]] = sNodes[i];
				}
				for (i = 0, l = sNodes.length; i < l; i++) {
					if (tmpMap[sNodes[i][parentKey]] && sNodes[i][key] != sNodes[i][parentKey]) {
						if (!tmpMap[sNodes[i][parentKey]][childKey])
							tmpMap[sNodes[i][parentKey]][childKey] = [];
						tmpMap[sNodes[i][parentKey]][childKey].push(sNodes[i]);
					} else {
						r.push(sNodes[i]);
					}
				}
				return r;
			} else {
				return [sNodes];
			}
		},

		getAbs: function (obj) {
			var oRect = obj.getBoundingClientRect(),
				scrollTop = document.body.scrollTop+document.documentElement.scrollTop,
				scrollLeft = document.body.scrollLeft+document.documentElement.scrollLeft;
			return [oRect.left+scrollLeft,oRect.top+scrollTop];
		},

		consts: {
			className: {
				BUTTON: "button",
				LEVEL: "level",
				ICO_LOADING: "ico_loading",
				SWITCH: "switch"
			},
			event: {
				NODECREATED: "onNodeCreated",
				CLICK: "onClick",
				EXPAND: "onExpand",
				COLLAPSE: "onCollapse",
				ASYNC_SUCCESS: "ztree_async_success",
				ASYNC_ERROR: "ztree_async_error",
				REMOVE: "onRemove",
				CHECK: "onCheck",
				DRAG: "onDrag",
				DROP: "onDrop",
				RENAME: "onRename",
				DRAGMOVE:"onDragMove"
			},
			id: {
				A: "_a",
				ICON: "_ico",
				SPAN: "_span",
				SWITCH: "_switch",
				UL: "_ul",
				CHECK: "_check",
				EDIT: "_edit",
				INPUT: "_input",
				REMOVE: "_remove"
			},
			line: {
				ROOT: "root",
				ROOTS: "roots",
				CENTER: "center",
				BOTTOM: "bottom",
				NOLINE: "noline",
				LINE: "line"
			},
			folder: {
				OPEN: "open",
				CLOSE: "close",
				DOCU: "docu"
			},
			move: {
				TYPE_INNER: "inner",
				TYPE_PREV: "prev",
				TYPE_NEXT: "next"
			},
			node: {
				CURSELECTED: "curSelectedNode",
				CURSELECTED_EDIT: "curSelectedNode_Edit",
				TMPTARGET_TREE: "tmpTargetzTree",
				TMPTARGET_NODE: "tmpTargetNode"
			},
			checkbox: {
				STYLE: "checkbox",
				DEFAULT: "chk",
				DISABLED: "disable",
				FALSE: "false",
				TRUE: "true",
				FULL: "full",
				PART: "part",
				FOCUS: "focus"
			},
			radio: {
				STYLE: "radio",
				TYPE_ALL: "all",
				TYPE_LEVEL: "level"
			}
		}
	});
}();
/**
 * 树插件
 * @class fish.desktop.widget.Tree
 * @extends fish.desktop.widget
 * <pre>
 $(element).tree(option);
 $(element).tree(method);
 * </pre>
 * Created by wang.xiaohu9 on 2016年01月13日 星期三
 * Modify  by wang.xiaohu9 on 2016年01月13日 星期三
 * Dependent:
 *      fish.tree.util.js
 *      fish.tree.data.js
 *      fish.tree.view.js
 *      fish.tree.event.js
 */
!(function () {
	'use strict';

	$.widget("ui.tree", {
		//控件的默认参数
		options: {
			/**
    * @cfg {Object} view 页面展示相关的配置
    * @cfg {Function} view.addDiyDom 用于在节点上固定显示用户自定义控件;函数有一个入参，节点的数据
    * @cfg {Boolean} [view.autoCancelSelected=true] 点击节点时，按下 Ctrl 或 Cmd 键是否允许取消选择操作。true / false 分别表示 支持 / 不支持 配合 Ctrl 或 Cmd 键进行取消节点选择的操作
    * @cfg {Boolean} [view.dblClickExpand=true] 双击节点时，是否自动展开父节点的标识
    * @cfg {Object} view.fontCss 个性化文字样式，只针对 zTree 在节点上显示的A对象，例如：{color:"#ff0011", background:"blue"}
    * @cfg {Boolean} [view.nameIsHTML=false] 设置 name 属性是否支持 HTML 脚本
    * @cfg {Boolean} [view.selectedMulti=true] 设置是否允许同时选中多个节点。
    * @cfg {Boolean} [view.showIcon=true] 设置 是否显示节点的图标。也可以传入一个函数，返回true或者false。函数有两个入参，第一个是tree的id，第二个是节点的数据
    * @cfg {Boolean} [view.showLine=true]  设置 是否显示节点之间的连线。
    * @cfg {Boolean} [view.showTitle=true] 设置 是否显示节点的 title 提示信息(即节点 DOM 的 title 属性)。
    * true / false 分别表示 显示 / 隐藏 提示信息
    * 如果 options.view.showTitle = true & options.data.key.title = '',tree 会自动使用 options.data.key.name 指定的节点名称当做 title
    * showTitle 也可以传入一个函数，通过函数的返回值确定某个节点是否应该显示title，函数有两个入参，第一个是tree的id，第二个是节点的数据
    * @cfg {Boolean} [view.txtSelectedEnable=false] 设置 是否允许可以选择 tree DOM 内的文本,默认不可选择
    */
			view: {
				addDiyDom: null,
				autoCancelSelected: true,
				dblClickExpand: true,
				expandSpeed: "fast",
				fontCss: {},
				nameIsHTML: false,
				selectedMulti: true,
				showIcon: true,
				showLine: true,
				showTitle: true,
				txtSelectedEnable: false
			},
			/**
    * @cfg {Object} data 数据相关的配置
    * @cfg {Object} data.key 数据相关的键值
    * @cfg {String} [data.key.children="children"] 节点数据中保存子节点数据的属性名称。
    * @cfg {String} [data.key.name="name"]  节点数据保存节点名称的属性名称,
    * @cfg {String} [data.key.title=""]  节点数据保存节点提示信息的属性名称。[options.view.showTitle = true 时生效];如果设置为 "" ，则自动与 options.data.key.name 保持一致，避免用户反复设置
    * @cfg {String} [data.key.icon="icon"] (V2.1.0增加) 节点数据图标属性名称
    * @cfg {String} [data.key.url="url"]  节点数据保存节点链接的目标 URL 的属性名称。特殊用途：当后台数据只能生成 url 属性，又不想实现点击节点跳转的功能时，可以直接修改此属性为其他不存在的属性名称
    * @cfg {String} [data.key.iconFontEnable=false] 用于设置 iconSkin是否使用字体图标  兼容以前的iconSkin用法
    *
    * @cfg {Object} data.simpleData tree使用简单数据格式时相关的设置
    * @cfg {String} [data.simpleData.enable=false] 设置加载数据、增加节点时传入的数据是否是简单格式，默认为false；如果设置为 true，请务必设置 data.simpleData 内的其他参数: idKey / pIdKey / rootPId，并且让数据满足父子关系。
    * @cfg {String} [data.simpleData.idKey=id] 节点数据中保存唯一标识的属性名称。[data.simpleData.enable = true 时生效]默认值："id"
    * @cfg {String} [data.simpleData.pIdKey=pId] 节点数据中保存其父节点唯一标识的属性名称。[data.simpleData.enable = true 时生效]默认值："pId"
    * @cfg {String} [data.simpleData.rootPId=null] 用于修正根节点父节点数据，即 pIdKey 指定的属性值。[data.simpleData.enable = true 时生效]默认值：null
    *
    * @cfg {Object} [data.keep]
    * @cfg {Boolean} [data.keep.leaf=false] 节点叶子节点属性锁，是否始终保持 isParent = false;如果设置为 true，则所有 isParent = false 的节点，都无法添加子节点。
    * @cfg {Boolean} [data.keep.parent=true] 节点父节点属性锁，是否始终保持 isParent = true;如果设置为 true，则所有 isParent = true 的节点，即使该节点的子节点被全部删除或移走，依旧保持父节点状态
    */
			data: {
				key: {
					children: "children",
					name: "name",
					title: "",
					icon: 'icon',
					url: "url",
					iconFontEnable: false
				},
				simpleData: {
					enable: false,
					idKey: "id",
					pIdKey: "pId",
					rootPId: null
				},
				keep: {
					parent: false,
					leaf: false
				}
			},
			async: {
				enable: false,
				contentType: "application/x-www-form-urlencoded",
				type: "post",
				dataType: "text",
				url: "",
				autoParam: [],
				otherParam: [],
				dataFilter: null
			},

			/**
    * @cfg {Object} callback 回调函数的配置
    * @cfg {Function} callback.beforeClick 用于捕获单击节点之前的事件回调函数，并且根据返回值确定是否允许单击操作。函数的参数说明：
    *        treeNode 被单击的节点 JSON 数据对象
    *        clickFlag    节点被点击后的选中操作类型，详细看下表
    *
    *        clickFlag    selectedMulti    autoCancelSelected && event.ctrlKey / metaKey    isSelected    选中操作
    *        1                true                    false                                    false    普通选中
    *        1                true                    false                                    true    普通选中
    *        2                true                    true                                    false    追加选中
    *        0                true                    true                                    true    取消选中
    *        1                false                    false                                    false    普通选中
    *        1                false                    false                                    true    普通选中
    *        1                false                    true                                    false    普通选中
    *        0                false                    true                                    true    取消选中
    *
    *        返回值是 true / false
    *        如果返回 false，tree将不会选中节点，也无法触发 onClick 事件回调函数
    *
    * @cfg {Function} callback.beforeDblClick 用于捕获 tree 上鼠标双击之前的事件回调函数，并且根据返回值确定触发 onDblClick 事件回调函数. Function 参数说明
    *        treeNode 被单击的节点 JSON 数据对象             *
    *        返回值是 true / false
    *        如果返回 false，将仅仅无法触发 onDblClick 事件回调函数，对其他操作无任何影响
    *        此事件回调函数对双击节点展开功能无任何影响，如果需要设置请参考 view.dblClickExpand 属性
    *
    * @cfg {Function} callback.beforeRightClick 用于捕获 tree 上鼠标右键点击之前的事件回调函数，并且根据返回值确定触发 onRightClick 事件回调函数.参数是event和treeNode
    * @cfg {Function} callback.beforeMouseDown
    * @cfg {Function} callback.beforeMouseUp beforeMouseUp和beforeMouseDown分别用于捕获 tree 上鼠标按键松开之前的事件回调函数，并且根据返回值确定触发 onMouseUp/onMouseDown 事件回调函数。参数是event和treeNode(如果不在节点上，这个参数为null)；返回值为true/false
    * @cfg {Function} callback.beforeExpand 用用于捕获父节点展开之前的事件回调函数，并且根据返回值确定是否允许展开操作。参数是event和treeNode；返回值为true/false
    * @cfg {Function} callback.beforeExpand 用用于捕获父节点展开之前的事件回调函数，并且根据返回值确定是否允许展开操作。参数是event和treeNode；返回值为true/false
    * @cfg {Function} callback.beforeCollapse 用于捕获父节点折叠之前的事件回调函数，并且根据返回值确定是否允许折叠操作。参数是event和treeNode；返回值为true/false
    * @cfg {Function} callback.beforeRemove 用于捕获节点被删除之前的事件回调函数，并且根据返回值确定是否允许删除操作。参数是event和treeNode；返回值为true/false
    *
    * @cfg {Function} callback.onNodeCreated    用于捕获节点生成 DOM 后的事件回调函数。函数参数是:event、treeNode(节点数据)
    * @cfg {Function} callback.onClick 用于捕获节点被点击的事件回调函数，函数参数
    *      event    event对象
    *      treeNode  被点击的节点 JSON 数据对象
    *      clickFlagNumber  节点被点击后的选中操作类型，详细看下表
    *
    *      clickFlag    selectedMulti    autoCancelSelected&&event.ctrlKey / metaKey    isSelected    选中操作
    *        1            true                false                                    false    普通选中
    *        1            true                false                                    true    普通选中
    *        2            true                true                                    false    追加选中
    *        0            true                true                                    true    取消选中
    *        1            false                false                                    false    普通选中
    *        1            false                false                                    true    普通选中
    *        1            false                true                                    false    普通选中
    *        0            false                true                                    true    取消选中
    * @cfg {Function} callback.onDblClick  用于捕获 tree 上鼠标双击之后的事件回调函数，函数的参数是event、treeNode
    * @cfg {Function} callback.onRightClick 用于捕获 tree 上鼠标右键点击之后的事件回调函数，函数的参数是event、treeNode
    * @cfg {Function} callback.onMouseDown 用于捕获  tree上鼠标按键按下后的事件回调函数，函数的参数是event、treeNode
    * @cfg {Function} callback.onMouseUp    用于捕获  tree上鼠标按键松开后的事件回调函数,函数的参数是event、treeNode
    * @cfg {Function} callback.onExpand    用于捕获节点被展开的事件回调函数,函数的参数是event、treeNode
    * @cfg {Function} callback.onCollapse  用于捕获节点被折叠的事件回调函数,函数的参数是event、treeNode
    * @cfg {Function} callback.onRemove    用于捕获删除节点之后的事件回调函数,函数的参数是event、treeNode
    */
			callback: {
				beforeAsync: null,
				beforeClick: null,
				beforeDblClick: null,
				beforeRightClick: null,
				beforeMouseDown: null,
				beforeMouseUp: null,
				beforeExpand: null,
				beforeCollapse: null,
				beforeRemove: null,

				onAsyncError: null,
				onAsyncSuccess: null,
				onNodeCreated: null,
				onClick: null,
				onDblClick: null,
				onRightClick: null,
				onMouseDown: null,
				onMouseUp: null,
				onExpand: null,
				onCollapse: null,
				onRemove: null
			},
			/**
    * @cfg {Array} fNodes 表格的数据源
    */
			fNodes: []
		},
		//控件入口函数
		_create: function () {
			var childKey,
			    $el = this.element,
			    //树整体的jquery形式
			el = $el[0],
			    //树整体
			p = this.options; //树参数
			this.p = p; //别名p指向option
			if (!el.id) $el.uniqueId(); //没有ID,生成一个
			p.id = p.treeId = el.id; //option 存入表格ID
			$el.empty();
			this.consts = $.tree.consts;
			//兼容zTree旧代码  将options.callback回调函数copy到options内
			$.extend(this.options, this.options.callback);

			this._initRoot();
			var root = this._getRoot();
			childKey = p.data.key.children;
			this.zNodes = p.fNodes ? $.tree.clone(fish.isArray(p.fNodes) ? p.fNodes : [p.fNodes]) : [];
			if (this.options.data.simpleData.enable) {
				root[childKey] = $.tree.transformTozTreeFormat(this.zNodes, p.data.simpleData.idKey, p.data.simpleData.pIdKey, childKey);
			} else {
				root[childKey] = this.zNodes;
			}
			this._addInitNode(this._initNodeBase);
			this._initCache();
			this._bindTree();
			if (root[childKey] && root[childKey].length > 0) {
				this._createNodes(0, root[childKey]);
			}
		},

		/**
   * 返回当前作用域下的jquery对象
   * @param node
   * @param exp
   * @returns {*|jQuery|HTMLElement}
   */
		$: function (node, exp) {
			if (typeof node == "string") {
				return $(node, this.element);
			} else {
				if (fish.isUndefined(exp)) {
					exp = "";
				}
				return $("#" + node.tId + exp, this.element);
			}
		},

		/**
   * 在当前上下文执行fun,否则返回defaultValue
   * @param fun
   * @param param
   * @param defaultValue
   * @returns {*}
   * @private
   */
		_apply: function (fun, param, defaultValue) {
			if (typeof fun == "function") {
				return fun.apply(this.element[0], param ? param : []);
			}
			return defaultValue;
		},

		/**
   * 用于编辑 继承使用
   * @param e
   * @returns {boolean}
   * @private
   */
		_uCanDo: function (e) {
			return true;
		},

		/**
   * 是否async
   * @param node
   * @returns {boolean|*}
   * @private
   */
		_canAsync: function (node) {
			var p = this.options;
			var childKey = p.data.key.children;
			return p.async.enable && node && node.isParent && !(node.zAsync || node[childKey] && node[childKey].length > 0);
		},
		/**
   * @method addNodes
   * 添加节点
   * @param {Object}  parentNode 指定的父节点，如果增加根节点，请设置 parentNode 为 null 即可。请务必保证此节点数据对象 是 Tree 内部的数据对象
   * @param {Array}  newNodes   需要增加的节点数据 JSON 对象集合，数据只需要满足 zTree 的节点数据必需的属性即可;增加一个节点的时候，可以不使用数组
   * @param {Boolean} isSilent   设定增加节点后是否自动展开父节点。isSilent = true 时，不展开父节点,其他值或缺省状态都自动展开
   * @return {Array}  返回Tree 最终添加的节点数据集合
   */
		addNodes: function (parentNode, newNodes, isSilent) {
			var _this = this;

			if (!newNodes) return null;
			if (!parentNode) parentNode = null;
			if (parentNode && !parentNode.isParent && this.options.data.keep.leaf) return null;
			var xNewNodes = $.tree.clone(fish.isArray(newNodes) ? newNodes : [newNodes]);
			var addCallback = function () {
				_this._addNodes(parentNode, xNewNodes, isSilent == true);
			};

			if (this._canAsync(parentNode)) {
				this._asyncNode(parentNode, isSilent, addCallback);
			} else {
				addCallback();
			}
			return xNewNodes;
		},

		/**
   * @method getSelectedNodes
   * 获取 zTree 当前被选中的节点数据集合
   * @return {Array} 当前被选中的节点数据集合
   */
		getSelectedNodes: function () {
			var r = [],
			    list = this._getRoot().curSelectedList;
			for (var i = 0, l = list.length; i < l; i++) {
				r.push(list[i]);
			}
			return r;
		},

		/**
   * @method cancelSelectedNode
   * 取消节点的选中状态。
   * @param  {Object} [node] 需要取消选中状态的节点。
   */
		cancelSelectedNode: function (node) {
			this._cancelPreSelectedNode(node);
		},

		/**
   * @method  destroy
   * 销毁tree对象
   */
		_destroy: function () {
			this.cache = {};
			this.root = [];
			this.init = {};
			this.element.empty();
		},

		/**
   * @method expandAll
   * 展开 / 折叠 全部节点
   * 此方法不会触发 beforeExpand / onExpand 和 beforeCollapse / onCollapse 事件回调函数。
   * @param  {Boolean} expandFlag expandFlag = true 表示 展开 全部节点;expandFlag = false 表示 折叠 全部节点
   * @return {Boolean}  true 表示 展开 全部节点;false 表示 折叠 全部节点;null 表示 不存在任何父节点
   */
		expandAll: function (expandFlag) {
			expandFlag = !!expandFlag;
			this._expandCollapseSonNode(null, expandFlag, true);
			return expandFlag;
		},

		/**
   * @method expandNode
   * 展开 / 折叠 指定的节点,可以触发 beforeExpand / onExpand 或 beforeCollapse / onCollapse 事件回调函数。
   * @param  {Object} node 需要 展开 / 折叠 的节点数据
   * @param  {Boolean} [expandFlag] expandFlag = true 表示展开节点 expandFlag = false 表示折叠节点；省略此参数，则根据对此节点的展开状态进行 toggle 切换
   * @param  {Boolean} [sonSign = false] sonSign = true表示全部子孙节点进行与expandFlag相同的操作,sonSign = false 表示只影响此节点，对于其子孙节点无任何影响;
   * @param  {Boolean} [focus = true] focus = true 表示 展开 / 折叠 操作后，通过设置焦点保证此焦点进入可视区域内,focus = false 表示 展开 / 折叠 操作后，不设置任何焦点
   * @param  {Boolean} [callbackFlag = false] callbackFlag = true 表示执行此方法时触发 beforeExpand / onExpand 或 beforeCollapse / onCollapse 事件回调函数 ;callbackFlag = false 表示执行此方法时不触发事件回调函数
   * @return {Boolean} 返回值表示最终实际操作情况:true 表示 展开 节点;false 表示 折叠 节点;null 表示 不是父节点
   */
		expandNode: function (node, expandFlag, sonSign, focus, callbackFlag) {
			if (!node || !node.isParent) return null;
			if (expandFlag !== true && expandFlag !== false) {
				expandFlag = !node.open;
			}
			callbackFlag = !!callbackFlag;

			if (callbackFlag && expandFlag && this._trigger("beforeExpand", null, [node]) == false) {
				return null;
			} else if (callbackFlag && !expandFlag && this._trigger("beforeCollapse", null, [node]) == false) {
				return null;
			}

			if (expandFlag && node.parentTId) {
				this._expandCollapseParentNode(node.getParentNode(), expandFlag, false);
			}
			if (expandFlag === node.open && !sonSign) {
				return null;
			}

			this._getRoot().expandTriggerFlag = callbackFlag;
			if (!this._canAsync(node) && sonSign) {
				this._expandCollapseSonNode(node, expandFlag, true, function () {
					if (focus !== false) {
						try {
							this.$(node).focus().blur();
						} catch (e) {}
					}
				});
			} else {
				node.open = !expandFlag;
				this._switchNode(node);
				if (focus !== false) {
					try {
						this.$(node).focus().blur();
					} catch (e) {}
				}
			}
			return expandFlag;
		},
		/**
   * @method getNodes
   * 获取 zTree 的全部节点数据
   * @return {Array} 全部节点数据
   */
		getNodes: function () {
			return this._getNodes();
		},
		/**
   * @method getNodeByParam
   * 根据节点数据的属性搜索，获取条件完全匹配的节点数据 JSON 对象
   * @param  {String} key 需要精确匹配的属性名称
   * @param  value 需要精确匹配的属性值，可以是任何类型，只要保证与 key 指定的属性值保持一致即可
   * @param  {Object} [parentNode] 搜索范围，指定在某个父节点下的子节点中进行搜索,忽略此参数，表示在全部节点中搜索
   * @return {Object} 匹配精确搜索的节点数据
   *                    1、如无结果，返回 null
   *                    2、如有多个节点满足查询条件，只返回第一个匹配到的节点
   */
		getNodeByParam: function (key, value, parentNode) {
			if (!key) return null;
			return this._getNodeByParam(parentNode ? parentNode[this.options.data.key.children] : this._getNodes(), key, value);
		},
		/**
   * @method getNodeByTId
   * 根据 zTree 的唯一标识 tId 快速获取节点 JSON 数据对象,通过内部的 cache 获取，不需要遍历节点
   * @param  {String} tId 节点在 zTree 内的唯一标识 tId
   * @return {Object}     tId 对应的节点 JSON 数据对象
   */
		getNodeByTId: function (tId) {
			return this._getNodeCache(tId);
		},
		/**
   * @method getNodesByParam
   * 根据节点数据的属性搜索，获取条件完全匹配的节点数据 JSON 对象集合
   * @param  {String} key        需要精确匹配的属性名称
   * @param  value      需要精确匹配的属性值，可以是任何类型，只要保证与 key 指定的属性值保持一致即可
   * @param  {Object} [parentNode] 可以指定在某个父节点下的子节点中搜索,忽略此参数，表示在全部节点中搜索
   * @return {Array}       匹配精确搜索的节点数据集合,如无结果，返回 [ ]
   */
		getNodesByParam: function (key, value, parentNode) {
			if (!key) return null;
			return this._getNodesByParam(parentNode ? parentNode[this.options.data.key.children] : this._getNodes(), key, value);
		},
		/**
   * @method getNodesByParamFuzzy
   * 根据节点数据的属性搜索，获取条件模糊匹配的节点数据 JSON 对象集合
   * @param  {String} key        需要模糊匹配的属性名称
   * @param  value      需要模糊匹配的属性值,模糊匹配只能针对 String 类型的数据
   * @param  {Object} [parentNode] 可以指定在某个父节点下的子节点中搜索,忽略此参数，表示在全部节点中搜索
   * @return {Array}       匹配精确搜索的节点数据集合,如无结果，返回 [ ]
   */
		getNodesByParamFuzzy: function (key, value, parentNode) {
			if (!key) return null;
			return this._getNodesByParamFuzzy(parentNode ? parentNode[this.options.data.key.children] : this._getNodes(), key, value);
		},
		/**
   * @method  getNodesByFilter
   * 根据自定义规则搜索节点数据 JSON 对象集合 或 单个节点数据
   * @param  {Function}  filter     自定义过滤器函数 function filter(node) {...},filter 参数：node (节点数据 JSON)filter 返回值：boolean (true 表示符合搜索条件；false 表示不符合搜索条件)
   * @param  {Boolean} [isSingle=false]    true 表示只查找单个节点,false表示查找节点集合
   * @param  {Object}  [parentNode]  可以指定在某个父节点下的子节点中搜索,忽略此参数，表示在全部节点中搜索
   * @param  {Object} [invokeParam] 用户自定义的数据对象，用于 filter 中进行计算
   * @return isSingle = true 返回 第一个找到的节点数据 JSON，无结果时返回 null;isSingle = false 返回 节点数据集合 Array(JSON)，无结果时返回 [ ]
   */
		getNodesByFilter: function (filter, isSingle, parentNode, invokeParam) {
			isSingle = !!isSingle;
			if (!filter || typeof filter != "function") return isSingle ? null : [];
			return this._getNodesByFilter(parentNode ? parentNode[this.options.data.key.children] : this._getNodes(), filter, isSingle, invokeParam);
		},
		/**
   * @method getNodeIndex
   * 获取某节点在同级节点中的序号（从0开始）
   * @param  {Object} node 需要查询顺序的节点 JSON 数据对象
   * @return {Number}      返回值从 0 开始计数,如果不存在该节点数据，返回 -1
   */
		getNodeIndex: function (node) {
			if (!node) return null;
			var childKey = this.options.data.key.children,
			    parentNode = node.parentTId ? node.getParentNode() : this._getRoot();
			for (var i = 0, l = parentNode[childKey].length; i < l; i++) {
				if (parentNode[childKey][i] == node) return i;
			}
			return -1;
		},

		/**
   * @method isSelectedNode
   * 判断传入的节点当前是否被选中
   * @param  {Object}  node 节点数据
   * @return {Boolean}      如果传入的节点当前是被选中的，返回true；否则返回false
   */
		isSelectedNode: function (node) {
			return this._isSelectedNode(node);
		},

		reAsyncChildNodes: function (parentNode, reloadType, isSilent) {
			var p = this.options;
			if (!p.async.enable) return;
			var isRoot = !parentNode;
			if (isRoot) {
				parentNode = this.getRoot();
			}
			if (reloadType == "refresh") {
				var childKey = p.data.key.children;
				for (var i = 0, l = parentNode[childKey] ? parentNode[childKey].length : 0; i < l; i++) {
					this._removeNodeCache(parentNode[childKey][i]);
				}
				this._removeSelectedNode();
				parentNode[childKey] = [];
				if (isRoot) {
					this.element.empty();
				} else {
					var ulObj = this.$(parentNode, this.consts.id.UL);
					ulObj.empty();
				}
			}
			this._asyncNode(isRoot ? null : parentNode, !!isSilent);
		},
		/**
   * @method refresh
   * 刷新tree,会清空dom结构，根据数据和配置项重新构建；没有特殊必要，尽量不要使用此方法。单个节点更新请使用 updateNode 方法
   */
		refresh: function () {
			this.element.empty();
			var root = this._getRoot(),
			    nodes = root[this.p.data.key.children];
			this._initRoot();
			root[this.p.data.key.children] = nodes;
			this._initCache();
			this._createNodes(0, root[this.p.data.key.children]);
		},
		/**
   * @method removeChildNodes
   * 清空某父节点的子节点。
   * 1、清空子节点后，父节点会自动变为叶子节点，如需要父节点保持父节点状态，请设置 setting.data.keep.parent 属性。
   * 2、请勿用此方法清空根节点，如果需要清空根节点,使用$treeDom.tree('option','fNodes',nodesData)
   * 3、此方法不会触发任何事件回调函数。
   * @param  {Object} node 需要清空子节点的父节点数据
   * @return {Array}      将该父节点的子节点数据返回，如果不存在则返回 null
   */
		removeChildNodes: function (node) {
			if (!node) return null;
			var childKey = this.p.data.key.children,
			    nodes = node[childKey];
			this._removeChildNodes(node);
			return nodes ? nodes : null;
		},
		/**
   * @method removeNode
   * 删除节点,删除节点可以触发 beforeRemove / onRemove 事件回调函数
   * @param  {Object} node         需要被删除的节点数据
   * @param  {Boolean} callbackFlag  表示执行此方法时触发 beforeRemove & onRemove 事件回调函数
   */
		removeNode: function (node, callbackFlag) {
			if (!node) return;
			callbackFlag = !!callbackFlag;
			if (callbackFlag && this._trigger("beforeRemove", null, [node]) == false) return;
			this._removeNode(node);
			if (callbackFlag) {
				this._trigger(this.consts.event.REMOVE, null, [node]);
			}
		},
		/**
   * @method selectNode
   * 选中指定节点
   * @param  {Object} node 需要被选中的节点数据(请务必保证此节点数据对象 是fish.tree内部的数据对象)
   * @param  {Boolean} [addFlag]    addFlag = true 表示追加选中，会出现多点同时被选中的情况
   *                                addFlag = false 表示单独选中，原先被选中的节点会被取消选中状态
   *                                setting.view.selectedMulti = false 时，此参数无效，始终进行单独选中
   */
		selectNode: function (node, addFlag) {
			if (!node) return;
			if (this._uCanDo()) {
				addFlag = this.options.view.selectedMulti && addFlag;
				if (node.parentTId) {
					this._expandCollapseParentNode(node.getParentNode(), true, false, function () {
						try {
							this.$(node).focus().blur();
						} catch (e) {}
					});
				} else {
					try {
						this.$(node).focus().blur();
					} catch (e) {}
				}
				this._selectNode(node, addFlag);
			}
		},
		/**
   * @method transformTozTreeNodes
   * 将简单 Array 格式数据转换为 zTree 使用的标准 JSON 嵌套数据格式。
   * 使用此方法，请务必设置节点唯一标识属性名称 data.simpleData.idKey 和 父节点唯一标识属性名称 data.simpleData.pIdKey，并且让数据满足父子关系。
   * @param  {Array} simpleNodes 需要被转换的简单 Array 格式数据 或 某个单独的数据对象
   * @return         tree使用的标准数据，子节点都存在于父节点数据的 children 属性中
   */
		transformTozTreeNodes: function (simpleNodes) {
			return this._transformTozTreeFormat(simpleNodes);
		},
		/**
   * @method transformToArray
   * 将 tree使用的标准 JSON 嵌套格式的数据转换为简单 Array 格式。(免去用户自行编写递归遍历全部节点的麻烦)
   * @param  {Array} nodes 需要被转换的 tree 节点数据对象集合 或 某个单独节点的数据对象
   * @return 将 tree 使用的标准 JSON 嵌套格式的数据转换为简单 Array 格式
   */
		transformToArray: function (nodes) {
			return this._transformToArrayFormat(nodes);
		},
		/**
   * @method updateNode
   * 更新某节点数据，主要用于该节点显示属性的更新。
   * 1、可针对 name、target、 url、icon、 iconSkin、checked、nocheck 等这几个用于显示效果的参数进行更新，其他用于 zTreeNodes 的参数请不要随意更新，对于展开节点，还请调用 expandNode方法，因此请勿随意修改 open 属性。
   * 2、用此方法修改 checked 勾选状态不会触发 beforeCheck / onCheck 事件回调函数。
   * @param  {Object} node          指定需要更新的节点 JSON 数据,请务必保证此节点数据对象 是 zTree 内部的数据对象
   * @param  checkTypeFlag [description]
   */
		updateNode: function (node, checkTypeFlag) {
			if (!node) return;
			var nObj = this.$(node);
			if (nObj.get(0) && this._uCanDo()) {
				this._setNodeName(node);
				this._setNodeTarget(node);
				this._setNodeUrl(node);
				this._setNodeLineIcos(node);
				this._setNodeFontCss(node);
			}
		},

		/**
   * @method reloadData 刷新数据源
   * @param {Array} data 需要增加的节点数据 JSON 对象集合
   * @return {Array} 返回Tree最终的节点数据集合
   */
		reloadData: function (data) {
			var nodes = this.getNodes();
			while (nodes.length) {
				this.removeNode(nodes[0]);
			}

			return this.addNodes(null, data);
		}
	});
})();

/**
 * 树的数据存储相关方法
 * Created by wxh on 2016-1-19.
 */
!(function () {

	'use strict';
	$.extend($.ui.tree.prototype, {
		/**
   * 初始化tree root信息
   * @private
   */
		_initRoot: function () {
			var r = this._getRoot();
			r[this.options.data.key.children] = [];
			r.expandTriggerFlag = false;
			r.curSelectedList = [];
			r.noSelection = true;
			r.createdNodes = [];
			r.zId = 0;
			r._ver = new Date().getTime();
			r.radioCheckedList = [];
		},

		/**
   * 返回tree root信息
   * @returns {{}}
   * @private
   */
		_getRoot: function () {
			if (!this.root) {
				this.root = [];
			}
			return this.root;
		},

		_getInit: function () {
			if (!this.init) {
				this.init = {
					beforeA: [],
					nodes: []
				};
			}
			return this.init;
		},

		/**
   * 初始化cache
   * @private
   */
		_initCache: function () {
			this.cache = {};
			this.cache.nodes = [];
			this.cache.doms = [];
		},

		_getCache: function () {
			return this.cache;
		},

		///**
		// * 初始化_init
		// * @private
		// */
		//_initInit: function() {
		//	this._init = {
		//		beforeA: [],
		//		nodes: [this._initNodeBase]
		//	}
		//},
		/**
   * 初始化节点
   * @param level 层次
   * @param node 节点
   * @param parentNode 父节点
   * @param isFirstNode 是否第一个节点
   * @param isLastNode 旧否最后一个节点
   * @param openFlag 是否打开
   * @private
   */
		_initNode: function (level, node, parentNode, isFirstNode, isLastNode, openFlag) {
			var init = this._getInit();
			for (var i = 0, j = init.nodes.length; i < j; i++) {
				init.nodes[i].apply(this, arguments);
			}
		},
		/**
   * 用于扩展使用 如check  exedit
   * @param initNode
   * @private
   */
		_addInitNode: function (initNode) {
			this._getInit().nodes.push(initNode);
		},
		/**
   * 初始化节点
   * @param level 层次
   * @param node 节点
   * @param parentNode 父节点
   * @param isFirstNode 是否第一个节点
   * @param isLastNode 旧否最后一个节点
   * @param openFlag 是否打开
   * @private
   */
		_initNodeBase: function (level, node, parentNode, isFirstNode, isLastNode, openFlag) {
			var _this = this;

			if (!node) return;
			var r = this._getRoot(),
			    childKey = this.options.data.key.children;
			node.level = level;
			node.tId = this.options.treeId + "_" + ++r.zId;
			node.parentTId = parentNode ? parentNode.tId : null;
			node.open = typeof node.open == "string" ? $.tree.eqs(node.open, "true") : !!node.open;
			if (node[childKey] && node[childKey].length > 0) {
				node.isParent = true;
				node.zAsync = true;
			} else {
				node.isParent = typeof node.isParent == "string" ? $.tree.eqs(node.isParent, "true") : !!node.isParent;
				node.open = node.isParent && !this.options.async.enable ? node.open : false;
				node.zAsync = !node.isParent;
			}
			node.isFirstNode = isFirstNode;
			node.isLastNode = isLastNode;
			node.getParentNode = function () {
				return _this._getNodeCache(node.parentTId);
			};
			node.getPreNode = function () {
				return _this._getPreNode(node);
			};
			node.getNextNode = function () {
				return _this._getNextNode(node);
			};
			node.isAjaxing = false;
			this._fixPIdKeyValue(node);
		},
		/**
   * 修正pIdKey
   * @param node
   * @private
   */
		_fixPIdKeyValue: function (node) {
			if (this.options.data.simpleData.enable) {
				node[this.options.data.simpleData.pIdKey] = node.parentTId ? node.getParentNode()[this.options.data.simpleData.idKey] : this.options.data.simpleData.rootPId;
			}
		},

		_addBeforeA: function (beforeA) {
			this._getInit().beforeA.push(beforeA);
		},

		/**
   *
   * @param node
   * @param array
   * @private
   */
		_getBeforeA: function (node, array) {
			var init = this._getInit();
			for (var i = 0, j = init.beforeA.length; i < j; i++) {
				init.beforeA[i].apply(this, arguments);
			}
		},
		/**
   * 根据tId获取caches
   * @param tId
   * @returns {*}
   * @private
   */
		_getNodeCache: function (tId) {
			if (!tId) return null;
			var n = this.cache.nodes[this._getNodeCacheId(tId)];
			return n ? n : null;
		},
		/**
   * 根据tId获取caches id
   * @param tId
   * @returns {string}
   * @private
   */
		_getNodeCacheId: function (tId) {
			return tId.substring(tId.lastIndexOf("_") + 1);
		},
		/**
   * 获取前一节点
   * @param node
   * @returns {null}
   * @private
   */
		_getPreNode: function (node) {
			if (!node) return null;
			var childKey = this.options.data.key.children,
			    p = node.parentTId ? node.getParentNode() : this._getRoot();
			for (var i = 0, l = p[childKey].length; i < l; i++) {
				if (p[childKey][i] === node) {
					return i == 0 ? null : p[childKey][i - 1];
				}
			}
			return null;
		},

		/**
   * 获取后一节点
   * @param node
   * @returns {null}
   * @private
   */
		_getNextNode: function (node) {
			if (!node) return null;
			var childKey = this.options.data.key.children,
			    p = node.parentTId ? node.getParentNode() : this._getRoot();
			for (var i = 0, l = p[childKey].length - 1; i <= l; i++) {
				if (p[childKey][i] === node) {
					return i == l ? null : p[childKey][i + 1];
				}
			}
			return null;
		},
		/**
   * 加入到cache中
   * @param node
   * @private
   */
		_addNodeCache: function (node) {
			this.cache.nodes[this._getNodeCacheId(node.tId)] = node;
		},

		/**
   * 获取Node标题
   * @param node
   * @returns {string}
   * @private
   */
		_getNodeTitle: function (node) {
			var t = this.options.data.key.title === "" ? this.options.data.key.name : this.options.data.key.title;
			return "" + node[t];
		},
		/**
   * 获取节点名称
   * @param node
   * @returns {string}
   * @private
   */
		_getNodeName: function (node) {
			var nameKey = this.options.data.key.name;
			return "" + node[nameKey];
		},

		/**
   * 将创建的节点放入root.createdNodes
   * @param node
   * @private
   */
		_addCreatedNode: function (node) {
			var p = this.options;
			if (!!p.callback.onNodeCreated || !!p.view.addDiyDom) {
				var root = this._getRoot();
				root.createdNodes.push(node);
			}
		},

		/**
   * 将简单 Array 格式数据转换为 zTree 使用的标准 JSON 嵌套数据格式。
   * @param sNodes
   * @returns {*}
   * @private
   */
		_transformTozTreeFormat: function (sNodes) {
			var p = this.options;
			var i,
			    l,
			    key = p.data.simpleData.idKey,
			    parentKey = p.data.simpleData.pIdKey,
			    childKey = p.data.key.children;
			if (!key || key == "" || !sNodes) return [];

			if (fish.isArray(sNodes)) {
				var r = [];
				var tmpMap = [];
				for (i = 0, l = sNodes.length; i < l; i++) {
					tmpMap[sNodes[i][key]] = sNodes[i];
				}
				for (i = 0, l = sNodes.length; i < l; i++) {
					if (tmpMap[sNodes[i][parentKey]] && sNodes[i][key] != sNodes[i][parentKey]) {
						if (!tmpMap[sNodes[i][parentKey]][childKey]) tmpMap[sNodes[i][parentKey]][childKey] = [];
						tmpMap[sNodes[i][parentKey]][childKey].push(sNodes[i]);
					} else {
						r.push(sNodes[i]);
					}
				}
				return r;
			} else {
				return [sNodes];
			}
		},
		/**
   * 将 tree使用的标准 JSON 嵌套格式的数据转换为简单 Array 格式。(免去用户自行编写递归遍历全部节点的麻烦)
   * @param nodes
   * @returns {Array}
   */
		_transformToArrayFormat: function (nodes) {
			if (!nodes) return [];
			var childKey = this.p.data.key.children,
			    r = [];
			if (fish.isArray(nodes)) {
				for (var i = 0, l = nodes.length; i < l; i++) {
					r.push(nodes[i]);
					if (nodes[i][childKey]) r = r.concat(this._transformToArrayFormat(nodes[i][childKey]));
				}
			} else {
				r.push(nodes);
				if (nodes[childKey]) r = r.concat(this._transformToArrayFormat(nodes[childKey]));
			}
			return r;
		},

		_addNodesData: function (parentNode, nodes) {
			var childKey = this.options.data.key.children;
			if (!parentNode[childKey]) parentNode[childKey] = [];
			if (parentNode[childKey].length > 0) {
				parentNode[childKey][parentNode[childKey].length - 1].isLastNode = false;
				this._setNodeLineIcos(parentNode[childKey][parentNode[childKey].length - 1]);
			}
			parentNode.isParent = true;
			parentNode[childKey] = parentNode[childKey].concat(nodes);
		},

		/**
   * 删除选中的节点
   * @param node
   * @private
   */
		_removeSelectedNode: function (node) {
			var root = this._getRoot();
			for (var i = 0, j = root.curSelectedList.length; i < j; i++) {
				if (node === root.curSelectedList[i] || !this._getNodeCache(root.curSelectedList[i].tId)) {
					root.curSelectedList.splice(i, 1);
					i--;
					j--;
				}
			}
		},

		/**
   * 增加选中的节点
   * @param node
   * @private
   */
		_addSelectedNode: function (node) {
			var root = this._getRoot();
			if (!this._isSelectedNode(node)) {
				root.curSelectedList.push(node);
			}
		},

		/**
   * 判断传入的节点当前是否被选中
   * @param node
   * @returns {boolean}
   * @private
   */
		_isSelectedNode: function (node) {
			var root = this._getRoot();
			for (var i = 0, j = root.curSelectedList.length; i < j; i++) {
				if (node === root.curSelectedList[i]) return true;
			}
			return false;
		},

		/**
   * 获取 zTree 的全部节点数据
   * @returns {*}
   * @private
   */
		_getNodes: function () {
			return this._getRoot()[this.options.data.key.children];
		},

		/**
   * 根据节点数据的属性搜索，获取条件完全匹配的节点数据 JSON 对象
   * @param nodes
   * @param key
   * @param value
   * @returns {*}
   * @private
   */
		_getNodeByParam: function (nodes, key, value) {
			if (!nodes || !key) return null;
			var childKey = this.options.data.key.children;
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (nodes[i][key] == value) {
					return nodes[i];
				}
				var tmp = this._getNodeByParam(nodes[i][childKey], key, value);
				if (tmp) return tmp;
			}
			return null;
		},

		/**
   * 根据节点数据的属性搜索
   * @param nodes
   * @param key
   * @param value
   * @returns {Array}
   * @private
   */
		_getNodesByParam: function (nodes, key, value) {
			if (!nodes || !key) return [];
			var childKey = this.options.data.key.children,
			    result = [];
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (nodes[i][key] == value) {
					result.push(nodes[i]);
				}
				result = result.concat(this._getNodesByParam(nodes[i][childKey], key, value));
			}
			return result;
		},
		/**
   * 根据节点数据的属性搜索，获取条件模糊匹配的节点数据 JSON 对象集合
   * @param nodes
   * @param key
   * @param value
   * @returns {Array}
   */
		_getNodesByParamFuzzy: function (nodes, key, value) {
			if (!nodes || !key) return [];
			var childKey = this.options.data.key.children,
			    result = [];
			value = value.toLowerCase();
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (typeof nodes[i][key] == "string" && nodes[i][key].toLowerCase().indexOf(value) > -1) {
					result.push(nodes[i]);
				}
				result = result.concat(this._getNodesByParamFuzzy(nodes[i][childKey], key, value));
			}
			return result;
		},

		/**
   * 根据自定义规则搜索节点数据 JSON 对象集合 或 单个节点数据
   * @param nodes
   * @param filter
   * @param isSingle true 表示只查找单个节点,false表示查找节点集合
   * @param invokeParam
   * @returns {*}
   * @private
   */
		_getNodesByFilter: function (nodes, filter, isSingle, invokeParam) {
			if (!nodes) return isSingle ? null : [];
			var childKey = this.options.data.key.children,
			    result = isSingle ? null : [];
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (this._apply(filter, [nodes[i], invokeParam], false)) {
					if (isSingle) {
						return nodes[i];
					}
					result.push(nodes[i]);
				}
				var tmpResult = this._getNodesByFilter(nodes[i][childKey], filter, isSingle, invokeParam);
				if (isSingle && !!tmpResult) {
					return tmpResult;
				}
				result = isSingle ? tmpResult : result.concat(tmpResult);
			}
			return result;
		},

		/**
   * 从缓存中删除节点
   * @param node
   * @private
   */
		_removeNodeCache: function (node) {
			var childKey = this.options.data.key.children;
			if (node[childKey]) {
				for (var i = 0, l = node[childKey].length; i < l; i++) {
					this._removeNodeCache(node[childKey][i]);
				}
			}
			this._getCache().nodes[this._getNodeCacheId(node.tId)] = null;
		}
	});
})();

/**
 * 树的视图类 相关dom操作都在这里
 * Created by wxh on 2016-1-19.
 */
!(function () {

	'use strict';

	$.extend($.ui.tree.prototype, {
		/**
   * 创建节点
   * @param level 层次
   * @param nodes 节点
   * @param parentNode 父节点
   * @private
   */
		_createNodes: function (level, nodes, parentNode) {
			if (!nodes || nodes.length == 0) return;
			var root = this._getRoot(),
			    childKey = this.options.data.key.children,
			    openFlag = !parentNode || parentNode.open || !!this.$(parentNode[childKey][0]).get(0);
			root.createdNodes = [];
			var zTreeHtml = this._appendNodes(level, nodes, parentNode, true, openFlag);
			if (!parentNode) {
				//兼容 div ul 两种写法
				var nodeName = this.element[0].nodeName.toLowerCase();
				if (nodeName === "ul") {
					this.element.addClass("ztree").append(zTreeHtml.join(''));
				} else {
					this.element.append($('<ul class="ztree"></ul>').append(zTreeHtml.join('')));
				}
			} else {
				var ulObj = this.$(parentNode, this.consts.id.UL);
				if (ulObj.get(0)) {
					ulObj.append(zTreeHtml.join(''));
				}
			}
			this._createNodeCallback();
		},
		/**
   * 生成节点的HTML
   * @param level 层次
   * @param nodes 节点
   * @param parentNode 父节点
   * @param initFlag 是否初始化
   * @param openFlag 是否打开
   * @returns {Array}
   * @private
   */
		_appendNodes: function (level, nodes, parentNode, initFlag, openFlag) {
			if (!nodes) return [];
			var html = [],
			    childKey = this.options.data.key.children;
			for (var i = 0, l = nodes.length; i < l; i++) {
				var node = nodes[i];
				if (initFlag) {
					var tmpPNode = parentNode ? parentNode : this._getRoot(),
					    tmpPChild = tmpPNode[childKey],
					    isFirstNode = tmpPChild.length == nodes.length && i == 0,
					    isLastNode = i == nodes.length - 1;
					this._initNode(level, node, parentNode, isFirstNode, isLastNode, openFlag);
					this._addNodeCache(node);
				}

				var childHtml = [];
				if (node[childKey] && node[childKey].length > 0) {
					//make child html first, because checkType
					childHtml = this._appendNodes(level + 1, node[childKey], node, initFlag, openFlag && node.open);
				}
				if (openFlag) {

					//this._makeDOMNodeMainBefore(html, setting, node); 没用
					html.push("<li id='" + node.tId + "' class='" + (this.consts.className.LEVEL + node.level) + "' tabindex='0' hidefocus='true' treenode>");
					//this._makeDOMNodeLine(html, setting, node); 没用
					html.push("<span id='" + (node.tId + this.consts.id.SWITCH) + "' title='' class='" + this._makeNodeLineClass(node) + "' " + ('treeNode' + this.consts.id.SWITCH) + "></span>");

					this._getBeforeA(node, html);
					this._makeDOMNodeNameBefore(html, node);
					//this._getInnerBeforeA(setting, node, html); 没用
					this._makeDOMNodeIcon(html, node);
					//data.getInnerAfterA(setting, node, html);没用
					//view.makeDOMNodeNameAfter(html, setting, node);
					html.push("</a>"); // makeDOMNodeNameAfter
					//data.getAfterA(setting, node, html);;没用
					if (node.isParent && node.open) {
						this._makeUlHtml(node, html, childHtml.join(''));
					}
					html.push("</li>");
					this._addCreatedNode(node);
				}
			}
			return html;
		},
		/**
   * 创建完节点的回调
   */
		_createNodeCallback: function () {
			var p = this.options;

			var root = this._getRoot();
			while (root.createdNodes.length > 0) {
				var node = root.createdNodes.shift();
				if (!!p.view.addDiyDom) {
					this._apply(p.view.addDiyDom, [node]);
				}
				if (!!p.callback.onNodeCreated) {
					this._trigger(this.consts.event.NODECREATED, null, node);
				}
			}
		},

		_makeDOMNodeMainBefore: function (html, node) {
			//html.push("<li id='", node.tId, "' class='", consts.className.LEVEL, node.level,"' tabindex='0' hidefocus='true' treenode>");
			html.push("<li id='" + node.tId + "' class='" + (consts.className.LEVEL + node.level) + "' tabindex='0' hidefocus='true' treenode>");
		},

		_makeDOMNodeLine: function (html, node) {
			//html.push("<span id='", node.tId, consts.id.SWITCH,	"' title='' class='", this._makeNodeLineClass( node), "' treeNode", consts.id.SWITCH,"></span>");
			html.push("<span id='" + (node.tId + consts.id.SWITCH) + "' title='' class='" + this._makeNodeLineClass(node) + "' " + (treeNode + consts.id.SWITCH) + "></span>");
		},

		_makeNodeLineClass: function (node) {
			var lineClass = [];
			if (this.options.view.showLine) {
				if (node.level == 0 && node.isFirstNode && node.isLastNode) {
					lineClass.push(this.consts.line.ROOT);
				} else if (node.level == 0 && node.isFirstNode) {
					lineClass.push(this.consts.line.ROOTS);
				} else if (node.isLastNode) {
					lineClass.push(this.consts.line.BOTTOM);
				} else {
					lineClass.push(this.consts.line.CENTER);
				}
			} else {
				lineClass.push(this.consts.line.NOLINE);
			}
			if (node.isParent) {
				lineClass.push(node.open ? this.consts.folder.OPEN : this.consts.folder.CLOSE);
			} else {
				lineClass.push(this.consts.folder.DOCU);
			}
			return this._makeNodeLineClassEx(node) + lineClass.join('_');
		},

		_makeNodeLineClassEx: function (node) {
			return this.consts.className.BUTTON + " " + this.consts.className.LEVEL + node.level + " " + this.consts.className.SWITCH + " ";
		},

		/**
   * 生成 <a id='treeDemo_2_a' class='level1' treeNode_a onclick="" target='_blank' style='' title='父节点11 - 折叠'>
   * @param html
   * @param node
   * @private
   */
		_makeDOMNodeNameBefore: function (html, node) {
			var title = this._getNodeTitle(node),
			    url = this._makeNodeUrl(node),
			    fontcss = this._makeNodeFontCss(node),
			    p = this.options,
			    fontStyle = [];
			for (var f in fontcss) {
				fontStyle.push(f, ":", fontcss[f], ";");
			}
			html.push("<a id='", node.tId, this.consts.id.A, "' class='", this.consts.className.LEVEL, node.level, "' treeNode", this.consts.id.A, " onclick=\"", node.click || '', "\" ", url != null && url.length > 0 ? "href='" + url + "'" : "", " target='", this._makeNodeTarget(node), "' style='", fontStyle.join(''), "'");
			if (this._apply(p.view.showTitle, [node], p.view.showTitle) && title) {
				html.push("title='", title.replace(/'/g, "&#39;").replace(/</g, '&lt;').replace(/>/g, '&gt;'), "'");
			}
			html.push(">");
		},

		/**
   * 获取node url
   * @param node
   * @returns {*}
   * @private
   */
		_makeNodeUrl: function (node) {
			var urlKey = this.options.data.key.url;
			return node[urlKey] ? node[urlKey] : null;
		},

		/**
   * 获取node css
   * @param node
   * @returns {*}
   * @private
   */
		_makeNodeFontCss: function (node) {
			var p = this.options;
			var fontCss = this._apply(p.view.fontCss, [node], p.view.fontCss);
			return fontCss && typeof fontCss != "function" ? fontCss : {};
		},

		/**
   * 生成target
   * @param node
   * @returns {*|string}
   * @private
   */
		_makeNodeTarget: function (node) {
			return node.target || "_blank";
		},
		/**
   * 生成图标 类似  <span id='treeDemo_1_ico' title='' treeNode_ico class='button ico_open' style=''></span><span id='treeDemo_1_span'>父节点1 - 展开</span>
   * @param html
   * @param node
   * @private
   */
		_makeDOMNodeIcon: function (html, node) {
			var nameStr = this._getNodeName(node),
			    name = this.options.view.nameIsHTML ? nameStr : nameStr.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
			html.push("<span id='", node.tId, this.consts.id.ICON, "' title='' treeNode", this.consts.id.ICON, " class='", this._makeNodeIcoClass(node), "' style='", this._makeNodeIcoStyle(node), "'></span><span id='", node.tId, this.consts.id.SPAN, "'>", name, "</span>");
		},

		/**
   * 设置treeDemo_1_ico 的class属性
   * @param node
   * @returns {string}
   * @private
   */
		_makeNodeIcoClass: function (node) {
			if (this.p.data.key.iconFontEnable) {
				var iconSkin = node.isParent && node.iconSkinOpen && node.iconSkinClose ? node.open ? node.iconSkinOpen : node.iconSkinClose : node.iconSkin;
				return this.consts.className.BUTTON + " " + iconSkin;
			} else {
				var icoCss = ["ico"];
				if (!node.isAjaxing) {
					icoCss[0] = (node.iconSkin ? node.iconSkin + "_" : "") + icoCss[0];
					if (node.isParent) {
						icoCss.push(node.open ? this.consts.folder.OPEN : this.consts.folder.CLOSE);
					} else {
						icoCss.push(this.consts.folder.DOCU);
					}
				}
				return this.consts.className.BUTTON + " " + icoCss.join('_');
			}
		},
		/**
   * 设置treeDemo_1_ico 的style属性
   * @param node
   * @returns {string}
   * @private
   */
		_makeNodeIcoStyle: function (node) {
			var p = this.options,
			    icoStyle = [];
			if (!node.isAjaxing) {
				var icon = node.isParent && node.iconOpen && node.iconClose ? node.open ? node.iconOpen : node.iconClose : node[this.p.data.key.icon];
				if (icon) icoStyle.push("background:url(", icon, ") 0 0 no-repeat;");
				if (p.view.showIcon == false || !this._apply(p.view.showIcon, [node], true)) {
					icoStyle.push("width:0px;height:0px;");
				}
			}
			return icoStyle.join('');
		},
		/**
   * 生成ul  <ul id='treeDemo_1_ul' class='level0 line' style='display:block'> </ur>
   * @param node
   * @param html
   * @param content
   * @private
   */
		_makeUlHtml: function (node, html, content) {
			html.push("<ul id='", node.tId, this.consts.id.UL, "' class='", this.consts.className.LEVEL, node.level, " ", this._makeUlLineClass(node), "' style='display:", node.open ? "block" : "none", "'>");
			html.push(content);
			html.push("</ul>");
		},

		_makeUlLineClass: function (node) {
			return this.options.view.showLine && !node.isLastNode ? this.consts.line.LINE : "";
		},

		/**
   * 添加节点
   * @param parentNode 指定的父节点
   * @param newNodes 需要增加的节点数据
   * @param isSilent 设定增加节点后是否自动展开父节点
   * @private
   */
		_addNodes: function (parentNode, newNodes, isSilent) {
			if (this.options.data.keep.leaf && parentNode && !parentNode.isParent) {
				return;
			}
			if (!fish.isArray(newNodes)) {
				newNodes = [newNodes];
			}
			if (this.options.data.simpleData.enable) {
				newNodes = this._transformTozTreeFormat(newNodes);
			}
			if (parentNode) {
				var target_switchObj = this.$(parentNode, this.consts.id.SWITCH),
				    target_icoObj = this.$(parentNode, this.consts.id.ICON),
				    target_ulObj = this.$(parentNode, this.consts.id.UL);

				if (!parentNode.open) {
					this._replaceSwitchClass(parentNode, target_switchObj, this.consts.folder.CLOSE);
					this._replaceIcoClass(parentNode, target_icoObj, this.consts.folder.CLOSE);
					parentNode.open = false;
					target_ulObj.css({
						"display": "none"
					});
				}

				this._addNodesData(parentNode, newNodes);
				this._createNodes(parentNode.level + 1, newNodes, parentNode);
				if (!isSilent) {
					this._expandCollapseParentNode(parentNode, true);
				}
			} else {
				this._addNodesData(this._getRoot(), newNodes);
				this._createNodes(0, newNodes, null);
			}
		},

		_asyncNode: function (node, isSilent, callback) {
			var _this = this;

			var i, l;
			if (node && !node.isParent) {
				this._apply(callback);
				return false;
			} else if (node && node.isAjaxing) {
				return false;
			} else if (this._apply(this.p.callback.beforeAsync, [null, node], true) == false) {
				this._apply(callback);
				return false;
			}
			if (node) {
				node.isAjaxing = true;
				var icoObj = this.$(node, this.consts.id.ICON);
				icoObj.attr({ "style": "", "class": this.consts.className.BUTTON + " " + this.consts.className.ICO_LOADING });
			}

			var tmpParam = {};
			for (i = 0, l = this.p.async.autoParam.length; node && i < l; i++) {
				var pKey = this.p.async.autoParam[i].split("="),
				    spKey = pKey;
				if (pKey.length > 1) {
					spKey = pKey[1];
					pKey = pKey[0];
				}
				tmpParam[spKey] = node[pKey];
			}
			if (fish.isArray(this.p.async.otherParam)) {
				for (i = 0, l = this.p.async.otherParam.length; i < l; i += 2) {
					tmpParam[this.p.async.otherParam[i]] = this.p.async.otherParam[i + 1];
				}
			} else {
				for (var p in this.p.async.otherParam) {
					tmpParam[p] = this.p.async.otherParam[p];
				}
			}

			var _tmpV = this._getRoot()._ver;
			$.ajax({
				contentType: this.p.async.contentType,
				type: this.p.async.type,
				url: this._apply(this.p.async.url, [node], this.p.async.url),
				data: tmpParam,
				dataType: this.p.async.dataType,
				success: function (msg) {
					if (_tmpV != _this._getRoot()._ver) {
						return;
					}
					var newNodes = [];
					try {
						if (!msg || msg.length == 0) {
							newNodes = [];
						} else if (typeof msg == "string") {
							newNodes = eval("(" + msg + ")");
						} else {
							newNodes = msg;
						}
					} catch (err) {
						newNodes = msg;
					}

					if (node) {
						node.isAjaxing = null;
						node.zAsync = true;
					}
					_this._setNodeLineIcos(node);
					if (newNodes && newNodes !== "") {
						newNodes = _this._apply(_this.p.async.dataFilter, [node, newNodes], newNodes);
						_this._addNodes(node, !!newNodes ? $.tree.clone(newNodes) : [], !!isSilent);
					} else {
						_this._addNodes(node, [], !!isSilent);
					}
					_this._trigger(_this.consts.event.ASYNC_SUCCESS, [node, msg]);
					_this._apply(callback);
				},
				error: function (XMLHttpRequest, textStatus, errorThrown) {
					if (_tmpV != _this._getRoot()._ver) {
						return;
					}
					if (node) node.isAjaxing = null;
					_this._setNodeLineIcos(node);
					_this._trigger(_this.consts.event.ASYNC_ERROR, [node, XMLHttpRequest, textStatus, errorThrown]);
				}
			});
			return true;
		},

		/**
   * 切换 切换 class
   * @param node
   * @param obj
   * @param newName
   * @private
   */
		_replaceSwitchClass: function (node, obj, newName) {
			if (!obj) return;
			var tmpName = obj.attr("class");
			if (tmpName == undefined) return;
			var tmpList = tmpName.split("_");
			switch (newName) {
				case this.consts.line.ROOT:
				case this.consts.line.ROOTS:
				case this.consts.line.CENTER:
				case this.consts.line.BOTTOM:
				case this.consts.line.NOLINE:
					tmpList[0] = this._makeNodeLineClassEx(node) + newName;
					break;
				case this.consts.folder.OPEN:
				case this.consts.folder.CLOSE:
				case this.consts.folder.DOCU:
					tmpList[1] = newName;
					break;
			}
			obj.attr("class", tmpList.join("_"));
			if (newName !== this.consts.folder.DOCU) {
				obj.removeAttr("disabled");
			} else {
				obj.attr("disabled", "disabled");
			}
		},

		/**
   * 替换 图标class
   * @param node
   * @param obj
   * @param newName
   * @private
   */
		_replaceIcoClass: function (node, obj, newName) {
			if (!obj || node.isAjaxing) return;

			if (this.p.data.key.iconFontEnable) {
				var iconObj = {};
				iconObj[this.consts.folder.OPEN] = node.iconSkinOpen;
				iconObj[this.consts.folder.CLOSE] = node.iconSkinClose;
				var iconSkin = _.result(iconObj, newName, node.iconSkin);
				obj.attr("class", this.consts.className.BUTTON + " " + iconSkin);
			} else {
				var tmpName = obj.attr("class");
				if (tmpName == undefined) return;
				var tmpList = tmpName.split("_");
				tmpList[tmpList.length - 1] = newName;
				obj.attr("class", tmpList.join("_"));
			}
		},

		/**
   * 修改节点的线图标
   * @param node
   * @private
   */
		_setNodeLineIcos: function (node) {
			if (!node) return;
			var switchObj = this.$(node, this.consts.id.SWITCH),
			    ulObj = this.$(node, this.consts.id.UL),
			    icoObj = this.$(node, this.consts.id.ICON),
			    ulLine = this._makeUlLineClass(node);
			if (ulLine.length == 0) {
				ulObj.removeClass(this.consts.line.LINE);
			} else {
				ulObj.addClass(ulLine);
			}
			switchObj.attr("class", this._makeNodeLineClass(node));
			if (node.isParent) {
				switchObj.removeAttr("disabled");
			} else {
				switchObj.attr("disabled", "disabled");
			}
			icoObj.removeAttr("style");
			icoObj.attr("style", this._makeNodeIcoStyle(node));
			icoObj.attr("class", this._makeNodeIcoClass(node));
		},

		/**
   *  展开 / 折叠 父节点
   * @param node 节点
   * @param expandFlag true 表示 展开  false 表示 折叠
   * @param animateFlag 是否动画
   * @param callback 回调
   * @private
   */
		_expandCollapseParentNode: function (node, expandFlag, animateFlag, callback) {
			if (!node) return;
			if (!node.parentTId) {
				this._expandCollapseNode(node, expandFlag, animateFlag, callback);
				return;
			} else {
				this._expandCollapseNode(node, expandFlag, animateFlag);
			}
			if (node.parentTId) {
				this._expandCollapseParentNode(node.getParentNode(), expandFlag, animateFlag, callback);
			}
		},
		/**
   * 展开折叠节点
   * @param node
   * @param expandFlag
   * @param animateFlag
   * @param callback
   * @private
   */
		_expandCollapseNode: function (node, expandFlag, animateFlag, callback) {
			var _this2 = this;

			var root = this._getRoot(),
			    p = this.options,
			    childKey = this.options.data.key.children;
			if (!node) {
				this._apply(callback, []);
				return;
			}
			if (root.expandTriggerFlag) {
				var _callback = callback;
				callback = function () {
					if (_callback) _callback();
					if (node.open) {
						_this2._trigger(_this2.consts.event.EXPAND, null, node);
					} else {
						_this2._trigger(_this2.consts.event.COLLAPSE, null, node);
					}
				};
				root.expandTriggerFlag = false;
			}
			if (!node.open && node.isParent && (!this.$(node, this.consts.id.UL).get(0) || node[childKey] && node[childKey].length > 0 && !this.$(node[childKey][0]).get(0))) {
				this._appendParentULDom(node);
				this._createNodeCallback();
			}
			if (node.open == expandFlag) {
				this._apply(callback, []);
				return;
			}
			var ulObj = this.$(node, this.consts.id.UL),
			    switchObj = this.$(node, this.consts.id.SWITCH),
			    icoObj = this.$(node, this.consts.id.ICON);

			if (node.isParent) {
				node.open = !node.open;
				if (node.iconOpen && node.iconClose) {
					icoObj.attr("style", this._makeNodeIcoStyle(node));
				}

				if (node.open) {
					this._replaceSwitchClass(node, switchObj, this.consts.folder.OPEN);
					this._replaceIcoClass(node, icoObj, this.consts.folder.OPEN);
					if (animateFlag == false || p.view.expandSpeed == "") {
						ulObj.show();
						this._apply(callback, []);
					} else {
						if (node[childKey] && node[childKey].length > 0) {
							ulObj.slideDown(p.view.expandSpeed, callback);
						} else {
							ulObj.show();
							this._apply(callback, []);
						}
					}
				} else {
					this._replaceSwitchClass(node, switchObj, this.consts.folder.CLOSE);
					this._replaceIcoClass(node, icoObj, this.consts.folder.CLOSE);
					if (animateFlag == false || p.view.expandSpeed == "" || !(node[childKey] && node[childKey].length > 0)) {
						ulObj.hide();
						this._apply(callback, []);
					} else {
						ulObj.slideUp(p.view.expandSpeed, callback);
					}
				}
			} else {
				this._apply(callback, []);
			}
		},

		_appendParentULDom: function (node) {
			var html = [],
			    nObj = this.$(node); //nObj = $$(node, setting);
			if (!nObj.get(0) && !!node.parentTId) {
				this._appendParentULDom(node.getParentNode());
				nObj = this.$(node);
			}
			var ulObj = this.$(node, this.consts.id.UL);
			if (ulObj.get(0)) {
				ulObj.remove();
			}
			var childKey = this.options.data.key.children,
			    childHtml = this._appendNodes(node.level + 1, node[childKey], node, false, true);
			this._makeUlHtml(node, html, childHtml.join(''));
			nObj.append(html.join(''));
		},
		/**
   * 展开或者折叠节点
   * @param node
   * @private
   */
		_switchNode: function (node) {
			var p = this.options;
			if (node.open || !this._canAsync(node)) {
				this._expandCollapseNode(node, !node.open);
			} else if (p.async.enable) {
				if (!this._asyncNode(node)) {
					this._expandCollapseNode(node, !node.open);
					return;
				}
			} else if (node) {
				this._expandCollapseNode(node, !node.open);
			}
		},
		/**
   * 取消节点的选中
   * @param node
   * @private
   */
		_cancelPreSelectedNode: function (node) {
			var list = this._getRoot().curSelectedList;
			for (var i = 0, j = list.length - 1; j >= i; j--) {
				if (!node || node === list[j]) {
					this.$(list[j], this.consts.id.A).removeClass(this.consts.node.CURSELECTED);
					if (node) {
						this._removeSelectedNode(node);
						break;
					}
				}
			}
			if (!node) this._getRoot().curSelectedList = [];
		},
		/**
   * 选中节点
   * @param node
   * @param addFlag
   * @private
   */
		_selectNode: function (node, addFlag) {
			if (!addFlag) {
				this._cancelPreSelectedNode();
			}
			this.$(node, this.consts.id.A).addClass(this.consts.node.CURSELECTED);
			this._addSelectedNode(node);
		},

		/**
   * 展开 / 折叠 节点
   * @param node 节点
   * @param expandFlag true 表示 展开  false 表示 折叠
   * @param animateFlag 是否动画
   * @param callback 回调
   */
		_expandCollapseSonNode: function (node, expandFlag, animateFlag, callback) {
			var root = this._getRoot(),
			    childKey = this.options.data.key.children,
			    treeNodes = node ? node[childKey] : root[childKey],
			    selfAnimateSign = node ? false : animateFlag,
			    expandTriggerFlag = this._getRoot().expandTriggerFlag;
			this._getRoot().expandTriggerFlag = false;
			if (treeNodes) {
				for (var i = 0, l = treeNodes.length; i < l; i++) {
					if (treeNodes[i]) this._expandCollapseSonNode(treeNodes[i], expandFlag, selfAnimateSign);
				}
			}
			this._getRoot().expandTriggerFlag = expandTriggerFlag;
			this._expandCollapseNode(node, expandFlag, animateFlag, callback);
		},

		/**
   * 清空某父节点的子节点。
   * @param node
   * @private
   */
		_removeChildNodes: function (node) {
			if (!node) return;
			var childKey = this.p.data.key.children,
			    nodes = node[childKey];
			if (!nodes) return;

			for (var i = 0, l = nodes.length; i < l; i++) {
				this._removeNodeCache(nodes[i]);
			}
			this._removeSelectedNode();
			delete node[childKey];

			if (!this.p.data.keep.parent) {
				node.isParent = false;
				node.open = false;
				var tmp_switchObj = this.$(node, this.consts.id.SWITCH),
				    tmp_icoObj = this.$(node, this.consts.id.ICON);
				this._replaceSwitchClass(node, tmp_switchObj, this.consts.folder.DOCU);
				this._replaceIcoClass(node, tmp_icoObj, this.consts.folder.DOCU);
				this.$(node, this.consts.id.UL).remove();
			} else {
				this.$(node, this.consts.id.UL).empty();
			}
		},

		/**
   * 修改节点名称
   * @param node
   * @private
   */
		_setNodeName: function (node) {
			var title = this._getNodeTitle(node),
			    nObj = this.$(node, this.consts.id.SPAN);
			nObj.empty();
			if (this.p.view.nameIsHTML) {
				nObj.html(this._getNodeName(node));
			} else {
				nObj.text(this._getNodeName(node));
			}
			if (this._apply(this.p.view.showTitle, [node], this.p.view.showTitle)) {
				var aObj = this.$(node, this.consts.id.A);
				aObj.attr("title", !title ? "" : title);
			}
		},

		/**
   * 修改节点target
   * @param node
   * @private
   */
		_setNodeTarget: function (node) {
			var aObj = this.$(node, this.consts.id.A);
			aObj.attr("target", this._makeNodeTarget(node));
		},

		/**
   * 修改节点url
   * @param node
   * @private
   */
		_setNodeUrl: function (node) {
			var aObj = this.$(node, this.consts.id.A),
			    url = this._makeNodeUrl(node);
			if (url == null || url.length == 0) {
				aObj.removeAttr("href");
			} else {
				aObj.attr("href", url);
			}
		},

		/**
   * 修改节点的font CSS
   * @param treeNode
   * @private
   */
		_setNodeFontCss: function (treeNode) {
			var aObj = this.$(treeNode, this.consts.id.A),
			    fontCss = this._makeNodeFontCss(treeNode);
			if (fontCss) {
				aObj.css(fontCss);
			}
		},

		/**
   * 删除节点,删除节点可以触发 beforeRemove / onRemove 事件回调函数
   * @param node
   * @private
   */
		_removeNode: function (node) {
			var root = this._getRoot(),
			    childKey = this.p.data.key.children,
			    parentNode = node.parentTId ? node.getParentNode() : root;

			node.isFirstNode = false;
			node.isLastNode = false;
			node.getPreNode = function () {
				return null;
			};
			node.getNextNode = function () {
				return null;
			};

			if (!this._getNodeCache(node.tId)) {
				return;
			}

			this.$(node).remove();
			this._removeNodeCache(node);
			this._removeSelectedNode(node);

			for (var i = 0, l = parentNode[childKey].length; i < l; i++) {
				if (parentNode[childKey][i].tId == node.tId) {
					parentNode[childKey].splice(i, 1);
					break;
				}
			}
			this._setFirstNode(parentNode);
			this._setLastNode(parentNode);

			var tmp_ulObj,
			    tmp_switchObj,
			    tmp_icoObj,
			    childLength = parentNode[childKey].length;

			//repair nodes old parent
			if (!this.p.data.keep.parent && childLength == 0) {
				//old parentNode has no child nodes
				parentNode.isParent = false;
				parentNode.open = false;
				tmp_ulObj = this.$(parentNode, this.consts.id.UL);
				tmp_switchObj = this.$(parentNode, this.consts.id.SWITCH);
				tmp_icoObj = this.$(parentNode, this.consts.id.ICON);
				this._replaceSwitchClass(parentNode, tmp_switchObj, this.consts.folder.DOCU);
				this._replaceIcoClass(parentNode, tmp_icoObj, this.consts.folder.DOCU);
				tmp_ulObj.css("display", "none");
			} else if (this.p.view.showLine && childLength > 0) {
				//old parentNode has child nodes
				var newLast = parentNode[childKey][childLength - 1];
				tmp_ulObj = this.$(newLast, this.consts.id.UL);
				tmp_switchObj = this.$(newLast, this.consts.id.SWITCH);
				tmp_icoObj = this.$(newLast, this.consts.id.ICON);
				if (parentNode == root) {
					if (parentNode[childKey].length == 1) {
						//node was root, and ztree has only one root after move node
						this._replaceSwitchClass(newLast, tmp_switchObj, this.consts.line.ROOT);
					} else {
						var tmp_first_switchObj = this.$(parentNode[childKey][0], this.consts.id.SWITCH);
						this._replaceSwitchClass(parentNode[childKey][0], tmp_first_switchObj, this.consts.line.ROOTS);
						this._replaceSwitchClass(newLast, tmp_switchObj, this.consts.line.BOTTOM);
					}
				} else {
					this._replaceSwitchClass(newLast, tmp_switchObj, this.consts.line.BOTTOM);
				}
				tmp_ulObj.removeClass(this.consts.line.LINE);
			}
		},

		/**
   * 设置首节点
   * @param parentNode
   * @private
   */
		_setFirstNode: function (parentNode) {
			var childKey = this.p.data.key.children,
			    childLength = parentNode[childKey].length;
			if (childLength > 0) {
				parentNode[childKey][0].isFirstNode = true;
			}
		},

		/**
   * 设置未节点
   * @param parentNode
   * @private
   */
		_setLastNode: function (parentNode) {
			var childKey = this.p.data.key.children,
			    childLength = parentNode[childKey].length;
			if (childLength > 0) {
				parentNode[childKey][childLength - 1].isLastNode = true;
			}
		}
	});
})();

/**
 * Tree事件相关处理
 * Created by wxh on 2016-1-19.
 */
!(function () {

	'use strict';
	$.extend($.ui.tree.prototype, {
		/**
   * 绑定事件
   * @private
   */
		_bindTree: function () {
			if (!this.options.view.txtSelectedEnable) {
				// for can't select text
				this.element.on('selectstart', function (e) {
					var node = e.originalEvent.srcElement.nodeName.toLowerCase();
					return node === "input" || node === "textarea";
				}).css({
					"-moz-user-select": "-moz-none"
				});
			}

			this._on({
				'click': '_onTreeClick',
				'dblclick': '_onTreeDblclick',
				'mousedown': '_onTreeMousedown',
				'mouseup': '_onTreeMouseup',
				'contextmenu': '_onZTreeContextmenu'
			});
		},
		/**
   * 处理click事件
   * @param event
   * @private
   */
		_onTreeClick: function (event) {
			var target = event.target,
			    nodeEventType = "",
			    tId = "",
			    node = null,
			    mainDom = null;
			//点击的是节点前面的+-
			if ($.tree.eqs(target.tagName, "span") && target.getAttribute("treeNode" + this.consts.id.SWITCH) !== null) {
				tId = $.tree.getNodeMainDom(target).id;
				nodeEventType = "switchNode";
			} else {
				mainDom = this._getMDom(target, [{ tagName: "a", attrName: "treeNode" + this.consts.id.A }]);
				if (mainDom) {
					tId = $.tree.getNodeMainDom(mainDom).id;
					nodeEventType = "clickNode";
				}
			}

			// event to node
			if (tId.length > 0) {
				node = this._getNodeCache(tId);
				switch (nodeEventType) {
					case "switchNode":
						if (node.isParent) {
							this._onSwitchNode(event, node);
						}
						break;
					case "clickNode":
						this._onClickNode(event, node);
						break;
				}
			}
		},
		/**
   * 处理双击事件
   * @param event
   * @private
   */
		_onTreeDblclick: function (event) {
			var target = event.target,
			    tId = "",
			    p = this.options,
			    node = null,
			    mainDom = null;
			mainDom = this._getMDom(target, [{ tagName: "a", attrName: "treeNode" + this.consts.id.A }]);
			if (mainDom) {
				tId = $.tree.getNodeMainDom(mainDom).id;
				if (tId.length > 0) {
					node = this._getNodeCache(tId);
					if (node.isParent) {
						if (this._apply(p.view.dblClickExpand, [event, node], p.view.dblClickExpand)) {
							this._onSwitchNode(event, node);
						}
					}
					if (this._trigger("beforeDblClick", event, node)) {
						this._trigger("onDblClick", event, node);
					}
				}
			}
		},
		/**
   * 处理鼠标按下事件
   * @param event
   * @returns {boolean}
   * @private
   */
		_onTreeMousedown: function (event) {
			var target = event.target,
			    tId = "",
			    node = null,
			    mainDom = null;
			mainDom = this._getMDom(target, [{ tagName: "a", attrName: "treeNode" + this.consts.id.A }]);
			if (mainDom) {
				tId = $.tree.getNodeMainDom(mainDom).id;
				node = this._getNodeCache(tId);
				if (this._trigger("beforeMouseDown", event, node)) {
					this._trigger("onMouseDown", event, node);
				}
				return true;
			}
		},
		/**
   * 处理鼠标抬起事件
   * @param event
   * @returns {boolean}
   * @private
   */
		_onTreeMouseup: function (event) {
			var target = event.target,
			    tId = "",
			    node = null,
			    mainDom = null;
			mainDom = this._getMDom(target, [{ tagName: "a", attrName: "treeNode" + this.consts.id.A }]);
			if (mainDom) {
				tId = $.tree.getNodeMainDom(mainDom).id;
				node = this._getNodeCache(tId);
				if (this._trigger("beforeMouseUp", event, node)) {
					this._trigger("onMouseUp", event, node);
				}
				return true;
			}
		},
		/**
   * 处理鼠标右键事件
   * @param event
   * @returns {boolean}
   * @private
   */
		_onZTreeContextmenu: function (event) {
			var target = event.target,
			    tId = "",
			    node = null,
			    mainDom = null;
			mainDom = this._getMDom(target, [{ tagName: "a", attrName: "treeNode" + this.consts.id.A }]);
			if (mainDom) {
				tId = $.tree.getNodeMainDom(mainDom).id;
				node = this._getNodeCache(tId);
				if (this._trigger("beforeRightClick", event, node)) {
					this._trigger("onRightClick", event, node);
				}
				return true;
			}
		},

		/**
   * 展开或者折叠节点
   * @param event
   * @param node
   * @returns {boolean}
   * @private
   */
		_onSwitchNode: function (event, node) {
			var p = this.options;
			if (node.open) {
				if (this._apply(p.callback.beforeCollapse, [event, node], true) == false) return true;
				this._getRoot().expandTriggerFlag = true;
				this._switchNode(node);
			} else {
				if (this._apply(p.callback.beforeExpand, [event, node], true) == false) return true;
				this._getRoot().expandTriggerFlag = true;
				this._switchNode(node);
			}
			return true;
		},
		/**
   * 点击节点
   * @param event
   * @param node
   * @returns {boolean}
   * @private
   */
		_onClickNode: function (event, node) {
			var p = this.options,
			    clickFlag = p.view.autoCancelSelected && (event.ctrlKey || event.metaKey) && this._isSelectedNode(node) ? 0 : p.view.autoCancelSelected && (event.ctrlKey || event.metaKey) && p.view.selectedMulti ? 2 : 1;
			if (this._apply(p.callback.beforeClick, [event, node, clickFlag], true) == false) return true;
			if (clickFlag === 0) {
				this._cancelPreSelectedNode(node);
			} else {
				this._selectNode(node, clickFlag === 2);
			}
			this._trigger(this.consts.event.CLICK, event, [node, clickFlag]);
			return true;
		},
		/**
   * 在当前Dom节点中向上查找 targetExpr中tagName一致并且attrName不空的节点
   * @param curDom
   * @param targetExpr
   * @returns {*}
   * @private
   */
		_getMDom: function (curDom, targetExpr) {
			if (!curDom) return null;
			while (curDom && curDom.id !== this.options.treeId) {
				for (var i = 0, l = targetExpr.length; curDom.tagName && i < l; i++) {
					if ($.tree.eqs(curDom.tagName, targetExpr[i].tagName) && curDom.getAttribute(targetExpr[i].attrName) !== null) {
						return curDom;
					}
				}
				curDom = curDom.parentNode;
			}
			return null;
		}

	});
})();

/**
 * 树的复选框与单选框
 * @class fish.desktop.widget.Tree
 * @extends fish.desktop.widget
 * Created by wxh on 2016-2-1.
 */
!(function () {

	'use strict';
	$.widget("ui.tree", $.ui.tree, {
		options: {
			/**
    * @cfg {Object} check 节点选中操作相关的配置项
    * @cfg {Boolean} check.enable 设置 zTree 的节点上是否显示 checkbox / radio;默认值false
    * @cfg {Boolean} check.autoCheckTrigger 设置自动关联勾选时是否触发 beforeCheck / onCheck 事件回调函数。[check.enable = true 且 check.chkStyle = "checkbox" 时生效]
    *      1、如果设置 setting.check.chkboxType = { "Y": "", "N": "" }，将不会有任何自动关联勾选的操作。
    *      2、如果开启触发，对于节点较多的树将会影响性能，因为所有被联动勾选的操作都会触发事件回调函数，请根据需要决定是否使用此功能。
    * @cfg {String} check.chkStyle 勾选框类型(checkbox 或 radio）[check.enable = true 时生效],默认值："checkbox"
    * @cfg {Object} check.chkboxType 勾选 checkbox 对于父子节点的关联关系。[check.enable = true 且 check.chkStyle = "checkbox" 时生效] 默认值：{ "Y": "ps", "N": "ps" }
    *      Y 属性定义 checkbox 被勾选后的情况；
    *      N 属性定义 checkbox 取消勾选后的情况；
    *      "p" 表示操作会影响父级节点；
    *      "s" 表示操作会影响子级节点。
    *      请注意大小写，不要改变
    * @cfg {Boolean} check.nocheckInherit 当父节点设置 nocheck = true 时，设置子节点是否自动继承 nocheck = true [check.enable = true 时生效]
    * @cfg {Boolean} check.chkDisabledInherit  当父节点设置 chkDisabled = true 时，设置子节点是否自动继承 chkDisabled = true 。
    */
			check: {
				enable: false,
				autoCheckTrigger: false,
				chkStyle: $.tree.consts.checkbox.STYLE,
				nocheckInherit: false,
				chkDisabledInherit: false,
				radioType: $.tree.consts.radio.TYPE_LEVEL,
				chkboxType: {
					"Y": "ps",
					"N": "ps"
				}
			},
			/*
    * @cfg {Object} data 数据相关的配置
    */
			data: {
				key: {
					checked: "checked"
				}
			},
			/*
    * @cfg {Function} callback.beforeCheck    用于捕获checkbox点击前的事件回调函数,函数的参数是event、treeNode
    * @cfg {Function} callback.onCheck    用于捕获checkbox点击之后的事件回调函数,函数的参数是event、treeNode
    */
			callback: {
				beforeCheck: null,
				onCheck: null
			}
		},

		_create: function () {
			this._addInitNode(this._initNodeCheck);
			this._initRootCheck();
			this._addBeforeA(this._beforeACheck);
			this._super();
			this._bindCheckEvent();
		},

		/**
   * 初始化节点
   * @param level 层次
   * @param node 节点
   * @param parentNode 父节点
   * @param isFirstNode 是否第一个节点
   * @param isLastNode 旧否最后一个节点
   * @param openFlag 是否打开
   * @private
   */
		_initNodeCheck: function (level, node, parentNode, isFirstNode, isLastNode, openFlag) {
			var _this = this;

			if (!node) return;
			var checkedKey = this.p.data.key.checked;
			if (typeof node[checkedKey] == "string") node[checkedKey] = $.tree.eqs(node[checkedKey], "true");
			node[checkedKey] = !!node[checkedKey];
			node.checkedOld = node[checkedKey];
			if (typeof node.nocheck == "string") node.nocheck = $.tree.eqs(node.nocheck, "true");
			node.nocheck = !!node.nocheck || this.p.check.nocheckInherit && parentNode && !!parentNode.nocheck;
			if (typeof node.chkDisabled == "string") node.chkDisabled = $.tree.eqs(node.chkDisabled, "true");
			node.chkDisabled = !!node.chkDisabled || this.p.check.chkDisabledInherit && parentNode && !!parentNode.chkDisabled;
			if (typeof node.halfCheck == "string") node.halfCheck = $.tree.eqs(node.halfCheck, "true");
			node.halfCheck = !!node.halfCheck;
			node.check_Child_State = -1;
			node.check_Focus = false;
			node.getCheckStatus = function () {
				return _this._getCheckStatus(node);
			};

			if (this.p.check.chkStyle == $.tree.consts.radio.STYLE && this.p.check.radioType == $.tree.consts.radio.TYPE_ALL && node[checkedKey]) {
				var r = this._getRoot();
				r.radioCheckedList.push(node);
			}
		},

		/**
   * 获取check状态
   * @param node
   * @returns {*}
   * @private
   */
		_getCheckStatus: function (node) {
			if (!this.p.check.enable || node.nocheck || node.chkDisabled) return null;
			var checkedKey = this.p.data.key.checked;
			return {
				checked: node[checkedKey],
				half: node.halfCheck ? node.halfCheck : this.p.check.chkStyle == $.tree.consts.radio.STYLE ? node.check_Child_State === 2 : node[checkedKey] ? node.check_Child_State > -1 && node.check_Child_State < 2 : node.check_Child_State > 0
			};
		},

		_bindCheckEvent: function () {
			this._on({
				'mouseover': '_onMouseoverCheck',
				'mouseout': '_onMouseoutCheck',
				'click': '_onCheckNode'
			});
		},

		/**
   * mouseOver事件
   * @param event
   * @private
   */
		_onMouseoverCheck: function (event) {
			var target = event.target,
			    tId = "",
			    node = null;
			if (this.p.check.enable && $.tree.eqs(target.tagName, "span") && target.getAttribute("treeNode" + $.tree.consts.id.CHECK) !== null) {
				tId = $.tree.getNodeMainDom(target).id;
				if (tId.length > 0) {
					node = this._getNodeCache(tId);
					if (node.chkDisabled === true) return false;
					var checkObj = this.$(node, $.tree.consts.id.CHECK);
					node.check_Focus = true;
					this._setChkClass(checkObj, node);
				}
			}
		},

		_setChkClass: function (obj, node) {
			if (!obj) return;
			if (node.nocheck === true) {
				obj.hide();
			} else {
				obj.show();
			}
			obj.attr('class', this._makeChkClass(node));
		},

		_makeChkClass: function (node) {
			var checkedKey = this.p.data.key.checked,
			    c = $.tree.consts.checkbox,
			    r = $.tree.consts.radio,
			    fullStyle = "";
			if (node.chkDisabled === true) {
				fullStyle = c.DISABLED;
			} else if (node.halfCheck) {
				fullStyle = c.PART;
			} else if (this.p.check.chkStyle == r.STYLE) {
				fullStyle = node.check_Child_State < 1 ? c.FULL : c.PART;
			} else {
				fullStyle = node[checkedKey] ? node.check_Child_State === 2 || node.check_Child_State === -1 ? c.FULL : c.PART : node.check_Child_State < 1 ? c.FULL : c.PART;
			}
			var chkName = this.p.check.chkStyle + "_" + (node[checkedKey] ? c.TRUE : c.FALSE) + "_" + fullStyle;
			chkName = node.check_Focus && node.chkDisabled !== true ? chkName + "_" + c.FOCUS : chkName;
			return $.tree.consts.className.BUTTON + " " + c.DEFAULT + " " + chkName;
		},

		_onMouseoutCheck: function (event) {
			var target = event.target,
			    node = {},
			    tId = "";
			if (this.p.check.enable && $.tree.eqs(target.tagName, "span") && target.getAttribute("treeNode" + $.tree.consts.id.CHECK) !== null) {
				tId = $.tree.getNodeMainDom(target).id;
				if (tId.length > 0) {
					if (node.chkDisabled === true) return false;
					var checkObj = this.$(node, $.tree.consts.id.CHECK);
					node.check_Focus = false;
					this._setChkClass(checkObj, node);
				}
			}
		},

		_onCheckNode: function (event) {
			var target = event.target,
			    node = {},
			    tId = "";
			if (this.p.check.enable && $.tree.eqs(target.tagName, "span") && target.getAttribute("treeNode" + $.tree.consts.id.CHECK) !== null) {
				tId = $.tree.getNodeMainDom(target).id;
				if (tId.length > 0) {
					node = this._getNodeCache(tId);
					if (node.chkDisabled === true) return false;
					var checkedKey = this.p.data.key.checked;
					if (this._apply(this.p.callback.beforeCheck, [event, node], true) == false) return true;
					node[checkedKey] = !node[checkedKey];
					this._checkNodeRelation(node);
					var checkObj = this.$(node, $.tree.consts.id.CHECK);
					this._setChkClass(checkObj, node);
					this._repairParentChkClassWithSelf(node);
					this._trigger($.tree.consts.event.CHECK, event, node);
				}
			}
		},

		_checkNodeRelation: function (node) {
			var pNode,
			    i,
			    l,
			    childKey = this.p.data.key.children,
			    checkedKey = this.p.data.key.checked,
			    r = $.tree.consts.radio;
			if (this.p.check.chkStyle == r.STYLE) {
				var checkedList = this._getRadioCheckedList();
				if (node[checkedKey]) {
					if (this.p.check.radioType == r.TYPE_ALL) {
						for (i = checkedList.length - 1; i >= 0; i--) {
							pNode = checkedList[i];
							if (pNode[checkedKey] && pNode != node) {
								pNode[checkedKey] = false;
								checkedList.splice(i, 1);

								this._setChkClass(this.$(pNode, $.tree.consts.id.CHECK), pNode);
								if (pNode.parentTId != node.parentTId) {
									this._repairParentChkClassWithSelf(pNode);
								}
							}
						}
						checkedList.push(node);
					} else {
						var parentNode = node.parentTId ? node.getParentNode() : this._getRoot();
						for (i = 0, l = parentNode[childKey].length; i < l; i++) {
							pNode = parentNode[childKey][i];
							if (pNode[checkedKey] && pNode != node) {
								pNode[checkedKey] = false;
								this._setChkClass(this.$(pNode, $.tree.consts.id.CHECK), pNode);
							}
						}
					}
				} else if (this.p.check.radioType == r.TYPE_ALL) {
					for (i = 0, l = checkedList.length; i < l; i++) {
						if (node == checkedList[i]) {
							checkedList.splice(i, 1);
							break;
						}
					}
				}
			} else {
				if (node[checkedKey] && (!node[childKey] || node[childKey].length == 0 || this.p.check.chkboxType.Y.indexOf("s") > -1)) {
					this._setSonNodeCheckBox(node, true);
				}
				if (!node[checkedKey] && (!node[childKey] || node[childKey].length == 0 || this.p.check.chkboxType.N.indexOf("s") > -1)) {
					this._setSonNodeCheckBox(node, false);
				}
				if (node[checkedKey] && this.p.check.chkboxType.Y.indexOf("p") > -1) {
					this._setParentNodeCheckBox(node, true);
				}
				if (!node[checkedKey] && this.p.check.chkboxType.N.indexOf("p") > -1) {
					this._setParentNodeCheckBox(node, false);
				}
			}
		},

		_repairParentChkClassWithSelf: function (node) {
			if (!node) return;
			var childKey = this.p.data.key.children;
			if (node[childKey] && node[childKey].length > 0) {
				this._repairParentChkClass(node[childKey][0]);
			} else {
				this._repairParentChkClass(node);
			}
		},

		_repairParentChkClass: function (node) {
			if (!node || !node.parentTId) return;
			var pNode = node.getParentNode();
			this._repairChkClass(pNode);
			this._repairParentChkClass(pNode);
		},

		_repairChkClass: function (node) {
			if (!node) return;
			this._makeChkFlag(node);
			if (node.nocheck !== true) {
				var checkObj = this.$(node, $.tree.consts.id.CHECK);
				this._setChkClass(checkObj, node);
			}
		},

		_makeChkFlag: function (node) {
			if (!node) return;
			var childKey = this.p.data.key.children,
			    checkedKey = this.p.data.key.checked,
			    chkFlag = -1;
			if (node[childKey]) {
				for (var i = 0, l = node[childKey].length; i < l; i++) {
					var cNode = node[childKey][i];
					var tmp = -1;
					if (this.p.check.chkStyle == $.tree.consts.radio.STYLE) {
						if (cNode.nocheck === true || cNode.chkDisabled === true) {
							tmp = cNode.check_Child_State;
						} else if (cNode.halfCheck === true) {
							tmp = 2;
						} else if (cNode[checkedKey]) {
							tmp = 2;
						} else {
							tmp = cNode.check_Child_State > 0 ? 2 : 0;
						}
						if (tmp == 2) {
							chkFlag = 2;
							break;
						} else if (tmp == 0) {
							chkFlag = 0;
						}
					} else if (this.p.check.chkStyle == $.tree.consts.checkbox.STYLE) {
						if (cNode.nocheck === true || cNode.chkDisabled === true) {
							tmp = cNode.check_Child_State;
						} else if (cNode.halfCheck === true) {
							tmp = 1;
						} else if (cNode[checkedKey]) {
							tmp = cNode.check_Child_State === -1 || cNode.check_Child_State === 2 ? 2 : 1;
						} else {
							tmp = cNode.check_Child_State > 0 ? 1 : 0;
						}
						if (tmp === 1) {
							chkFlag = 1;
							break;
						} else if (tmp === 2 && chkFlag > -1 && i > 0 && tmp !== chkFlag) {
							chkFlag = 1;
							break;
						} else if (chkFlag === 2 && tmp > -1 && tmp < 2) {
							chkFlag = 1;
							break;
						} else if (tmp > -1) {
							chkFlag = tmp;
						}
					}
				}
			}
			node.check_Child_State = chkFlag;
		},

		_setSonNodeCheckBox: function (node, value, srcNode) {
			if (!node) return;
			var childKey = this.p.data.key.children,
			    checkedKey = this.p.data.key.checked,
			    checkObj = this.$(node, $.tree.consts.id.CHECK);
			if (!srcNode) srcNode = node;

			var hasDisable = false;
			if (node[childKey]) {
				for (var i = 0, l = node[childKey].length; i < l && node.chkDisabled !== true; i++) {
					var sNode = node[childKey][i];
					this._setSonNodeCheckBox(sNode, value, srcNode);
					if (sNode.chkDisabled === true) hasDisable = true;
				}
			}

			if (node != this._getRoot() && node.chkDisabled !== true) {
				if (hasDisable && node.nocheck !== true) {
					this._makeChkFlag(node);
				}
				if (node.nocheck !== true && node.chkDisabled !== true) {
					node[checkedKey] = value;
					if (!hasDisable) node.check_Child_State = node[childKey] && node[childKey].length > 0 ? value ? 2 : 0 : -1;
				} else {
					node.check_Child_State = -1;
				}
				this._setChkClass(checkObj, node);
				if (this.p.check.autoCheckTrigger && node != srcNode && node.nocheck !== true && node.chkDisabled !== true) {
					this._trigger($.tree.consts.event.CHECK, null, node);
				}
			}
		},

		_setParentNodeCheckBox: function (node, value, srcNode) {
			var childKey = this.p.data.key.children,
			    checkedKey = this.p.data.key.checked,
			    checkObj = this.$(node, $.tree.consts.id.CHECK);
			if (!srcNode) srcNode = node;
			this._makeChkFlag(node);
			if (node.nocheck !== true && node.chkDisabled !== true) {
				node[checkedKey] = value;
				this._setChkClass(checkObj, node);
				if (this.p.check.autoCheckTrigger && node != srcNode) {
					this._trigger($.tree.consts.event.CHECK, null, node);
				}
			}
			if (node.parentTId) {
				var pSign = true;
				if (!value) {
					var pNodes = node.getParentNode()[childKey];
					for (var i = 0, l = pNodes.length; i < l; i++) {
						if (pNodes[i].nocheck !== true && pNodes[i].chkDisabled !== true && pNodes[i][checkedKey] || (pNodes[i].nocheck === true || pNodes[i].chkDisabled === true) && pNodes[i].check_Child_State > 0) {
							pSign = false;
							break;
						}
					}
				}
				if (pSign) {
					this._setParentNodeCheckBox(node.getParentNode(), value, srcNode);
				}
			}
		},

		_initRootCheck: function () {
			var r = this._getRoot();
			r.radioCheckedList = [];
		},

		_beforeACheck: function (node, html) {
			if (this.p.check.enable) {
				this._makeChkFlag(node);
				html.push("<span ID='", node.tId, $.tree.consts.id.CHECK, "' class='", this._makeChkClass(node), "' treeNode", $.tree.consts.id.CHECK, node.nocheck === true ? " style='display:none;'" : "", "></span>");
			}
		},

		/**
   * 复写
   * @param level
   * @param nodes
   * @param parentNode
   * @private
   */
		_createNodes: function (level, nodes, parentNode) {
			this._super(level, nodes, parentNode);
			if (!nodes) return;
			this._repairParentChkClassWithSelf(parentNode);
		},

		_removeNode: function (node) {
			var parentNode = node.getParentNode();
			this._super(node);
			if (!node || !parentNode) return;
			this._repairChkClass(parentNode);
			this._repairParentChkClass(parentNode);
		},

		_appendNodes: function (level, nodes, parentNode, initFlag, openFlag) {
			var html = [];
			html = this._super(level, nodes, parentNode, initFlag, openFlag);
			if (parentNode) {
				this._makeChkFlag(parentNode);
			}
			return html;
		},

		_repairAllChk: function (checked) {
			if (this.p.check.enable && this.p.check.chkStyle === $.tree.consts.checkbox.STYLE) {
				var checkedKey = this.p.data.key.checked,
				    childKey = this.p.data.key.children,
				    root = this._getRoot();
				for (var i = 0, l = root[childKey].length; i < l; i++) {
					var node = root[childKey][i];
					if (node.nocheck !== true && node.chkDisabled !== true) {
						node[checkedKey] = checked;
					}
					this._setSonNodeCheckBox(node, checked);
				}
			}
		},

		_getTreeCheckedNodes: function (nodes, checked, results) {
			if (!nodes) return [];
			var childKey = this.p.data.key.children,
			    checkedKey = this.p.data.key.checked,
			    onlyOne = checked && this.p.check.chkStyle == $.tree.consts.radio.STYLE && this.p.check.radioType == $.tree.consts.radio.TYPE_ALL;
			results = !results ? [] : results;
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (nodes[i].nocheck !== true && nodes[i].chkDisabled !== true && nodes[i][checkedKey] == checked) {
					results.push(nodes[i]);
					if (onlyOne) {
						break;
					}
				}
				this._getTreeCheckedNodes(nodes[i][childKey], checked, results);
				if (onlyOne && results.length > 0) {
					break;
				}
			}
			return results;
		},

		_getTreeChangeCheckedNodes: function (nodes, results) {
			if (!nodes) return [];
			var childKey = this.p.data.key.children,
			    checkedKey = this.p.data.key.checked;
			results = !results ? [] : results;
			for (var i = 0, l = nodes.length; i < l; i++) {
				if (nodes[i].nocheck !== true && nodes[i].chkDisabled !== true && nodes[i][checkedKey] != nodes[i].checkedOld) {
					results.push(nodes[i]);
				}
				this._getTreeChangeCheckedNodes(nodes[i][childKey], results);
			}
			return results;
		},

		_repairSonChkDisabled: function (node, chkDisabled, inherit) {
			if (!node) return;
			var childKey = this.p.data.key.children;
			if (node.chkDisabled != chkDisabled) {
				node.chkDisabled = chkDisabled;
			}
			this._repairChkClass(node);
			if (node[childKey] && inherit) {
				for (var i = 0, l = node[childKey].length; i < l; i++) {
					var sNode = node[childKey][i];
					this._repairSonChkDisabled(sNode, chkDisabled, inherit);
				}
			}
		},
		_repairParentChkDisabled: function (node, chkDisabled, inherit) {
			if (!node) return;
			if (node.chkDisabled != chkDisabled && inherit) {
				node.chkDisabled = chkDisabled;
			}
			this._repairChkClass(node);
			this._repairParentChkDisabled(node.getParentNode(), chkDisabled, inherit);
		},
		/**
   * @method checkNode
   * 勾选 或 取消勾选 单个节点。[setting.check.enable = true 时有效];checkNode() 方法可以触发 beforeCheck / onCheck 事件回调函数
   * @param  {Object} node   需要勾选 或 取消勾选 的节点数据;请务必保证此节点数据对象 是 zTree 内部的数据对象
   * @param  {Boolean} [checked]     true 表示勾选节点; false 表示节点取消勾选;如果省略参数，则根据对此节点的勾选状态进行 toggle 切换;不影响 treeNode.nochecked = true 的节点。
   * @param  {Boolean} [checkTypeFlag] true 表示按照 setting.check.chkboxType 属性进行父子节点的勾选联动操作;false 表示只修改此节点勾选状态，无任何勾选联动操作;checkTypeFlag = false 且 treeNode.checked = checked 时，不会触发回调函数，直接返回
   *                                 不影响父子节点中 treeNode.nochecked = true 的节点。
   * @param  {Boolean} [callbackFlag=false]   true 表示执行此方法时触发 beforeCheck & onCheck 事件回调函数;false表示不触发回调
   */
		checkNode: function (node, checked, checkTypeFlag, callbackFlag) {
			var checkedKey = this.p.data.key.checked;
			if (node.chkDisabled === true) return;
			if (checked !== true && checked !== false) {
				checked = !node[checkedKey];
			}
			callbackFlag = !!callbackFlag;

			if (node[checkedKey] === checked && !checkTypeFlag) {
				return;
			} else if (callbackFlag && this._apply(this.p.callback.beforeCheck, [null, node], true) == false) {
				return;
			}
			if (this._uCanDo() && this.p.check.enable && node.nocheck !== true) {
				node[checkedKey] = checked;
				var checkObj = this.$(node, $.tree.consts.id.CHECK);
				if (checkTypeFlag || this.p.check.chkStyle === $.tree.consts.radio.STYLE) this._checkNodeRelation(node);
				this._setChkClass(checkObj, node);
				this._repairParentChkClassWithSelf(node);
				if (callbackFlag) {
					this._trigger($.tree.consts.event.CHECK, null, node);
				}
			}
		},
		/**
   * @method checkAllNodes
   * 勾选 或 取消勾选 全部节点。[check.enable = true 且 check.chkStyle = "checkbox" 时有效]
   * @param  {Boolean} [checked=true] true 表示勾选全部节点;false 表示全部节点取消勾选;不会影响 treeNode.nochecked = true 的节点。不会影响未加载的节点
   */
		checkAllNodes: function (checked) {
			this._repairAllChk(!!checked);
		},
		/**
   * @method getCheckedNodes
   * 获取输入框被勾选 或 未勾选的节点集合。[check.enable = true 时有效]
   * @param  {Boolean} [checked=true]  true 表示获取 被勾选 的节点集合;false 表示获取 未勾选 的节点集合
   * @return {Array}         返回全部符合要求的节点集合 Array
   */
		getCheckedNodes: function (checked) {
			var childKey = this.p.data.key.children;
			checked = checked !== false;
			return this._getTreeCheckedNodes(this._getRoot()[childKey], checked);
		},
		/**
   * @method getChangeCheckedNodes
   * 获取获取输入框勾选状态被改变的节点集合（与原始数据 checkedOld 对比）。[check.enable = true 时有效]
   * @return {Array} 返回全部勾选状态被改变的节点集合 Array
   */
		getChangeCheckedNodes: function () {
			var childKey = this.p.data.key.children;
			return this._getTreeChangeCheckedNodes(this._getRoot()[childKey]);
		},
		/**
   * @method setChkDisabled
   * 禁用 或 解禁 某个节点的 checkbox / radio [check.enable = true 时有效]
   * 1、节点的 checkbox / radio 被禁用后，无法勾选或取消勾选，但能够影响父节点的半选状态
   * 2、请不要直接修改已加载节点的 treeNode.chkDisabled 属性。
   * @param {Object} node  需要禁用 或 解禁 checkbox / radio 的节点数据,请务必保证此节点数据对象 是 zTree 内部的数据对象
   * @param {Boolean} [disabled=false]   true 表示禁用 checkbox / radio;false表示解禁； 不影响 treeNode.nochecked = true 的节点。
   * @param {Boolean} [inheritParent=false]   true 表示全部父节点进行同样的操作,false 表示不影响父节点
   * @param {Boolean} [inheritChildren=false]  true 表示全部子节点进行同样的操作,false 表示不影响子节点
   */
		setChkDisabled: function (node, disabled, inheritParent, inheritChildren) {
			disabled = !!disabled;
			inheritParent = !!inheritParent;
			inheritChildren = !!inheritChildren;
			this._repairSonChkDisabled(node, disabled, inheritChildren);
			this._repairParentChkDisabled(node.getParentNode(), disabled, inheritParent);
		},

		updateNode: function (node, checkTypeFlag) {
			this._super(node, checkTypeFlag);
			if (!node || !this.p.check.enable) return;
			var nObj = this.$(node);
			if (nObj.get(0) && this._uCanDo()) {
				var checkObj = this.$(node, $.tree.consts.id.CHECK);
				if (checkTypeFlag == true || this.p.check.chkStyle === $.tree.consts.radio.STYLE) this._checkNodeRelation(node);
				this._setChkClass(checkObj, node);
				this._repairParentChkClassWithSelf(node);
			}
		},

		_getRadioCheckedList: function () {
			var checkedList = this._getRoot().radioCheckedList;
			for (var i = 0, j = checkedList.length; i < j; i++) {
				if (!this._getNodeCache(checkedList[i].tId)) {
					checkedList.splice(i, 1);
					i--;j--;
				}
			}
			return checkedList;
		}
	});
})();

/**
 * 树的复选框与单选框
 * @class fish.desktop.widget.Tree
 * @extends fish.desktop.widget
 * Created by wxh on 2016-1-19.
 */
!(function () {

	'use strict';
	$.widget("ui.tree", $.ui.tree, {
		options: {
			/**
    * @cfg {Object} edit 节点选中操作相关的配置项
    */
			edit: {
				enable: false,
				editNameSelectAll: false,
				showRemoveBtn: true,
				showRenameBtn: true,
				removeTitle: "remove",
				renameTitle: "rename",
				drag: {
					autoExpandTrigger: false,
					isCopy: true,
					isMove: true,
					prev: true,
					next: true,
					inner: true,
					minMoveSize: 5,
					borderMax: 10,
					borderMin: -5,
					maxShowNodeNum: 5,
					autoOpenTime: 500
				}
			},

			/*
    * @cfg {Object} view 页面展示相关的配置
    */
			view: {
				addHoverDom: null,
				removeHoverDom: null
			},
			/*
    * @cfg {Object} callback 回调函数的配置
    */
			callback: {
				beforeDrag: null,
				beforeDragOpen: null,
				beforeDrop: null,
				beforeEditName: null,
				beforeRename: null,
				onDrag: null,
				onDragMove: null,
				onDrop: null,
				onRename: null
			}
		},
		/**
   * 创建化树编辑
   * @private
   */
		_create: function () {
			this._addInitNode(this._initNodeEdit);
			this._initRootEdit();
			this._super();
			this._bindEditEvent();
		},

		_initNodeEdit: function (level, node, parentNode, isFirstNode, isLastNode, openFlag) {
			if (!node) return;
			node.isHover = false;
			node.editNameFlag = false;
		},

		_initRootEdit: function () {
			var r = this._getRoot();
			r.curEditNode = null;
			r.curEditInput = null;
			r.curHoverNode = null;
			r.dragFlag = 0;
			r.dragNodeShowBefore = [];
			r.dragMaskList = [];
			r.showHoverDom = true;
		},

		_bindEditEvent: function () {
			this._on({
				'mouseover': '_onHoverOverNode',
				'mouseout': '_onEditNodeMouseOut',
				'mousedown': '_onMousedownNode'
			});
		},

		/**
   * mouseOver事件
   * @param event
   * @private
   */
		_onHoverOverNode: function (event) {
			var target = event.target,
			    tId = "",
			    node = null,
			    mDom = null;
			mDom = this._getMDom(target, [{ tagName: "a", attrName: "treeNode" + this.consts.id.A }]);
			if (mDom) {
				tId = $.tree.getNodeMainDom(mDom).id;
				if (tId.length > 0) {
					node = this._getNodeCache(tId);
					var root = this._getRoot();
					if (root.curHoverNode != node) {
						this._onHoverOutNode(event);
					}
					root.curHoverNode = node;
					this._addHoverDom(node);
				}
			}
		},

		/**
   * mouseout事件
   * @param event
   * @private
   */
		_onEditNodeMouseOut: function (event) {
			var relatedTarget = event.relatedTarget,
			    mDom = null;
			mDom = this._getMDom(relatedTarget, [{ tagName: "a", attrName: "treeNode" + this.consts.id.A }]);
			if (!mDom) {
				this._onHoverOutNode(event);
			}
		},

		/**
   * Mousedown事件
   * @param event
   * @private
   */
		_onMousedownNode: function (event) {
			var target = event.target,
			    tId = "",
			    node = null,
			    mDom = null;
			mDom = this._getMDom(target, [{ tagName: "a", attrName: "treeNode" + this.consts.id.A }]);
			if (mDom) {
				tId = $.tree.getNodeMainDom(mDom).id;
				if (tId.length > 0) {
					node = this._getNodeCache(tId);

					this.__onMousedownNode(event, node);
				}
			}
		},

		__onMousedownNode: function (eventMouseDown, _node) {
			//right click can't drag & drop
			if (eventMouseDown.button == 2 || !this.p.edit.enable || !this.p.edit.drag.isCopy && !this.p.edit.drag.isMove) return true;
			//考虑使用jqueryUI的拖动来实现吧
		},

		/**
   *  去掉hover状态的节点
   * @param event
   * @param node
   * @private
   */
		_onHoverOutNode: function (event, node) {
			var root = this._getRoot();
			if (root.curHoverNode && !this._isSelectedNode(root.curHoverNode)) {
				this._removeTreeDom(root.curHoverNode);
				root.curHoverNode = null;
			}
		},

		_removeTreeDom: function (node) {
			node.isHover = false;
			this._removeEditBtn(node);
			this._removeRemoveBtn(node);
			this._apply(this.p.view.removeHoverDom, [node]);
		},

		_removeRemoveBtn: function (node) {
			this.$(node, this.consts.id.REMOVE).off().remove();
		},

		/**
   * 去掉 焦点离开时的 编辑按钮
   * @param node
   * @private
   */
		_removeEditBtn: function (node) {
			this.$(node, this.consts.id.EDIT).off().remove();
		},

		_addHoverDom: function (node) {
			if (this._getRoot().showHoverDom) {
				node.isHover = true;
				if (this.p.edit.enable) {
					this._addEditBtn(node);
					this._addRemoveBtn(node);
				}
				this._apply(this.p.view.addHoverDom, [node]);
			}
		},

		/**
   * 增加编辑按钮
   * @param node
   * @private
   */
		_addEditBtn: function (node) {
			var _this = this;

			if (node.editNameFlag || this.$(node, this.consts.id.EDIT).length > 0) {
				return;
			}
			if (!this._apply(this.p.edit.showRenameBtn, [node], this.p.edit.showRenameBtn)) {
				return;
			}
			var aObj = this.$(node, this.consts.id.A),
			    editStr = "<span class='" + this.consts.className.BUTTON + " edit' id='" + node.tId + this.consts.id.EDIT + "' title='" + this._apply(this.p.edit.renameTitle, [node], this.p.edit.renameTitle) + "' treeNode" + this.consts.id.EDIT + " style='display:none;'></span>";
			aObj.append(editStr);

			var clickCallBack = function () {
				if (!_this._uCanDo() || _this._apply(_this.p.callback.beforeEditName, [null, node], true) == false) return false;
				_this._editNode(node);
				return false;
			};

			this.$(node, this.consts.id.EDIT).on('click', clickCallBack).show();
		},

		/**
   * 增加删除按钮
   * @param node
   * @private
   */
		_addRemoveBtn: function (node) {
			var _this2 = this;

			if (node.editNameFlag || this.$(node, this.consts.id.REMOVE).length > 0) {
				return;
			}
			if (!this._apply(this.p.edit.showRemoveBtn, [node], this.p.edit.showRemoveBtn)) {
				return;
			}
			var aObj = this.$(node, this.consts.id.A),
			    removeStr = "<span class='" + this.consts.className.BUTTON + " remove' id='" + node.tId + this.consts.id.REMOVE + "' title='" + this._apply(this.p.edit.removeTitle, [node], this.p.edit.removeTitle) + "' treeNode" + this.consts.id.REMOVE + " style='display:none;'></span>";
			aObj.append(removeStr);

			var clickCallback = function (event) {
				if (!_this2._uCanDo() || _this2._apply(_this2.p.callback.beforeRemove, [event, node], true) == false) return false;
				_this2._removeNode(node);
				_this2._trigger(_this2.consts.event.REMOVE, null, node);
				return false;
			};

			this.$(node, this.consts.id.REMOVE).on('click', clickCallback).on('mousedown', function (eventMouseDown) {
				return true;
			}).show();
		},

		_editNode: function (node) {
			var _this3 = this;

			var root = this._getRoot();
			this.editNodeBlur = false;
			if (this._isSelectedNode(node) && root.curEditNode == node && node.editNameFlag) {
				_.defer(function () {
					$.tree.inputFocus(root.curEditInput);
				});
				return;
			}
			var nameKey = this.p.data.key.name;
			node.editNameFlag = true;
			this._removeTreeDom(node);
			this._cancelCurEditNode();
			this._selectNode(node, false);
			this.$(node, this.consts.id.SPAN).html("<input type=text class='rename form-control' id='" + node.tId + this.consts.id.INPUT + "' treeNode" + this.consts.id.INPUT + " >");
			var inputObj = this.$(node, this.consts.id.INPUT);
			inputObj.attr("value", node[nameKey]);
			if (this.p.edit.editNameSelectAll) {
				$.tree.inputSelect(inputObj);
			} else {
				$.tree.inputFocus(inputObj);
			}

			var blurCallBack = function (event) {
				if (!_this3.editNodeBlur) {
					_this3._cancelCurEditNode();
				}
			};

			var keyDownCallback = function (event) {
				if (event.keyCode == "13") {
					_this3.editNodeBlur = true;
					_this3._cancelCurEditNode();
				} else if (event.keyCode == "27") {
					_this3._cancelCurEditNode(null, true);
				}
			};

			inputObj.on('blur', blurCallBack).on('keydown', keyDownCallback).on('click', function (event) {
				return false;
			}).on('dblclick', function (event) {
				return false;
			});

			this.$(node, this.consts.id.A).addClass(this.consts.node.CURSELECTED_EDIT);
			root.curEditInput = inputObj;
			root.noSelection = false;
			root.curEditNode = node;
		},

		_cancelCurEditNode: function (forceName, isCancel) {
			var root = this._getRoot(),
			    nameKey = this.p.data.key.name,
			    node = root.curEditNode;

			if (node) {
				var inputObj = root.curEditInput,
				    newName = forceName ? forceName : isCancel ? node[nameKey] : inputObj.val();
				if (this._apply(this.p.callback.beforeRename, [null, node, newName, isCancel], true) === false) {
					return false;
				} else {
					node[nameKey] = newName;
					this._trigger(this.consts.event.RENAME, null, [node, isCancel]);
				}
				var aObj = this.$(node, this.consts.id.A);
				aObj.removeClass(this.consts.node.CURSELECTED_EDIT);
				inputObj.unbind();
				this._setNodeName(node);
				node.editNameFlag = false;
				root.curEditNode = null;
				root.curEditInput = null;
				this._selectNode(node, false);
			}
			root.noSelection = true;
			return true;
		},

		_showIfameMask: function (showSign) {
			var root = this._getRoot();
			//clear full mask
			while (root.dragMaskList.length > 0) {
				root.dragMaskList[0].remove();
				root.dragMaskList.shift();
			}
			if (showSign) {
				//show mask
				var iframeList = this.$("iframe");
				for (var i = 0, l = iframeList.length; i < l; i++) {
					var obj = iframeList.get(i),
					    r = $.tree.getAbs(obj),
					    dragMask = this.$("<div id='zTreeMask_" + i + "' class='zTreeMask' style='top:" + r[1] + "px; left:" + r[0] + "px; width:" + obj.offsetWidth + "px; height:" + obj.offsetHeight + "px;'></div>");
					dragMask.appendTo(this.$("body"));
					root.dragMaskList.push(dragMask);
				}
			}
		},

		/**
   * @method cancelEditName
   * Cancel the edit name status. Can restore the original name, and can also force assigned to a new name.
   * @param  {String} newName Re given a new name . If this parameter is omitted, then restore the original name.
   */
		cancelEditName: function (newName) {
			var root = this.getRoot();
			if (!root.curEditNode) return;
			this._cancelCurEditNode(newName ? newName : null, true);
		},
		/**
   * Copy the node
   * @method copyNode
   * @param  {Object}  targetNode JSON data object of the node which will be target.
   * @param  {Object}  node       JSON data object of the node which will be copied.
   * @param  {String}  moveType   Copied to the target node's relative position.
   *  "inner" means: to be taregetNode's child node.
   *  "prev" means: to be taregetNode's previous sibling node.
   *  "next" means: to be taregetNode's next sibling node.
   * @param  {Boolean} isSilent   After copy the node, whether to automatically expand its parent node.isSilent = true means: don't expand its parent node.isSilent = false or omit this parameter means: expand its parent node.
   * @return {Object}             return the new node in zTree.Note: the node data JSON object in the return value is not equal to the treeNode.
   */
		copyNode: function (targetNode, node, moveType, isSilent) {
			var _this4 = this;

			if (!node) return null;
			if (targetNode && !targetNode.isParent && this.p.data.keep.leaf && moveType === this.consts.move.TYPE_INNER) return null;
			var newNode = $.tree.clone(node);
			if (!targetNode) {
				targetNode = null;
				moveType = this.consts.move.TYPE_INNER;
			}
			if (moveType == this.consts.move.TYPE_INNER) {
				var copyCallback = function () {
					_this4._addNodes(targetNode, [newNode], isSilent);
				};

				if (this._canAsync(targetNode)) {
					this._asyncNode(targetNode, isSilent, copyCallback);
				} else {
					copyCallback();
				}
			} else {
				this._addNodes(targetNode.parentNode, [newNode], isSilent);
				this._moveNode(targetNode, newNode, moveType, false, isSilent);
			}
			return newNode;
		},
		/**
   * Start editing the node's name.
   * @method editName
   * @param  {Object} node JSON data object of the node which will be editing name.Please ensure that this data object is an internal node data object in zTree.
   */
		editName: function (node) {
			if (!node || !node.tId || node !== this._getNodeCache(node.tId)) return;
			if (node.parentTId) this._expandCollapseParentNode(node.getParentNode(), true);
			this._editNode(node);
		},
		/**
   * Move the node
   * @method moveNode
   * @param  {Object}  targetNode JSON data object of the node which will be target.
   * @param  {Object}  node       JSON data object of the node which will be moved.
   * @param  {String}  moveType   Copied to the target node's relative position.
   *  "inner" means: to be taregetNode's child node.
   *  "prev" means: to be taregetNode's previous sibling node.
   *  "next" means: to be taregetNode's next sibling node.
   * @param  {Boolean} isSilent   After move the node, whether to automatically expand its parent node.isSilent = true means: don't expand its parent node.isSilent = false or omit this parameter means: expand its parent node.
   * @return {Object}             return the node which be moved, it is same as the 'treeNode' parameter.
   */
		moveNode: function (targetNode, node, moveType, isSilent) {
			var _this5 = this;

			if (!node) return node;
			if (targetNode && !targetNode.isParent && this.p.data.keep.leaf && moveType === this.consts.move.TYPE_INNER) {
				return null;
			} else if (targetNode && (node.parentTId == targetNode.tId && moveType == this.consts.move.TYPE_INNER || this.$(node).find("#" + targetNode.tId).length > 0)) {
				return null;
			} else if (!targetNode) {
				targetNode = null;
			}

			var moveCallback = function () {
				_this5._moveNode(targetNode, node, moveType, false, isSilent);
			};

			if (this._canAsync(targetNode) && moveType === this.consts.move.TYPE_INNER) {
				this._asyncNode(targetNode, isSilent, moveCallback);
			} else {
				moveCallback();
			}
			return node;
		},
		/**
   * Edit mode and normal mode switch.
   * @method setEditable
   * @param {Boolean} editable true means: set zTree to edit mode.false means: set zTree to normal mode.
   */
		setEditable: function (editable) {
			this.p.edit.enable = editable;
			return this.refresh();
		},

		_moveNode: function (targetNode, node, moveType, animateFlag, isSilent) {
			var root = this._getRoot(),
			    childKey = this.p.data.key.children;
			if (targetNode == node) return;
			if (this.p.data.keep.leaf && targetNode && !targetNode.isParent && moveType == this.consts.move.TYPE_INNER) return;
			var oldParentNode = node.parentTId ? node.getParentNode() : root,
			    targetNodeIsRoot = targetNode === null || targetNode == root;
			if (targetNodeIsRoot && targetNode === null) targetNode = root;
			if (targetNodeIsRoot) moveType = this.consts.move.TYPE_INNER;
			var targetParentNode = targetNode.parentTId ? targetNode.getParentNode() : root;

			if (moveType != this.consts.move.TYPE_PREV && moveType != this.consts.move.TYPE_NEXT) {
				moveType = this.consts.move.TYPE_INNER;
			}

			if (moveType == this.consts.move.TYPE_INNER) {
				if (targetNodeIsRoot) {
					//parentTId of root node is null
					node.parentTId = null;
				} else {
					if (!targetNode.isParent) {
						targetNode.isParent = true;
						targetNode.open = !!targetNode.open;
						this._setNodeLineIcos(targetNode);
					}
					node.parentTId = targetNode.tId;
				}
			}

			//move node Dom
			var targetObj, target_ulObj;
			if (targetNodeIsRoot) {
				targetObj = this.element;
				target_ulObj = targetObj;
			} else {
				if (!isSilent && moveType == this.consts.move.TYPE_INNER) {
					this._expandCollapseNode(targetNode, true, false);
				} else if (!isSilent) {
					this._expandCollapseNode(targetNode.getParentNode(), true, false);
				}
				targetObj = this.$(targetNode);
				target_ulObj = this.$(targetNode, this.consts.id.UL);
				if (!!targetObj.get(0) && !target_ulObj.get(0)) {
					var ulstr = [];
					this._makeUlHtml(targetNode, ulstr, '');
					targetObj.append(ulstr.join(''));
				}
				target_ulObj = this.$(targetNode, this.consts.id.UL);
			}
			var nodeDom = this.$(node);
			if (!nodeDom.get(0)) {
				nodeDom = this._appendNodes(node.level, [node], null, false, true).join('');
			} else if (!targetObj.get(0)) {
				nodeDom.remove();
			}
			if (target_ulObj.get(0) && moveType == this.consts.move.TYPE_INNER) {
				target_ulObj.append(nodeDom);
			} else if (targetObj.get(0) && moveType == this.consts.move.TYPE_PREV) {
				targetObj.before(nodeDom);
			} else if (targetObj.get(0) && moveType == this.consts.move.TYPE_NEXT) {
				targetObj.after(nodeDom);
			}

			//repair the data after move
			var i,
			    l,
			    tmpSrcIndex = -1,
			    tmpTargetIndex = 0,
			    oldNeighbor = null,
			    newNeighbor = null,
			    oldLevel = node.level;
			if (node.isFirstNode) {
				tmpSrcIndex = 0;
				if (oldParentNode[childKey].length > 1) {
					oldNeighbor = oldParentNode[childKey][1];
					oldNeighbor.isFirstNode = true;
				}
			} else if (node.isLastNode) {
				tmpSrcIndex = oldParentNode[childKey].length - 1;
				oldNeighbor = oldParentNode[childKey][tmpSrcIndex - 1];
				oldNeighbor.isLastNode = true;
			} else {
				for (i = 0, l = oldParentNode[childKey].length; i < l; i++) {
					if (oldParentNode[childKey][i].tId == node.tId) {
						tmpSrcIndex = i;
						break;
					}
				}
			}
			if (tmpSrcIndex >= 0) {
				oldParentNode[childKey].splice(tmpSrcIndex, 1);
			}
			if (moveType != this.consts.move.TYPE_INNER) {
				for (i = 0, l = targetParentNode[childKey].length; i < l; i++) {
					if (targetParentNode[childKey][i].tId == targetNode.tId) tmpTargetIndex = i;
				}
			}
			if (moveType == this.consts.move.TYPE_INNER) {
				if (!targetNode[childKey]) targetNode[childKey] = [];
				if (targetNode[childKey].length > 0) {
					newNeighbor = targetNode[childKey][targetNode[childKey].length - 1];
					newNeighbor.isLastNode = false;
				}
				targetNode[childKey].splice(targetNode[childKey].length, 0, node);
				node.isLastNode = true;
				node.isFirstNode = targetNode[childKey].length == 1;
			} else if (targetNode.isFirstNode && moveType == this.consts.move.TYPE_PREV) {
				targetParentNode[childKey].splice(tmpTargetIndex, 0, node);
				newNeighbor = targetNode;
				newNeighbor.isFirstNode = false;
				node.parentTId = targetNode.parentTId;
				node.isFirstNode = true;
				node.isLastNode = false;
			} else if (targetNode.isLastNode && moveType == this.consts.move.TYPE_NEXT) {
				targetParentNode[childKey].splice(tmpTargetIndex + 1, 0, node);
				newNeighbor = targetNode;
				newNeighbor.isLastNode = false;
				node.parentTId = targetNode.parentTId;
				node.isFirstNode = false;
				node.isLastNode = true;
			} else {
				if (moveType == this.consts.move.TYPE_PREV) {
					targetParentNode[childKey].splice(tmpTargetIndex, 0, node);
				} else {
					targetParentNode[childKey].splice(tmpTargetIndex + 1, 0, node);
				}
				node.parentTId = targetNode.parentTId;
				node.isFirstNode = false;
				node.isLastNode = false;
			}
			this._fixPIdKeyValue(node);
			this._setSonNodeLevel(node.getParentNode(), node);

			//repair node what been moved
			this._setNodeLineIcos(node);
			this._repairNodeLevelClass(node, oldLevel);

			//repair node's old parentNode dom
			if (!this.p.data.keep.parent && oldParentNode[childKey].length < 1) {
				//old parentNode has no child nodes
				oldParentNode.isParent = false;
				oldParentNode.open = false;
				var tmp_ulObj = this.$(oldParentNode, this.consts.id.UL),
				    tmp_switchObj = this.$(oldParentNode, this.consts.id.SWITCH),
				    tmp_icoObj = this.$(oldParentNode, this.consts.id.ICON);
				this._replaceSwitchClass(oldParentNode, tmp_switchObj, this.consts.folder.DOCU);
				this._replaceIcoClass(oldParentNode, tmp_icoObj, this.consts.folder.DOCU);
				tmp_ulObj.css("display", "none");
			} else if (oldNeighbor) {
				//old neigbor node
				this._setNodeLineIcos(oldNeighbor);
			}

			//new neigbor node
			if (newNeighbor) {
				this._setNodeLineIcos(newNeighbor);
			}

			//repair checkbox / radio
			if (!!this.p.check && this.p.check.enable && this._repairChkClass) {
				this._repairChkClass(oldParentNode);
				this._repairParentChkClassWithSelf(oldParentNode);
				if (oldParentNode != node.parent) this._repairParentChkClassWithSelf(node);
			}

			//expand parents after move
			if (!isSilent) {
				this._expandCollapseParentNode(node.getParentNode(), true, animateFlag);
			}
		},

		_setSonNodeLevel: function (parentNode, node) {
			if (!node) return;
			var childKey = this.p.data.key.children;
			node.level = parentNode ? parentNode.level + 1 : 0;
			if (!node[childKey]) return;
			for (var i = 0, l = node[childKey].length; i < l; i++) {
				if (node[childKey][i]) this._setSonNodeLevel(node, node[childKey][i]);
			}
		},

		_repairNodeLevelClass: function (node, oldLevel) {
			if (oldLevel === node.level) return;
			var liObj = this.$(node),
			    aObj = this.$(node, this.consts.id.A),
			    ulObj = this.$(node, this.consts.id.UL),
			    oldClass = this.consts.className.LEVEL + oldLevel,
			    newClass = this.consts.className.LEVEL + node.level;
			liObj.removeClass(oldClass);
			liObj.addClass(newClass);
			aObj.removeClass(oldClass);
			aObj.addClass(newClass);
			ulObj.removeClass(oldClass);
			ulObj.addClass(newClass);
		},
		//-----------------------------------复写方法------------------------------------------------
		/**
   * 复写 _selectNode
   * @param node
   * @param addFlag
   * @returns {boolean}
   * @private
   */
		_selectNode: function (node, addFlag) {
			var root = this._getRoot();
			if (this._isSelectedNode(node) && root.curEditNode == node && node.editNameFlag) {
				return false;
			}
			this._super(node, addFlag);
			this._addHoverDom(node);
			return true;
		},

		/**
   * 复写 _uCanDo
   * @param e
   * @returns {*}
   * @private
   */
		_uCanDo: function (e) {
			var root = this._getRoot();
			if (e && ($.tree.eqs(e.type, "mouseover") || $.tree.eqs(e.type, "mouseout") || $.tree.eqs(e.type, "mousedown") || $.tree.eqs(e.type, "mouseup"))) {
				return true;
			}
			if (root.curEditNode) {
				this.editNodeBlur = false;
				root.curEditInput.focus();
			}
			return !root.curEditNode && this._super(e);
		},

		/**
   * 复写 _removeNode  check里也复写了一个   会不会和check里的重复呢？
   * @param node
   * @private
   */
		_removeNode: function (node) {
			var root = this._getRoot();
			if (root.curEditNode === node) root.curEditNode = null;
			this._super(node);
		},

		_makeNodeUrl: function (node) {
			return this.p.edit.enable ? null : this._super(node);
		},

		_createNodes: function (level, nodes, parentNode) {
			this._super(level, nodes, parentNode);
			if (!nodes) return;
			if (this._repairParentChkClassWithSelf) {
				this._repairParentChkClassWithSelf(parentNode);
			}
		},

		_cancelPreSelectedNode: function (node) {
			var list = this._getRoot().curSelectedList;
			for (var i = 0, j = list.length; i < j; i++) {
				if (!node || node === list[i]) {
					this._removeTreeDom(list[i]);
					if (node) break;
				}
			}
			this._super(node);
		}

	});
})();

/**
 * @class fish.desktop.widget.Searchbar
 * 搜索栏组件
 * @extends fish.desktop.widget
 * <pre>
 *   $(element).searchbar(option);
 * </pre>
 */
!(function () {
    var template = '\n        {{#if filterFields}}\n            <span class="input-group-btn">\n                <button type="button" class="btn btn-default" data-toggle="dropdown">\n                    <span class="glyphicon glyphicon-search"></span>\n                    <span class="js-filter">{{filterFields.[0].[label]}}</span>\n                    <span class="caret"></span>\n                </button>\n                <ul class="dropdown-menu js-filter-menu" role="menu">\n                    {{#each filterFields}}\n                        <li><a href="javascript:;">{{label}}</a></li>\n                    {{/each}}\n                </ul>\n            </span>\n        {{/if}}\n        <input type="text" class="form-control">';

    $.widget("ui.searchbar", {
        options: {
            /**
             * @cfg {Object} [target=null] 目标对象，一般是表格，结合表格实现当前页数据搜索
             */
            target: null,
            /**
             * @cfg {Array} [filterFields=[]] 过滤属性项，如果 `target` 设置了，则为表格可搜索列
             *
             * <p> 如果用户自定义，则参考如下<p>
             *     <pre>
             *         filterFields: [
             *             {label: 'Name', value: 'name'},
             *             {label: 'Password', value: 'password'}
             *         ]
             *     </pre>
             */
            filterFields: [],

            /**
             * @cfg {Function} [query=$.noop] 查询函数，用于用户自定义时，需要根据输入内容查询处理函数
             *
             * <p>第一个参数 `payload` 是传递出来的参数，数据结构 `payload: {"qs":"a","filter":{"label":"Password","value":"password"}}`</p>
             * <p>第二个参数 `callback` 是回调处理函数，参数是数组用于下拉展示用，返回的对象须包含 `label` 属性</p>
             * <p>参考如下</p>
             * <pre>
             *     query: function(payload, callback) {
             *        console.log('payload:', JSON.stringify(payload));
             *        callback([
             *            {label: 'Han Mei Mei'},
             *            {label: 'Li Lei'}
             *        ]);
             *     }
             * </pre>
             */
            query: $.noop

            /**
             * @cfg {Function} [select=null] 定义搜索选中事件函数，事件名称searchbar:select
             */
        },

        _create: function () {
            this.target = this.options.target;

            if (this.target) {
                this._parseTargetGrid(this.target);
            } else {
                this.filterFields = this.options.filterFields;
            }

            this.element.append(fish.compile(template)({ filterFields: this.filterFields }));

            if (!_.isEmpty(this.filterFields)) {
                this.$filter = this.element.find('.js-filter');
                this.$filterList = this.element.find('.js-filter-menu');
                this.filterField = this.filterFields[0];

                this.$input = this.element.find('input').autocomplete({
                    select: _.bind(this._onSelect, this),
                    source: _.bind(this._sourceHandler, this)
                });

                this._delegateEvents();
            }
        },

        _destroy: function () {
            this.$input.autocomplete('destroy');
            this.element.children().remove();
        },

        _delegateEvents: function () {
            this._on(this.$filterList, {
                'click li': '_onFilterClick'
            });
        },

        _parseTargetGrid: function (target) {
            var colModel = target.grid('option', 'colModel');
            this.filterFields = _.chain(colModel).filter(function (col) {
                return !col.hidden && col.search;
            }).map(function (col) {
                return { label: col.label, value: col.name };
            }).value();
        },

        _sourceHandler: function (request, response) {
            if (this.target) {
                response($.ui.autocomplete.filter(this._getSource(), request.term));
            } else {
                this.options.query({
                    qs: request.term,
                    filter: _.clone(this.filterField)
                }, function (data) {
                    response(data);
                });
            }
        },

        _onFilterClick: function (e) {
            var index = this.$filterList.find('li').index(e.currentTarget);
            this.filterField = this.filterFields[index];
            this.$filter.text(this.filterField.label);

            this.$input.val('');
        },

        _onSelect: function (e, data) {
            this._trigger('select', e, data.item);
            this.target && this.target.grid('setSelection', data.item.rowId);
        },

        _getSource: function () {
            var $grid = this.target;
            var rowData = $grid.grid('getRowData');
            var field = this.filterField.value;

            return _.map(rowData, function (item) {
                return { label: item[field], rowId: $grid.grid('getRowid', item) };
            });
        }
    });
})();


/**
 * 滚动监听
 * @class fish.desktop.widget.ScrollSpy
 * <pre>
 //初始化控件
 $(element).scrollspy(option);
 //调用控件上的方法
 $(element).scrollspy(method);
 * </pre>
 */
!function() {

    'use strict';
    /**
     * ScrollSpy Widget
     * @class fish.desktop.widget.ScrollSpy
     * <pre>
     *   $(element).scrollspy(option);
     *   或者
     *   $('body').scrollspy({target: element})
     * </pre>
     */

    $.widget("ui.scrollspy", {
        options: {
            /**
             * Pixels to offset from top when calculating position of scroll.
             * @cfg {Number} offset=10
             */
            offset: 10
        },
        _create: function() {
            this.$body = $('body');
            var element = this.element;
            this.$scrollElement = $(element).is('body') ? $(window) : $(element);
            this.selector = (this.options.target || '') + ' .nav li > a';
            this.offsets = [];
            this.targets = [];
            this.activeTarget = null;
            this.scrollHeight = 0;
            this.$scrollElement.on('scroll', $.proxy(this._process, this));
            this.refresh();
            this._process();
        },
        _getScrollHeight: function() {
            return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight);
        },
        /**
         * 刷新滚动监听控件,一般用于手动更改dom结构后调用
         * @method refresh
         */
        refresh: function() {
            var offsetMethod = 'offset'
            var offsetBase = 0

            if (!$.isWindow(this.$scrollElement[0])) {
                offsetMethod = 'position'
                offsetBase = this.$scrollElement.scrollTop()
            }

            this.offsets = []
            this.targets = []
            this.scrollHeight = this._getScrollHeight()

            var self = this

            this.$body.find(this.selector)
                .map(function() {
                    var $el = $(this)
                    var href = $el.data('target') || $el.attr('href')
                    var $href = /^#./.test(href) && $(href)

                    return ($href && $href.length && $href.is(':visible') && [
                            [$href[offsetMethod]().top + offsetBase, href]
                        ]) || null
                })
                .sort(function(a, b) {
                    return a[0] - b[0]
                })
                .each(function() {
                    self.offsets.push(this[0])
                    self.targets.push(this[1])
                })
        },
        _process: function() {
            var scrollTop = this.$scrollElement.scrollTop() + this.options.offset
            var scrollHeight = this._getScrollHeight()
            var maxScroll = this.options.offset + scrollHeight - this.$scrollElement.height()
            var offsets = this.offsets
            var targets = this.targets
            var activeTarget = this.activeTarget
            var i

            if (this.scrollHeight != scrollHeight) {
                this.refresh()
            }

            if (scrollTop >= maxScroll) {
                return activeTarget != (i = targets[targets.length - 1]) && this._activate(i)
            }

            if (activeTarget && scrollTop <= offsets[0]) {
                return activeTarget != (i = targets[0]) && this._activate(i)
            }

            for (i = offsets.length; i--;) {
                activeTarget != targets[i] && scrollTop >= offsets[i] && (!offsets[i + 1] || scrollTop <= offsets[i + 1]) && this._activate(targets[i])
            }
        },
        _activate: function(target) {
            this.activeTarget = target

            $(this.selector)
                .parentsUntil(this.options.target, '.active')
                .removeClass('active')

            var selector = this.selector +
                '[data-target="' + target + '"],' + this.selector + '[href="' + target + '"]'

            var active = $(selector)
                .parents('li')
                .addClass('active')

            if (active.parent('.dropdown-menu').length) {
                active = active.closest('li.dropdown')
                    .addClass('active')
            }

            this._trigger('activate', null, {
                item: active
            });
        }
        /**
         * @event activate
         * 滚动到目标元素触发的事件,事件回调有参数item可以取到目标元素
         */
    })
}();